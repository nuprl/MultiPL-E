language: scala
name: HumanEval_99_closest_integer
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val closestValue = intValue - (intValue % 10)\n     \
    \   closestValue\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"14.5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.closestInteger(tmpfe69tjw0.scala:18)\n\
    \tat Problem$.main(tmpfe69tjw0.scala:24)\n\tat Problem.main(tmpfe69tjw0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = max - min\n        if (diff\
    \ == 0) return min\n        if (diff < 0) return min + diff\n        if (diff\
    \ > 0) return max - diff\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp2wvx95bl.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp2wvx95bl.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp2wvx95bl.scala:24:8 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (diff > \e[31m0\e[0m) \e[33mreturn\e\
    [0m max - diff\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805757
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val difference = largest - smallest\n\
    \        val rounded = smallest + difference\n        rounded.toLong\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcyad7wc_.scala:19:28 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcyad7wc_.scala:20:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mlargest\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = max - min\n\
    \        val closest = (diff + min) / 2\n        math.round(closest)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8bbt9uxs.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toDouble))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Double])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8bbt9uxs.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toDouble))\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Double])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // split into two parts separated by \".\"\n        val\
    \ part1 = parts(0)\n        val part2 = parts(1)\n        val part1Int = part1.toInt\n\
    \        val part2Int = part2.toInt\n        val part1Abs = Math.abs(part1Int)\n\
    \        val part2Abs = Math.abs(part2Int)\n        val part1Diff = part1Abs -\
    \ part2Abs\n        if (part1Diff < 0)\n            part1Int + part2Abs\n    \
    \    else\n            part1Int - part2Abs\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmpfripdtsr.scala:20)\n\tat Problem$.main(tmpfripdtsr.scala:32)\n\
    \tat Problem.main(tmpfripdtsr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val difference = numbers.zip(numbers).map\
    \ { case (first, second) => math.abs(first - second) }\n        val closestDifference\
    \ = difference.min\n        val closestNumber = difference.find(_ == closestDifference).get\n\
    \        closestNumber\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsyxrc8s9.scala:25)\n\tat Problem.main(tmpsyxrc8s9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = max - min\n        val closest\
    \ = (diff + min) / 2\n        val closestInt = math.round(closest)\n        closestInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3ds53oev.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3ds53oev.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1659805559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val closest = (parts diff parts.last).min\n\
    \        val difference = parts.last - closest\n        val rounded = closest\
    \ + difference\n        rounded\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmb6_wwno.scala:19:40\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mclosest\e\
    [0m = (parts diff parts.last).min\n\e[31m\e[31m   |\e[0m                     \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \   Found:    Int\n\e[31m   |\e[0m                                  Required:\
    \ scala.collection.Seq[Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toDouble\n\
    \        val nums = value.split(\"\\\\.\").map(_.toDouble)\n        val diffs\
    \ = nums.zip(nums.tail).map { case (first, second) => (first - second) }\n   \
    \     val closestDiff = diffs.min\n        val closestDiffIndex = diffs.indexOf(closestDiff)\n\
    \        val closestDiffDiffToZero = diffs(closestDiffIndex) - diffs(closestDiffIndex\
    \ - 1)\n        val closestDiffToZeroIndex = diffs.indexOf(closestDiffToZero)\n\
    \        val closestDiffToZeroToZero = diffs(closestDiffToZeroIndex) - diffs(closestDiffToZeroIndex\
    \ - 1)\n        val closestDiffToZeroToZeroIndex = diffs.indexOf(closestDiffToZeroToZero)\n\
    \        val closestDiffToZeroToZeroToZero = diffs(closestDiffToZeroToZeroIndex)\
    \ - diffs(closestDiffToZeroToZeroIndex - 1)\n        val closestDiffToZeroToZeroToZeroIndex\
    \ = diffs.indexOf(closestDiffToZeroToZeroToZero)\n        val closestDiffToZeroToZeroToZeroToZero\
    \ = diffs(closestDiffToZeroToZeroToZeroIndex) - diffs(closestDiffToZeroToZeroToZeroIndex\
    \ - 1)\n        val closestDiffToZeroToZeroToZeroToZeroIndex = diffs.indexOf(closestDiffToZeroToZeroToZeroToZero)\n\
    \        val closestDiffToZeroToZeroToZeroToZeroToZero = diffs(closestDiffToZeroToZeroToZeroToZeroIndex)\
    \ - diffs(closestDiffToZeroToZeroToZeroToZeroIndex - 1)\n        val closestDiffToZeroToZeroToZeroToZeroToZeroIndex\
    \ = diffs.indexOf(closestDiffToZeroToZeroToZeroToZeroToZero)\n        val closestDiffToZeroToZeroToZeroToZeroToZeroTo\
    \ = diffs(closestDiffToZeroToZeroToZeroToZeroToZeroIndex) - diffs(closestDiffToZeroToZeroToZeroToZeroToZeroIndex\
    \ - 1)\n        val closestDiffToZeroToZeroToZeroToZeroToZeroToIndex = diffs.indexOf(closestDiffToZeroToZeroToZeroToZeroToZeroTo)\n\
    \        val closestDiffToZeroToZeroToZeroToZeroToZeroTo = diffs(closestDiffToZeroToZeroToZeroToZeroToZeroToIndex)\
    \ - diffs(closestDiffToZeroToZeroToZeroToZeroToZeroIndex - 1)\n        val closestDiffToZeroToZeroToZeroToZeroToZeroToIndex\
    \ = diffs.indexOf(closestDiffToZeroToZeroToZeroToZeroToZero\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnzlawagg.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnzlawagg.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mclosestDiffToZeroToZeroToZeroToZeroToZeroTo\e[0m = diffs(closestDiffToZeroToZeroToZeroToZeroToZeroToIndex)\
    \ - diffs(closestDiffToZeroToZeroToZeroToZeroToZeroIndex - \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestDiffToZeroToZeroToZeroToZeroToZeroTo is already defined\
    \ as \e[33mvalue\e[0m \e[35mclosestDiffToZeroToZeroToZeroToZeroToZeroTo\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnzlawagg.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mclosestDiffToZeroToZeroToZeroToZeroToZeroToIndex\e\
    [0m = diffs.indexOf(closestDiffToZeroToZeroToZeroToZeroToZero\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestDiffToZeroToZeroToZeroToZeroToZeroToIndex is already\
    \ defined as \e[33mvalue\e[0m \e[35mclosestDiffToZeroToZeroToZeroToZeroToZeroToIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpnzlawagg.scala:24:51 ------------------------\e[0m\e[0m\n\
    \e[31m24 |\e[0m        \e[33mval\e[0m \e[36mclosestDiffToZeroIndex\e[0m = diffs.indexOf(closestDiffToZero)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Not found: closestDiffToZero\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explan"
  stdout: ''
  timestamp: 1659805758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val nums = List(\"10\", \"15.3\", \"14.5\", \"14\", \"15\", \"16\", \"\
    17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\",\
    \ \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\"\
    , \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\"\
    , \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\"\
    , \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\"\
    , \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\"\
    , \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\"\
    , \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\"\
    , \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\"\
    , \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\"\
    , \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\"\
    , \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\"\
    , \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\"\
    , \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\"\
    , \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\"\
    , \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\"\
    , \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\"\
    , \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\"\
    , \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\"\
    , \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\"\
    , \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\"\
    , \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\"\
    , \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\"\
    , \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\"\
    , \"241\", \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\"\
    , \"250\", \"251\", \"252\", \"253\", \"254\", \"255\", \"256\", \"257\", \"258\"\
    , \"259\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3jar04eq.scala:19:1675 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = List(\e[31m\"\
    10\"\e[0m, \e[31m\"15.3\"\e[0m, \e[31m\"14.5\"\e[0m, \e[31m\"14\"\e[0m, \e[31m\"\
    15\"\e[0m, \e[31m\"16\"\e[0m, \e[31m\"17\"\e[0m, \e[31m\"18\"\e[0m, \e[31m\"19\"\
    \e[0m, \e[31m\"20\"\e[0m, \e[31m\"21\"\e[0m, \e[31m\"22\"\e[0m, \e[31m\"23\"\e\
    [0m, \e[31m\"24\"\e[0m, \e[31m\"25\"\e[0m, \e[31m\"26\"\e[0m, \e[31m\"27\"\e[0m,\
    \ \e[31m\"28\"\e[0m, \e[31m\"29\"\e[0m, \e[31m\"30\"\e[0m, \e[31m\"31\"\e[0m,\
    \ \e[31m\"32\"\e[0m, \e[31m\"33\"\e[0m, \e[31m\"34\"\e[0m, \e[31m\"35\"\e[0m,\
    \ \e[31m\"36\"\e[0m, \e[31m\"37\"\e[0m, \e[31m\"38\"\e[0m, \e[31m\"39\"\e[0m,\
    \ \e[31m\"40\"\e[0m, \e[31m\"41\"\e[0m, \e[31m\"42\"\e[0m, \e[31m\"43\"\e[0m,\
    \ \e[31m\"44\"\e[0m, \e[31m\"45\"\e[0m, \e[31m\"46\"\e[0m, \e[31m\"47\"\e[0m,\
    \ \e[31m\"48\"\e[0m, \e[31m\"49\"\e[0m, \e[31m\"50\"\e[0m, \e[31m\"51\"\e[0m,\
    \ \e[31m\"52\"\e[0m, \e[31m\"53\"\e[0m, \e[31m\"54\"\e[0m, \e[31m\"55\"\e[0m,\
    \ \e[31m\"56\"\e[0m, \e[31m\"57\"\e[0m, \e[31m\"58\"\e[0m, \e[31m\"59\"\e[0m,\
    \ \e[31m\"60\"\e[0m, \e[31m\"61\"\e[0m, \e[31m\"62\"\e[0m, \e[31m\"63\"\e[0m,\
    \ \e[31m\"64\"\e[0m, \e[31m\"65\"\e[0m, \e[31m\"66\"\e[0m, \e[31m\"67\"\e[0m,\
    \ \e[31m\"68\"\e[0m, \e[31m\"69\"\e[0m, \e[31m\"70\"\e[0m, \e[31m\"71\"\e[0m,\
    \ \e[31m\"72\"\e[0m, \e[31m\"73\"\e[0m, \e[31m\"74\"\e[0m, \e[31m\"75\"\e[0m,\
    \ \e[31m\"76\"\e[0m, \e[31m\"77\"\e[0m, \e[31m\"78\"\e[0m, \e[31m\"79\"\e[0m,\
    \ \e[31m\"80\"\e[0m, \e[31m\"81\"\e[0m, \e[31m\"82\"\e[0m, \e[31m\"83\"\e[0m,\
    \ \e[31m\"84\"\e[0m, \e[31m\"85\"\e[0m, \e[31m\"86\"\e[0m, \e[31m\"87\"\e[0m,\
    \ \e[31m\"88\"\e[0m, \e[31m\"89\"\e[0m, \e[31m\"90\"\e[0m, \e[31m\"91\"\e[0m,\
    \ \e[31m\"92\"\e[0m, \e[31m\"93\"\e[0m, \e[31m\"94\"\e[0m, \e[31m\"95\"\e[0m,\
    \ \e[31m\"96\"\e[0m, \e[31m\"97\"\e[0m, \e[31m\"98\"\e[0m, \e[31m\"99\"\e[0m,\
    \ \e[31m\"100\"\e[0m, \e[31m\"101\"\e[0m, \e[31m\"102\"\e[0m, \e[31m\"103\"\e\
    [0m, \e[31m\"104\"\e[0m, \e[31m\"105\"\e[0m, \e[31m\"106\"\e[0m, \e[31m\"107\"\
    \e[0m, \e[31m\"108\"\e[0m, \e[31m\"109\"\e[0m, \e[31m\"110\"\e[0m, \e[31m\"111\"\
    \e[0m, \e[31m\"112\"\e[0m, \e[31m\"113\"\e[0m, \e[31m\"114\"\e[0m, \e[31m\"115\"\
    \e[0m, \e[31m\"116\"\e[0m, \e[31m\"117\"\e[0m, \e[31m\"118\"\e[0m, \e[31m\"119\"\
    \e[0m, \e[31m\"120\"\e[0m, \e[31m\"121\"\e[0m, \e[31m\"122\"\e[0m, \e[31m\"123\"\
    \e[0m, \e[31m\"124\"\e[0m, \e[31m\"125\"\e[0m, \e[31m\"126\"\e[0m, \e[31m\"127\"\
    \e[0m, \e[31m\"128\"\e[0m, \e[31m\"129\"\e[0m, \e[31m\"130\"\e[0m, \e[31m\"131\"\
    \e[0m, \e[31m\"132\"\e[0m, \e[31m\"133\"\e[0m, \e[31m\"134\"\e"
  stdout: ''
  timestamp: 1659805758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val nums = List(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"10\")\n        val numsLen = nums.size\n        val numsSum = nums.sum\n\
    \        val numsSumLen = numsSum.size\n        val numsSumLen2 = numsSumLen *\
    \ numsSumLen\n        val numsSumLen3 = numsSumLen2 * numsSumLen\n        val\
    \ numsSumLen4 = numsSumLen3 * numsSumLen\n        val numsSumLen5 = numsSumLen4\
    \ * numsSumLen\n        val numsSumLen6 = numsSumLen5 * numsSumLen\n        val\
    \ numsSumLen7 = numsSumLen6 * numsSumLen\n        val numsSumLen8 = numsSumLen7\
    \ * numsSumLen\n        val numsSumLen9 = numsSumLen8 * numsSumLen\n        val\
    \ numsSumLen10 = numsSumLen9 * numsSumLen\n        val numsSumLen11 = numsSumLen10\
    \ * numsSumLen\n        val numsSumLen12 = numsSumLen11 * numsSumLen\n       \
    \ val numsSumLen13 = numsSumLen12 * numsSumLen\n        val numsSumLen14 = numsSumLen13\
    \ * numsSumLen\n        val numsSumLen15 = numsSumLen14 * numsSumLen\n       \
    \ val numsSumLen16 = numsSumLen15 * numsSumLen\n        val numsSumLen17 = numsSumLen16\
    \ * numsSumLen\n        val numsSumLen18 = numsSumLen17 * numsSumLen\n       \
    \ val numsSumLen19 = numsSumLen18 * numsSumLen\n        val numsSumLen20 = numsSumLen19\
    \ * numsSumLen\n        val numsSumLen21 = numsSumLen20 * numsSumLen\n       \
    \ val numsSumLen22 = numsSumLen21 * numsSumLen\n        val numsSumLen23 = numsSumLen22\
    \ * numsSumLen\n        val numsSumLen24 = numsSumLen23 * numsSumLen\n       \
    \ val numsSumLen25 = numsSumLen24 * numsSumLen\n        val numsSumLen26 = numsSumLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphvflg9q0.scala:21:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsSum\e[0m = nums.sum\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \             No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                where:    B is a type variable with constraint >: String\n\e\
    [31m   |\e[0m                .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphvflg9q0.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805758
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val minDiff = math.abs(nums.min\
    \ - nums.max)\n        val closestNum = nums.min + minDiff\n        closestNum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzc6glmfh.scala:25)\n\tat Problem.main(tmpzc6glmfh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intValueAsLong = intValue.asInstanceOf[Long]\n\
    \        val intValueAsDouble = intValue.asInstanceOf[Double]\n        val intValueAsFloat\
    \ = intValue.asInstanceOf[Float]\n        val intValueAsInt = intValue.asInstanceOf[Int]\n\
    \        val intValueAsShort = intValue.asInstanceOf[Short]\n        val intValueAsByte\
    \ = intValue.asInstanceOf[Byte]\n        val intValueAsChar = intValue.asInstanceOf[Char]\n\
    \        val intValueAsBoolean = intValue.asInstanceOf[Boolean]\n        val intValueAsLongLong\
    \ = intValue.asInstanceOf[LongLong]\n        val intValueAsDoubleDouble = intValue.asInstanceOf[DoubleDouble]\n\
    \        val intValueAsFloatFloat = intValue.asInstanceOf[FloatFloat]\n      \
    \  val intValueAsIntInt = intValue.asInstanceOf[IntInt]\n        val intValueAsShortShort\
    \ = intValue.asInstanceOf[ShortShort]\n        val intValueAsByteByte = intValue.asInstanceOf[ByteByte]\n\
    \        val intValueAsCharChar = intValue.asInstanceOf[CharChar]\n        val\
    \ intValueAsBooleanBoolean = intValue.asInstanceOf[BooleanBoolean]\n        val\
    \ intValueAsLongLongLong = intValue.asInstanceOf[LongLongLong]\n        val intValueAsDoubleDoubleDouble\
    \ = intValue.asInstanceOf[DoubleDoubleDouble]\n        val intValueAsFloatFloatFloat\
    \ = intValue.asInstanceOf[FloatFloatFloat]\n        val intValueAsIntIntInt =\
    \ intValue.asInstanceOf[IntIntInt]\n        val intValueAsShortShortShort = intValue.asInstanceOf[ShortShortShort]\n\
    \        val intValueAsByteByteByte = intValue.asInstanceOf[ByteByteByte]\n  \
    \      val intValueAsCharCharChar = intValue.asInstanceOf[CharCharChar]\n    \
    \    val intValueAsBooleanBooleanBoolean = intValue.asInstanceOf[BooleanBooleanBoolean]\n\
    \        val intValueAsLongLongLongLong = intValue.asInstanceOf[LongLongLongLong]\n\
    \        val intValueAsDoubleDoubleDoubleDouble = intValue.asInstanceOf[DoubleDoubleDoubleDouble]\n\
    \        val intValueAsFloatFloatFloatFloat = intValue.asInstanceOf[FloatFloatFloatFloat]\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp6e2njdxe.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6e2njdxe.scala:27:55 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mintValueAsLongLong\e[0m\
    \ = intValue.asInstanceOf[\e[35mLongLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                                               ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                Not found: type LongLong\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6e2njdxe.scala:28:59\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mintValueAsDoubleDouble\e[0m = intValue.asInstanceOf[\e[35mDoubleDouble\e[0m]\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \     Not found: type DoubleDouble\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6e2njdxe.scala:29:57 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mval\e[0m \e[36mintValueAsFloatFloat\e[0m = intValue.asInstanceOf[\e\
    [35mFloatFloat\e[0m]\n\e[31m\e[31m   |\e[0m                                  \
    \                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                         Not found: type FloatFloat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6e2njdxe.scala:30:53 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mintValueAsIntInt\e[0m =\
    \ intValue.asInstanceOf[\e[35mIntInt\e[0m]\n\e[31m\e[31m   |\e[0m            \
    \                                         ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                "
  stdout: ''
  timestamp: 1659805546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").toList\n        val ints = numbers.map(_.toInt)\n \
    \       val min = ints.min\n        val max = ints.max\n        val diff = (max\
    \ - min).abs\n        val closest = (min + max) / 2\n        if (diff < closest)\
    \ {\n            closest\n        } else {\n            diff\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppx6o4uh9.scala:32)\n\tat Problem.main(tmppx6o4uh9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toLong)\n        val min = math.min(nums)\n   \
    \     val max = math.max(nums)\n        val diff = max - min\n        if (diff\
    \ < 0)\n            min - diff\n        else\n            max + diff\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp6c2r96hq.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Long]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp6c2r96hq.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1659805756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val mid = math.round(min + (max - min)\
    \ / 2)\n        val diff = math.abs(mid - min)\n        if (diff < math.abs(mid\
    \ - max)) {\n            mid\n        } else {\n            math.round(mid - diff)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8jrhu0ap.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8jrhu0ap.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1659805756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = (max - min).toInt\n\
    \        val closest = (min + diff) / 2\n        val closestLong = closest.toLong\n\
    \        closestLong\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpvm_voptw.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toDouble))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Double])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpvm_voptw.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toDouble))\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Double])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toLong))\n\
    \        val max = math.max(nums.map(_.toLong))\n        val diff = max - min\n\
    \        val closest = (min + diff) / 2\n        val closestLong = closest.toLong\n\
    \        closestLong\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpiv4rnx20.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toLong))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Long])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpiv4rnx20.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toLong))\n\e[31m\e[31m   |\e[0m     \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Long])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val intArray = intValue.toString.split(\"\\\\.\").map(_.toInt)\n\
    \        val intArrayLength = intArray.length\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArray\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8mr3wl6u.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8mr3wl6u.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8mr3wl6u.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8mr3wl6u.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8mr3wl6u.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659805549
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val difference = abs(intValue - intValue)\n        val\
    \ closestInteger = intValue + difference\n        closestInteger\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"14.5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.closestInteger(tmpt9_iev2s.scala:18)\n\
    \tat Problem$.main(tmpt9_iev2s.scala:25)\n\tat Problem.main(tmpt9_iev2s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArraySum\
    \ = intArray.sum\n        val intArrayDiff = intArraySum - intArray(0)\n     \
    \   val intArrayDiffSquared = intArrayDiff * intArrayDiff\n        val intArrayDiffSquaredLength\
    \ = intArrayDiffSquared.length\n        val intArrayDiffSquaredSum = intArrayDiffSquared.sum\n\
    \        val intArrayDiffSquaredDiff = intArrayDiffSquaredSum - intArrayDiffSquared(0)\n\
    \        val intArrayDiffSquaredDiffLength = intArrayDiffSquaredDiff.length\n\
    \        val intArrayDiffSquaredDiffSum = intArrayDiffSquaredDiff.sum\n      \
    \  val intArrayDiffSquaredDiffDiff = intArrayDiffSquaredDiffSum - intArrayDiffSquaredDiff(0)\n\
    \        val intArrayDiffSquaredDiffDiffLength = intArrayDiffSquaredDiffDiff.length\n\
    \        val intArrayDiffSquaredDiffDiffSum = intArrayDiffSquaredDiffDiff.sum\n\
    \        val intArrayDiffSquaredDiffDiffDiff = intArrayDiffSquaredDiffDiffSum\
    \ - intArrayDiffSquaredDiffDiff(0)\n        val intArrayDiffSquaredDiffDiffDiffLength\
    \ = intArrayDiffSquaredDiffDiffDiff.length\n        val intArrayDiffSquaredDiffDiffDiffSum\
    \ = intArrayDiffSquaredDiffDiffDiff.sum\n        val intArrayDiffSquaredDiffDiffDiffDiff\
    \ = intArrayDiffSquaredDiffDiffDiffSum - intArrayDiffSquaredDiffDiffDiff(0)\n\
    \        val intArrayDiffSquaredDiffDiffDiffDiffLength = intArrayDiffSquaredDiffDiffDiffDiff.length\n\
    \        val intArrayDiffSquaredDiffDiffDiffDiffSum = intArrayDiffSquaredDiffDiffDiffDiff.sum\n\
    \        val intArrayDiffSquaredDiffDiffDiffDiffDiff = intArrayDiffSquaredDiffDiffDiffDiffSum\
    \ - intArrayDiffSquaredDiffDiffDiffDiff(0)\n        val intArrayDiffSquaredDiffDiffDiffDiffDiffLength\
    \ = intArrayDiffSquaredDiffDiffDiffDiffDiff.length\n        val intArrayDiffSquaredDiffDiffDiffDiffDiffSum\
    \ = intArrayDiffSquaredDiffDiffDiffDiffDiff.sum\n        val intArrayDiffSquaredDiffDiffDiffDiffDiffDiff\
    \ = intArrayDiffSquaredDiffDiffDiffDiffDiffSum - intArrayDiffSquaredDiffDiffDiffDiffDiff(0)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoej0mugl.scala:24:60 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayDiffSquaredLength\e\
    [0m = intArrayDiffSquared.length\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           value length is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpoej0mugl.scala:25:57 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mintArrayDiffSquaredSum\e\
    [0m = intArrayDiffSquared.sum\n\e[31m\e[31m   |\e[0m                         \
    \            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                  value sum is not a member of Int\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpoej0mugl.scala:43:5 ---------------------\e[0m\e[0m\n\
    \e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val diff = largest - smallest\n\
    \        val closest = (largest + smallest) / 2\n        if (diff < 0)\n     \
    \       closest - diff\n        else\n            closest + diff\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmps5o5fs79.scala:19:28 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmps5o5fs79.scala:20:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mlargest\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010160
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val diff = largest - smallest\n\
    \        if (diff < 0)\n            smallest - diff\n        else\n          \
    \  largest + diff\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpfnnbo1tn.scala:19:28 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpfnnbo1tn.scala:20:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mlargest\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = nums.min\n        val\
    \ max = nums.max\n        val diff = (max - min).abs\n        val closest = (min\
    \ + max) / 2\n        if (diff < closest) {\n            closest\n        } else\
    \ {\n            diff\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6p1w5s7j.scala:31)\n\tat Problem.main(tmp6p1w5s7j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // Split value into integer and fraction\n        val\
    \ fraction = parts(1).toLong // Get fractional part\n        val integer = parts(0).toLong\
    \ // Get integer part\n        val difference = fraction - integer // Get difference\
    \ between fraction and integer\n        val closestInteger = math.abs(difference)\
    \ // Get closest integer\n        closestInteger // Return closest integer\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmpmpa_296_.scala:19)\n\tat Problem$.main(tmpmpa_296_.scala:26)\n\
    \tat Problem.main(tmpmpa_296_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = (max - min).abs\n\
    \        val closest = (diff == 0) ? min : min + (diff / 2)\n        val closestInteger\
    \ = math.round(closest)\n        closestInteger\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp85jwr3yd.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toDouble))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Double])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp85jwr3yd.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toDouble))\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Double])\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp85jwr3yd.scala:22:46 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclosest\e[0m = (diff ==\
    \ \e[31m0\e[0m) ? min : \e[35mmin\e[0m \e[35m+\e[0m (\e[35mdiff\e[0m \e[35m/\e\
    [0m \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \  Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val intArray = intValue.toString.split(\"\\\\.\").map(_.toInt)\n\
    \        val intArrayLength = intArray.length\n        val intArraySum = intArray.sum\n\
    \        val intArrayDifference = intArraySum - intArray(0)\n        val intArrayDifferenceAbs\
    \ = intArrayDifference.abs\n        val intArrayDifferenceAbsMax = intArrayDifferenceAbs.max\n\
    \        val intArrayDifferenceAbsMin = intArrayDifferenceAbs.min\n        val\
    \ intArrayDifferenceAbsMaxIndex = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMax)\n\
    \        val intArrayDifferenceAbsMinIndex = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMin)\n\
    \        val intArrayDifferenceAbsMaxIndex = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMax)\n\
    \        val intArrayDifferenceAbsMinIndex = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMin)\n\
    \        val intArrayDifferenceAbsMaxIndex2 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMax)\n\
    \        val intArrayDifferenceAbsMinIndex2 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMin)\n\
    \        val intArrayDifferenceAbsMaxIndex3 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMax)\n\
    \        val intArrayDifferenceAbsMinIndex3 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMin)\n\
    \        val intArrayDifferenceAbsMaxIndex4 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMax)\n\
    \        val intArrayDifferenceAbsMinIndex4 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMin)\n\
    \        val intArrayDifferenceAbsMaxIndex5 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMax)\n\
    \        val intArrayDifferenceAbsMinIndex5 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMin)\n\
    \        val intArrayDifferenceAbsMaxIndex6 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMax)\n\
    \        val intArrayDifferenceAbsMinIndex6 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMin)\n\
    \        val intArrayDifferenceAbsMaxIndex7 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMax)\n\
    \        val intArrayDifferenceAbsMinIndex7 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMin)\n\
    \        val intArrayDifferenceAbsMaxIndex8 = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMax)\n\
    \        val intArray\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk41_20d9.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk41_20d9.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintArrayDifferenceAbsMaxIndex\e[0m = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMax)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayDifferenceAbsMaxIndex is already defined as \e[33mvalue\e\
    [0m \e[35mintArrayDifferenceAbsMaxIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk41_20d9.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mintArrayDifferenceAbsMinIndex\e\
    [0m = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMin)\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayDifferenceAbsMinIndex is already defined as \e[33mvalue\e\
    [0m \e[35mintArrayDifferenceAbsMinIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk41_20d9.scala:26:66 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mintArrayDifferenceAbsMaxIndex\e\
    [0m = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMax)\n\e[31m\e[31m  \
    \ |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value indexOf is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk41_20d9.scala:27:66\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mintArrayDifferenceAbsMinIndex\e[0m = intArrayDifferenceAbs.indexOf(intArrayDifferenceAbsMin)\n\
    \e[31m\e[31m   |\e[0m                   "
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = (max - min).toInt\n\
    \        val closest = (min + diff) / 2\n        val closestLong = closest.toLong\n\
    \        closestLong\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpvm_voptw.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toDouble))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Double])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpvm_voptw.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toDouble))\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Double])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val ints = value.split(\"\\\\.\").map(_.toInt)\n    \
    \    val minDiff = math.min(math.abs(ints(0) - ints(1)), math.abs(ints(1) - ints(0)))\n\
    \        val closestInt = math.abs(intValue - ints(0))\n        val closestInts\
    \ = math.abs(ints - ints(0))\n        val closestDiff = math.min(closestInts(0),\
    \ closestInts(1))\n        val closestDiffs = math.min(closestInts(0), closestInts(1))\n\
    \        val closestDiff = math.min(closestDiff, closestDiffs)\n        val closestDiff\
    \ = math.min(closestDiff, minDiff)\n        closestInt.toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl2v9iuxw.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mclosestDiff\e[0m = math.min(closestDiff,\
    \ closestDiffs)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestDiff is already defined as \e[33mvalue\e[0m \e[35mclosestDiff\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl2v9iuxw.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mclosestDiff\e[0m = math.min(closestDiff,\
    \ minDiff)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestDiff is already defined as \e[33mvalue\e[0m \e[35mclosestDiff\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpl2v9iuxw.scala:22:40 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclosestInts\e[0m = math.abs(ints -\
    \ ints(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                                 \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of Array[Int], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2ayn_syd.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ayn_syd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toLong))\n\
    \        val max = math.max(nums.map(_.toLong))\n        val diff = max - min\n\
    \        val closest = (diff + min) / 2\n        val rounded = math.round(closest)\n\
    \        rounded.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0ni7w9m0.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toLong))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Long])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0ni7w9m0.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toLong))\n\e[31m\e[31m   |\e[0m     \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Long])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toLong)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val closest = (min + max) / 2\n\
    \        if (closest == min) {\n            math.round(min)\n        } else {\n\
    \            math.round(closest)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3wj93362.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Long]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3wj93362.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Long]))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.trim().toInt\n        val ints = intValue.toString.split(\"\\\\.\").map(_.toInt)\n\
    \        val closest = (ints.minBy(_ - ints.maxBy(_))).round\n        closest.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpknf52_4j.scala:20:34 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mclosest\e[0m = (ints.minBy(_\
    \ - ints.maxBy(_))).round\n\e[31m\e[31m   |\e[0m                             \
    \     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ Wrong number of parameters, expected: 1\n\e[31m\e[31m-- Error: /tmp/tmpknf52_4j.scala:20:52\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mclosest\e[0m = (ints.minBy(_ - ints.maxBy(_))).round\n\e\
    [31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ cmp of \e[33mmethod\e[0m \e[35mminBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = numbers.min\n     \
    \   val max = numbers.max\n        val diff = max - min\n        val closest =\
    \ (min + diff) / 2\n        if (closest == min) {\n            closest\n     \
    \   } else {\n            closest.toLong\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwse28n2n.scala:30)\n\tat Problem.main(tmpwse28n2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val nums = List(\"10\", \"15.3\", \"14.5\", \"14\", \"13.5\", \"13\"\
    , \"12.5\", \"12\", \"11.5\", \"11\", \"10.5\", \"10\", \"9.5\", \"9\", \"8.5\"\
    , \"8\", \"7.5\", \"7\", \"6.5\", \"6\", \"5.5\", \"5\", \"4.5\", \"4\", \"3.5\"\
    , \"3\", \"2.5\", \"2\", \"1.5\", \"1\", \"0.5\", \"0\")\n        val numsSorted\
    \ = nums.sorted\n        val closestNum = numsSorted.find(num => num == numsSorted.indexOf((num\
    \ + num / 2).toLong))\n        val closestNumIndex = numsSorted.indexOf(closestNum)\n\
    \        val closestNumDiff = num - closestNum\n        val closestNumDiffAbs\
    \ = Math.abs(closestNumDiff)\n        val closestNumDiffAbsIndex = numsSorted.indexOf(closestNumDiffAbs)\n\
    \        val closestNumDiffAbsDiff = closestNumDiff - closestNumDiffAbs\n    \
    \    val closestNumDiffAbsDiffAbs = Math.abs(closestNumDiffAbsDiff)\n        val\
    \ closestNumDiffAbsDiffAbsIndex = numsSorted.indexOf(closestNumDiffAbsDiffAbs)\n\
    \        val closestNumDiffAbsDiffAbsDiff = closestNumDiffAbsDiff - closestNumDiffAbsDiffAbs\n\
    \        val closestNumDiffAbsDiffAbsDiffAbs = Math.abs(closestNumDiffAbsDiffAbsDiff)\n\
    \        val closestNumDiffAbsDiffAbsDiffAbsIndex = numsSorted.indexOf(closestNumDiffAbsDiffAbsDiffAbs)\n\
    \        val closestNumDiffAbsDiffAbsDiffAbsDiff = closestNumDiffAbsDiffAbsDiff\
    \ - closestNumDiffAbsDiffAbsDiffAbs\n        val closestNumDiffAbsDiffAbsDiffAbsDiffAbs\
    \ = Math.abs(closestNumDiffAbsDiffAbsDiffAbsDiff)\n        val closestNumDiffAbsDiffAbsDiffAbsDiffAbsIndex\
    \ = numsSorted.indexOf(closestNumDiffAbsDiffAbsDiffAbsDiffAbs)\n        val closestNumDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = closestNumDiffAbsDiffAbsDiffAbsDiff - closestNumDiffAbsDiffAbsDiffAbsDiffAbs\n\
    \        val closestNumDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(closestNumDiffAbsDiffAbsDiffAbsDiff\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp57n10myy.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp57n10myy.scala:21:85\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mclosestNum\e[0m = numsSorted.find(\e[36mnum\e[0m => num == numsSorted.indexOf((num\
    \ + num / \e[31m2\e[0m).toLong))\n\e[31m\e[31m   |\e[0m                      \
    \                                                           ^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue / is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmp57n10myy.scala:23:33 -----------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosestNumDiff\e[0m = num - closestNum\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e\
    [0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m  \
    \ |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x:\
    \ Int): Long\n\e[31m   |\e[0m (x: Char): Long\n\e[31m   |\e[0m (x: Short): Long\n\
    \e[31m   |\e[0m (x: Byte): Long\n\e[31m   |\e[0mmatch arguments ((closestNum :\
    \ Option[String]))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp57n10myy.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val diff = (intValue - intValue.floor)\n        val diffAbs\
    \ = Math.abs(diff)\n        if (diff < 0 && (diffAbs <= 1 || diffAbs <= 2)) {\n\
    \            intValue.floor\n        } else {\n            intValue.ceil\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfggjmfpv.scala:19:40 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdiff\e[0m = (intValue -\
    \ intValue.floor)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value floor is not a member of Int.\n\e[31m   |\e[0m\
    \      An extension method was tried, but could not be fully constructed:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m          floatWrapper(intValue)\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfggjmfpv.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            intValue.floor\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value floor is not a member\
    \ of Int.\n\e[31m   |\e[0m      An extension method was tried, but could not be\
    \ fully constructed:\n\e[31m   |\e[0m\n\e[31m   |\e[0m          floatWrapper(intValue)\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfggjmfpv.scala:24:21 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            intValue.ceil\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value ceil is not a member of\
    \ Int.\n\e[31m   |\e[0m      An extension method was tried, but could not be fully\
    \ constructed:\n\e[31m   |\e[0m\n\e[31m   |\e[0m          floatWrapper(intValue)\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // split into two parts separated by a dot\n        val\
    \ first = parts(0).toLong // first part is integer\n        val second = parts(1).toLong\
    \ // second part is fraction\n        val difference = second - first // difference\
    \ between first and second\n        val closest = (difference + second) / 2\n\
    \        val closestInteger = (closest + first) / 2\n        closestInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmpfpoee_xf.scala:20)\n\tat Problem$.main(tmpfpoee_xf.scala:27)\n\
    \tat Problem.main(tmpfpoee_xf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // Split value into two parts, integer and decimal\n\
    \        val integer = parts(0).toLong // Convert the integer part into a long\n\
    \        val decimal = parts(1).toLong // Convert the decimal part into a long\n\
    \        val difference = decimal - integer // Calculate the difference between\
    \ the two parts\n        val closestInteger = math.abs(difference) // Find the\
    \ closest integer\n        closestInteger.toLong // Return the closest integer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmpvukugvhg.scala:20)\n\tat Problem$.main(tmpvukugvhg.scala:26)\n\
    \tat Problem.main(tmpvukugvhg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toLong)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val diff = max - min\n        val\
    \ closest = (diff + min) / 2\n        closest.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8a_c6r3r.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Long]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8a_c6r3r.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Long]))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toLong)\n        val min = numbers.min\n    \
    \    val max = numbers.max\n        if (min == max) {\n            return min\n\
    \        }\n        val mid = (min + max) / 2\n        val midValue = numbers.find(_\
    \ == mid).getOrElse(mid)\n        val diff = Math.abs(midValue - mid)\n      \
    \  if (diff < 1) {\n            return mid\n        }\n        if (diff < 2) {\n\
    \            return mid\n        }\n        if (diff < 3) {\n            return\
    \ mid\n        }\n        if (diff < 4) {\n            return mid\n        }\n\
    \        if (diff < 5) {\n            return mid\n        }\n        if (diff\
    \ < 6) {\n            return mid\n        }\n        if (diff < 7) {\n       \
    \     return mid\n        }\n        if (diff < 8) {\n            return mid\n\
    \        }\n        if (diff < 9) {\n            return mid\n        }\n     \
    \   if (diff < 10) {\n            return mid\n        }\n        if (diff < 11)\
    \ {\n            return mid\n        }\n        if (diff < 12) {\n           \
    \ return mid\n        }\n        if (diff < 13) {\n            return mid\n  \
    \      }\n        if (diff < 14) {\n            return mid\n        }\n      \
    \  if (diff < 15) {\n            return mid\n        }\n        if (diff < 16)\
    \ {\n            return mid\n        }\n        if (diff < 17) {\n           \
    \ return mid\n        }\n        if (diff < 18) {\n            return mid\n  \
    \      }\n        if (diff < 19) {\n            return mid\n        }\n      \
    \  if (diff < 20) {\n            return mid\n        }\n        if (diff < 21)\
    \ {\n            return mid\n        }\n        if (diff < 22) {\n           \
    \ return mid\n        }\n        if (diff < 23) {\n            return mid\n  \
    \      }\n        if (diff < 24) {\n            return mid\n        }\n      \
    \  if (diff < 25) {\n            return mid\n        }\n        if (diff < 26)\
    \ {\n            return mid\n        }\n        if (diff < 27) {\n           \
    \ return mid\n        }\n        if (diff < 28) {\n            return mid\n  \
    \      }\n        if (diff < 29) {\n            return mid\n        }\n      \
    \  if (diff < 30) {\n            return mid\n        }\n        if (diff < 31)\
    \ {\n            return mid\n        }\n        if (diff < 32) {\n           \
    \ return mid\n        }\n        if (diff < 33) {\n            return mid\n  \
    \      }\n        if (diff < 34) {\n            return mid\n        }\n      \
    \  if (diff < 35) {\n            return mid\n        }\n        if (diff < 36)\
    \ {\n            return mid\n        }\n        if (diff < 37) {\n           \
    \ return mid\n        }\n        if (diff < 38) {\n            return mid\n  \
    \      }\n        if (diff < 39) {\n            return mid\n        }\n      \
    \  if (diff < 40) {\n            return mid\n        }\n        if (diff < \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgh1bfij7.scala:147:18 --------------------------\e\
    [0m\e[0m\n\e[31m147 |\e[0m        \e[33mif\e[0m (diff < \n\e[31m\e[31m    |\e\
    [0m                  ^\e[0m\n\e[31m    |\e[0m                  expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // Split on decimal point\n        val intPart = parts(0)\n\
    \        val fractionPart = parts(1)\n        val intPartAsLong = intPart.toLong\n\
    \        val fractionPartAsLong = fractionPart.toLong\n        val fractionPartAsDouble\
    \ = fractionPart.toDouble\n        val fractionPartAsInt = fractionPartAsLong.toInt\n\
    \        val fractionPartAsLong = fractionPartAsLong - fractionPartAsDouble\n\
    \        val fractionPartAsDouble = fractionPartAsDouble * Math.pow(10, fractionPartAsInt)\n\
    \        val fractionPartAsLong = fractionPartAsLong + fractionPartAsDouble\n\
    \        val fractionPartAsDouble = fractionPartAsDouble * Math.pow(10, fractionPartAsInt)\n\
    \        val fractionPartAsLong = fractionPartAsLong + fractionPartAsDouble\n\
    \        val fractionPartAsDouble = fractionPartAsDouble * Math.pow(10, fractionPartAsInt)\n\
    \        val fractionPartAsLong = fractionPartAsLong + fractionPartAsDouble\n\
    \        val fractionPartAsDouble = fractionPartAsDouble * Math.pow(10, fractionPartAsInt)\n\
    \        val fractionPartAsLong = fractionPartAsLong + fractionPartAsDouble\n\
    \        val fractionPartAsDouble = fractionPartAsDouble * Math.pow(10, fractionPartAsInt)\n\
    \        val fractionPartAsLong = fractionPartAsLong + fractionPartAsDouble\n\
    \        val fractionPartAsDouble = fractionPartAsDouble * Math.pow(10, fractionPartAsInt)\n\
    \        val fractionPartAsLong = fractionPartAsLong + fractionPartAsDouble\n\
    \        val fractionPartAsDouble = fractionPartAsDouble * Math.pow(10, fractionPartAsInt)\n\
    \        val fractionPartAsLong = fractionPartAsLong + fractionPartAsDouble\n\
    \        val fractionPartAsDouble = fractionPartAsDouble * Math.pow(10, fractionPartAsInt)\n\
    \        val fractionPartAsLong = fractionPartAsLong + fractionPartAsDouble\n\
    \        val fractionPartAsDouble = fractionPartAsDouble * Math.pow(10, fractionPartAsInt)\n\
    \        val fractionPartAsLong = fractionPartAsLong + fractionPartAsDouble\n\
    \        val fractionPartAsDouble = fractionPartAsDouble * Math.pow(10, fractionPartAsInt)\n\
    \        val fractionPartAsLong = fractionPartAsLong + fractionPartAsDouble\n\
    \        val fractionPartAsDouble = fractionPartAsDouble * Math.pow(10, fractionPartAsInt)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp94bg3tko.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mfractionPartAsLong\e[0m\
    \ = fractionPartAsLong - fractionPartAsDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfractionPartAsLong is already defined as \e[33mvalue\e[0m\
    \ \e[35mfractionPartAsLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp94bg3tko.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mfractionPartAsDouble\e[0m\
    \ = fractionPartAsDouble * Math.pow(\e[31m10\e[0m, fractionPartAsInt)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfractionPartAsDouble is already defined as \e[33mvalue\e[0m\
    \ \e[35mfractionPartAsDouble\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp94bg3tko.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mfractionPartAsLong\e[0m\
    \ = fractionPartAsLong + fractionPartAsDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfractionPartAsLong is already defined as \e[33mvalue\e[0m\
    \ \e[35mfractionPartAsLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp94bg3tko.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mfractionPartAsDouble\e[0m\
    \ = fractionPartAsDouble * Math.pow(\e[31m10\e[0m, fractionPartAsInt)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfractionPartAsDouble is already defined as \e[33mvalue\e[0m\
    \ \e[35mfractionPartAsDouble\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2ayn_syd.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ayn_syd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val diff = largest - smallest\n\
    \        if (diff < 0)\n            smallest - diff\n        else\n          \
    \  largest + diff\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpfnnbo1tn.scala:19:28 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpfnnbo1tn.scala:20:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mlargest\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val diff = (intValue - intValue.toDouble).toInt\n   \
    \     val diff2 = diff * diff\n        val diff3 = diff2 * diff\n        val diff4\
    \ = diff3 * diff\n        val diff5 = diff4 * diff\n        val diff6 = diff5\
    \ * diff\n        val diff7 = diff6 * diff\n        val diff8 = diff7 * diff\n\
    \        val diff9 = diff8 * diff\n        val diff10 = diff9 * diff\n       \
    \ val diff11 = diff10 * diff\n        val diff12 = diff11 * diff\n        val\
    \ diff13 = diff12 * diff\n        val diff14 = diff13 * diff\n        val diff15\
    \ = diff14 * diff\n        val diff16 = diff15 * diff\n        val diff17 = diff16\
    \ * diff\n        val diff18 = diff17 * diff\n        val diff19 = diff18 * diff\n\
    \        val diff20 = diff19 * diff\n        val diff21 = diff20 * diff\n    \
    \    val diff22 = diff21 * diff\n        val diff23 = diff22 * diff\n        val\
    \ diff24 = diff23 * diff\n        val diff25 = diff24 * diff\n        val diff26\
    \ = diff25 * diff\n        val diff27 = diff26 * diff\n        val diff28 = diff27\
    \ * diff\n        val diff29 = diff28 * diff\n        val diff30 = diff29 * diff\n\
    \        val diff31 = diff30 * diff\n        val diff32 = diff31 * diff\n    \
    \    val diff33 = diff32 * diff\n        val diff34 = diff33 * diff\n        val\
    \ diff35 = diff34 * diff\n        val diff36 = diff35 * diff\n        val diff37\
    \ = diff36 * diff\n        val diff38 = diff37 * diff\n        val diff39 = diff38\
    \ * diff\n        val diff40 = diff39 * diff\n        val diff41 = diff40 * diff\n\
    \        val diff42 = diff41 * diff\n        val diff43 = diff42 * diff\n    \
    \    val diff44 = diff43 * diff\n        val diff45 = diff44 * diff\n        val\
    \ diff46 = diff45 * diff\n        val diff47 = diff46 * diff\n        val diff48\
    \ = diff47 * diff\n        val diff49 = diff48 * diff\n        val diff50 = diff49\
    \ * diff\n        val diff51 = diff50 * diff\n        val diff52 = diff51 * \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpl9r8_80y.scala:70:29 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m        \e[33mval\e[0m \e[36mdiff52\e[0m = diff51 * \n\
    \e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m    \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl9r8_80y.scala:71:5 ---------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = numbers.min\n     \
    \   val max = numbers.max\n        val diff = max - min\n        val closest =\
    \ (min + diff) / 2\n        if (diff > 0) closest else -closest\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiffzkgib.scala:26)\n\tat Problem.main(tmpiffzkgib.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2ayn_syd.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ayn_syd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val intArray = intValue.toString.toDouble.split('.').map(_.toInt)\n\
    \        val closestIntArray = intArray.zipWithIndex.minBy { case (v, i) => abs(v\
    \ - intArray(i)) }\n        closestIntArray._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmf2fwanb.scala:19:50 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mintArray\e[0m = intValue.toString.toDouble.split(\e\
    [31m'.'\e[0m).map(_.toInt)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value split is not a member of Double\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val diff = largest - smallest\n\
    \        val closest = (smallest + diff / 2).toLong\n        closest\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcrlr16h6.scala:19:28 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcrlr16h6.scala:20:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mlargest\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // Split value into two parts\n        val firstPart\
    \ = parts(0)\n        val secondPart = parts(1)\n        val firstPartInt = firstPart.toInt\n\
    \        val secondPartInt = secondPart.toInt\n        val difference = secondPartInt\
    \ - firstPartInt\n        if (difference < 0)\n            firstPartInt + difference\n\
    \        else\n            firstPartInt - difference\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmpx4lnmcli.scala:20)\n\tat Problem$.main(tmpx4lnmcli.scala:30)\n\
    \tat Problem.main(tmpx4lnmcli.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = max - min\n        val closest\
    \ = (diff + min) / 2\n        math.round(closest)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpckmr6_60.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpckmr6_60.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toLong))\n\
    \        val max = math.max(nums.map(_.toLong))\n        val diff = max - min\n\
    \        val closest = (min + diff) / 2\n        val closestLong = closest.toLong\n\
    \        if (closest == min) closestLong\n        else closestLong - diff\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpnczov5q9.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toLong))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Long])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpnczov5q9.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toLong))\n\e[31m\e[31m   |\e[0m     \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Long])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2ayn_syd.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ayn_syd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val diff = max - min\n        val\
    \ closest = (diff + min) / 2\n        math.round(closest)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_539s1wv.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_539s1wv.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toLong\n        val intArray = intValue.toString.split(\"\\\\.\").map(_.toInt)\n\
    \        val intArrayLength = intArray.length\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArray\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n7qd5q0.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1n7qd5q0.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1n7qd5q0.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1n7qd5q0.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1n7qd5q0.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val intValues = List(intValue).sorted\n        val closestValue\
    \ = intValues.last\n        val closestValues = intValues.takeWhile(x => x < closestValue)\n\
    \        val closestValueIndex = closestValues.indexOf(intValue)\n        val\
    \ closestValueIndex = closestValues.indexOf(intValue)\n        val closestValueIndex\
    \ = closestValues.indexOf(intValue)\n        val closestValueIndex = closestValues.indexOf(intValue)\n\
    \        val closestValueIndex = closestValues.indexOf(intValue)\n        val\
    \ closestValueIndex = closestValues.indexOf(intValue)\n        val closestValueIndex\
    \ = closestValues.indexOf(intValue)\n        val closestValueIndex = closestValues.indexOf(intValue)\n\
    \        val closestValueIndex = closestValues.indexOf(intValue)\n        val\
    \ closestValueIndex = closestValues.indexOf(intValue)\n        val closestValueIndex\
    \ = closestValues.indexOf(intValue)\n        val closestValueIndex = closestValues.indexOf(intValue)\n\
    \        val closestValueIndex = closestValues.indexOf(intValue)\n        val\
    \ closestValueIndex = closestValues.indexOf(intValue)\n        val closestValueIndex\
    \ = closestValues.indexOf(intValue)\n        val closestValueIndex = closestValues.indexOf(intValue)\n\
    \        val closestValueIndex = closestValues.indexOf(intValue)\n        val\
    \ closestValueIndex = closestValues.indexOf(intValue)\n        val closestValueIndex\
    \ = closestValues.indexOf(intValue)\n        val closestValueIndex = closestValues.indexOf(intValue)\n\
    \        val closestValueIndex = closestValues.indexOf(intValue)\n        val\
    \ closestValueIndex = closestValues.indexOf(intValue)\n        val closestValueIndex\
    \ = closestValues.indexOf(intValue)\n        val closestValueIndex = closestValues.indexOf(intValue)\n\
    \        val closestValueIndex = closestValues.indexOf(intValue)\n        val\
    \ closestValueIndex = closestValues.indexOf(intValue)\n        val closestValueIndex\
    \ = closestValues.indexOf(intValue)\n        val closestValueIndex = closestValues.indexOf(intValue)\n\
    \        val closestValueIndex = closestValues.indexOf(intValue)\n        val\
    \ closestValueIndex = closestValues.indexOf(intValue)\n        val closestValueIndex\
    \ = closestValues.indexOf(intValue)\n        val closestValueIndex = closestValues.indexOf(intValue)\n\
    \        val closestValueIndex = closestValues.indexOf(intValue)\n        val\
    \ closestValueIndex = closestValues.indexOf(intValue)\n        val closestValueIndex\
    \ = closestValues.indexOf(intValue)\n        val closestValueIndex = closestValues.indexOf(intValue)\n\
    \        val closestValueIndex = closestValues.indexOf(intValue)\n        val\
    \ closestValueIndex = closestValues.indexOf(intValue)\n        val closestValueIndex\
    \ = closestValues.indexOf(intValue)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprj6nrnub.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosestValueIndex\e[0m =\
    \ closestValues.indexOf(intValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestValueIndex is already defined as \e[33mvalue\e[0m \e\
    [35mclosestValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprj6nrnub.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mclosestValueIndex\e[0m =\
    \ closestValues.indexOf(intValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestValueIndex is already defined as \e[33mvalue\e[0m \e\
    [35mclosestValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprj6nrnub.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mclosestValueIndex\e[0m =\
    \ closestValues.indexOf(intValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestValueIndex is already defined as \e[33mvalue\e[0m \e\
    [35mclosestValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprj6nrnub.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mclosestValueIndex\e[0m =\
    \ closestValues.indexOf(intValue)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestValueIndex is already defined as \e[33mvalue\e[0m \e\
    [35mclosestValueIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprj6nrnub.scala:27:12 -------------"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val diff = max - min\n        if\
    \ (diff < 0)\n            min + diff\n        else\n            min\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpa2ty6vn8.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpa2ty6vn8.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.asInstanceOf[String]\n\
    \        val numArray = num.toDouble.split('.').toList\n        val numArrayLength\
    \ = numArray.length\n        val numArrayElements = numArrayLength - 1\n     \
    \   val numArrayElementsRemainder = numArrayLength % 2\n        val numArrayElementsRemainderIndex\
    \ = numArrayLength - numArrayElementsRemainder\n        val numArrayElementsRemainderValue\
    \ = numArrayElementsRemainder + 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex - 1\n        val numArrayElementsRemainderValueIndex\
    \ = numArrayElementsRemainderIndex\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5b2j_emu.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnumArrayElementsRemainderValueIndex\e\
    [0m = numArrayElementsRemainderIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumArrayElementsRemainderValueIndex is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumArrayElementsRemainderValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5b2j_emu.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumArrayElementsRemainderValueIndex\e[0m = numArrayElementsRemainderIndex\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumArrayElementsRemainderValueIndex is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumArrayElementsRemainderValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5b2j_emu.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumArrayElementsRemainderValueIndex\e[0m = numArrayElementsRemainderIndex\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumArrayElementsRemainderValueIndex is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumArrayElementsRemainderValueIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5b2j_emu.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumArrayElementsRemainderValueIndex\e[0m = numArrayElementsRemainderIndex\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val difference = parts(0) - parts(1)\n\
    \        val differenceAbs = Math.abs(difference)\n        if (differenceAbs <\
    \ 1) {\n            parts(0)\n        } else {\n            val closestDifference\
    \ = differenceAbs.min(parts(0))\n            val closestDifferenceAbs = Math.abs(closestDifference)\n\
    \            val closestDifferenceAbsIndex = parts(0).indexOf(closestDifferenceAbs)\n\
    \            parts(closestDifferenceAbsIndex + 1)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe4t0ij94.scala:26:53 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mclosestDifferenceAbsIndex\e\
    [0m = parts(\e[31m0\e[0m).indexOf(closestDifferenceAbs)\n\e[31m\e[31m   |\e[0m\
    \                                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                    value indexOf is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toLong))\n\
    \        val max = math.max(nums.map(_.toLong))\n        val diff = max - min\n\
    \        val closest = (diff + min) / 2\n        val closestLong = math.round(closest)\n\
    \        closestLong\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpe3wm61p2.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toLong))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Long])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpe3wm61p2.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toLong))\n\e[31m\e[31m   |\e[0m     \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Long])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // split on decimal point\n        val intParts = parts.map(_.toInt)\
    \ // convert string to array of ints\n        val diffs = intParts.zip(intParts\
    \ diff intParts.last) // find differences between adjacent ints\n        val diffSum\
    \ = diffs.map(_.sum) // sum up differences to find closest int\n        val diffSumSum\
    \ = diffSum.sum // sum up differences to find closest int\n        val diffSumDiff\
    \ = diffSum.map(_.diff) // find differences between adjacent ints\n        val\
    \ diffSumDiffSum = diffSumDiff.sum // sum up differences to find closest int\n\
    \        val diffSumDiffDiff = diffSumDiff.map(_.diff) // find differences between\
    \ adjacent ints\n        val diffSumDiffDiffSum = diffSumDiffDiff.sum // sum up\
    \ differences to find closest int\n        val diffSumDiffDiffDiff = diffSumDiffDiff.map(_.diff)\
    \ // find differences between adjacent ints\n        val diffSumDiffDiffDiffSum\
    \ = diffSumDiffDiffDiff.sum // sum up differences to find closest int\n      \
    \  val diffSumDiffDiffDiffDiff = diffSumDiffDiffDiff.map(_.diff) // find differences\
    \ between adjacent ints\n        val diffSumDiffDiffDiffDiffSum = diffSumDiffDiffDiffDiff.sum\
    \ // sum up differences to find closest int\n        val diffSumDiffDiffDiffDiffDiff\
    \ = diffSumDiffDiffDiffDiff.map(_.diff) // find differences between adjacent ints\n\
    \        val diffSumDiffDiffDiffDiffDiffSum = diffSumDiffDiffDiffDiffDiff.sum\
    \ // sum up differences to find closest int\n        val diffSumDiffDiffDiffDiffDiffDiff\
    \ = diffSumDiffDiffDiffDiffDiff.map(_.diff) // find differences between adjacent\
    \ ints\n        val diffSumDiffDiffDiffDiffDiffDiffSum = diffSumDiffDiffDiffDiffDiffDiff.sum\
    \ // sum up differences to find closest int\n        val diffSumDiffDiffDiffDiffDiffDiffDiff\
    \ = diffSumDiffDiffDiffDiffDiffDiff.map(_.diff) // find differences between adjacent\
    \ ints\n        val diffSumDiffDiffDiffDiffDiffDiffDiffSum = diffSumDiffDiffDiffDiffDiffDiffDiff.sum\
    \ // sum up differences to find closest int\n        val diffSumDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = diffSumDiffDiffDiffDiffDiffDiffDiff.map(_.diff) // find differences between\
    \ adjacent ints\n        val diffSumDiffDiff\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxfpa3tqw.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxfpa3tqw.scala:20:56 --------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mdiffs\e[0m = intParts.zip(intParts diff intParts.last)\
    \ \e[34m// find differences between adjacent ints\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                     Found:    Int\n\e[31m   |\e[0m       \
    \                              Required: scala.collection.Seq[Int]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfpa3tqw.scala:21:34 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdiffSum\e[0m = diffs.map(_.sum)\
    \ \e[34m// sum up differences to find closest int\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \               value sum is not a member of (Int, Int)\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpxfpa3tqw.scala:21:38 -----------------------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdiffSum\e[0m = diffs.map(_.sum)\
    \ \e[34m// sum up differences to find closest int\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                       No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m                                      where:    B is a type variable\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxfpa3tqw.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2ayn_syd.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ayn_syd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = max - min\n        val roundTo\
    \ = diff / 2\n        val roundFrom = min + roundTo\n        val roundToMinusOne\
    \ = roundTo - 1\n        val roundFromMinusOne = roundFrom - 1\n        val roundToMinusOneOrZero\
    \ = roundToMinusOne == 0 ? 0 : roundToMinusOne\n        val roundFromMinusOneOrZero\
    \ = roundFromMinusOne == 0 ? 0 : roundFromMinusOne\n        val roundToMinusOneOrZeroOrZero\
    \ = roundToMinusOneOrZero == 0 ? 0 : roundToMinusOneOrZero\n        val roundFromMinusOneOrZeroOrZeroOrZero\
    \ = roundFromMinusOneOrZeroOrZero == 0 ? 0 : roundFromMinusOneOrZeroOrZero\n \
    \       val roundToMinusOneOrZeroOrZeroOrZeroOrZero = roundToMinusOneOrZeroOrZeroOrZero\
    \ == 0 ? 0 : roundToMinusOneOrZeroOrZeroOrZero\n        val roundFromMinusOneOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = roundFromMinusOneOrZeroOrZeroOrZeroOrZero == 0 ? 0 : roundFromMinusOneOrZeroOrZeroOrZeroOrZero\n\
    \        val roundToMinusOneOrZeroOrZeroOrZeroOrZeroOrZero = roundToMinusOneOrZeroOrZeroOrZeroOrZero\
    \ == 0 ? 0 : roundToMinusOneOrZeroOrZeroOrZeroOrZeroOrZero\n        val roundFromMinusOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ = roundFromMinusOneOrZeroOrZeroOrZeroOrZeroOrZero == 0 ? 0 : roundFromMinusOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\n\
    \        val roundToMinusOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = roundToMinusOneOrZeroOrZeroOrZeroOrZeroOrZero\
    \ == 0 ? 0 : roundToMinusOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\n        val\
    \ roundFromMinusOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = roundFromMinusOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ == 0 ? 0 : roundFromMinusOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\n   \
    \     val roundToMinusOne\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyjjen5pl.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyjjen5pl.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mroundFromMinusOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\e[0m = roundFromMinusOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\
    \ == \e[31m0\e[0m ? \e[31m0\e[0m : \e[35mroundFromMinusOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mroundFromMinusOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZero is already\
    \ defined as \e[33mvalue\e[0m \e[35mroundFromMinusOneOrZeroOrZeroOrZeroOrZeroOrZeroOrZero\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpyjjen5pl.scala:19:23 -----------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpyjjen5pl.scala:20:23 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = math.max(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: L"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2ayn_syd.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ayn_syd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\").map(_.toLong)\n        val min = parts.min\n        val\
    \ max = parts.max\n        val diff = max - min\n        val closest = (min +\
    \ diff) / 2\n        if (diff < 0)\n            closest - min\n        else\n\
    \            closest + min\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxldqey3r.scala:29)\n\tat Problem.main(tmpxldqey3r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toLong))\n\
    \        val max = math.max(nums.map(_.toLong))\n        val diff = max - min\n\
    \        val closest = (diff + min) / 2\n        val closestInt = math.round(closest)\n\
    \        closestInt\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1h3wyi_d.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toLong))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Long])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp1h3wyi_d.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toLong))\n\e[31m\e[31m   |\e[0m     \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Long])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val diff = max - min\n        if\
    \ (diff == 0) {\n            min\n        } else {\n            min + math.ceil(diff\
    \ / 2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0xrbbqxf.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0xrbbqxf.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val nums = List(\"10\", \"15.3\", \"14.5\", \"14\", \"13.5\", \"13\"\
    , \"12.5\", \"12\", \"11.5\", \"11\", \"10.5\", \"10\", \"9.5\", \"9\", \"8.5\"\
    , \"8\", \"7.5\", \"7\", \"6.5\", \"6\", \"5.5\", \"5\", \"4.5\", \"4\", \"3.5\"\
    , \"3\", \"2.5\", \"2\", \"1.5\", \"1\", \"0.5\", \"0\")\n        val numsSorted\
    \ = nums.sortWith(_ < _)\n        val closestNum = numsSorted.last\n        val\
    \ closestNumIndex = numsSorted.lastIndex\n        val closestNumDistance = numsSorted.last\n\
    \        val closestNumDistanceIndex = numsSorted.lastIndex\n        val closestNumDistanceDistance\
    \ = numsSorted.last\n        val closestNumDistanceDistanceIndex = numsSorted.lastIndex\n\
    \        val closestNumDistanceDistanceDistance = numsSorted.last\n        val\
    \ closestNumDistanceDistanceDistanceIndex = numsSorted.lastIndex\n        val\
    \ closestNumDistanceDistanceDistanceDistance = numsSorted.last\n        val closestNumDistanceDistanceDistanceDistanceIndex\
    \ = numsSorted.lastIndex\n        val closestNumDistanceDistanceDistanceDistanceDistance\
    \ = numsSorted.last\n        val closestNumDistanceDistanceDistanceDistanceDistanceIndex\
    \ = numsSorted.lastIndex\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistance\
    \ = numsSorted.last\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistanceIndex\
    \ = numsSorted.lastIndex\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistanceDistance\
    \ = numsSorted.last\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistanceIndex\
    \ = numsSorted.lastIndex\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistanceDistance\
    \ = numsSorted.last\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistanceIndex\
    \ = numsSorted.lastIndex\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistanceDistance\
    \ = numsSorted.last\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistanceIndex\
    \ = numsSorted.lastIndex\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistanceDistanceDistance\
    \ = numsSorted.last\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistanceDistanceIndex\
    \ = numsSorted.lastIndex\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistanceDistanceDistance\
    \ = numsSorted.last\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistanceDistanceIndex\
    \ = numsSorted.lastIndex\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistanceDistanceDistanceDistance\
    \ = numsSorted.last\n        val closestNumDistanceDistanceDistanceDistanceDistanceDistanceDistanceDistanceIndex\
    \ = numsSorted.\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6p0v0hsp.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6p0v0hsp.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mclosestNumDistanceDistanceDistanceDistanceDistanceDistanceIndex\e\
    [0m = numsSorted.lastIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestNumDistanceDistanceDistanceDistanceDistanceDistanceIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mclosestNumDistanceDistanceDistanceDistanceDistanceDistanceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6p0v0hsp.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mclosestNumDistanceDistanceDistanceDistanceDistanceDistanceDistance\e\
    [0m = numsSorted.last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestNumDistanceDistanceDistanceDistanceDistanceDistanceDistance\
    \ is already defined as \e[33mvalue\e[0m \e[35mclosestNumDistanceDistanceDistanceDistanceDistanceDistanceDistance\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6p0v0hsp.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mclosestNumDistanceDistanceDistanceDistanceDistanceDistanceIndex\e\
    [0m = numsSorted.lastIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestNumDistanceDistanceDistanceDistanceDistanceDistanceIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mclosestNumDistanceDistanceDistanceDistanceDistanceDistanceIndex\e\
    [0"
  stdout: ''
  timestamp: 1660010178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val nums = value.split(\"\\\\.\").map(_.toLong)\n        val diffs =\
    \ nums.zip(nums.tail).map {\n            case (first, second) => math.abs(first\
    \ - second)\n        }\n        val minDiff = diffs.min\n        val closestNum\
    \ = nums.find(math.abs(_ - minDiff) == math.abs(_ - minDiff))\n        closestNum.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpgr5g3bwa.scala:24:40 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mclosestNum\e[0m = nums.find(math.abs(_\
    \ - minDiff) == math.abs(_ - minDiff))\n\e[31m\e[31m   |\e[0m                \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mabs\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long): Long\n\e[31m   |\e[0m (x: Int): Int\n\e[31m\
    \   |\e[0mmatch arguments (<?> => <?>)\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpgr5g3bwa.scala:25:19 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        closestNum.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toLong is not a member of Option[Long], but could be\
    \ made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\");\n        val intParts = parts.map(_.toInt);\n      \
    \  val diffs = intParts.zip(intParts).map(x => Math.abs(x._1 - x._2));\n     \
    \   val maxDiff = diffs.max;\n        val maxDiffIndex = diffs.indexOf(maxDiff);\n\
    \        val closestPart = intParts(maxDiffIndex);\n        val closestInteger\
    \ = closestPart.toLong;\n        return closestInteger;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmu2l0mfq.scala:29)\n\tat Problem.main(tmpmu2l0mfq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = max - min\n\
    \        val closest = (diff + min) / 2\n        val closestInt = math.round(closest)\n\
    \        closestInt\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_3kpkdu6.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toDouble))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Double])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_3kpkdu6.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toDouble))\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Double])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010174
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toDouble\n\
    \        val difference = math.abs(num - math.floor(num))\n        val closestNum\
    \ = math.floor(num + difference)\n        closestNum.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8rx5u126.scala:26)\n\tat Problem.main(tmp8rx5u126.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // split into integer and fraction\n        val fraction\
    \ = parts(1).toLong // fractional part\n        val integer = parts(0).toLong\
    \ // integer part\n        val difference = fraction - integer // difference between\
    \ fraction and integer\n        val closestInteger = math.min(integer + difference,\
    \ Integer.MAX_VALUE) // closest integer\n        closestInteger // return closest\
    \ integer\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmpapzu7x2z.scala:19)\n\tat Problem$.main(tmpapzu7x2z.scala:26)\n\
    \tat Problem.main(tmpapzu7x2z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // Split value into two parts separated by a dot\n  \
    \      val first = parts(0)\n        val second = parts(1)\n        val firstInt\
    \ = first.toInt\n        val secondInt = second.toInt\n        val difference\
    \ = secondInt - firstInt\n        if (difference < 0)\n            firstInt +\
    \ difference\n        else\n            firstInt - difference\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmp023wo4sj.scala:20)\n\tat Problem$.main(tmp023wo4sj.scala:30)\n\
    \tat Problem.main(tmp023wo4sj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val difference = numbers.zip(numbers.tail).map\
    \ {\n            case (first, second) => math.abs(first - second)\n        }.max\n\
    \        val closestToZero = math.abs(difference)\n        if (difference < 0)\n\
    \            math.ceil(closestToZero)\n        else\n            math.floor(closestToZero)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66pciafg.scala:24:21\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            math.ceil(closestToZero)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Found:    Double\n\e[31m   |\e[0m            Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp66pciafg.scala:26:22 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            math.floor(closestToZero)\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   Found:    Double\n\e[31m   |\e[0m            Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010181
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val diff = (num - num.toInt).toLong\n        if (diff < 0)\n        \
    \    diff.toLong - num.toInt\n        else\n            diff.toLong + num.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"14.5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.closestInteger(tmp6m0rwg3n.scala:18)\n\
    \tat Problem$.main(tmp6m0rwg3n.scala:27)\n\tat Problem.main(tmp6m0rwg3n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toLong)\n        val closestToZero = numbers.minBy(math.abs)\n\
    \        val closestToOne = numbers.maxBy(math.abs)\n        val closestToTwo\
    \ = numbers.maxBy(math.abs)\n        val closestToThree = numbers.maxBy(math.abs)\n\
    \        val closestToFour = numbers.maxBy(math.abs)\n        val closestToFive\
    \ = numbers.maxBy(math.abs)\n        val closestToSix = numbers.maxBy(math.abs)\n\
    \        val closestToSeven = numbers.maxBy(math.abs)\n        val closestToEight\
    \ = numbers.maxBy(math.abs)\n        val closestToNine = numbers.maxBy(math.abs)\n\
    \        val closestToTen = numbers.maxBy(math.abs)\n        val closestToEleven\
    \ = numbers.maxBy(math.abs)\n        val closestToTwelve = numbers.maxBy(math.abs)\n\
    \        val closestToThirteen = numbers.maxBy(math.abs)\n        val closestToFourteen\
    \ = numbers.maxBy(math.abs)\n        val closestToFifteen = numbers.maxBy(math.abs)\n\
    \        val closestToSixteen = numbers.maxBy(math.abs)\n        val closestToSeventeen\
    \ = numbers.maxBy(math.abs)\n        val closestToEighteen = numbers.maxBy(math.abs)\n\
    \        val closestToNineteen = numbers.maxBy(math.abs)\n        val closestToTwenty\
    \ = numbers.maxBy(math.abs)\n        val closestToTwentyOne = numbers.maxBy(math.abs)\n\
    \        val closestToTwentyTwo = numbers.maxBy(math.abs)\n        val closestToTwentyThree\
    \ = numbers.maxBy(math.abs)\n        val closestToTwentyFour = numbers.maxBy(math.abs)\n\
    \        val closestToTwentyFive = numbers.maxBy(math.abs)\n        val closestToTwentySix\
    \ = numbers.maxBy(math.abs)\n        val closestToTwentySeven = numbers.maxBy(math.abs)\n\
    \        val closestToTwentyEight = numbers.maxBy(math.abs)\n        val closestToTwentyNine\
    \ = numbers.maxBy(math.abs)\n        val closestToTwentyTen = numbers.maxBy(math.abs)\n\
    \        val closestToTwentyEleven = numbers.maxBy(math.abs)\n        val closestToTwentyTwelve\
    \ = numbers.maxBy(math.abs)\n        val closestToTwent\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplhhzxg9h.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmplhhzxg9h.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toLong)\n        val min = numbers.min\n    \
    \    val max = numbers.max\n        val diff = max - min\n        if (diff < 0)\n\
    \            min - diff\n        else\n            max + diff\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdl8jmjl0.scala:29)\n\tat Problem.main(tmpdl8jmjl0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = max - min\n\
    \        val closest = (min + diff) / 2\n        val closestLong = closest.toLong\n\
    \        return closestLong\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5mipb102.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toDouble))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Double])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5mipb102.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toDouble))\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Double])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2ayn_syd.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ayn_syd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val mid = math.round(min + (max - min)\
    \ / 2)\n        val diff = (mid - min).abs - (mid - max).abs\n        if (diff\
    \ < 0)\n            mid\n        else\n            math.round(mid - diff)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpjig93yf6.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpjig93yf6.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").toList\n        val number: Long = numbers(0)\n   \
    \     val integers = numbers.tail\n        val integer: Long = integers.head\n\
    \        val difference = abs(number - integer)\n        val closestInteger =\
    \ if (difference < 1) number else integer\n        closestInteger\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp91nwnzxl.scala:19:34\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumber\e\
    [0m: \e[35mLong\e[0m = numbers(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    String\n\e[31m   |\e[0m                           Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp91nwnzxl.scala:21:37 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36minteger\e[0m: \e[35mLong\e\
    [0m = integers.head\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    String\n\e[31m   |\e\
    [0m                            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val intArray = intValue.toString.toDouble.split('.').map(_.toInt)\n\
    \        val intArrayLength = intArray.length\n        val closestIntArray = intArray.zipWithIndex.sortBy(_._1).reverse.take(intArrayLength)\n\
    \        val closestInt = closestIntArray._2.toLong\n        closestInt\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzba2j2jh.scala:19:50 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mintArray\e[0m = intValue.toString.toDouble.split(\e\
    [31m'.'\e[0m).map(_.toInt)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value split is not a member of Double\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = max - min\n        val closest\
    \ = (diff + min) / 2\n        math.round(closest)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpckmr6_60.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpckmr6_60.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = numbers.min\n\
    \        val largest = numbers.max\n        val diff = (largest - smallest).toInt\n\
    \        val roundTo = diff / 2\n        val roundFrom = diff - roundTo\n    \
    \    val roundToClosest = roundTo.toLong\n        val roundFromClosest = roundFrom.toLong\n\
    \        val roundToClosestInt = roundToClosest.toInt\n        val roundFromClosestInt\
    \ = roundFromClosest.toInt\n        val roundToClosestIntInt = roundToClosestInt.toInt\n\
    \        val roundFromClosestIntInt = roundFromClosestIntInt.toInt\n        val\
    \ roundToClosestIntIntInt = roundToClosestIntInt.toInt\n        val roundFromClosestIntIntInt\
    \ = roundFromClosestIntIntInt.toInt\n        val roundToClosestIntIntIntInt =\
    \ roundToClosestIntIntInt.toInt\n        val roundFromClosestIntIntIntInt = roundFromClosestIntIntIntInt.toInt\n\
    \        val roundToClosestIntIntIntIntInt = roundToClosestIntIntIntInt.toInt\n\
    \        val roundFromClosestIntIntIntIntInt = roundFromClosestIntIntIntIntInt.toInt\n\
    \        val roundToClosestIntIntIntIntIntInt = roundToClosestIntIntIntIntInt.toInt\n\
    \        val roundFromClosestIntIntIntIntIntInt = roundFromClosestIntIntIntIntIntInt.toInt\n\
    \        val roundToClosestIntIntIntIntIntIntInt = roundToClosestIntIntIntIntIntInt.toInt\n\
    \        val roundFromClosestIntIntIntIntIntIntInt = roundFromClosestIntIntIntIntIntInt.toInt\n\
    \        val roundToClosestIntIntIntIntIntIntIntInt = roundToClosestIntIntIntIntIntIntIntInt.toInt\n\
    \        val roundFromClosestIntIntIntIntIntIntIntIntInt = roundFromClosestIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val roundToClosestIntIntIntIntIntIntIntIntIntInt = roundToClosestIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val roundFromClosestIntIntIntIntIntIntIntIntIntIntInt = roundFrom\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1krqr6st.scala:29:37 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mroundFromClosestIntInt\e\
    [0m = roundFromClosestIntInt.toInt\n\e[31m\e[31m   |\e[0m                    \
    \                 ^\e[0m\n\e[31m   |\e[0m                       Recursive \e[33mvalue\e\
    [0m \e[35mroundFromClosestIntInt\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp1krqr6st.scala:31:40 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mroundFromClosestIntIntInt\e\
    [0m = roundFromClosestIntIntInt.toInt\n\e[31m\e[31m   |\e[0m                 \
    \                       ^\e[0m\n\e[31m   |\e[0m                    Recursive \e\
    [33mvalue\e[0m \e[35mroundFromClosestIntIntInt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1krqr6st.scala:33:43 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mroundFromClosestIntIntIntInt\e\
    [0m = roundFromClosestIntIntIntInt.toInt\n\e[31m\e[31m   |\e[0m              \
    \                             ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mroundFromClosestIntIntIntInt\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1krqr6st.scala:35:46 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mroundFromClosestIntIntIntIntInt\e\
    [0m = roundFromClosestIntIntIntIntInt.toInt\n\e[31m\e[31m   |\e[0m           \
    \                                   ^\e[0m\n\e[31m   |\e[0m              Recursive\
    \ \e[33mvalue\e[0m \e[35mroundFromClosestIntIntIntIntInt\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1krqr6st.scala:37:49 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mroundFromClosestIntIntIntIntIntInt\e\
    [0m = roundFromClosestInt"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val closest = (numbers(0), numbers(0))\n\
    \        val difference = numbers(0) - numbers(1)\n        val difference2 = numbers(0)\
    \ - numbers(2)\n        val difference3 = numbers(0) - numbers(3)\n        val\
    \ difference4 = numbers(0) - numbers(4)\n        val difference5 = numbers(0)\
    \ - numbers(5)\n        val difference6 = numbers(0) - numbers(6)\n        val\
    \ difference7 = numbers(0) - numbers(7)\n        val difference8 = numbers(0)\
    \ - numbers(8)\n        val difference9 = numbers(0) - numbers(9)\n        val\
    \ difference10 = numbers(0) - numbers(10)\n        val difference11 = numbers(0)\
    \ - numbers(11)\n        val difference12 = numbers(0) - numbers(12)\n       \
    \ val difference13 = numbers(0) - numbers(13)\n        val difference14 = numbers(0)\
    \ - numbers(14)\n        val difference15 = numbers(0) - numbers(15)\n       \
    \ val difference16 = numbers(0) - numbers(16)\n        val difference17 = numbers(0)\
    \ - numbers(17)\n        val difference18 = numbers(0) - numbers(18)\n       \
    \ val difference19 = numbers(0) - numbers(19)\n        val difference20 = numbers(0)\
    \ - numbers(20)\n        val difference21 = numbers(0) - numbers(21)\n       \
    \ val difference22 = numbers(0) - numbers(22)\n        val difference23 = numbers(0)\
    \ - numbers(23)\n        val difference24 = numbers(0) - numbers(24)\n       \
    \ val difference25 = numbers(0) - numbers(25)\n        val difference26 = numbers(0)\
    \ - numbers(26)\n        val difference27 = numbers(0) - numbers(27)\n       \
    \ val difference28 = numbers(0) - numbers(28)\n        val difference29 = numbers(0)\
    \ - numbers(29)\n        val difference30 = numbers(0) - numbers(30)\n       \
    \ val difference31 = numbers(0) - numbers(31)\n        val difference32 = numbers(0)\
    \ - numbers(32)\n        val difference33 = numbers(0) - numbers(33)\n       \
    \ val difference34 = numbers(0) - numbers(34)\n        val difference35 = numbers(0)\
    \ - numbers(35)\n        val difference36 = numbers(0) - numbers(36)\n       \
    \ val difference37 = numbers(0) - numbers(37)\n        val difference38 = number\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4r11tz8o.scala:57:27 ------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[36mdifference38\e[0m = number\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                          Not found: number\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4r11tz8o.scala:58:5 ---------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\");\n        val first = parts(0).toLong;\n        val second\
    \ = parts(1).toLong;\n        val difference = second - first;\n        if (difference\
    \ < 0)\n            second + difference\n        else\n            first + difference\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmpbhu27znt.scala:20)\n\tat Problem$.main(tmpbhu27znt.scala:28)\n\
    \tat Problem.main(tmpbhu27znt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intValueAsLong = intValue.asInstanceOf[Long]\n\
    \        val intValueAsDouble = intValue.asInstanceOf[Double]\n        val intValueAsFloat\
    \ = intValue.asInstanceOf[Float]\n        val intValueAsInt = intValue.asInstanceOf[Int]\n\
    \        val intValueAsShort = intValue.asInstanceOf[Short]\n        val intValueAsByte\
    \ = intValue.asInstanceOf[Byte]\n        val intValueAsChar = intValue.asInstanceOf[Char]\n\
    \        val intValueAsBoolean = intValue.asInstanceOf[Boolean]\n        val intValueAsLongLong\
    \ = intValue.asInstanceOf[LongLong]\n        val intValueAsDoubleDouble = intValue.asInstanceOf[DoubleDouble]\n\
    \        val intValueAsFloatFloat = intValue.asInstanceOf[FloatFloat]\n      \
    \  val intValueAsIntInt = intValue.asInstanceOf[IntInt]\n        val intValueAsShortShort\
    \ = intValue.asInstanceOf[ShortShort]\n        val intValueAsByteByte = intValue.asInstanceOf[ByteByte]\n\
    \        val intValueAsCharChar = intValue.asInstanceOf[CharChar]\n        val\
    \ intValueAsBooleanBoolean = intValue.asInstanceOf[BooleanBoolean]\n        val\
    \ intValueAsLongLongLong = intValue.asInstanceOf[LongLongLong]\n        val intValueAsDoubleDoubleDouble\
    \ = intValue.asInstanceOf[DoubleDoubleDouble]\n        val intValueAsFloatFloatFloat\
    \ = intValue.asInstanceOf[FloatFloatFloat]\n        val intValueAsIntIntInt =\
    \ intValue.asInstanceOf[IntIntInt]\n        val intValueAsShortShortShort = intValue.asInstanceOf[ShortShortShort]\n\
    \        val intValueAsByteByteByte = intValue.asInstanceOf[ByteByteByte]\n  \
    \      val intValueAsCharCharChar = intValue.asInstanceOf[CharCharChar]\n    \
    \    val intValueAsBooleanBooleanBoolean = intValue.asInstanceOf[BooleanBooleanBoolean]\n\
    \        val intValueAsLongLongLongLong = intValue.asInstanceOf[LongLongLongLong]\n\
    \        val intValueAsDoubleDoubleDoubleDouble = intValue.asInstanceOf[DoubleDoubleDoubleDouble]\n\
    \        val intValueAsFloatFloatFloatFloat = intValue.asInstanceOf[FloatFloatFloatFloat]\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp6e2njdxe.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6e2njdxe.scala:27:55 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mintValueAsLongLong\e[0m\
    \ = intValue.asInstanceOf[\e[35mLongLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                                               ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                Not found: type LongLong\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6e2njdxe.scala:28:59\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mintValueAsDoubleDouble\e[0m = intValue.asInstanceOf[\e[35mDoubleDouble\e[0m]\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \     Not found: type DoubleDouble\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6e2njdxe.scala:29:57 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mval\e[0m \e[36mintValueAsFloatFloat\e[0m = intValue.asInstanceOf[\e\
    [35mFloatFloat\e[0m]\n\e[31m\e[31m   |\e[0m                                  \
    \                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                         Not found: type FloatFloat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6e2njdxe.scala:30:53 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mintValueAsIntInt\e[0m =\
    \ intValue.asInstanceOf[\e[35mIntInt\e[0m]\n\e[31m\e[31m   |\e[0m            \
    \                                         ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                "
  stdout: ''
  timestamp: 1659805546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val diff = max - min\n        val\
    \ closest = (diff + min) / 2\n        math.round(closest)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_539s1wv.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_539s1wv.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val difference = largest - smallest\n\
    \        val roundTo = difference < 0 ? largest : smallest\n        roundTo.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3ycw09xy.scala:19:28 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3ycw09xy.scala:20:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mlargest\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ycw09xy.scala:22:49 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mroundTo\e[0m = difference\
    \ < \e[31m0\e[0m ? largest : \e[35msmallest\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                             Not found: type smallest\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\").map(_.toLong)\n        val min = parts.min\n        val\
    \ max = parts.max\n        val diff = max - min\n        val closest = (min +\
    \ diff) / 2\n        val difference = parts.map(_.toLong).map(_.toLong - closest)\n\
    \        val difference = difference.min(difference)\n        val difference =\
    \ difference.max(difference)\n        val difference = difference.min(difference)\n\
    \        val difference = difference.max(difference)\n        val difference =\
    \ difference.min(difference)\n        val difference = difference.max(difference)\n\
    \        val difference = difference.min(difference)\n        val difference =\
    \ difference.max(difference)\n        val difference = difference.min(difference)\n\
    \        val difference = difference.max(difference)\n        val difference =\
    \ difference.min(difference)\n        val difference = difference.max(difference)\n\
    \        val difference = difference.min(difference)\n        val difference =\
    \ difference.max(difference)\n        val difference = difference.min(difference)\n\
    \        val difference = difference.max(difference)\n        val difference =\
    \ difference.min(difference)\n        val difference = difference.max(difference)\n\
    \        val difference = difference.min(difference)\n        val difference =\
    \ difference.max(difference)\n        val difference = difference.min(difference)\n\
    \        val difference = difference.max(difference)\n        val difference =\
    \ difference.min(difference)\n        val difference = difference.max(difference)\n\
    \        val difference = difference.min(difference)\n        val difference =\
    \ difference.max(difference)\n        val difference = difference.min(difference)\n\
    \        val difference = difference.max(difference)\n        val difference =\
    \ difference.min(difference)\n        val difference = difference.max(difference)\n\
    \        val difference = difference.min(difference)\n        val difference =\
    \ difference.max(difference)\n        val difference = difference.min(difference)\n\
    \        val difference = difference.max(difference)\n        val difference =\
    \ difference.min(difference)\n        val difference = difference.max(difference)\n\
    \        val difference = difference.min(difference)\n        val difference =\
    \ difference.max(difference)\n        val difference = difference.min(difference)\n\
    \        val difference = difference.max(difference)\n        val difference =\
    \ difference.min(difference)\n        val difference = difference.max(difference)\n\
    \        val difference = difference.min(difference)\n        val difference =\
    \ difference.max(difference)\n        val difference = difference.min(difference)\n\
    \        val difference = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpc49o4loe.scala:69:24 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36mdifference\e[0m = \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpc49o4loe.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdifference\e[0m = difference.min(difference)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdifference is already defined as \e[33mvalue\e[0m \e[35mdifference\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc49o4loe.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mdifference\e[0m = difference.max(difference)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdifference is already defined as \e[33mvalue\e[0m \e[35mdifference\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc49o4loe.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mdifference\e[0m = difference.min(difference)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdifference is already defined as \e[33mvalue\e[0m \e[35mdifference\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc49o4loe.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdifference\e[0m = difference.max(difference)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdifference is already defined as \e[33mvalu"
  stdout: ''
  timestamp: 1660010187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val difference = largest - smallest\n\
    \        val roundTowardZero = difference < 0 ? largest : smallest\n        roundTowardZero\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbtv4m3rt.scala:19:28 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbtv4m3rt.scala:20:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mlargest\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbtv4m3rt.scala:22:57 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mroundTowardZero\e[0m = difference\
    \ < \e[31m0\e[0m ? largest : \e[35msmallest\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                Not found: type smallest\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val difference = largest - smallest\n\
    \        val closestToZero = math.round(difference / 2)\n        val closestToOne\
    \ = math.round(difference / 2)\n        val closestToTwo = math.round(difference\
    \ / 2)\n        val closestToThree = math.round(difference / 2)\n        val closestToFour\
    \ = math.round(difference / 2)\n        val closestToFive = math.round(difference\
    \ / 2)\n        val closestToSix = math.round(difference / 2)\n        val closestToSeven\
    \ = math.round(difference / 2)\n        val closestToEight = math.round(difference\
    \ / 2)\n        val closestToNine = math.round(difference / 2)\n        val closestToTen\
    \ = math.round(difference / 2)\n        val closestToEleven = math.round(difference\
    \ / 2)\n        val closestToTwelve = math.round(difference / 2)\n        val\
    \ closestToThirteen = math.round(difference / 2)\n        val closestToFourteen\
    \ = math.round(difference / 2)\n        val closestToFifteen = math.round(difference\
    \ / 2)\n        val closestToSixteen = math.round(difference / 2)\n        val\
    \ closestToSeventeen = math.round(difference / 2)\n        val closestToEighteen\
    \ = math.round(difference / 2)\n        val closestToNineteen = math.round(difference\
    \ / 2)\n        val closestToTwenty = math.round(difference / 2)\n        val\
    \ closestToTwentyOne = math.round(difference / 2)\n        val closestToTwentyTwo\
    \ = math.round(difference / 2)\n        val closestToTwentyThree = math.round(difference\
    \ / 2)\n        val closestToTwentyFour = math.round(difference / 2)\n       \
    \ val closestToTwentyFive = math.round(difference / 2)\n        val closestToTwentySix\
    \ = math.round(difference / 2)\n        val closestToTwentySeven = math.round(difference\
    \ / 2)\n        val closestToTwentyEight = math.round(difference / 2)\n      \
    \  val closestToTwentyNine = math.round(difference / 2)\n        val closestToTwentyTen\
    \ = math.round(difference / 2)\n        val closestToTwentyEleven = math.round(difference\
    \ / 2)\n        val closestToTwentyTwelve = math.round(difference / 2)\n     \
    \   val closestToTwentyThirteen = math.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfsp1h8a_.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpfsp1h8a_.scala:19:28 -----------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = math.min(numbers)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpfsp1h8a_.scala:20:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mlargest\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfsp1h8a_.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val nums = List(-num.toLong, num.toLong)\n        val diffs = nums.map(x\
    \ => (x - num).abs)\n        val min = diffs.min\n        val max = diffs.max\n\
    \        if (min < max) {\n            val mid = diffs.size / 2\n            val\
    \ midVal = nums(mid)\n            if (midVal < num) mid\n            else -mid\n\
    \        } else {\n            num\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxys2ew_0.scala:33)\n\tat Problem.main(tmpxys2ew_0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val difference = abs(intValue - intValue)\n        val\
    \ closestInteger = intValue + difference\n        closestInteger\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"14.5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.closestInteger(tmpt9_iev2s.scala:18)\n\
    \tat Problem$.main(tmpt9_iev2s.scala:25)\n\tat Problem.main(tmpt9_iev2s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = max - min\n        val closest\
    \ = (diff + min) / 2\n        math.round(closest)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpckmr6_60.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpckmr6_60.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.trim().toInt\n        val intArray = intValue.toString.split(\"\\\\\
    .\").map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpewhcvfwb.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpewhcvfwb.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpewhcvfwb.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpewhcvfwb.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpewhcvfwb.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // split on decimal point\n        val intParts = parts.map(_.toInt)\
    \ // convert each part to int\n        val diffs = intParts.zip(intParts).map\
    \ { case (a, b) => math.abs(a - b) } // find differences between each pair of\
    \ parts\n        val maxDiff = diffs.max  // find the max difference\n       \
    \ val closestPart = diffs.find(diff => diff == maxDiff) // find the part with\
    \ the max difference\n        val closestInteger = intParts.find(part => part\
    \ == closestPart) // find the integer part that matches the closest part\n   \
    \     closestInteger.toLong // return the closest integer\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkw7wkv90.scala:23:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclosestInteger\e[0m = intParts.find(\e\
    [36mpart\e[0m => part == closestPart) \e[34m// find the integer part that matches\
    \ the closest part\e[0m\n\e[31m\e[31m   |\e[0m                               \
    \                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    Values of types\
    \ Int and Option[Int] cannot be compared with == or !=\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpkw7wkv90.scala:24:23 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        closestInteger.toLong \e[34m// return the closest\
    \ integer\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toLong is not a member of Option[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intValueAsLong = intValue.asInstanceOf[Long]\n\
    \        val intValueAsString = intValue.asInstanceOf[String]\n        val intValueAsInt\
    \ = intValue.asInstanceOf[Int]\n        val intValueAsDouble = intValue.asInstanceOf[Double]\n\
    \        val intValueAsFloat = intValue.asInstanceOf[Float]\n        val intValueAsBigDecimal\
    \ = intValue.asInstanceOf[BigDecimal]\n        val intValueAsBigInteger = intValue.asInstanceOf[BigInteger]\n\
    \        val intValueAsBoolean = intValue.asInstanceOf[Boolean]\n        val intValueAsChar\
    \ = intValue.asInstanceOf[Char]\n        val intValueAsByte = intValue.asInstanceOf[Byte]\n\
    \        val intValueAsShort = intValue.asInstanceOf[Short]\n        val intValueAsBytes\
    \ = intValue.asInstanceOf[Bytes]\n        val intValueAsArray = intValue.asInstanceOf[Array[Byte]]\n\
    \        val intValueAsArrayOfByte = intValue.asInstanceOf[Array[Byte]]\n    \
    \    val intValueAsArrayOfShort = intValue.asInstanceOf[Array[Short]]\n      \
    \  val intValueAsArrayOfInt = intValue.asInstanceOf[Array[Int]]\n        val intValueAsArrayOfLong\
    \ = intValue.asInstanceOf[Array[Long]]\n        val intValueAsArrayOfFloat = intValue.asInstanceOf[Array[Float]]\n\
    \        val intValueAsArrayOfDouble = intValue.asInstanceOf[Array[Double]]\n\
    \        val intValueAsArrayOfBigDecimal = intValue.asInstanceOf[Array[BigDecimal]]\n\
    \        val intValueAsArrayOfBigInteger = intValue.asInstanceOf[Array[BigInteger]]\n\
    \        val intValueAsArrayOfBoolean = intValue.asInstanceOf[Array[Boolean]]\n\
    \        val intValueAsArrayOfChar = intValue.asInstanceOf[Array[Char]]\n    \
    \    val intValueAsArrayOfByte = intValue.asInstanceOf[Array[Byte]]\n        val\
    \ intValueAsArrayOfShort = intValue.asInstanceOf[Array[Short]]\n        val intValueAsArrayOfInt\
    \ = intValue.asInstanceOf[Array[Int]]\n        val intValueAsArrayOfLong = intValue.asInstanceOf[Array[Long]]\n\
    \        val int\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptvl65reg.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptvl65reg.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintValueAsArrayOfByte\e[0m = intValue.asInstanceOf[\e[35mArray\e[0m[\e\
    [35mByte\e[0m]]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintValueAsArrayOfByte is already defined as \e[33mvalue\e\
    [0m \e[35mintValueAsArrayOfByte\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptvl65reg.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mintValueAsArrayOfShort\e\
    [0m = intValue.asInstanceOf[\e[35mArray\e[0m[\e[35mShort\e[0m]]\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintValueAsArrayOfShort is already defined as \e[33mvalue\e\
    [0m \e[35mintValueAsArrayOfShort\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptvl65reg.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mintValueAsArrayOfInt\e[0m\
    \ = intValue.asInstanceOf[\e[35mArray\e[0m[\e[35mInt\e[0m]]\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mintValueAsArrayOfInt is already defined as \e[33mvalue\e[0m \e\
    [35mintValueAsArrayOfInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptvl65reg.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mintValueAsArrayOfLong\e\
    [0m = intValue.asInstanceOf[\e[35mArray\e[0m[\e[35mLong\e[0m]]\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2ayn_syd.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ayn_syd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toLong\n        val intArray = intValue.toString.split(\"\\\\.\").map(_.toInt)\n\
    \        val intArrayLength = intArray.length\n        val intArraySum = intArray.sum\n\
    \        val intArrayDiff = intArraySum - intArray(0)\n        val intArrayDiffLength\
    \ = intArrayDiff.length\n        val intArrayDiffSum = intArrayDiff.sum\n    \
    \    val intArrayDiffSumLength = intArrayDiffSum.length\n        val intArrayDiffSumLength2\
    \ = intArrayDiffSumLength * intArrayDiffLength\n        val intArrayDiffSumLength3\
    \ = intArrayDiffSumLength2 * intArrayDiffLength\n        val intArrayDiffSumLength4\
    \ = intArrayDiffSumLength3 * intArrayDiffLength\n        val intArrayDiffSumLength5\
    \ = intArrayDiffSumLength4 * intArrayDiffLength\n        val intArrayDiffSumLength6\
    \ = intArrayDiffSumLength5 * intArrayDiffLength\n        val intArrayDiffSumLength7\
    \ = intArrayDiffSumLength6 * intArrayDiffLength\n        val intArrayDiffSumLength8\
    \ = intArrayDiffSumLength7 * intArrayDiffLength\n        val intArrayDiffSumLength9\
    \ = intArrayDiffSumLength8 * intArrayDiffLength\n        val intArrayDiffSumLength10\
    \ = intArrayDiffSumLength9 * intArrayDiffLength\n        val intArrayDiffSumLength11\
    \ = intArrayDiffSumLength10 * intArrayDiffLength\n        val intArrayDiffSumLength12\
    \ = intArrayDiffSumLength11 * intArrayDiffLength\n        val intArrayDiffSumLength13\
    \ = intArrayDiffSumLength12 * intArrayDiffLength\n        val intArrayDiffSumLength14\
    \ = intArrayDiffSumLength13 * intArrayDiffLength\n        val intArrayDiffSumLength15\
    \ = intArrayDiffSumLength14 * intArrayDiffLength\n        val intArrayDiffSumLength16\
    \ = intArrayDiffSumLength15 * intArrayDiffLength\n        val intArrayDiffSumLength17\
    \ = intArrayDiffSumLength16 * intArrayDiffLength\n        val intArrayDiffSumLength18\
    \ = intArrayDiffSumLength17 * intArrayDiffLength\n        val intArrayDiffSumLength19\
    \ = intArrayDiffSumLength18 * intArrayDiffLength\n        val intArrayDiffSumLength20\
    \ = intArrayDiffSumLength19 * intArrayDiffLength\n        val intArrayDiffSumLength21\
    \ = intArrayDiffSumLength20 * intArrayDiffLength\n        val intArrayDiffSumLength22\
    \ = intArrayDiffSumLength\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdont9e8g.scala:23:46 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayDiffLength\e[0m\
    \ = intArrayDiff.length\n\e[31m\e[31m   |\e[0m                               \
    \  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ length is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdont9e8g.scala:24:43\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mintArrayDiffSum\e[0m = intArrayDiff.sum\n\e[31m\e[31m   |\e[0m           \
    \                   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \           value sum is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdont9e8g.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // split on decimal point\n        val intPart = parts(0)\n\
    \        val fractionPart = parts(1)\n        val intPartAsLong = intPart.toLong\n\
    \        val fractionPartAsLong = fractionPart.toLong\n        val diff = (intPartAsLong\
    \ - fractionPartAsLong)\n        if (diff < 0)\n            diff*-1\n        else\n\
    \            diff\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptkif_ie_.scala:25:16 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            diff*-\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value *- is not a member\
    \ of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // Split value into integer and fractional part\n   \
    \     val fractionalPart = parts(1).toLong // Get fractional part\n        val\
    \ integerPart = parts(0).toLong // Get integer part\n        val fractionalDiff\
    \ = fractionalPart - integerPart // Calculate difference between fractional and\
    \ integer parts\n        val integerDiff = integerPart - fractionalPart // Calculate\
    \ difference between integer and fractional parts\n        val diff = Math.abs(fractionalDiff)\
    \ // Calculate absolute difference between fractional and integer parts\n    \
    \    val closestDiff = Math.abs(diff) //Calculate absolute difference between\
    \ fractional and integer parts\n        val closestDiffInt = closestDiff / integerDiff\
    \ // Calculate integer part closest to fractional part\n        val closestDiffFractional\
    \ = closestDiff - closestDiffInt * integerDiff // Calculate fractional part closest\
    \ to integer part\n        val closestDiffFractionalInt = closestDiffFractional\
    \ / integerDiff // Calculate integer part closest to fractional part\n       \
    \ val closestDiffFractionalFractional = closestDiffFractional - closestDiffInt\
    \ * integerDiff // Calculate fractional part closest to integer part\n       \
    \ val closestDiffFractionalFractionalInt = closestDiffFractionalFractional / integerDiff\
    \ // Calculate integer part closest to fractional part\n        val closestDiffFractionalFractionalFractional\
    \ = closestDiffFractionalFractional - closestDiffInt * integerDiff // Calculate\
    \ fractional part closest to integer part\n        val closestDiffFractionalFractionalFractionalInt\
    \ = closestDiffFractionalFractionalFractional / integerDiff // Calculate integer\
    \ part closest to fractional part\n        val closestDiffFractionalFractionalFractionalFractional\
    \ = closestDiffFractionalFractionalFractional - closestDiffInt * integerDiff //\
    \ Calculate fractional part closest to integer part\n        val closestDiffFractionalFractionalFractionalFractionalInt\
    \ = closestDiffFractionalFractionalFractionalFractional / integerDiff // Calculate\
    \ integer part closest to fractional part\n        val closestDiffFractionalFractionalFractionalFractionalFractional\
    \ = closestDiffFractionalFractionalFractionalFractionalInt * integerDiff // Calculate\
    \ fractional part closest to integer part\n        val closestDiffFractionalFractionalFractionalFractionalFractionalInt\
    \ = closestDiffFractionalFractionalFractionalFractionalFractional / integerDiff\
    \ // Calculate integer part closest to fractional part\n        val closestDiffFractionalFractionalFractionalFractionalFractionalFractional\
    \ = closestDiffFractionalFraction\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa2a1m8ea.scala:36:86 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mclosestDiffFractionalFractionalFractionalFractionalFractionalFractional\e\
    [0m = closestDiffFractionalFraction\n\e[31m\e[31m   |\e[0m                   \
    \                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: closestDiffFractionalFraction\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa2a1m8ea.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // split into two parts\n        val part1 = parts(0).toLong\
    \ // first part\n        val part2 = parts(1).toLong // second part\n        val\
    \ diff = (part1 - part2) // difference between first and second parts\n      \
    \  val closest = (diff + part2) % part2 // closest part\n        closest.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmpsc3tilrh.scala:20)\n\tat Problem$.main(tmpsc3tilrh.scala:26)\n\
    \tat Problem.main(tmpsc3tilrh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val diff = max - min\n        val\
    \ closest = (diff == 0) ? min : min + (diff / 2)\n        closest.toLong\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpigp2bt_2.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpigp2bt_2.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpigp2bt_2.scala:22:46 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclosest\e[0m = (diff ==\
    \ \e[31m0\e[0m) ? min : \e[35mmin\e[0m \e[35m+\e[0m (\e[35mdiff\e[0m \e[35m/\e\
    [0m \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \  Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val difference = numbers.zip(numbers.tail).map\
    \ { case (first, second) => first - second }\n        val differences = difference.takeWhile(difference\
    \ > 0).drop(1)\n        val difference = differences.max\n        val closestInteger\
    \ = difference + numbers.head\n        closestInteger\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdmzw8v4s.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdifference\e[0m = differences.max\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdifference is already defined as \e[33mvalue\e[0m \e[35mdifference\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpdmzw8v4s.scala:20:58 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mdifferences\e[0m = difference.takeWhile(difference\
    \ > \e[31m0\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not\
    \ a member of Array[Int], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdmzw8v4s.scala:22:40 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclosestInteger\e[0m = difference\
    \ + numbers.head\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Array[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660010193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intValueAsLong = intValue.asInstanceOf[Long]\n\
    \        val intValueAsDouble = intValue.asInstanceOf[Double]\n        val intValueAsInt\
    \ = intValue.asInstanceOf[Int]\n        val intValueAsFloat = intValue.asInstanceOf[Float]\n\
    \        val intValueAsChar = intValue.asInstanceOf[Char]\n        val intValueAsBoolean\
    \ = intValue.asInstanceOf[Boolean]\n        val intValueAsString = intValue.asInstanceOf[String]\n\
    \        val intValueAsArray = intValue.asInstanceOf[Array[String]]\n        val\
    \ intValueAsMap = intValue.asInstanceOf[Map[String, String]]\n        val intValueAsSeq\
    \ = intValue.asInstanceOf[Seq[String]]\n        val intValueAsSet = intValue.asInstanceOf[Set[String]]\n\
    \        val intValueAsMap = intValue.asInstanceOf[Map[String, String]]\n    \
    \    val intValueAsSeq = intValue.asInstanceOf[Seq[String]]\n        val intValueAsSet\
    \ = intValue.asInstanceOf[Set[String]]\n        val intValueAsMap = intValue.asInstanceOf[Map[String,\
    \ String]]\n        val intValueAsSeq = intValue.asInstanceOf[Seq[String]]\n \
    \       val intValueAsSet = intValue.asInstanceOf[Set[String]]\n        val intValueAsMap\
    \ = intValue.asInstanceOf[Map[String, String]]\n        val intValueAsSeq = intValue.asInstanceOf[Seq[String]]\n\
    \        val intValueAsSet = intValue.asInstanceOf[Set[String]]\n        val intValueAsMap\
    \ = intValue.asInstanceOf[Map[String, String]]\n        val intValueAsSeq = intValue.asInstanceOf[Seq[String]]\n\
    \        val intValueAsSet = intValue.asInstanceOf[Set[String]]\n        val intValueAsMap\
    \ = intValue.asInstanceOf[Map[String, String]]\n        val intValueAsSeq = intValue.asInstanceOf[Seq[String]]\n\
    \        val intValueAsSet = intValue.asInstanceOf[Set[String]]\n        val intValueAsMap\
    \ = intValue.asInstanceOf[Map[String, String]]\n        val intValueAsSeq = intValue.asInstanceOf[Seq[String]]\n\
    \        val intValueAsSet = intValue.asInstanceOf[Set[String]]\n\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvjazaqch.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mintValueAsMap\e[0m = intValue.asInstanceOf[\e\
    [35mMap\e[0m[\e[35mString\e[0m, \e[35mString\e[0m]]\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mintValueAsMap is already defined as \e[33mvalue\e[0m \e[35mintValueAsMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvjazaqch.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mintValueAsSeq\e[0m = intValue.asInstanceOf[\e\
    [35mSeq\e[0m[\e[35mString\e[0m]]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintValueAsSeq is already defined as \e[33mvalue\e[0m \e[35mintValueAsSeq\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvjazaqch.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mintValueAsSet\e[0m = intValue.asInstanceOf[\e\
    [35mSet\e[0m[\e[35mString\e[0m]]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintValueAsSet is already defined as \e[33mvalue\e[0m \e[35mintValueAsSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvjazaqch.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mintValueAsMap\e[0m = intValue.asInstanceOf[\e\
    [35mMap\e[0m[\e[35mString\e[0m, \e[35mString\e[0m]]\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mintValueAsMap is already defined as \e[33mvalue\e[0m \e[35mintValueAsMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel defini"
  stdout: ''
  timestamp: 1660010191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = max - min\n\
    \        val closest = (diff + min) / 2\n        math.round(closest)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8bbt9uxs.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toDouble))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Double])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8bbt9uxs.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toDouble))\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Double])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").toList\n        val firstNumber = numbers.head.toLong\n\
    \        val secondNumber = numbers.last.toLong\n        val difference = secondNumber\
    \ - firstNumber\n        val differenceAbs = Math.abs(difference)\n        val\
    \ closestInteger = firstNumber + differenceAbs\n        closestInteger\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp861gp1lh.scala:28)\n\tat Problem.main(tmp861gp1lh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // split into two parts, one before the decimal and one\
    \ after\n        val before = parts(0)\n        val after = parts(1)\n       \
    \ val beforeInt = before.toInt\n        val afterInt = after.toInt\n        val\
    \ diff = Math.abs(afterInt - beforeInt)\n        val closest = (diff + beforeInt)\
    \ / 2\n        closest.toLong\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmp2e9i_ord.scala:20)\n\tat Problem$.main(tmp2e9i_ord.scala:28)\n\
    \tat Problem.main(tmp2e9i_ord.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010193
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").toList\n        val ints = numbers.map(_.toInt)\n \
    \       val min = ints.min\n        val max = ints.max\n        val diff = (max\
    \ - min) + 1\n        val closest = (min + diff) / 2\n        closest.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprkky_g9o.scala:27)\n\tat Problem.main(tmprkky_g9o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val intArray = intValue.toString.split(\"\\\\.\").map(_.toInt)\n\
    \        val intArrayLength = intArray.length\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArray\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8mr3wl6u.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8mr3wl6u.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8mr3wl6u.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8mr3wl6u.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8mr3wl6u.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659805549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2ayn_syd.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ayn_syd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val intValues = List(intValue)\n        val diffs = intValues.map(x\
    \ => Math.abs(x - intValue))\n        val maxDiff = diffs.max\n        val closestDiff\
    \ = diffs.min\n        if (maxDiff < 1) {\n            intValue\n        } else\
    \ {\n            intValue + closestDiff\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"14.5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.closestInteger(tmpmvfr67c2.scala:18)\n\
    \tat Problem$.main(tmpmvfr67c2.scala:31)\n\tat Problem.main(tmpmvfr67c2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.asInstanceOf[String]\n\
    \        val numAsLong = num.toLong\n        val numAsDouble = num.toDouble\n\
    \        val numAsInt = num.toInt\n        val numAsLongs = num.split(\"\\\\.\"\
    ).map(_.toLong)\n        val numAsDoubles = num.split(\"\\\\.\").map(_.toDouble)\n\
    \        val numAsInts = num.split(\"\\\\.\").map(_.toInt)\n        val numAsLongsOrDoubles\
    \ = num.split(\"\\\\.\").map(_.toLongOrDouble)\n        val numAsDoublesOrInts\
    \ = num.split(\"\\\\.\").map(_.toDoubleOrInt)\n        val numAsLongsOrDoublesOrInts\
    \ = num.split(\"\\\\.\").map(_.toLongOrDoubleOrInt)\n        val numAsLongsOrDoublesOrIntsOrDoubles\
    \ = num.split(\"\\\\.\").map(_.toLongOrDoubleOrIntOrDouble)\n        val numAsLongsOrDoublesOrIntsOrDoublesOrInts\
    \ = num.split(\"\\\\.\").map(_.toLongOrDoubleOrIntOrDoubleOrInt)\n        val\
    \ numAsLongsOrDoublesOrIntsOrDoublesOrIntsOrDoubles = num.split(\"\\\\.\").map(_.toLongOrDoubleOrIntOrDoubleOrIntOrDouble)\n\
    \        val numAsLongsOrDoublesOrIntsOrDoublesOrIntsOrDoublesOrInts = num.split(\"\
    \\\\.\").map(_.toLongOrDoubleOrIntOrDoubleOrIntOrDoubleOrInt)\n        val numAsLongsOrDoublesOrIntsOrDoublesOrIntsOrDoublesOrIntsOrDoubles\
    \ = num.split(\"\\\\.\").map(_.toLongOrDoubleOrIntOrDoubleOrIntOrDoubleOrIntOrDouble)\n\
    \        val numAsLongsOrDoublesOrIntsOrDoublesOrIntsOrDoublesOrIntsOrDoublesOrInts\
    \ = num.split(\"\\\\.\").map(_.toLongOrDoubleOrIntOrDoubleOrIntOrDoubleOrIntOrDoubleOrIntOrDouble)\n\
    \        val numAsLongsOrDoublesOrIntsOrDoublesOrIntsOrDoublesOrIntsOrDoublesOrIntsOrDoublesOrInts\
    \ = num.split(\"\\\\.\").map(_.toLongOrDoubleOrIntOrDoubleOrIntOrDoubleOrIntOrDoubleOrIntOrDoubleOrIntOrDouble)\n\
    \        val numAsLongsOrDoublesOrIn\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpydlsai0g.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpydlsai0g.scala:25:57\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mnumAsLongsOrDoubles\e[0m = num.split(\e[31m\"\\\\.\"\e[0m).map(_.toLongOrDouble)\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value toLongOrDouble is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpydlsai0g.scala:25:72 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnumAsLongsOrDoubles\e[0m\
    \ = num.split(\e[31m\"\\\\.\"\e[0m).map(_.toLongOrDouble)\n\e[31m\e[31m   |\e\
    [0m                                                                        ^\e\
    [0m\n\e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpydlsai0g.scala:26:56 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36mnumAsDoublesOrInts\e[0m = num.split(\e[31m\"\\\
    \\.\"\e[0m).map(_.toDoubleOrInt)\n\e[31m\e[31m   |\e[0m                      \
    \                                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                    value toDoubleOrInt is not a member of String\n\e[31m\e[31m--\
    \ Error: /tmp/tmpydlsai0g.scala:26:70 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnumAsDoublesOrInts\e[0m\
    \ = num.split(\e[31m\"\\\\.\"\e[0m).map(_.toDoubleOrInt)\n\e[31m\e[31m   |\e[0m\
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpydlsai0g.scala:27:63 ------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1660010197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = parts.min\n        val\
    \ max = parts.max\n        val diff = max - min\n        val closest = (min +\
    \ diff) / 2\n        if (closest == min) {\n            min\n        } else {\n\
    \            closest\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqca48808.scala:30)\n\tat Problem.main(tmpqca48808.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toLong))\n\
    \        val max = math.max(nums.map(_.toLong))\n        val diff = max - min\n\
    \        if (diff < 0)\n            min - diff\n        else\n            max\
    \ + diff\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8tb77hb0.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toLong))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Long])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8tb77hb0.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toLong))\n\e[31m\e[31m   |\e[0m     \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Long])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2ayn_syd.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ayn_syd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intValueAsLong = intValue.asInstanceOf[Long]\n\
    \        val intValueAsDouble = intValue.asInstanceOf[Double]\n        val intValueAsFloat\
    \ = intValue.asInstanceOf[Float]\n        val intValueAsBigDecimal = intValue.asInstanceOf[BigDecimal]\n\
    \        val intValueAsBigInteger = intValue.asInstanceOf[BigInteger]\n      \
    \  val intValueAsString = intValue.asInstanceOf[String]\n        val intValueAsArray\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfString\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfStrings\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfStringsOfString\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfStringsOfStrings\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfStringsOfStringsOfString\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfStringsOfStringsOfStrings\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfStringsOfStringsOfStringsOfString\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfStringsOfStringsOfStringsOfStrings\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfStringsOfStringsOfStringsOfStringsOfString\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfStringsOfStringsOfStringsOfStringsOfStrings\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfStringsOfStringsOfStringsOfStringsOfStringsOfString\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfString\
    \ = intValue.asInstanceOf[Array[String]]\n        val intValueAsArrayOfStringsOfStringsOfStringsOfStringsOfStringsOf\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6fb04j94.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6fb04j94.scala:23:57\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mintValueAsBigInteger\e[0m = intValue.asInstanceOf[\e[35mBigInteger\e[0m]\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \   Not found: type BigInteger\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6fb04j94.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2ayn_syd.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ayn_syd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.asInstanceOf[String]\n\
    \        val nums = num.split(\"\\\\.\").map(_.toLong)\n        val min = math.min(nums)\n\
    \        val max = math.max(nums)\n        val diff = max - min\n        val closest\
    \ = (min + diff) / 2\n        val rounded = math.round(closest)\n        rounded.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcdeee5no.scala:20:23 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Long]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcdeee5no.scala:21:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = max - min\n\
    \        val closest = (diff + min) / 2\n        math.round(closest)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8bbt9uxs.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toDouble))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Double])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8bbt9uxs.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toDouble))\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Double])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toLong)\n        val min = math.min(nums)\n   \
    \     val max = math.max(nums)\n        val diff = max - min\n        val round\
    \ = math.round(diff * 0.5).toLong\n        round + min\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpn0allyxp.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Long]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpn0allyxp.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayMin\
    \ = intArray.min\n        val intArrayMax = intArray.max\n        val intArraySum\
    \ = intArray.reduce((a, b) => a + b)\n        val intArrayDifference = intArraySum\
    \ - intArrayMax\n        val intArrayDifferenceAbs = intArrayDifference * Math.signum(intArrayDifference)\n\
    \        val intArrayDifferenceSign = intArrayDifference * Math.signum(intArrayDifferenceAbs)\n\
    \        val intArrayDifferenceSignAbs = intArrayDifferenceSign * Math.signum(intArrayDifferenceAbs)\n\
    \        val intArrayDifferenceSignAbsMin = intArrayDifferenceSignAbs * Math.signum(intArrayMin)\n\
    \        val intArrayDifferenceSignAbsMax = intArrayDifferenceSignAbs * Math.signum(intArrayMax)\n\
    \        val intArrayDifferenceSignAbsSum = intArrayDifferenceSignAbs * Math.signum(intArraySum)\n\
    \        val intArrayDifferenceSignAbsSumMin = intArrayDifferenceSignAbsSum *\
    \ Math.signum(intArrayMin)\n        val intArrayDifferenceSignAbsSumMax = intArrayDifferenceSignAbsSum\
    \ * Math.signum(intArrayMax)\n        val intArrayDifferenceSignAbsSumSum = intArrayDifferenceSignAbsSum\
    \ * Math.signum(intArraySum)\n        val intArrayDifferenceSignAbsSumSumMin =\
    \ intArrayDifferenceSignAbsSumSum * Math.signum(intArrayMin)\n        val intArrayDifferenceSignAbsSumSumMax\
    \ = intArrayDifferenceSignAbsSumSum * Math.signum(intArrayMax)\n        val intArrayDifferenceSignAbsSumSumSum\
    \ = intArrayDifferenceSignAbsSumSum * Math.signum(intArraySum)\n        val intArrayDifferenceSignAbsSumSumSumMin\
    \ = intArrayDifferenceSignAbsSumSumSum * Math.signum(intArrayMin)\n        val\
    \ intArrayDifferenceSignAbsSumSumSumMax = intArrayDifferenceSignAbsSumSumSum *\
    \ Math.signum(intArrayMax)\n        val intArrayDifferenceSignAbsSumSumSumSum\
    \ = intArrayDifferenceSignAbsSumSumSum * Math.signum(intArraySum)\n        val\
    \ intArrayDifferenceSignAbsSumSumSumSumMin = intArrayDifferenceSignAbsSumSumSumSum\
    \ * Math.signum(int\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0q77lta9.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0q77lta9.scala:40:107\
    \ -----------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e\
    [36mintArrayDifferenceSignAbsSumSumSumSumMin\e[0m = intArrayDifferenceSignAbsSumSumSumSum\
    \ * Math.signum(int\n\e[31m\e[31m   |\e[0m                                   \
    \                                                                        ^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Not found: int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0q77lta9.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val nums = List(\"10\", \"15.3\", \"14.5\", \"12.5\", \"10.5\", \"9.5\"\
    , \"8.5\", \"7.5\", \"6.5\", \"5.5\", \"4.5\", \"3.5\", \"2.5\", \"1.5\", \"0.5\"\
    , \"0.25\", \"0.125\", \"0.0625\", \"0.03125\", \"0.015625\", \"0.0078125\", \"\
    0.00390625\", \"0.001953125\", \"0.0009765625\", \"0.000244140625\", \"0.0001220703125\"\
    , \"0.00006103515625\", \"0.000030517578125\", \"0.0000152587890625\", \"0.00000762939453125\"\
    , \"0.000003814697265625\", \"0.0000019073486328125\", \"0.00000095367431640625\"\
    , \"0.00000048828125\", \"0.000000244140625\", \"0.000000059604644775390625\"\
    , \"0.00000002099609375\", \"0.000000011920928955078125\", \"0.0000000080792236328125\"\
    , \"0.00000000577392578125\", \"0.00000000439453125\", \"0.00000000263671875\"\
    , \"0.00000000185546875\", \"0.0000000009765625\", \"0.00000000048828125\", \"\
    0.000000000439453125\", \"0.00000000033984375\", \"0.0000000002099609375\", \"\
    0.00000000011920928955078125\", \"0.00000000008056640625\", \"0.00000000005859375\"\
    , \"0.000000000039453125\", \"0.00000000001953125\", \"0.000000000009765625\"\
    , \"0.0000000000074218750\", \"0.00000000000625\", \"0.000000000004414062\", \"\
    0.0000000000033203125\", \"0.00000000000244140625\", \"0.00000000000119629\",\
    \ \"0.0000000000006103515625\", \"0.00000000000030517578125\", \"0.000000000000152587890625\"\
    , \"0.0000000000000762939453125\", \"0.00000000000003814697265625\", \"0.000000000000019073486328125\"\
    , \"0.0000000000000095367431640625\", \"0.0000000000000048828125\", \"0.00000000000000244140625\"\
    , \"0.0000000000000009765625\", \"0.00000000000000059604644775390625\", \"0.0000000000000002099609375\"\
    , \"0.00000000000000011920928955078125\", \"0.00000000000000011920928955078125\"\
    , \"0.000000000000000119629\", \"0.000000000000000119629\", \"0.00000000\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpraf1uo3h.scala:19:1598 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = List(\e[31m\"\
    10\"\e[0m, \e[31m\"15.3\"\e[0m, \e[31m\"14.5\"\e[0m, \e[31m\"12.5\"\e[0m, \e[31m\"\
    10.5\"\e[0m, \e[31m\"9.5\"\e[0m, \e[31m\"8.5\"\e[0m, \e[31m\"7.5\"\e[0m, \e[31m\"\
    6.5\"\e[0m, \e[31m\"5.5\"\e[0m, \e[31m\"4.5\"\e[0m, \e[31m\"3.5\"\e[0m, \e[31m\"\
    2.5\"\e[0m, \e[31m\"1.5\"\e[0m, \e[31m\"0.5\"\e[0m, \e[31m\"0.25\"\e[0m, \e[31m\"\
    0.125\"\e[0m, \e[31m\"0.0625\"\e[0m, \e[31m\"0.03125\"\e[0m, \e[31m\"0.015625\"\
    \e[0m, \e[31m\"0.0078125\"\e[0m, \e[31m\"0.00390625\"\e[0m, \e[31m\"0.001953125\"\
    \e[0m, \e[31m\"0.0009765625\"\e[0m, \e[31m\"0.000244140625\"\e[0m, \e[31m\"0.0001220703125\"\
    \e[0m, \e[31m\"0.00006103515625\"\e[0m, \e[31m\"0.000030517578125\"\e[0m, \e[31m\"\
    0.0000152587890625\"\e[0m, \e[31m\"0.00000762939453125\"\e[0m, \e[31m\"0.000003814697265625\"\
    \e[0m, \e[31m\"0.0000019073486328125\"\e[0m, \e[31m\"0.00000095367431640625\"\e\
    [0m, \e[31m\"0.00000048828125\"\e[0m, \e[31m\"0.000000244140625\"\e[0m, \e[31m\"\
    0.000000059604644775390625\"\e[0m, \e[31m\"0.00000002099609375\"\e[0m, \e[31m\"\
    0.000000011920928955078125\"\e[0m, \e[31m\"0.0000000080792236328125\"\e[0m, \e\
    [31m\"0.00000000577392578125\"\e[0m, \e[31m\"0.00000000439453125\"\e[0m, \e[31m\"\
    0.00000000263671875\"\e[0m, \e[31m\"0.00000000185546875\"\e[0m, \e[31m\"0.0000000009765625\"\
    \e[0m, \e[31m\"0.00000000048828125\"\e[0m, \e[31m\"0.000000000439453125\"\e[0m,\
    \ \e[31m\"0.00000000033984375\"\e[0m, \e[31m\"0.0000000002099609375\"\e[0m, \e\
    [31m\"0.00000000011920928955078125\"\e[0m, \e[31m\"0.00000000008056640625\"\e\
    [0m, \e[31m\"0.00000000005859375\"\e[0m, \e[31m\"0.000000000039453125\"\e[0m,\
    \ \e[31m\"0.00000000001953125\"\e[0m, \e[31m\"0.000000000009765625\"\e[0m, \e\
    [31m\"0.0000000000074218750\"\e[0m, \e[31m\"0.00000000000625\"\e[0m, \e[31m\"\
    0.000000000004414062\"\e[0m, \e[31m\"0.0000000000033203125\"\e[0m, \e[31m\"0.00000000000244140625\"\
    \e[0m, \e[31m\"0.00000000000119629\"\e[0m, \e[31m\"0.0000000000006103515625\"\e\
    [0m, \e[31m\"0.00000000000030517578125\"\e[0m, \e[31m\"0.000000000000152587890625\"\
    \e[0m, \e[31m\"0.0000000000000762939453125\"\e[0m, \e[31m\"0.00000000000003814697265625\"\
    \e[0m, \e[31m\"0.000000000000019073486328125\"\e[0m, \e[31m\"0.0000000000000095367431640625\"\
    \e[0m, \e"
  stdout: ''
  timestamp: 1660010198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toLong)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val diff = max - min\n        val\
    \ closest = (diff / 2).toInt\n        val closestInteger = min + closest\n   \
    \     closestInteger\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpc2zsmm30.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Long]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpc2zsmm30.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Long]))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val difference = largest - smallest\n\
    \        if (difference < 0)\n            smallest - difference\n        else\n\
    \            largest + difference\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpgvq9lxm1.scala:19:28 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpgvq9lxm1.scala:20:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mlargest\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val diff = max - min\n        val\
    \ closest = (diff == 0) ? min : min + (diff / 2)\n        closest\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpmvg904f9.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpmvg904f9.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmvg904f9.scala:22:46 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclosest\e[0m = (diff ==\
    \ \e[31m0\e[0m) ? min : \e[35mmin\e[0m \e[35m+\e[0m (\e[35mdiff\e[0m \e[35m/\e\
    [0m \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \  Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010196
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = numbers.min\n     \
    \   val max = numbers.max\n        val diff = (max - min).toInt\n        val closest\
    \ = (min + diff) / 2\n        val closestInteger = closest + min\n        closestInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjyt78p9b.scala:27)\n\tat Problem.main(tmpjyt78p9b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = max - min\n        val closest\
    \ = (min + max) / 2\n        if (diff > 0) closest else closest - diff\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp36a4y2nr.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp36a4y2nr.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010197
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // Split value into two parts separated by \".\"\n  \
    \      val firstPart = parts(0)\n        val secondPart = parts(1)\n        val\
    \ firstPartAsLong = firstPart.toLong\n        val secondPartAsLong = secondPart.toLong\n\
    \        val difference = secondPartAsLong - firstPartAsLong\n        if (difference\
    \ < 0)\n            firstPartAsLong + difference\n        else\n            firstPartAsLong\
    \ - difference\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmpujakqr05.scala:20)\n\tat Problem$.main(tmpujakqr05.scala:30)\n\
    \tat Problem.main(tmpujakqr05.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010199
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // Split value into two parts\n        val firstPart\
    \ = parts(0)\n        val secondPart = parts(1)\n        val firstPartAsLong =\
    \ firstPart.toLong\n        val secondPartAsLong = secondPart.toLong\n       \
    \ val difference = secondPartAsLong - firstPartAsLong\n        if (difference\
    \ < 0)\n            firstPartAsLong + difference\n        else\n            firstPartAsLong\
    \ - difference\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmph03nt_ml.scala:20)\n\tat Problem$.main(tmph03nt_ml.scala:30)\n\
    \tat Problem.main(tmph03nt_ml.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayMin\
    \ = intArray.min\n        val intArrayMax = intArray.max\n        val intArrayDiff\
    \ = intArrayMax - intArrayMin\n        val intArrayDiffAbs = intArrayDiff.abs\n\
    \        val intArrayDiffAbsMax = intArrayDiffAbs.max\n        val intArrayDiffAbsMin\
    \ = intArrayDiffAbs.min\n        val intArrayDiffAbsMinAbs = intArrayDiffAbsMin\
    \ - intArrayDiffAbsMax\n        val intArrayDiffAbsMinAbsMax = intArrayDiffAbsMinAbs.max\n\
    \        val intArrayDiffAbsMinAbsMaxAbs = intArrayDiffAbsMinAbsMax.abs\n    \
    \    val intArrayDiffAbsMinAbsMaxAbsMax = intArrayDiffAbsMinAbsMaxAbs.max\n  \
    \      val intArrayDiffAbsMinAbsMaxAbsMaxAbs = intArrayDiffAbsMinAbsMaxAbsMax.abs\n\
    \        val intArrayDiffAbsMinAbsMaxAbsMaxAbsMax = intArrayDiffAbsMinAbsMaxAbsMaxAbsMax.abs\n\
    \        val intArrayDiffAbsMinAbsMaxAbsMaxAbsMaxAbs = intArrayDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMax.abs\n\
    \        val intArrayDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMax = intArrayDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbs.abs\n\
    \        val intArrayDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbs = intArrayDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMax.abs\n\
    \        val intArrayDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = intArrayDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax.abs\n\
    \        val intArrayDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = intArrayDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7gnnyttc.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp7gnnyttc.scala:27:55 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mintArrayDiffAbsMinAbs\e[0m = intArrayDiffAbsMin\
    \ - intArrayDiffAbsMax\n\e[31m\e[31m   |\e[0m                                \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of Int\
    \ => Int, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp7gnnyttc.scala:32:51 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mintArrayDiffAbsMinAbsMaxAbsMaxAbsMax\e\
    [0m = intArrayDiffAbsMinAbsMaxAbsMaxAbsMax.abs\n\e[31m\e[31m   |\e[0m        \
    \                                           ^\e[0m\n\e[31m   |\e[0m         Recursive\
    \ \e[33mvalue\e[0m \e[35mintArrayDiffAbsMinAbsMaxAbsMaxAbsMax\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7gnnyttc.scala:36:63\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mintArrayDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\e[0m = intArrayDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax.abs\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m       Not found: intArrayDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7gnnyttc.scala:37:66\
    \ --------------"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val diff = max - min\n        val\
    \ closest = (min + diff) / 2\n        val closestInteger = math.round(closest)\n\
    \        closestInteger\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpv81mzlx5.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpv81mzlx5.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010198
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // Split into integer and fractional parts\n        val\
    \ fractionalPart = parts(1) // Get the fractional part\n        val integerPart\
    \ = parts(0).toInt // Get the integer part\n        val fractionalPartInt = fractionalPart.toInt\
    \ // Get the fractional part as an integer\n        val integerPartInt = integerPart.toInt\
    \ // Get the integer part as an integer\n        val difference = fractionalPartInt\
    \ - integerPartInt // Get the difference between the fractional part and the integer\
    \ part\n        if (difference < 0)\n            fractionalPartInt + 1\n     \
    \   else\n            fractionalPartInt - 1 // Round the difference away from\
    \ zero\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmphue6bzb_.scala:19)\n\tat Problem$.main(tmphue6bzb_.scala:30)\n\
    \tat Problem.main(tmphue6bzb_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toLong\n        val intArray = intValue.toString.split(\"\\\\.\").map(_.toInt)\n\
    \        val intArrayLength = intArray.length\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArray\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1n7qd5q0.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1n7qd5q0.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1n7qd5q0.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1n7qd5q0.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1n7qd5q0.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = max - min\n        val closest\
    \ = (diff + min) / 2\n        math.round(closest)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpckmr6_60.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpckmr6_60.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = (max - min).toInt\n        val\
    \ closest = (min + diff) / 2\n        val closestLong = closest.toLong\n     \
    \   closestLong\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbpxvv7e0.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbpxvv7e0.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.head, nums.last)\n\
    \        val max = math.max(nums.head, nums.last)\n        val diff = max - min\n\
    \        val roundTo = math.abs(diff)\n        val roundToInt = math.round(roundTo)\n\
    \        val roundToLong = math.abs(roundToInt)\n        val roundToLongInt =\
    \ math.round(roundToLong)\n        val roundToLongLong = math.abs(roundToLongInt)\n\
    \        val roundToLongLongInt = math.round(roundToLongLong)\n        val roundToLongLongLong\
    \ = math.abs(roundToLongLongInt)\n        val roundToLongLongLongInt = math.round(roundToLongLongLong)\n\
    \        val roundToLongLongLongLong = math.abs(roundToLongLongLongInt)\n    \
    \    val roundToLongLongLongLongInt = math.round(roundToLongLongLongLong)\n  \
    \      val roundToLongLongLongLongLong = math.abs(roundToLongLongLongLongInt)\n\
    \        val roundToLongLongLongLongLongInt = math.round(roundToLongLongLongLongLong)\n\
    \        val roundToLongLongLongLongLongLong = math.abs(roundToLongLongLongLongLongInt)\n\
    \        val roundToLongLongLongLongLongLongInt = math.round(roundToLongLongLongLongLongLongLong)\n\
    \        val roundToLongLongLongLongLongLongLong = math.abs(roundToLongLongLongLongLongLongLongInt)\n\
    \        val roundToLongLongLongLongLongLongLongInt = math.round(roundToLongLongLongLongLongLongLongLong)\n\
    \        val roundToLongLongLongLongLongLongLongLong = math.abs(roundToLongLongLongLongLongLongLongLongInt)\n\
    \        val roundToLongLongLongLongLongLongLongLongInt = math.round(roundToLongLongLongLongLongLongLongLongLong)\n\
    \        val roundToLongLongLongLongLongLongLongLongLongInt = math.round(roundToLongLongLongLongLongLongLongLongLongLong)\n\
    \        val roundToLongLongLongLongLongLongLongLongLongInt = math.round(roundToLongLongLongLongLongLongLongLongLongLongLong)\n\
    \        val roundToLongLongLongLongLongLongLongLongLongInt = math.round(roundToLongLongLongLongLongLongLongLongLongLongLong)\n\
    \        val roundToLongLongLongLongLongLongLongLongLongInt = math.\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfklnko8b.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfklnko8b.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mroundToLongLongLongLongLongLongLongLongLongInt\e\
    [0m = math.round(roundToLongLongLongLongLongLongLongLongLongLongLong)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mroundToLongLongLongLongLongLongLongLongLongInt is already\
    \ defined as \e[33mvalue\e[0m \e[35mroundToLongLongLongLongLongLongLongLongLongInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfklnko8b.scala:42:12 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m        \e[33mval\e[0m \e[36mroundToLongLongLongLongLongLongLongLongLongInt\e\
    [0m = math.round(roundToLongLongLongLongLongLongLongLongLongLongLong)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mroundToLongLongLongLongLongLongLongLongLongInt is already\
    \ defined as \e[33mvalue\e[0m \e[35mroundToLongLongLongLongLongLongLongLongLongInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfklnko8b.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mroundToLongLongLongLongLongLongLongLongLongInt\e\
    [0m = math.\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mroundToLongLongLongLongLongLongLongLongLongInt is already\
    \ defined as \e[33mvalue\e[0m \e[35mroundToLongLongLongLongLongLongLongLongLongInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must a"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = max - min\n\
    \        val closest = (diff * nums.sum).toLong\n        math.round(closest)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp61e1cy_t.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toDouble))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Double])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp61e1cy_t.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toDouble))\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Double])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val diff = largest - smallest\n\
    \        if (diff == 0) smallest else smallest + diff\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpyn07cqzd.scala:19:28 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpyn07cqzd.scala:20:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mlargest\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val nums = List(\"10\", \"15.3\", \"14.5\", \"14\", \"13.5\", \"13\"\
    , \"12\", \"11.5\", \"11\", \"10.5\", \"10\", \"9.5\", \"9\", \"8.5\", \"8\",\
    \ \"7.5\", \"7\", \"6.5\", \"6\", \"5.5\", \"5\", \"4.5\", \"4\", \"3.5\", \"\
    3\", \"2.5\", \"2\", \"1.5\", \"1\", \"0.5\", \"0\")\n        val numsSorted =\
    \ nums.sortWith((a, b) => a.toLong - b.toLong)\n        val closestNum = numsSorted.last\n\
    \        val closestNumIndex = numsSorted.lastIndex\n        val closestNumDistance\
    \ = closestNum - num\n        val closestNumDistanceAbs = Math.abs(closestNumDistance)\n\
    \        val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n  \
    \      val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n    \
    \    val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n      \
    \  val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n        val\
    \ closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n        val closestNumDistanceAbsIndex\
    \ = closestNumDistanceAbs.lastIndex\n        val closestNumDistanceAbsIndex =\
    \ closestNumDistanceAbs.lastIndex\n        val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n\
    \        val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n  \
    \      val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n    \
    \    val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n      \
    \  val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n        val\
    \ closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n        val closestNumDistanceAbsIndex\
    \ = closestNumDistanceAbs.lastIndex\n        val closestNumDistanceAbsIndex =\
    \ closestNumDistanceAbs.lastIndex\n        val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n\
    \        val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n  \
    \      val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n    \
    \    val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n      \
    \  val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n        val\
    \ closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n        val closestNumDistanceAbsIndex\
    \ = closestNumDistanceAbs.lastIndex\n        val closestNumDistanceAbsIndex =\
    \ closestNumDistanceAbs.lastIndex\n        val closestNumDistanceAbsIndex = closestNumDistanceAbs.lastIndex\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpd3cyhyem.scala:49:11 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpd3cyhyem.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mclosestNumDistanceAbsIndex\e\
    [0m = closestNumDistanceAbs.lastIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestNumDistanceAbsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mclosestNumDistanceAbsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd3cyhyem.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mclosestNumDistanceAbsIndex\e\
    [0m = closestNumDistanceAbs.lastIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestNumDistanceAbsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mclosestNumDistanceAbsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd3cyhyem.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mclosestNumDistanceAbsIndex\e\
    [0m = closestNumDistanceAbs.lastIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclosestNumDistanceAbsIndex is already defined as \e[33mvalue\e\
    [0m \e[35mclosestNumDistanceAbsIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd3cyhyem.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mclosestNumDistanceAbsInde"
  stdout: ''
  timestamp: 1660010207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val nums = List(\"10\", \"15\", \"20\", \"25\", \"30\", \"35\", \"40\"\
    , \"45\", \"50\", \"55\", \"60\", \"65\", \"70\", \"75\", \"80\", \"85\", \"90\"\
    , \"95\", \"100\")\n        val numsIndex = nums.indexOf(value)\n        val numsIndex\
    \ = numsIndex + 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi5oulw4c.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsIndex\e[0m = numsIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsIndex is already defined as \e[33mvalue\e[0m \e[35mnumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi5oulw4c.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsIndex\e[0m = numsIndex - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mnumsIndex is already defined as \e[33mvalue\e[0m \e[35mnumsIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi5oulw4c.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsIndex\e[0m = numsIndex - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsIndex is already defined as \e[33mvalue\e[0m \e[35mnumsIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi5oulw4c.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsIndex\e[0m = numsIndex - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsIndex is already defined as \e[33mvalue\e[0m \e[35mnumsIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi5oulw4c.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsIndex\e[0m = numsIndex - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsIndex is already defined as \e[33mvalue\e[0m \e[35mnumsIndex\e"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // Split on decimal point\n        val intParts = parts.map(_.toInt)\
    \ // Convert to integers\n        val diffs = intParts.zip(intParts).map(x =>\
    \ Math.abs(x._1 - x._2)) // Find differences between two integers\n        val\
    \ minDiff = diffs.min  // Find the smallest difference\n        val closestPart\
    \ = diffs.find(x => x == minDiff) // Find the closest integer\n        closestPart._1\
    \ // Return the closest integer\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp342yikwx.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        closestPart._1 \e[34m// Return the closest integer\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ value _1 is not a member of Option[Int]\n1 error found\n"
  stdout: ''
  timestamp: 1660010205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = max - min\n        val closest\
    \ = (diff + min) / 2\n        math.round(closest)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpckmr6_60.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpckmr6_60.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = max - min\n        val closest\
    \ = (diff + min) / 2\n        val closestInt = math.round(closest)\n        closestInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3ds53oev.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3ds53oev.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1659805559
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val nums = List(\"10\", \"15.3\", \"14.5\", \"14\", \"13.5\", \"13\"\
    , \"12.5\", \"12\", \"11.5\", \"11\", \"10.5\", \"10\", \"9.5\", \"9\", \"8.5\"\
    , \"8\", \"7.5\", \"7\", \"6.5\", \"6\", \"5.5\", \"5\", \"4.5\", \"4\", \"3.5\"\
    , \"3\", \"2.5\", \"2\", \"1.5\", \"1\", \"0.5\", \"0\")\n        val numsLen\
    \ = nums.length\n        val numsSum = nums.sum\n        val numsSumAbs = numsSum.toLong\n\
    \        val numsSumAbsDiff = numsSumAbs - num\n        val numsSumAbsDiffAbs\
    \ = numsSumAbsDiff % numsLen\n        val numsSumAbsDiffAbsDiff = numsSumAbsDiffAbs\
    \ % numsLen\n        val numsSumAbsDiffAbsDiffAbs = numsSumAbsDiffAbsDiff.toLong\n\
    \        val numsSumAbsDiffAbsDiffAbsDiff = numsSumAbsDiffAbsDiffAbs - num\n \
    \       val numsSumAbsDiffAbsDiffAbsDiffAbs = numsSumAbsDiffAbsDiffAbsDiffAbs\
    \ % numsLen\n        val numsSumAbsDiffAbsDiffAbsDiffAbsDiff = numsSumAbsDiffAbsDiffAbsDiffAbsDiff.toLong\n\
    \        val numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbs = numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ % numsLen\n        val numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff.toLong\n\
    \        val numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\n\
    \        val numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\n\
    \        val numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = numsSumAbsDiffAbsDiffAbsDiffAb\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpl_13u5f3.scala:21:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsSum\e[0m = nums.sum\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \             No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                where:    B is a type variable with constraint >: String\n\e\
    [31m   |\e[0m                .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl_13u5f3.scala:28:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumAbsDiffAbsDiffAbsDiffAbs\e[0m = numsSumAbsDiffAbsDiffAbsDiffAbs\
    \ % numsLen\n\e[31m\e[31m   |\e[0m                                           \
    \   ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e[0m \e[35mnumsSumAbsDiffAbsDiffAbsDiffAbs\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl_13u5f3.scala:29:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumAbsDiffAbsDiffAbsDiffAbsDiff\e[0m = numsSumAbsDiffAbsDiffAbsDiffAbsDiff.toLong\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35mnumsSumAbsDiffAbsDiffAbsDiffAbsDiff\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl_13u5f3.scala:30:53\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumAbsDiffAbsDiffAbsDiffAbsDiffAbs\e[0m = numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbs\
    \ % numsLen\n\e[31m\e[31m   |\e[0m                                           \
    \          ^\e[0m\n\e[31m   |\e[0m       Recursive \e[33mvalue\e[0m \e[35mnumsSumAbsDiffAbsDiffAbsDiffAbsDiffAbs\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl_13u5f3.scala:31:57\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumAbsDiffAbsDiffAbsDiffAb"
  stdout: ''
  timestamp: 1660010206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val intArray = intValue.toString.split(\"\\\\.\").map(_.toInt)\n\
    \        val intArrayLength = intArray.length\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength.toInt\n        val intArrayLength\
    \ = intArrayLength.toInt\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArray\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl_my75fz.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl_my75fz.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintArrayLength\e[0m = intArrayLength.toInt\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mintArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl_my75fz.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintArrayLength\e[0m = intArrayLength.toInt\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mintArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl_my75fz.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintArrayLength\e[0m = intArrayLength.toInt\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mintArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl_my75fz.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintArrayLength\e[0m = intArrayLength.toInt\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mintArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] N"
  stdout: ''
  timestamp: 1660010207
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val difference = abs(intValue - intValue)\n        val\
    \ closestInteger = intValue + difference\n        closestInteger\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"14.5\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.closestInteger(tmpt9_iev2s.scala:18)\n\
    \tat Problem$.main(tmpt9_iev2s.scala:25)\n\tat Problem.main(tmpt9_iev2s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805557
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toLong))\n\
    \        val max = math.max(nums.map(_.toLong))\n        val diff = max - min\n\
    \        val closest = (min + diff) / 2\n        val diffInt = closest - value.toLong\n\
    \        if (diffInt < 0) {\n            closest - diffInt\n        } else {\n\
    \            closest + diffInt\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp4v_b7sel.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toLong))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Long])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp4v_b7sel.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toLong))\n\e[31m\e[31m   |\e[0m     \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Long])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val intArray = intValue.toString.toDouble.split('.').map(_.toInt)\n\
    \        val intArrayLength = intArray.length\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppga7p15m.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppga7p15m.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppga7p15m.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppga7p15m.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppga7p15m.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").toList\n        val integer = numbers(0)\n        val\
    \ fraction = numbers(1)\n        val integers = List(integer).map(_.toLong)\n\
    \        val fractions = List(fraction).map(_.toDouble)\n        val difference\
    \ = fractions.zip(integers).map { case (fraction, integer) =>\n            fraction\
    \ - integer\n        }\n        val differences = difference.map(math.abs)\n \
    \       val differenceSum = differences.sum\n        val differenceSumAbs = differenceSum.abs\n\
    \        val differenceSumAbsMax = differenceSumAbs.max\n        val differenceSumAbsMin\
    \ = differenceSumAbs.min\n        val differenceSumAbsMaxIndex = differenceSumAbs.indexOf(differenceSumAbsMax)\n\
    \        val differenceSumAbsMinIndex = differenceSumAbs.indexOf(differenceSumAbsMin)\n\
    \        val differenceSumAbsMaxFraction = fractions(differenceSumAbsMaxIndex)\n\
    \        val differenceSumAbsMinFraction = fractions(differenceSumAbsMinIndex)\n\
    \        val differenceSumAbsMaxInteger = integers(differenceSumAbsMaxIndex)\n\
    \        val differenceSumAbsMinInteger = integers(differenceSumAbsMinIndex)\n\
    \        val differenceSumAbsMaxFractionInteger = fractions(differenceSumAbsMaxIndex)\n\
    \        val differenceSumAbsMinFractionInteger = fractions(differenceSumAbsMinIndex)\n\
    \        val differenceSumAbsMaxFractionFraction = fractions(differenceSumAbsMaxIndex)\n\
    \        val differenceSumAbsMinFractionFraction = fractions(differenceSumAbsMinIndex)\n\
    \        val differenceSumAbsMaxFractionFractionInteger = fractions(differenceSumAbsMaxIndex)\n\
    \        val differenceSumAbsMinFractionFractionInteger = fractions(differenceSumAbsMinIndex)\n\
    \        val differenceSumAbsMaxFractionFractionFraction = fractions(differenceSumAbsMaxIndex)\n\
    \        val differenceSumAbsMinFractionFractionFraction = fractions(differenceSumAbsMinIndex)\n\
    \        val differenceSumAbsMaxFractionFractionFractionInteger = fractions(differenceSumAbsMaxIndex)\n\
    \        val differenceSumAbsMinFractionFractionFractionInteger = fractions(differenceSumAbsMinIndex)\n\
    \        val differenceSumAbsMaxFractionFractionFractionFraction = fractions(differenceSumAbsMaxIndex)\n\
    \        val differenceSumAbsMinFractionFractionFractionFraction = fractions(differenceSumAbsMinIndex)\n\
    \        val differenceSumAbsMaxFractionFractionFractionFractionInteger = fractions(differenceSumAbsMaxIndex)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbcmbvhtn.scala:31:56 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mdifferenceSumAbsMaxIndex\e\
    [0m = differenceSumAbs.indexOf(differenceSumAbsMax)\n\e[31m\e[31m   |\e[0m   \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 value indexOf is not a member of Double\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpbcmbvhtn.scala:32:56 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mdifferenceSumAbsMinIndex\e\
    [0m = differenceSumAbs.indexOf(differenceSumAbsMin)\n\e[31m\e[31m   |\e[0m   \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 value indexOf is not a member of Double\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbcmbvhtn.scala:51:5 ---------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toLong\n        val intArray = intValue.toString.toIntArray\n      \
    \  val intArrayLength = intArray.length\n        val intArrayIndex = (intArrayLength\
    \ - 1) >> 1\n        val intArrayMid = (intArrayLength - 1) >> 1\n        val\
    \ intArrayMid2 = (intArrayLength - 1) >> 2\n        val intArrayMid3 = (intArrayLength\
    \ - 1) >> 3\n        val intArrayMid4 = (intArrayLength - 1) >> 4\n        val\
    \ intArrayMid5 = (intArrayLength - 1) >> 5\n        val intArrayMid6 = (intArrayLength\
    \ - 1) >> 6\n        val intArrayMid7 = (intArrayLength - 1) >> 7\n        val\
    \ intArrayMid8 = (intArrayLength - 1) >> 8\n        val intArrayMid9 = (intArrayLength\
    \ - 1) >> 9\n        val intArrayMid10 = (intArrayLength - 1) >> 10\n        val\
    \ intArrayMid11 = (intArrayLength - 1) >> 11\n        val intArrayMid12 = (intArrayLength\
    \ - 1) >> 12\n        val intArrayMid13 = (intArrayLength - 1) >> 13\n       \
    \ val intArrayMid14 = (intArrayLength - 1) >> 14\n        val intArrayMid15 =\
    \ (intArrayLength - 1) >> 15\n        val intArrayMid16 = (intArrayLength - 1)\
    \ >> 16\n        val intArrayMid17 = (intArrayLength - 1) >> 17\n        val intArrayMid18\
    \ = (intArrayLength - 1) >> 18\n        val intArrayMid19 = (intArrayLength -\
    \ 1) >> 19\n        val intArrayMid20 = (intArrayLength - 1) >> 20\n        val\
    \ intArrayMid21 = (intArrayLength - 1) >> 21\n        val intArrayMid22 = (intArrayLength\
    \ - 1) >> 22\n        val intArrayMid23 = (intArrayLength - 1) >> 23\n       \
    \ val intArrayMid24 = (intArrayLength - 1) >> 24\n        val intArrayMid25 =\
    \ (intArrayLength - 1) >> 25\n        val intArrayMid26 = (intArrayLength - 1)\
    \ >> 26\n        val intArrayMid27 = (intArrayLength - 1) >> 27\n        val intArrayMid28\
    \ = (intArrayLength - 1) >> 28\n        val intArrayMid29 = (intArrayLength -\
    \ 1) >> 29\n        val intArrayMid30 = (intArrayLength - 1) >> 30\n        val\
    \ intArrayMid31 = (intArrayLength - 1) >> 31\n        val intArrayMid\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi4mtv6wc.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi4mtv6wc.scala:19:41\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mintArray\e[0m = intValue.toString.toIntArray\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \              value toIntArray is not a member of String\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpi4mtv6wc.scala:54:5 ---------------------\e[0m\e\
    [0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toLong)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val diff = max - min\n        val\
    \ closest = (diff == 0) ? min : min + (diff / 2)\n        closest.toLong\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3eu1ndc6.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Long]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3eu1ndc6.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Long]))\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp3eu1ndc6.scala:22:46 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclosest\e[0m = (diff ==\
    \ \e[31m0\e[0m) ? min : \e[35mmin\e[0m \e[35m+\e[0m (\e[35mdiff\e[0m \e[35m/\e\
    [0m \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \  Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = (max - min).toInt\n        val\
    \ closest = (min + diff) / 2\n        closest.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpgm3vv4dy.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpgm3vv4dy.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010206
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toLong)\n        val min = numbers.min\n    \
    \    val max = numbers.max\n        val diff = max - min\n        val closest\
    \ = (min + diff) / 2\n        val closestInteger = math.round(closest)\n     \
    \   closestInteger\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfrac_a_6.scala:27)\n\tat Problem.main(tmpfrac_a_6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010210
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // Split into two parts, one before the decimal point\n\
    \        val before = parts(0)\n        val after = parts(1)\n        val beforeInt\
    \ = before.toInt\n        val afterInt = after.toInt\n        val diff = (afterInt\
    \ - beforeInt)\n        if (diff < 0)\n            beforeInt + diff\n        else\n\
    \            beforeInt - diff\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmpkg4gvd72.scala:20)\n\tat Problem$.main(tmpkg4gvd72.scala:30)\n\
    \tat Problem.main(tmpkg4gvd72.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.asInstanceOf[String]\n\
    \        val numArray = num.toDouble.split('.').map(_.toInt)\n        val numArrayLength\
    \ = numArray.length\n        val numArrayLength = numArrayLength - 1\n       \
    \ val numArrayLength = numArrayLength - 1\n        val numArrayLength = numArrayLength\
    \ - 1\n        val numArrayLength = numArrayLength - 1\n        val numArrayLength\
    \ = numArrayLength - 1\n        val numArrayLength = numArrayLength - 1\n    \
    \    val numArrayLength = numArrayLength - 1\n        val numArrayLength = numArrayLength\
    \ - 1\n        val numArrayLength = numArrayLength - 1\n        val numArrayLength\
    \ = numArrayLength - 1\n        val numArrayLength = numArrayLength - 1\n    \
    \    val numArrayLength = numArrayLength - 1\n        val numArrayLength = numArrayLength\
    \ - 1\n        val numArrayLength = numArrayLength - 1\n        val numArrayLength\
    \ = numArrayLength - 1\n        val numArrayLength = numArrayLength - 1\n    \
    \    val numArrayLength = numArrayLength - 1\n        val numArrayLength = numArrayLength\
    \ - 1\n        val numArrayLength = numArrayLength - 1\n        val numArrayLength\
    \ = numArrayLength - 1\n        val numArrayLength = numArrayLength - 1\n    \
    \    val numArrayLength = numArrayLength - 1\n        val numArrayLength = numArrayLength\
    \ - 1\n        val numArrayLength = numArrayLength - 1\n        val numArrayLength\
    \ = numArrayLength - 1\n        val numArrayLength = numArrayLength - 1\n    \
    \    val numArrayLength = numArrayLength - 1\n        val numArrayLength = numArrayLength\
    \ - 1\n        val numArrayLength = numArrayLength - 1\n        val numArrayLength\
    \ = numArrayLength - 1\n        val numArrayLength = numArrayLength - 1\n    \
    \    val numArrayLength = numArrayLength - 1\n        val numArrayLength = numArrayLength\
    \ - 1\n        val numArrayLength = numArrayLength - 1\n        val numArrayLength\
    \ = numArrayLength - 1\n        val numArrayLength = numArrayLength - 1\n    \
    \    val numArrayLength = numArrayLength - 1\n        val numArrayLength = numArrayLength\
    \ - 1\n        val numArrayLength = numArrayLength - 1\n        val numArrayLength\
    \ = numArrayLength - 1\n        val numArrayLength = numArrayLength - 1\n    \
    \    val numArrayLength = numArrayLength - 1\n        val numArrayLength = numArrayLength\
    \ - 1\n        val numArrayLength = numArrayLength - 1\n        val numArrayLength\
    \ = numArrayLength - 1\n        val numArrayLength = numArrayLength - 1\n    \
    \    val numArrayLength = numArrayLength - 1\n        val numArrayLength = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0tjszzmq.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mnumArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0tjszzmq.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumArrayLength\e[0m = numArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0tjszzmq.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumArrayLength\e[0m = numArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0tjszzmq.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumArrayLength\e[0m = numArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumArrayLength is already defined as \e[33mvalue\e[0m \e[35mnumArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0tjszzmq.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumArrayLength\e[0m = numArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnu"
  stdout: ''
  timestamp: 1660010210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toLong\n        val intArray = intValue.toString.toDouble.split('.').map(_.toInt)\n\
    \        val intArrayLength = intArray.length\n        val intArrayLength = intArrayLength.toInt\n\
    \        val intArrayLength = intArrayLength + 1\n        val intArrayLength =\
    \ intArrayLength - 1\n        val intArrayLength = intArrayLength + 1\n      \
    \  val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ + 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength + 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength + 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength + 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength + 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ + 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength + 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength + 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength + 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength + 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ + 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength + 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength + 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength + 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength + 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ + 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength + 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength + 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength + 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength + 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ + 1\n        val intArrayLength = intArrayLength - 1\n        val intArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2fuod_02.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2fuod_02.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintArrayLength\e[0m = intArrayLength.toInt\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mintArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2fuod_02.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintArrayLength\e[0m = intArrayLength + \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mintArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2fuod_02.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintArrayLength\e[0m = intArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mintArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2fuod_02.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintArrayLength\e[0m = intArrayLength + \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mintArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e"
  stdout: ''
  timestamp: 1660010210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = max - min\n        val roundTo\
    \ = diff / 2\n        val roundFrom = min - roundTo\n        val round = math.round(roundFrom\
    \ + roundTo)\n        math.abs(round)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcpc45vw5.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpcpc45vw5.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010209
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val closest = (numbers(0) + numbers(1))\
    \ / 2\n        if (closest == numbers(0)) {\n            numbers(0)\n        }\
    \ else {\n            numbers(1)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmpalkn7p9o.scala:19)\n\tat Problem$.main(tmpalkn7p9o.scala:27)\n\
    \tat Problem.main(tmpalkn7p9o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010214
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val difference = largest - smallest\n\
    \        val roundTo = math.abs(difference)\n        val roundToInt = math.round(roundTo)\n\
    \        val roundToLong = math.abs(roundToInt)\n        val roundToLongInt =\
    \ math.round(roundToLong)\n        val roundToLongLong = math.abs(roundToLongInt)\n\
    \        val roundToLongLongInt = math.round(roundToLongLong)\n        val roundToLongLongLong\
    \ = math.abs(roundToLongLongInt)\n        val roundToLongLongLongInt = math.round(roundToLongLongLong)\n\
    \        val roundToLongLongLongLong = math.abs(roundToLongLongLongInt)\n    \
    \    val roundToLongLongLongLongInt = math.round(roundToLongLongLongLong)\n  \
    \      val roundToLongLongLongLongLong = math.abs(roundToLongLongLongLongInt)\n\
    \        val roundToLongLongLongLongLongInt = math.round(roundToLongLongLongLongLong)\n\
    \        val roundToLongLongLongLongLongLong = math.abs(roundToLongLongLongLongLongInt)\n\
    \        val roundToLongLongLongLongLongLongInt = math.round(roundToLongLongLongLongLongLong)\n\
    \        val roundToLongLongLongLongLongLongLong = math.abs(roundToLongLongLongLongLongLongInt)\n\
    \        val roundToLongLongLongLongLongLongLongInt = math.round(roundToLongLongLongLongLongLongLongLong)\n\
    \        val roundToLongLongLongLongLongLongLongLong = math.abs(roundToLongLongLongLongLongLongLongLongInt)\n\
    \        val roundToLongLongLongLongLongLongLongLongInt = math.round(roundToLongLongLongLongLongLongLongLongLong)\n\
    \        val roundToLongLongLongLongLongLongLongLongLong = math.abs(roundToLongLongLongLongLongLongLongLongLongInt)\n\
    \        val roundToLongLongLongLongLongLongLongLongLongInt = math.round(roundToLongLongLongLongLongLongLongLongLongLong)\n\
    \        val roundToLongLongLongLongLongLongLongLongLongLongInt = math.round(roundToLongLongLongLongLongLongLongLongLongLongLong)\n\
    \        val roundToLongLongLongLongLongLongLongLongLongLongInt = math.round(roundToLongLongLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4lalyw2m.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4lalyw2m.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mroundToLongLongLongLongLongLongLongLongLongLongInt\e[0m = math.round(roundToLongLongLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mroundToLongLongLongLongLongLongLongLongLongLongInt is already\
    \ defined as \e[33mvalue\e[0m \e[35mroundToLongLongLongLongLongLongLongLongLongLongInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmp4lalyw2m.scala:19:28 -----------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp4lalyw2m.scala:20:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mlargest\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4lalyw2m.scala:41:72 ------------------------"
  stdout: ''
  timestamp: 1660010212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayMin\
    \ = intArray.min\n        val intArrayMax = intArray.max\n        val intArraySum\
    \ = intArray.reduce((x, y) => x + y)\n        val intArrayDiff = intArraySum -\
    \ intArrayMax\n        val intArrayDiffAbs = intArrayDiff.abs\n        val intArrayDiffAbsMin\
    \ = intArrayDiffAbs.min\n        val intArrayDiffAbsMax = intArrayDiffAbs.max\n\
    \        val intArrayDiffAbsSum = intArrayDiffAbs.reduce((x, y) => x + y)\n  \
    \      val intArrayDiffAbsSumAbs = intArrayDiffAbsSum.abs\n        val intArrayDiffAbsSumAbsMin\
    \ = intArrayDiffAbsSumAbs.min\n        val intArrayDiffAbsSumAbsMax = intArrayDiffAbsSumAbs.max\n\
    \        val intArrayDiffAbsSumAbsSum = intArrayDiffAbsSumAbs.reduce((x, y) =>\
    \ x + y)\n        val intArrayDiffAbsSumAbsSumAbs = intArrayDiffAbsSumAbsSum.abs\n\
    \        val intArrayDiffAbsSumAbsSumAbsMin = intArrayDiffAbsSumAbsSumAbs.min\n\
    \        val intArrayDiffAbsSumAbsSumAbsMax = intArrayDiffAbsSumAbsSumAbs.max\n\
    \        val intArrayDiffAbsSumAbsSumAbsSum = intArrayDiffAbsSumAbsSumAbs.reduce((x,\
    \ y) => x + y)\n        val intArrayDiffAbsSumAbsSumAbsSumAbs = intArrayDiffAbsSumAbsSumAbsSum.abs\n\
    \        val intArrayDiffAbsSumAbsSumAbsSumAbsMin = intArrayDiffAbsSumAbsSumAbsSumAbsMin.min\n\
    \        val intArrayDiffAbsSumAbsSumAbsSumAbsMax = intArrayDiffAbsSumAbsSumAbsSumAbsMax.max\n\
    \        val intArrayDiffAbsSumAbsSumAbsSumAbsSum = intArrayDiffAbsSumAbsSumAbsSumAbsSum.reduce((x,\
    \ y) => x + y)\n        val intArrayDiffAbsSumAbsSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4_wo7496.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4_wo7496.scala:28:49\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mintArrayDiffAbsSum\e[0m = intArrayDiffAbs.reduce((\e[36mx\e[0m, \e[36my\e\
    [0m) => x + y)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value reduce is not a member\
    \ of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4_wo7496.scala:38:51 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mintArrayDiffAbsSumAbsSumAbsSumAbsMin\e\
    [0m = intArrayDiffAbsSumAbsSumAbsSumAbsMin.min\n\e[31m\e[31m   |\e[0m        \
    \                                           ^\e[0m\n\e[31m   |\e[0m         Recursive\
    \ \e[33mvalue\e[0m \e[35mintArrayDiffAbsSumAbsSumAbsSumAbsMin\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4_wo7496.scala:39:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintArrayDiffAbsSumAbsSumAbsSumAbsMax\e[0m = intArrayDiffAbsSumAbsSumAbsSumAbsMax.max\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m         Recursive \e[33mvalue\e[0m \e[35mintArrayDiffAbsSumAbsSumAbsSumAbsMax\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4_wo7496.scala:40:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mintArrayDiffAbsSumAbsSumAbsSumAbsSum\e[0m = intArrayDiffAbsSumAbsSumAbsSumAbsSum.reduce((\e\
    [36mx\e[0m, \e[36my\e[0m) => x + y)\n\e[31m\e[31m   |\e[0m                   \
    \                                ^\e[0m\n\e[31m   |\e[0m         Recursive \e\
    [33mvalue\e[0m \e[35mintArrayDiffAbsSumAbsSumAbsSumAbsSum\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available wh"
  stdout: ''
  timestamp: 1660010213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = max - min\n        val closest\
    \ = (min + max) / 2\n        if (diff > 0) closest else closest - diff\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp36a4y2nr.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp36a4y2nr.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n2 errors found\n"
  stdout: ''
  timestamp: 1660010197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = max - min\n        val closest\
    \ = (diff == 0) ? min : min + (diff / 2)\n        closest.toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpw1doz9_b.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpw1doz9_b.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Int]))\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw1doz9_b.scala:22:46 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclosest\e[0m = (diff ==\
    \ \e[31m0\e[0m) ? min : \e[35mmin\e[0m \e[35m+\e[0m (\e[35mdiff\e[0m \e[35m/\e\
    [0m \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \  Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010210
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").toList\n        val firstNumber = numbers(0)\n    \
    \    val secondNumber = numbers(1)\n        val difference = secondNumber.toLong\
    \ - firstNumber.toLong\n        val closestInteger = firstNumber.toLong + difference\n\
    \        return closestInteger\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.closestInteger(tmpxzzwl6so.scala:20)\n\tat Problem$.main(tmpxzzwl6so.scala:26)\n\
    \tat Problem.main(tmpxzzwl6so.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010215
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = (max - min).toInt\n\
    \        val closest = (min + diff) / 2\n        val closestLong = closest.toLong\n\
    \        closestLong\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpvm_voptw.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toDouble))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Double])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpvm_voptw.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toDouble))\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Double])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805539
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayMin\
    \ = intArray.min\n        val intArrayMax = intArray.max\n        val intArraySum\
    \ = intArray(0) + intArray(1) + intArray(2)\n        val intArrayDiff = intArraySum\
    \ - intArrayMax\n        val intArrayDiffAbs = intArrayDiff.abs\n        val intArrayDiffAbsMin\
    \ = intArrayDiffAbs.min\n        val intArrayDiffAbsMax = intArrayDiffAbs.max\n\
    \        val intArrayDiffAbsSum = intArrayDiffAbs(0) + intArrayDiffAbs(1) + intArrayDiffAbs(2)\n\
    \        val intArrayDiffAbsDiff = intArrayDiffAbsSum - intArrayMax\n        val\
    \ intArrayDiffAbsDiffAbs = intArrayDiffAbsDiff.abs\n        val intArrayDiffAbsDiffAbsMin\
    \ = intArrayDiffAbsDiffAbs.min\n        val intArrayDiffAbsDiffAbsMax = intArrayDiffAbsDiffAbs.max\n\
    \        val intArrayDiffAbsDiffAbsSum = intArrayDiffAbsDiffAbs(0) + intArrayDiffAbsDiffAbs(1)\
    \ + intArrayDiffAbsDiffAbs(2)\n        val intArrayDiffAbsDiffAbsDiff = intArrayDiffAbsDiffAbsSum\
    \ - intArrayMax\n        val intArrayDiffAbsDiffAbsDiffAbs = intArrayDiffAbsDiffAbsDiff.abs\n\
    \        val intArrayDiffAbsDiffAbsDiffAbsMin = intArrayDiffAbsDiffAbsDiffAbs.min\n\
    \        val intArrayDiffAbsDiffAbsDiffAbsMax = intArrayDiffAbsDiffAbsDiffAbs.max\n\
    \        val intArrayDiffAbsDiffAbsDiffAbsSum = intArrayDiffAbsDiffAbsDiffAbs(0)\
    \ + intArrayDiffAbsDiffAbsDiffAbs(1) + intArrayDiffAbsDiffAbsDiffAbs(2)\n    \
    \    val intArrayDiffAbsDiffAbsDiffAbsDiff = intArrayDiffAbsDiffAbsDiffAbsSum\
    \ - intArrayMax\n        val intArrayDiffAbsDiffAbsDiffAbsDiffAbs = intArrayDiffAbsDiffAbsDiffAbsDiff.abs\n\
    \        val intArrayDiffAb\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7dm5oi5q.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmp7dm5oi5q.scala:28:33\
    \ -----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e\
    [0m \e[36mintArrayDiffAbsSum\e[0m = intArrayDiffAbs(\e[31m0\e[0m) + intArrayDiffAbs(\e\
    [31m1\e[0m) + intArrayDiffAbs(\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \         \e[33mvalue\e[0m \e[35mintArrayDiffAbs\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7dm5oi5q.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val numsLength = nums.length\n\
    \        val numsSum = nums.sum\n        val numsSumAbs = numsSum.abs\n      \
    \  val numsSumAbsDiff = numsSumAbs - numsLength\n        val numsSumAbsDiffAbs\
    \ = numsSumAbsDiff.abs\n        val numsSumAbsDiffAbsDiff = numsSumAbsDiffAbs\
    \ - numsLength\n        val numsSumAbsDiffAbsDiffAbs = numsSumAbsDiffAbsDiff.abs\n\
    \        val numsSumAbsDiffAbsDiffAbsDiff = numsSumAbsDiffAbsDiffAbs - numsLength\n\
    \        val numsSumAbsDiffAbsDiffAbsDiffAbs = numsSumAbsDiffAbsDiffAbsDiff.abs\n\
    \        val numsSumAbsDiffAbsDiffAbsDiffAbsDiff = numsSumAbsDiffAbsDiffAbsDiffAbs\
    \ - numsLength\n        val numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbs = numsSumAbsDiffAbsDiffAbsDiffAbsDiff.abs\n\
    \        val numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff.abs\n\
    \        val numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff.abs\n\
    \        val numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff.abs\n\
    \        val numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs.abs\n\
    \        val numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs.abs\n\
    \        val numsSumAbsDiffAbsDiffAbsDiff\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpexw4ale3.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpexw4ale3.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\e[0m = numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs.abs\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpexw4ale3.scala:30:57 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\e\
    [0m = numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff.abs\n\e[31m\e[31m   |\e[0m  \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \   Recursive \e[33mvalue\e[0m \e[35mnumsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpexw4ale3.scala:32:64\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\e[0m = numsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff.abs\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpexw4ale3.scala:33:67\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e["
  stdout: ''
  timestamp: 1660010214
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = numbers.min\n     \
    \   val max = numbers.max\n        val diff = max - min\n        val closest =\
    \ (diff == 0) ? min : min + (diff / 2)\n        closest.toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpevzr6qi9.scala:22:46 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclosest\e[0m = (diff ==\
    \ \e[31m0\e[0m) ? min : \e[35mmin\e[0m \e[35m+\e[0m (\e[35mdiff\e[0m \e[35m/\e\
    [0m \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \  Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpevzr6qi9.scala:22:34\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mclosest\e[0m = (diff == \e[31m0\e[0m) ? min : \e[35mmin\e[0m \e[35m+\e[0m\
    \ (\e[35mdiff\e[0m \e[35m/\e[0m \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \             ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value ?\
    \ is not a member of Boolean\n2 errors found\n"
  stdout: ''
  timestamp: 1660010216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toLong)\n        val smallest = math.min(numbers)\n\
    \        val largest = math.max(numbers)\n        val difference = largest - smallest\n\
    \        val differenceInt = math.round(difference)\n        differenceInt\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpe0m_qurd.scala:19:28 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msmallest\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Long]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpe0m_qurd.scala:20:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mlargest\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Long]))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums)\n    \
    \    val max = math.max(nums)\n        val diff = (max - min).toInt\n        val\
    \ roundTo = diff / 2\n        val roundFrom = diff - roundTo\n        val roundToInt\
    \ = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n  \
    \      val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom)\n\
    \        val roundToInt = math.round(roundTo)\n        val roundFromInt = math.round(roundFrom\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfwbmsunl.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfwbmsunl.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mroundToInt\e[0m = math.round(roundTo)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mroundToInt is already defined as \e[33mvalue\e[0m \e[35mroundToInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfwbmsunl.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mroundFromInt\e[0m = math.round(roundFrom)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mroundFromInt is already defined as \e[33mvalue\e[0m \e[35mroundFromInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfwbmsunl.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mroundToInt\e[0m = math.round(roundTo)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mroundToInt is already defined as \e[33mvalue\e[0m \e[35mroundToInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfwbmsunl.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mroundFromInt\e[0m = math.round(roundFrom)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mroundFromInt is already defined as \e[33mvalue\e[0m \e[35mroundFromInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfwbmsunl.scala:30:12 ------"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val nums = List(\"10\", \"15.3\", \"14.8\", \"14.7\", \"14.6\", \"14.4\"\
    , \"14.2\", \"14.1\", \"14.0\", \"13.9\", \"13.8\", \"13.7\", \"13.6\", \"13.4\"\
    , \"13.2\", \"13.1\", \"13.0\", \"12.9\", \"12.8\", \"12.7\", \"12.6\", \"12.4\"\
    , \"12.2\", \"12.1\", \"12.0\", \"11.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.4\"\
    , \"11.2\", \"11.1\", \"11.0\", \"10.9\", \"11.8\", \"11.7\", \"11.6\", \"11.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxpj14xlz.scala:19:1534 ---------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = List(\e[31m\"\
    10\"\e[0m, \e[31m\"15.3\"\e[0m, \e[31m\"14.8\"\e[0m, \e[31m\"14.7\"\e[0m, \e[31m\"\
    14.6\"\e[0m, \e[31m\"14.4\"\e[0m, \e[31m\"14.2\"\e[0m, \e[31m\"14.1\"\e[0m, \e\
    [31m\"14.0\"\e[0m, \e[31m\"13.9\"\e[0m, \e[31m\"13.8\"\e[0m, \e[31m\"13.7\"\e\
    [0m, \e[31m\"13.6\"\e[0m, \e[31m\"13.4\"\e[0m, \e[31m\"13.2\"\e[0m, \e[31m\"13.1\"\
    \e[0m, \e[31m\"13.0\"\e[0m, \e[31m\"12.9\"\e[0m, \e[31m\"12.8\"\e[0m, \e[31m\"\
    12.7\"\e[0m, \e[31m\"12.6\"\e[0m, \e[31m\"12.4\"\e[0m, \e[31m\"12.2\"\e[0m, \e\
    [31m\"12.1\"\e[0m, \e[31m\"12.0\"\e[0m, \e[31m\"11.9\"\e[0m, \e[31m\"11.8\"\e\
    [0m, \e[31m\"11.7\"\e[0m, \e[31m\"11.6\"\e[0m, \e[31m\"11.4\"\e[0m, \e[31m\"11.2\"\
    \e[0m, \e[31m\"11.1\"\e[0m, \e[31m\"11.0\"\e[0m, \e[31m\"10.9\"\e[0m, \e[31m\"\
    11.8\"\e[0m, \e[31m\"11.7\"\e[0m, \e[31m\"11.6\"\e[0m, \e[31m\"11.4\"\e[0m, \e\
    [31m\"11.2\"\e[0m, \e[31m\"11.1\"\e[0m, \e[31m\"11.0\"\e[0m, \e[31m\"10.9\"\e\
    [0m, \e[31m\"11.8\"\e[0m, \e[31m\"11.7\"\e[0m, \e[31m\"11.6\"\e[0m, \e[31m\"11.4\"\
    \e[0m, \e[31m\"11.2\"\e[0m, \e[31m\"11.1\"\e[0m, \e[31m\"11.0\"\e[0m, \e[31m\"\
    10.9\"\e[0m, \e[31m\"11.8\"\e[0m, \e[31m\"11.7\"\e[0m, \e[31m\"11.6\"\e[0m, \e\
    [31m\"11.4\"\e[0m, \e[31m\"11.2\"\e[0m, \e[31m\"11.1\"\e[0m, \e[31m\"11.0\"\e\
    [0m, \e[31m\"10.9\"\e[0m, \e[31m\"11.8\"\e[0m, \e[31m\"11.7\"\e[0m, \e[31m\"11.6\"\
    \e[0m, \e[31m\"11.4\"\e[0m, \e[31m\"11.2\"\e[0m, \e[31m\"11.1\"\e[0m, \e[31m\"\
    11.0\"\e[0m, \e[31m\"10.9\"\e[0m, \e[31m\"11.8\"\e[0m, \e[31m\"11.7\"\e[0m, \e\
    [31m\"11.6\"\e[0m, \e[31m\"11.4\"\e[0m, \e[31m\"11.2\"\e[0m, \e[31m\"11.1\"\e\
    [0m, \e[31m\"11.0\"\e[0m, \e[31m\"10.9\"\e[0m, \e[31m\"11.8\"\e[0m, \e[31m\"11.7\"\
    \e[0m, \e[31m\"11.6\"\e[0m, \e[31m\"11.4\"\e[0m, \e[31m\"11.2\"\e[0m, \e[31m\"\
    11.1\"\e[0m, \e[31m\"11.0\"\e[0m, \e[31m\"10.9\"\e[0m, \e[31m\"11.8\"\e[0m, \e\
    [31m\"11.7\"\e[0m, \e[31m\"11.6\"\e[0m, \e[31m\"11.4\"\e[0m, \e[31m\"11.2\"\e\
    [0m, \e[31m\"11.1\"\e[0m, \e[31m\"11.0\"\e[0m, \e[31m\"10.9\"\e[0m, \e[31m\"11.8\"\
    \e[0m, \e[31m\"11.7\"\e[0m, \e[31m\"11.6\"\e[0m, \e[31m\"11.4\"\e[0m, \e[31m\"\
    11.2\"\e[0m, \e[31m\"11.1\"\e[0m, \e[31m\"11.0\"\e[0m, \e[31m\"10.9\"\e[0m, \e\
    [31m\"11.8\"\e[0m, \e[31m\"11.7\"\e[0m, \e[31m\"11.6\"\e[0m, \e[31m\"11.4\"\e\
    [0m, \e[31m\"11.2\"\e[0m, \e[31m\"11.1\"\e[0m, \e[31m\"11.0\"\e[0m, \e[31m\"10.9\"\
    \e[0m, \e[31m\"11.8\"\e[0m, \e[31m\"11.7\"\e[0m, \e[31m\"11.6\"\e[0m, \e[31m\"\
    11.4\"\e[0m, \e[31m\"11.2\"\e[0m, \e[31m\"11."
  stdout: ''
  timestamp: 1660010216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val mid = math.round(min + (max\
    \ - min) / 2)\n        if (min == max) {\n            mid\n        } else {\n\
    \            if (mid < numbers(0)) {\n                closestInteger(value + \"\
    .0\")\n            } else {\n                closestInteger(value + \".0\")\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbmubxrq1.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbmubxrq1.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010214
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intArray = intValue.split(\"\\\\.\"\
    ).map(_.toInt)\n        val intArrayLength = intArray.length\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"14.5\"\
    )) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2ayn_syd.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ayn_syd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2ayn_syd.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val nums = mutable.ArrayBuffer.empty[Long]\n        val numsSorted =\
    \ mutable.ArrayBuffer.empty[Long]\n        val numsSorted2 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsSorted3 = mutable.ArrayBuffer.empty[Long]\n        val numsSorted4\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsSorted5 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsSorted6 = mutable.ArrayBuffer.empty[Long]\n        val numsSorted7\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsSorted8 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsSorted9 = mutable.ArrayBuffer.empty[Long]\n        val numsSorted10\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsSorted11 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsSorted12 = mutable.ArrayBuffer.empty[Long]\n        val numsSorted13\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsSorted14 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsSorted15 = mutable.ArrayBuffer.empty[Long]\n        val numsSorted16\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsSorted17 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsSorted18 = mutable.ArrayBuffer.empty[Long]\n        val numsSorted19\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsSorted20 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsSorted21 = mutable.ArrayBuffer.empty[Long]\n        val numsSorted22\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsSorted23 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsSorted24 = mutable.ArrayBuffer.empty[Long]\n        val numsSorted25\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsSorted26 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsSorted27 = mutable.ArrayBuffer.empty[Long]\n        val numsSorted28\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsSorted29 = mutable.ArrayBuffer.empty[Long]\n\
    \        val numsSorted30 = mutable.ArrayBuffer.empty[Long]\n        val numsSorted31\
    \ = mutable.ArrayBuffer.empty[Long]\n        val numsSorted32 = mut\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7qjfxcx.scala:19:19 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo7qjfxcx.scala:20:25 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7qjfxcx.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted2\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7qjfxcx.scala:22:26 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted3\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7qjfxcx.scala:23:26 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSorted4\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpo7qjfxcx.scala:24:26 -----------"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val smallestDiff = math.min(numbers.map(math.abs))\n\
    \        val closestDiff = math.min(smallestDiff, numbers.map(math.round))\n \
    \       val closestInteger = math.min(closestDiff, numbers.max)\n        closestInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp3dr0ed20.scala:19:32 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msmallestDiff\e[0m = math.min(numbers.map(math.abs))\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Int])\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3dr0ed20.scala:20:61\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mclosestDiff\e\
    [0m = math.min(smallestDiff, numbers.map(math.round))\n\e[31m\e[31m   |\e[0m \
    \                                                            ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    \e\
    [1m\e[31mLong\e[0m => Long\n\e[31m   |\e[0m                                  \
    \                Required: \e[1m\e[32mInt\e[0m => Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010218
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toLong)\n        val min = math.min(nums.head,\
    \ nums.last)\n        val max = math.max(nums.head, nums.last)\n        val diff\
    \ = max - min\n        if (diff < 0)\n            min - diff\n        else\n \
    \           max + diff\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyiqff5nx.scala:29)\n\tat Problem.main(tmpyiqff5nx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toLong)\n        val min = math.min(nums)\n   \
    \     val max = math.max(nums)\n        val diff = max - min\n        if (diff\
    \ < 0)\n            min - diff\n        else\n            max + diff\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp6c2r96hq.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((nums : Array[Long]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp6c2r96hq.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e[31m  \
    \ |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((nums : Array[Long]))\n2 errors found\n"
  stdout: ''
  timestamp: 1659805756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val intArray = intValue.toString.toDouble.split('.').map(_.toInt)\n\
    \        val intArrayLength = intArray.length\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppga7p15m.scala:68:28 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppga7p15m.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppga7p15m.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppga7p15m.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppga7p15m.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0min"
  stdout: ''
  timestamp: 1660010208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").toList\n        val integers = numbers.map(_.toInt)\n\
    \        val difference = numbers.zip(integers).map {\n            case (number,\
    \ integer) => math.abs(number - integer)\n        }.max\n        val closestInteger\
    \ = math.ceil(difference / 2)\n        closestInteger.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_9mcdra9.scala:21:54 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m (number, integer) => math.abs(number\
    \ - integer)\n\e[31m\e[31m   |\e[0m                                          \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of String, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmp_9mcdra9.scala:22:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        }.max\n\e[31m\e[31m   |\e[0m             ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigInt\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val closestPart = parts match {\n\
    \            case Array(part1, part2) =>\n                val diff = (part1 -\
    \ part2).abs.max\n                val diffAbs = Math.abs(diff)\n             \
    \   if (diff > 0) diffAbs else -diffAbs\n            case _ =>\n             \
    \   val diff = (part1 - part2).abs.max\n                val diffAbs = Math.abs(diff)\n\
    \                if (diff > 0) diffAbs else -diffAbs\n        }\n        val closestPartsWithDecimal\
    \ = parts match {\n            case Array(part1, part2) =>\n                val\
    \ diff = (part1 - part2).abs.max\n                val diffAbs = Math.abs(diff)\n\
    \                if (diff > 0) diffAbs else -diffAbs\n            case _ =>\n\
    \                val diff = (part1 - part2).abs.max\n                val diffAbs\
    \ = Math.abs(diff)\n                if (diff > 0) diffAbs else -diffAbs\n    \
    \    }\n        val closestPartsWithDecimalWithDecimal = parts match {\n     \
    \       case Array(part1, part2) =>\n                val diff = (part1 - part2).abs.max\n\
    \                val diffAbs = Math.abs(diff)\n                if (diff > 0) diffAbs\
    \ else -diffAbs\n            case _ =>\n                val diff = (part1 - part2).abs.max\n\
    \                val diffAbs = Math.abs(diff)\n                if (diff > 0) diffAbs\
    \ else -diffAbs\n        }\n        val closestPartsWithDecimalWithDecimalWithDecimal\
    \ = parts match {\n            case Array(part1, part2) =>\n                val\
    \ diff = (part1 - part2).abs.max\n                val diffAbs = Math.abs(diff)\n\
    \                if (diff > 0) diffAbs else -diffAbs\n            case _ =>\n\
    \                val diff = (part1 - part2).abs.max\n                val diffAbs\
    \ = Math.abs(diff)\n                if (diff > 0) diffAbs else -diffAbs\n    \
    \    }\n        val closestPartsWithDecimalWithDecimalWithDecimalWithDecimal =\
    \ parts match {\n            case Array(part1, part2) =>\n                val\
    \ diff = (part1 - part2).abs.max\n                val diffAbs = Math.abs(diff)\n\
    \                if (diff > 0) diffAbs else -diffAbs\n            case _ =>\n\
    \                val diff = (part1 - part2).abs.max\n                val diffAbs\
    \ = Math.abs(diff)\n                if (diff > 0) diffAbs else -diffAbs\n    \
    \    }\n        val closestPartsWithDecimalWithDecimalWithDecimalWithDecimalWithDecimal\
    \ = parts match {\n            case Array(part\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp91u65ms1.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp91u65ms1.scala:81:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m81 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmp91u65ms1.scala:22:35 -----------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m                \e[33mval\e[0m \e[36mdiffAbs\e[0m = Math.abs(diff)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35mabs\e[0m in\
    \ \e[33mobject\e[0m \e[35mMath\e[0m with types\n\e[31m   |\e[0m (x$0: Double):\
    \ Double\n\e[31m   |\e[0m (x$0: Float): Float\n\e[31m   |\e[0m (x$0: Long): Long\n\
    \e[31m   |\e[0m (x$0: Int): Int\n\e[31m   |\e[0mmatch arguments ((diff : Int =>\
    \ Int))\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp91u65ms1.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mif\e[0m (diff > \e[31m0\e[0m) diffAbs\
    \ \e[33melse\e[0m -diffAbs\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue > is not a member of Int => Int, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m  import\
    \ math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp91u65ms1.scala:25:28 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mdiff\e[0m = (part1 -\
    \ part2).abs.max\n\e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: part1\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E134] Type Error: /tmp/tmp91u65ms1.scala:32:35 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                \e[33mval\e[0m \e[36mdiffAbs\e[0m = "
  stdout: ''
  timestamp: 1660010221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\");\n        val intParts = parts.map(_.toInt);\n      \
    \  val diff = intParts.map((x,y) => abs(x - y)).max;\n        val closestPart\
    \ = intParts.find(x => abs(x - diff) < 1);\n        val closestInteger = closestPart.toLong;\n\
    \        return closestInteger;\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpk15uz1_t.scala:20:38 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdiff\e[0m = intParts.map((\e\
    [36mx\e[0m,\e[36my\e[0m) => abs(x - y)).max;\n\e[31m\e[31m   |\e[0m          \
    \                      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   Wrong number of parameters, expected: 1\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpk15uz1_t.scala:20:52 -----------------------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdiff\e[0m = intParts.map((\e\
    [36mx\e[0m,\e[36my\e[0m) => abs(x - y)).max;\n\e[31m\e[31m   |\e[0m          \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                               No ClassTag available for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                                          where:    B is a type\
    \ variable\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk15uz1_t.scala:22:41\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mclosestInteger\e[0m = closestPart.toLong;\n\e[31m\e[31m   |\e[0m         \
    \                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not\
    \ a member of Option[Int], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val minDiff = math.min(numbers)\n\
    \        val maxDiff = math.max(numbers)\n        val diff = (maxDiff - minDiff).toInt\n\
    \        val closest = (maxDiff - diff).toLong\n        closest\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n\
    \    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpiwltt6z9.scala:19:27 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mminDiff\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpiwltt6z9.scala:20:27\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmaxDiff\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of\
    \ \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m\
    \ with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010217
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\") // Split into integer and fractional parts\n        val\
    \ fractionalPart = parts(1)\n        val integerPart = parts(0)\n        val fractionalPartAsLong\
    \ = fractionalPart.toLong\n        val integerPartAsLong = integerPart.toLong\n\
    \        val difference = fractionalPartAsLong - integerPartAsLong\n        if\
    \ (difference < 0)\n            integerPartAsLong + difference\n        else\n\
    \            integerPartAsLong - difference\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmpjcxrfx52.scala:19)\n\tat Problem$.main(tmpjcxrfx52.scala:30)\n\
    \tat Problem.main(tmpjcxrfx52.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val diff = max - min\n        val\
    \ closest = (diff == 0) ? min : min + (diff / 2)\n        closest.toLong\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpigp2bt_2.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpigp2bt_2.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpigp2bt_2.scala:22:46 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclosest\e[0m = (diff ==\
    \ \e[31m0\e[0m) ? min : \e[35mmin\e[0m \e[35m+\e[0m (\e[35mdiff\e[0m \e[35m/\e\
    [0m \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \  Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val diff = max - min\n        val\
    \ closest = (diff + min) / 2\n        math.round(closest)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_539s1wv.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp_539s1wv.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(numbers)\n\
    \        val max = math.max(numbers)\n        val diff = max - min\n        val\
    \ closest = (diff == 0) ? min : min + (diff / 2)\n        closest.toLong\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpigp2bt_2.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(numbers)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((numbers : Array[Int]))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpigp2bt_2.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(numbers)\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((numbers : Array[Int]))\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpigp2bt_2.scala:22:46 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclosest\e[0m = (diff ==\
    \ \e[31m0\e[0m) ? min : \e[35mmin\e[0m \e[35m+\e[0m (\e[35mdiff\e[0m \e[35m/\e\
    [0m \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \  Not found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val parts =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val difference = parts(0) - parts(1)\n\
    \        if (difference < 0)\n            parts(0) + difference\n        else\n\
    \            parts(1) - difference\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.closestInteger(tmpoan1gh56.scala:19)\n\tat Problem$.main(tmpoan1gh56.scala:26)\n\
    \tat Problem.main(tmpoan1gh56.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010221
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val difference = numbers.zip(numbers).map\
    \ {\n            case (first, second) => math.abs(first - second)\n        }\n\
    \        val largest = difference.max\n        val smallest = difference.min\n\
    \        if (largest == smallest) {\n            math.round(largest)\n       \
    \ } else {\n            math.round(largest + (smallest - largest) / 2)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1k4oclt.scala:31)\n\tat Problem.main(tmpo1k4oclt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val nums = List(\"10\", \"15.3\", \"14.5\", \"14\", \"13.5\", \"13\"\
    , \"12.5\", \"12\", \"11.5\", \"11\", \"10.5\", \"10\")\n        val numsIndex\
    \ = nums.indexOf(value)\n        val numsIndex = numsIndex + 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n        val numsIndex = numsIndex - 1\n        val numsIndex\
    \ = numsIndex - 1\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3zx64i30.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsIndex\e[0m = numsIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsIndex is already defined as \e[33mvalue\e[0m \e[35mnumsIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3zx64i30.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsIndex\e[0m = numsIndex - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mnumsIndex is already defined as \e[33mvalue\e[0m \e[35mnumsIndex\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3zx64i30.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsIndex\e[0m = numsIndex - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsIndex is already defined as \e[33mvalue\e[0m \e[35mnumsIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3zx64i30.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsIndex\e[0m = numsIndex - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsIndex is already defined as \e[33mvalue\e[0m \e[35mnumsIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3zx64i30.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsIndex\e[0m = numsIndex - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsIndex is already defined as \e[33mvalue\e[0m \e[35mnumsIndex\e"
  stdout: ''
  timestamp: 1660010220
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.asInstanceOf[String]\n\
    \        val arr = num.split(\"\\\\.\").map(_.toInt)\n        val min = arr.min\n\
    \        val max = arr.max\n        val diff = max - min\n        val closest\
    \ = (min + diff) / 2\n        val closestLong = closest.toLong\n        closestLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\"\
    )) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmposlopn00.scala:28)\n\tat Problem.main(tmposlopn00.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.asInstanceOf[String]\n        val intValueAsLong = intValue.asInstanceOf[Long]\n\
    \        val intValueAsDouble = intValue.asInstanceOf[Double]\n        val intValueAsFloat\
    \ = intValue.asInstanceOf[Float]\n        val intValueAsInt = intValue.asInstanceOf[Int]\n\
    \        val intValueAsShort = intValue.asInstanceOf[Short]\n        val intValueAsByte\
    \ = intValue.asInstanceOf[Byte]\n        val intValueAsChar = intValue.asInstanceOf[Char]\n\
    \        val intValueAsBoolean = intValue.asInstanceOf[Boolean]\n        val intValueAsLongLong\
    \ = intValue.asInstanceOf[LongLong]\n        val intValueAsDoubleDouble = intValue.asInstanceOf[DoubleDouble]\n\
    \        val intValueAsFloatFloat = intValue.asInstanceOf[FloatFloat]\n      \
    \  val intValueAsIntInt = intValue.asInstanceOf[IntInt]\n        val intValueAsShortShort\
    \ = intValue.asInstanceOf[ShortShort]\n        val intValueAsByteByte = intValue.asInstanceOf[ByteByte]\n\
    \        val intValueAsCharChar = intValue.asInstanceOf[CharChar]\n        val\
    \ intValueAsBooleanBoolean = intValue.asInstanceOf[BooleanBoolean]\n        val\
    \ intValueAsLongLongLong = intValue.asInstanceOf[LongLongLong]\n        val intValueAsDoubleDoubleDouble\
    \ = intValue.asInstanceOf[DoubleDoubleDouble]\n        val intValueAsFloatFloatFloat\
    \ = intValue.asInstanceOf[FloatFloatFloat]\n        val intValueAsIntIntInt =\
    \ intValue.asInstanceOf[IntIntInt]\n        val intValueAsShortShortShort = intValue.asInstanceOf[ShortShortShort]\n\
    \        val intValueAsByteByteByte = intValue.asInstanceOf[ByteByteByte]\n  \
    \      val intValueAsCharCharChar = intValue.asInstanceOf[CharCharChar]\n    \
    \    val intValueAsBooleanBooleanBoolean = intValue.asInstanceOf[BooleanBooleanBoolean]\n\
    \        val intValueAsLongLongLongLong = intValue.asInstanceOf[LongLongLongLong]\n\
    \        val intValueAsDoubleDoubleDoubleDouble = intValue.asInstanceOf[DoubleDoubleDoubleDouble]\n\
    \        val intValueAsFloatFloatFloatFloat = intValue.asInstanceOf[FloatFloatFloatFloat]\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp6e2njdxe.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6e2njdxe.scala:27:55 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mintValueAsLongLong\e[0m\
    \ = intValue.asInstanceOf[\e[35mLongLong\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \                                               ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                Not found: type LongLong\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6e2njdxe.scala:28:59\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mintValueAsDoubleDouble\e[0m = intValue.asInstanceOf[\e[35mDoubleDouble\e[0m]\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \     Not found: type DoubleDouble\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6e2njdxe.scala:29:57 ------------------------\e[0m\e[0m\n\e[31m29 |\e\
    [0m        \e[33mval\e[0m \e[36mintValueAsFloatFloat\e[0m = intValue.asInstanceOf[\e\
    [35mFloatFloat\e[0m]\n\e[31m\e[31m   |\e[0m                                  \
    \                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                         Not found: type FloatFloat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6e2njdxe.scala:30:53 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mintValueAsIntInt\e[0m =\
    \ intValue.asInstanceOf[\e[35mIntInt\e[0m]\n\e[31m\e[31m   |\e[0m            \
    \                                         ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                "
  stdout: ''
  timestamp: 1659805546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = max - min\n\
    \        val closest = (diff + min) / 2\n        math.round(closest)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8bbt9uxs.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toDouble))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Double])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8bbt9uxs.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toDouble))\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Double])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").toList\n        val numsAsLong = nums.map(_.toLong)\n\
    \        val numsAsDouble = nums.map(_.toDouble)\n        val numsAsInt = nums.map(_.toInt)\n\
    \        val numsAsLongs = nums.map(_.toLong)\n        val numsAsDoubles = nums.map(_.toDouble)\n\
    \        val numsAsInts = nums.map(_.toInt)\n        val numsAsLongs = nums.map(_.toLong)\n\
    \        val numsAsDoubles = nums.map(_.toDouble)\n        val numsAsInts = nums.map(_.toInt)\n\
    \        val numsAsLongs = nums.map(_.toLong)\n        val numsAsDoubles = nums.map(_.toDouble)\n\
    \        val numsAsInts = nums.map(_.toInt)\n        val numsAsLongs = nums.map(_.toLong)\n\
    \        val numsAsDoubles = nums.map(_.toDouble)\n        val numsAsInts = nums.map(_.toInt)\n\
    \        val numsAsLongs = nums.map(_.toLong)\n        val numsAsDoubles = nums.map(_.toDouble)\n\
    \        val numsAsInts = nums.map(_.toInt)\n        val numsAsLongs = nums.map(_.toLong)\n\
    \        val numsAsDoubles = nums.map(_.toDouble)\n        val numsAsInts = nums.map(_.toInt)\n\
    \        val numsAsLongs = nums.map(_.toLong)\n        val numsAsDoubles = nums.map(_.toDouble)\n\
    \        val numsAsInts = nums.map(_.toInt)\n        val numsAsLongs = nums.map(_.toLong)\n\
    \        val numsAsDoubles = nums.map(_.toDouble)\n        val numsAsInts = nums.map(_.toInt)\n\
    \        val numsAsLongs = nums.map(_.toLong)\n        val numsAsDoubles = nums.map(_.toDouble)\n\
    \        val numsAsInts = nums.map(_.toInt)\n        val numsAsLongs = nums.map(_.toLong)\n\
    \        val numsAsDoubles = nums.map(_.toDouble)\n        val numsAsInts = nums.map(_.toInt)\n\
    \        val numsAsLong\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfmxea4km.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfmxea4km.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsAsLongs\e[0m = nums.map(_.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsAsLongs is already defined as \e[33mvalue\e[0m \e[35mnumsAsLongs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfmxea4km.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsAsDoubles\e[0m = nums.map(_.toDouble)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnumsAsDoubles is already defined as \e[33mvalue\e[0m \e[35mnumsAsDoubles\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfmxea4km.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mnumsAsInts\e[0m = nums.map(_.toInt)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mnumsAsInts is already defined as \e[33mvalue\e[0m \e[35mnumsAsInts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfmxea4km.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsAsLongs\e[0m = nums.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnumsAsLongs is already defined as \e[33mvalue\e[0m \e[35mnumsAsLongs\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfmxea4km.scala:29:12 ----------------"
  stdout: ''
  timestamp: 1660010222
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n\
    \        val difference = num - num.toInt\n        if (difference < 0)\n     \
    \       difference + num.toInt\n        else\n            difference\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85_u32dr.scala:26)\n\tat Problem.main(tmp85_u32dr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val numbers\
    \ = value.split(\"\\\\.\").map(_.toInt)\n        val closest = (numbers.min)(math.abs(numbers(0)\
    \ - numbers(1)))\n        math.abs(closest - numbers(0))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(closestInteger((\"10\")) == (10l));\n    assert(closestInteger((\"\
    14.5\")) == (15l));\n    assert(closestInteger((\"-15.5\")) == (-16l));\n    assert(closestInteger((\"\
    15.3\")) == (15l));\n    assert(closestInteger((\"0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_chxc3i4.scala:19:44\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mclosest\e\
    [0m = (numbers.min)(math.abs(numbers(\e[31m0\e[0m) - numbers(\e[31m1\e[0m)))\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    Int\n\e[31m\
    \   |\e[0m                                    Required: Ordering[Int]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toLong))\n\
    \        val max = math.max(nums.map(_.toLong))\n        val diff = max - min\n\
    \        val closest = (diff + min) / 2\n        math.round(closest)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(closestInteger((\"10\")) ==\
    \ (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpims28h11.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toLong))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Long])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpims28h11.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toLong))\n\e[31m\e[31m   |\e[0m     \
    \             ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Long])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = nums.min\n        val\
    \ max = nums.max\n        val diff = max - min\n        val closest = (min + max)\
    \ / 2.0\n        if (diff < 0)\n            closest - diff\n        else\n   \
    \         closest + diff\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xfz32gj.scala:24:12\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            closest - diff\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  Found:    Double\n\e[31m   |\e[0m            Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xfz32gj.scala:26:12 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            closest + diff\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Double\n\e\
    [31m   |\e[0m            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val intValue\
    \ = value.toInt\n        val intArray = intValue.toString.split(\"\\\\.\").map(_.toInt)\n\
    \        val intArrayLength = intArray.length\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArrayLength - 1\n        val intArrayLength = intArrayLength - 1\n    \
    \    val intArrayLength = intArrayLength - 1\n        val intArrayLength = intArrayLength\
    \ - 1\n        val intArrayLength = intArrayLength - 1\n        val intArrayLength\
    \ = intArray\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8mr3wl6u.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8mr3wl6u.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8mr3wl6u.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8mr3wl6u.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mintArrayLength is already defined as \e[33mvalue\e[0m \e[35mintArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8mr3wl6u.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mintArrayLength\e[0m = intArrayLength\
    \ - \e[31m1\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659805549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a value (string) representing a number\n\
    \    // and returns the closest integer to it. If the number is equidistant\n\
    \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
    \ closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"\
    ))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the\
    \ given number is equidistant\n    // from two integers, the one you should return\
    \ is the one that is the\n    // farthest from zero. For example closest_integer(\"\
    14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n    def closestInteger(value : String) : Long = {\n        val nums =\
    \ value.split(\"\\\\.\").map(_.toInt)\n        val min = math.min(nums.map(_.toDouble))\n\
    \        val max = math.max(nums.map(_.toDouble))\n        val diff = (max - min).toInt\n\
    \        val closest = (diff + min) / 2\n        val closestInt = math.round(closest)\n\
    \        closestInt\n    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
    10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
    -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
    0\")) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpyti40zu2.scala:19:23 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = math.min(nums.map(_.toDouble))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments (Array[Double])\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpyti40zu2.scala:20:23\
    \ -----------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e\
    [0m \e[36mmax\e[0m = math.max(nums.map(_.toDouble))\n\e[31m\e[31m   |\e[0m   \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments (Array[Double])\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010221
