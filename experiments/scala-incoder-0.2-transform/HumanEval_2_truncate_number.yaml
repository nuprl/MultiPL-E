name: HumanEval_2_truncate_number
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive floating point number, it can be decomposed into\n    //\
  \ and integer part (largest integer smaller than given number) and decimals\n  \
  \  // (leftover part always smaller than 1).\n    // Return the decimal part of\
  \ the number.\n    // >>> truncateNumber((3.5f))\n    // (0.5f)\n    def truncateNumber(number\
  \ : Float) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(truncateNumber((3.5f))\
  \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
  \ == (0.0f));\n    }\n\n}\n"
completions: ["        val fraction = number.toInt\n        val fractionalPart = number\
    \ - fraction\n        fractionalPart / 10", "        val intPart = math.ceil(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val intPart = math.floor(number)\n \
    \       val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val fraction = number.toInt\n        val fractionalPart = number - fraction\n\
    \        fractionalPart / 10", "        val intPart = math.ceil(number).toInt\n\
    \        val decimalPart = number - intPart\n        decimalPart * Math.pow(10,\
    \ intPart.toInt)", "        val intPart = math.floor(number)\n        val decimalPart\
    \ = number - intPart\n        intPart + decimalPart", "        val fraction =\
    \ number.toInt\n        val fractionalPart = number - fraction\n        fractionalPart\
    \ / 10f", "        val fraction = number.toInt\n        val fractionalPart = number\
    \ - fraction\n        fractionalPart / fraction", "        val intPart = math.ceil(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val integerPart = math.floor(number)\n        val decimalPart = number\
    \ - integerPart\n        decimalPart", "        val fraction = number.toInt\n\
    \        val remainder = number - fraction\n        fraction", "        val fraction\
    \ = number.toInt\n        val decimal = number - fraction\n        fraction",
  "        val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        intPart + decimalPart", "        val fraction = number.toInt\n      \
    \  val decimal = number - fraction\n        decimal", "        val intPart = math.floor(number)\n\
    \        val decimalPart = math.abs(number - intPart)\n        intPart + (decimalPart\
    \ / math.pow(10, decimalPart.toInt))", "        val intPart = math.floor(number)\n\
    \        val decimalPart = number - intPart\n        intPart + decimalPart", " \
    \       val fractionalPart = number % 1\n        val integerPart = math.floor(number)\n\
    \        val decimalPart = fractionalPart * 10\n        decimalPart", "      \
    \  val intPart = math.floor(number)\n        val decimalPart = number - intPart\n\
    \        decimalPart", "        val fraction = number.toInt\n        val fractionalPart\
    \ = number - fraction\n        fractionalPart / fraction"]
stop_tokens:
- "\n    }\n"
