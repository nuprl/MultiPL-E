language: scala
name: HumanEval_163_generate_integers
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1) filter (_ % 2 == 0)\n        val odds = a until (b - 1) filter\
    \ (_ % 2 != 0)\n        evens ++ odds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplyxuml0m.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ky8c0n6.scala:19)\n\tat Problem.main(tmp9ky8c0n6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n  \
    \      while(range.hasNext) {\n            val current = range.next\n        \
    \    val remainder = current % 10\n            if(remainder == 0) {\n        \
    \        result.add(current.toLong)\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb6_r2dhl.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a.toInt\n        val odd = b.toInt\n        while(even < odd)\
    \ {\n            evens += even\n            odd += 2\n        }\n        while(even\
    \ > odd) {\n            odds += odd\n            even -= 2\n        }\n      \
    \  evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0onhmg2z.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0onhmg2z.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0onhmg2z.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            odd += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0onhmg2z.scala:24:17\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            even -= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value -= is not a member of Int - did you mean even.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b + 1)\n        val odds = b until (a + 1)\n        evens.filter(x\
    \ => x % 2 == 0).sorted ++ odds.filter(x => x % 2 == 1).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8m4ikjgd.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sorted ++ odds.filter(\e[36mx\e[0m =>\
    \ x % \e[31m2\e[0m == \e[31m1\e[0m).sorted\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.toList.sortBy(_.toInt)\n        val\
    \ evensSortedList = evensSorted.map(_.toLong).toList\n        evensSortedList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfeqqm5ot.scala:20)\n\tat Problem.main(tmpfeqqm5ot.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val num = (a to b).map(_.toInt)\n    \
    \    val even = num.filter(x => x % 2 == 0)\n        val odd = num.filter(x =>\
    \ x % 2 != 0)\n        val evenList = even.map(x => x.toLong)\n        val oddList\
    \ = odd.map(x => x.toLong)\n        val list = evenList.zip(oddList).sortBy(_._1).map(x\
    \ => x._2)\n        list.filter(x => x >= a).filter(x => x <= b).map(x => x.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplybvasee.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = evenList.zip(oddList).sortBy(_._1).map(\e\
    [36mx\e[0m => x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlist is already defined as \e[33mvalue\e[0m \e[35mlist\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplybvasee.scala:14:19 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n        val\
    \ end = (a / b).toInt\n        val mid = (a + b) / 2\n        val i = start\n\
    \        while (i <= end) {\n            list += mid.toLong\n            i +=\
    \ 2\n        }\n        if (a < b) {\n            list += mid.toLong\n       \
    \ }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy2cn74th.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpy2cn74th.scala:21:14 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            i += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659797789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = a to b\n        for(i <- range) {\n            if(i % 2 ==\
    \ 0) {\n                evens += i\n            } else {\n                odds\
    \ += i\n            }\n        }\n        evens.toList ++ odds.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1pnh0cdl.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1pnh0cdl.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = mutable.ListBuffer[Long]()\n        val low = a\n        val high = b\n  \
    \      while(low <= high) {\n            val mid = low + (high - low) / 2\n  \
    \          val digit = math.pow(10, mid.toInt)\n            if(digit % 2 == 0)\
    \ {\n                result.+=mid\n            }\n            low = mid + 1\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpulqt8owy.scala:21:28 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                result.+=mid\n\e[31m\e[31m   |\e[0m \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpulqt8owy.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpulqt8owy.scala:23:16 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            low = mid + \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val low\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        while (i <= b) {\n\
    \            if (i % 2 == 0) {\n                evens += i\n            }\n  \
    \          i += 1\n        }\n        evens.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphbr_a4mm.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = mutable.ListBuffer.empty[Long]\n        val mid = a + (b - a) / 2\n      \
    \  val mid2 = mid / 2\n        val mid3 = mid2 / 2\n        val mid4 = mid3 /\
    \ 2\n        val mid5 = mid4 / 2\n        val mid6 = mid5 / 2\n        val mid7\
    \ = mid6 / 2\n        val mid8 = mid7 / 2\n        val mid9 = mid8 / 2\n     \
    \   val mid10 = mid9 / 2\n        val mid11 = mid10 / 2\n        val mid12 = mid11\
    \ / 2\n        val mid13 = mid12 / 2\n        val mid14 = mid13 / 2\n        val\
    \ mid15 = mid14 / 2\n        val mid16 = mid15 / 2\n        val mid17 = mid16\
    \ / 2\n        val mid18 = mid17 / 2\n        val mid19 = mid18 / 2\n        val\
    \ mid20 = mid19 / 2\n        val mid21 = mid20 / 2\n        val mid22 = mid21\
    \ / 2\n        val mid23 = mid22 / 2\n        val mid24 = mid23 / 2\n        val\
    \ mid25 = mid24 / 2\n        val mid26 = mid25 / 2\n        val mid27 = mid26\
    \ / 2\n        val mid28 = mid27 / 2\n        val mid29 = mid28 / 2\n        val\
    \ mid30 = mid29 / 2\n        val mid31 = mid30 / 2\n        val mid32 = mid31\
    \ / 2\n        val mid33 = mid32 / 2\n        val mid34 = mid33 / 2\n        val\
    \ mid35 = mid34 / 2\n        val mid36 = mid35 / 2\n        val mid37 = mid36\
    \ / 2\n        val mid38 = mid37 / 2\n        val mid39 = mid38 / 2\n        val\
    \ mid40 = mid39 / 2\n        val mid41 = mid40 / 2\n        val mid42 = mid41\
    \ / 2\n        val mid43 = mid42 / 2\n        val mid44 = mid43 / 2\n        val\
    \ mid45 = mid44 / 2\n        val mid46 = mid45 / 2\n        val mid47 = mid46\
    \ / 2\n        val mid48 = mid47 / 2\n        val mid49 = mid48 / 2\n        val\
    \ mid50 = mid49 / 2\n        val mid51 = mid50 / 2\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpppf6ig_d.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpppf6ig_d.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659797789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val low = a\n        val high = b\n\
    \        while(low < high) {\n            val mid = low + (high - low) / 2\n \
    \           if(mid % 2 == 0) {\n                result.+=mid.toLong\n        \
    \        low = mid\n            } else {\n                high = mid\n       \
    \     }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp17p62nos.scala:20:28 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                result.+=mid.toLong\n\e[31m\e[31m   |\e\
    [0m                            ^\e[0m\n\e[31m   |\e[0m                       \
    \     expression expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp17p62nos.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp17p62nos.scala:21:20\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                low\
    \ = mid\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val low\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmp17p62nos.scala:23:21 -----------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                high = mid\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment to val high\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659797786
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.toList\n        val evensSortedSorted:\
    \ mutable.Buffer[Long] = evensSorted.sortWith(_ < _)\n        val evensSortedSortedSorted:\
    \ mutable.Buffer[Long] = evensSortedSorted.sortWith(_ < _)\n        val evensSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evensSortedSortedSorted.sortWith(_ < _)\n        val\
    \ evensSortedSortedSortedSortedSorted: mutable.Buffer[Long] = evensSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = evensSortedSortedSortedSortedSorted.sortWith(_ < _)\n        val evensSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evensSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSorted.sortWith(_ < _)\n        val\
    \ evensSortedSortedSortedSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_ < _)\n  \
    \      val evensSortedSortedSortedSortedSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_ < _)\n\
    \        val evensSortedSortedSortedSortedSortedSortedSortedSortedSorted: mutable.Buffer[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ mutable.Buffer[Long] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7ekeavg0.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSortedSortedSorted\e\
    [0m: mutable.Buffer[\e[35mLong\e[0m] = evensSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSortedSortedSortedSorted is already\
    \ defined as \e[33mvalue\e[0m \e[35mevensSortedSortedSortedSortedSortedSortedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ekeavg0.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSortedSortedSortedSortedSorted\e\
    [0m: mutable.Buffer[\e[35mLong\e[0m] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35mevensSortedSortedSortedSortedSortedSortedSortedSortedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ekeavg0.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\e\
    [0m: mutable.Buffer[\e[35mLong\e[0m] = evensSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        val evenList = evens.toList\n\
    \        val oddList = odds.toList\n        val evenList = evenList.filter(_%2==0)\n\
    \        val oddList = oddList.filter(_%2==1)\n        val evenList = evenList.sortBy(_%2==0)\n\
    \        val oddList = oddList.sortBy(_%2==1)\n        val evenList = evenList.filter(_%2==0)\n\
    \        val oddList = oddList.filter(_%2==1)\n        val evenList = evenList.sortBy(_%2==0)\n\
    \        val oddList = oddList.sortBy(_%2==1)\n        val evenList = evenList.filter(_%2==0)\n\
    \        val oddList = oddList.filter(_%2==1)\n        val evenList = evenList.sortBy(_%2==0)\n\
    \        val oddList = oddList.sortBy(_%2==1)\n        val evenList = evenList.filter(_%2==0)\n\
    \        val oddList = oddList.filter(_%2==1)\n        val evenList = evenList.sortBy(_%2==0)\n\
    \        val oddList = oddList.sortBy(_%2==1)\n        val evenList = evenList.filter(_%2==0)\n\
    \        val oddList = oddList.filter(_%2==1)\n        val evenList = evenList.sortBy(_%2==0)\n\
    \        val oddList = oddList.sortBy(_%2==1)\n        val evenList = evenList.filter(_%2==0)\n\
    \        val oddList = oddList.filter(_%2==1)\n        val evenList = evenList.sortBy(_%2==0)\n\
    \        val oddList = oddList.sortBy(_%2==1)\n        val evenList = evenList.filter(_%2==0)\n\
    \        val oddList = oddList.filter(_%2==1)\n        val evenList = evenList.sortBy(_%2==0)\n\
    \        val oddList = oddList.sortBy(_%2==1)\n        val evenList = evenList.filter(_%2==0)\n\
    \        val oddList = oddList.filter(_%2==1)\n        val evenList = evenList.sortBy(_%2==0)\n\
    \        val oddList = oddList.sortBy(_%2==1)\n        val evenList = evenList.filter(_%2==0)\n\
    \        val oddList = oddList.filter(_%2==1)\n        val evenList = evenList.sortBy(_%2==0)\n\
    \        val oddList = odd\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9rh0t0er.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevenList\e[0m = evenList.filter(_%\e\
    [31m2\e[0m==\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenList is already defined as \e[33mvalue\e[0m \e[35mevenList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9rh0t0er.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36moddList\e[0m = oddList.filter(_%\e[31m2\e\
    [0m==\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddList is already defined as \e[33mvalue\e[0m \e[35moddList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9rh0t0er.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mevenList\e[0m = evenList.sortBy(_%\e\
    [31m2\e[0m==\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenList is already defined as \e[33mvalue\e[0m \e[35mevenList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9rh0t0er.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36moddList\e[0m = oddList.sortBy(_%\e[31m2\e\
    [0m==\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddList is already defined as \e[33mvalue\e[0m \e[35moddList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9rh0t0er.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mevenList\e[0m = evenList.filter(_%\e\
    [31m2\e[0m==\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^"
  stdout: ''
  timestamp: 1659797789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val n = math.abs(a-b)\n        val\
    \ m = math.max(a,b)\n        val d = math.min(a,b)\n        val x = math.floor((a-b)/d)\n\
    \        val y = math.floor((a-b)/n)\n        val z = math.floor((a-b)/m)\n  \
    \      val w = math.floor((a-b)/x)\n        val a = math.floor((a-b)/y)\n    \
    \    val b = math.floor((a-b)/z)\n        val c = math.floor((a-b)/w)\n      \
    \  val d = math.floor((a-b)/a)\n        val e = math.floor((a-b)/b)\n        val\
    \ f = math.floor((a-b)/c)\n        val g = math.floor((a-b)/d)\n        val h\
    \ = math.floor((a-b)/e)\n        val i = math.floor((a-b)/f)\n        val j =\
    \ math.floor((a-b)/g)\n        val k = math.floor((a-b)/h)\n        val l = math.floor((a-b)/i)\n\
    \        val m = math.floor((a-b)/j)\n        val n = math.floor((a-b)/k)\n  \
    \      val o = math.floor((a-b)/l)\n        val p = math.floor((a-b)/m)\n    \
    \    val q = math.floor((a-b)/n)\n        val r = math.floor((a-b)/o)\n      \
    \  val s = math.floor((a-b)/p)\n        val t = math.floor((a-b)/q)\n        val\
    \ u = math.floor((a-b)/r)\n        val v = math.floor((a-b)/s)\n        val w\
    \ = math.floor((a-b)/t)\n        val x = math.floor((a-b)/u)\n        val y =\
    \ math.floor((a-b)/v)\n        val z = math.floor((a-b)/w)\n        val a = math.floor((a-b)/x)\n\
    \        val b = math.floor((a-b)/y)\n        val c = math.floor((a-b)/z)\n  \
    \      val d = math.floor((a-b)/a)\n        val e = math.floor((a-b)/b)\n    \
    \    val f = math.floor((a-b)/c)\n        val g = math.floor((a-b)/d)\n      \
    \  val h = math.floor((a-b)/e)\n        val i = math.floor((a-b)/f)\n        val\
    \ j = math.floor((a-b)/g)\n        val k = math.floor((a-b)/h)\n        val l\
    \ = math.floor((a-b)/i)\n        val m = math.floor((a-b)/j)\n        val \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpoght6rbt.scala:61:11 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpoght6rbt.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = math.floor((a-b)/a)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md\
    \ is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoght6rbt.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.floor((a-b)/j)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpoght6rbt.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.floor((a-b)/k)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already\
    \ defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoght6rbt.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mw\e[0m = math.floor((a-b)/t)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mw\
    \ is already defined as \e[33mvalue\e[0m \e[35mw\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoght6rbt.scala:45:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e["
  stdout: ''
  timestamp: 1659797788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < b).map(x => x.toLong).toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4udkvlq9.scala:20)\n\tat Problem.main(tmp4udkvlq9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797573
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppdys93t0.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppdys93t0.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi3vh8v8_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi3vh8v8_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3vh8v8_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi3vh8v8_.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3vh8v8_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n        val\
    \ end = (a / b).toInt\n        val step = (b / a).toInt\n        for(i <- start\
    \ until end) {\n            val x = i * step\n            val y = x % b\n    \
    \        val z = y / a\n            val a = z % b\n            val b = a / b\n\
    \            result += x.toLong\n        }\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz0nq8c2k.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi3vh8v8_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi3vh8v8_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3vh8v8_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi3vh8v8_.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3vh8v8_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        val evensSet = evens.toSet\n\
    \        val oddsSet = odds.toSet\n        val evensSetIterator = evensSet.iterator\n\
    \        val oddsSetIterator = oddsSet.iterator\n        val evensSetIterator2\
    \ = evensSetIterator.next\n        val oddsSetIterator2 = oddsSetIterator.next\n\
    \        val evensSetIterator3 = evensSetIterator2.next\n        val oddsSetIterator3\
    \ = oddsSetIterator2.next\n        val evensSetIterator4 = evensSetIterator3.next\n\
    \        val oddsSetIterator4 = oddsSetIterator3.next\n        val evensSetIterator5\
    \ = evensSetIterator4.next\n        val oddsSetIterator5 = oddsSetIterator4.next\n\
    \        val evensSetIterator6 = evensSetIterator5.next\n        val oddsSetIterator6\
    \ = oddsSetIterator5.next\n        val evensSetIterator7 = evensSetIterator6.next\n\
    \        val oddsSetIterator7 = oddsSetIterator6.next\n        val evensSetIterator8\
    \ = evensSetIterator7.next\n        val oddsSetIterator8 = oddsSetIterator7.next\n\
    \        val evensSetIterator9 = evensSetIterator8.next\n        val oddsSetIterator9\
    \ = oddsSetIterator8.next\n        val evensSetIterator10 = evensSetIterator9.next\n\
    \        val oddsSetIterator10 = oddsSetIterator9.next\n        val evensSetIterator11\
    \ = evensSetIterator10.next\n        val oddsSetIterator11 = oddsSetIterator10.next\n\
    \        val evensSetIterator12 = evensSetIterator11.next\n        val oddsSetIterator12\
    \ = oddsSetIterator11.next\n        val evensSetIterator13 = evensSetIterator12.next\n\
    \        val oddsSetIterator13 = oddsSetIterator12.next\n        val evensSetIterator14\
    \ = evensSetIterator13.next\n        val oddsSetIterator14 = oddsSetIterator13.next\n\
    \        val evensSetIterator15 = evensSetIterator14.next\n        val oddsSetIterator15\
    \ = oddsSetIterator14.next\n        val evensSetIterator16 = evensSetIterator15.next\n\
    \        val oddsSetIterator16 = oddsSetIterator15.next\n        val evensSetIterator17\
    \ = evensSetIterator16.next\n        val oddsSetIterator\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt8sxbkzy.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt8sxbkzy.scala:22:50\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mevensSetIterator3\e[0m = evensSetIterator2.next\n\e[31m\e[31m   |\e[0m   \
    \                             ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                             value next is not a member of Long\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpt8sxbkzy.scala:23:48 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36moddsSetIterator3\e[0m =\
    \ oddsSetIterator2.next\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value next is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt8sxbkzy.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val range = (a to b).toList\n        for(i\
    \ <- range) {\n            val remainder = i % 10\n            val digit = if\
    \ (remainder == 0) i else 10 * remainder + i\n            list += digit\n    \
    \    }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkhe5heha.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList\n\
    \        val oddsSorted = odds.toList\n        val evensSortedSorted: List[Long]\
    \ = evensSorted.sortWith(_ < _)\n        val oddsSortedSorted: List[Long] = oddsSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSorted: List[Long] = evensSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSorted: List[Long] = oddsSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpkbyqhr36.scala:38:11 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpkbyqhr36.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = evensSortedSortedSorted.sortWith(_ < _)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkbyqhr36.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = oddsSortedSortedSorted.sortWith(_ < _)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35moddsSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkbyqhr36.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = evensSortedSortedSorted.sortWith(_ < _)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined i"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val a = a.toInt\n        val b = b.toInt\n        val c = a / b\n   \
    \     val d = a % b\n        val e = c / b\n        val f = c % b\n        val\
    \ g = d / b\n        val h = d % b\n        val i = e / b\n        val j = e %\
    \ b\n        val k = f / b\n        val l = f % b\n        val m = g / b\n   \
    \     val n = g % b\n        val o = h / b\n        val p = h % b\n        val\
    \ q = i / b\n        val r = i % b\n        val s = j / b\n        val t = j %b\n\
    \        val u = k / b\n        val v = k % b\n        val w = l / b\n       \
    \ val x = l % b\n        val y = m / b\n        val z = m % b\n        val aa\
    \ = o / b\n        val bb = o % b\n        val cc = p / b\n        val dd = p\
    \ % b\n        val ee = q / b\n        val ff = q %b\n        val gg = s / b\n\
    \        val hh = s % b\n        val ii = t / b\n        val jj = t % b\n    \
    \    val kk = u / b\n        val ll = u %b\n        val mm = v / b\n        val\
    \ nn = v %b\n        val oo = w / b\n        val pp = w %b\n        val qq = x\
    \ / b\n        val rr = x %b\n        val ss = y / b\n        val tt = y %b\n\
    \        val uu = z / b\n        val vv = z %b\n        val ww = aa / b\n    \
    \    val xx = aa %b\n        val yy = bb / b\n        val zz = bb %b\n       \
    \ val aaa = cc / b\n        val bbb = cc %b\n        val ccc = dd / b\n      \
    \  val ddd = dd %b\n        val eee = ee / b\n        val fff = ee %b\n      \
    \  val ggg = ff / b\n        val hhh = ff %b\n        val iii = gg / b\n     \
    \   val jjj = gg %b\n        val kkk = hh / b\n        val lll = h\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp753ae8pd.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp753ae8pd.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp753ae8pd.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = a.toInt\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ma\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp753ae8pd.scala:17:16 ---------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = b.toInt\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvalue\e[0m \e[35mb\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp753ae8pd.scala:80:5 ---------------------\e[0m\e\
    [0m\n\e[31m80 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a / 2\n        val odds = a % 2\n        val evensRemaining = b / 2\n    \
    \    val oddsRemaining = b % 2\n        val evensRemainingList = generateIntegers(evensRemaining,\
    \ evensRemaining)\n        val oddsRemainingList = generateIntegers(oddsRemaining,\
    \ oddsRemaining)\n        val evensRemainingList ++ oddsRemainingList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ib5pr38.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7ib5pr38.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ evensRemainingList ++ oddsRemainingList\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensRemainingList is already defined as \e[33mvalue\e[0m\
    \ \e[35mevensRemainingList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7ib5pr38.scala:20:34 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m evensRemainingList ++ oddsRemainingList\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moddsRemainingList is already defined as \e[33mvalue\e[0m \e[35moddsRemainingList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp7ib5pr38.scala:20:31 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m evensRemainingList ++ oddsRemainingList\n\
    \e[31m\e[31m   |\e[0m                               ^^\e[0m\n\e[31m   |\e[0m \
    \                              Not found: ++\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7ib5pr38.scala:21:5 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val x = a.toInt\n        val y = b.toInt\n\
    \        var i = x\n        var j = y\n        while(i <= y) {\n            val\
    \ temp = (i + (j / 10).toInt).toLong\n            result += temp\n           \
    \ i = i + 1\n            j = j % 10\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_x3av5z8.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val i = a\n        val j = b\n       \
    \ while (i <= j) {\n            list += i\n            i += 1\n        }\n   \
    \     list.sortBy(_ % 10)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwxxq45y8.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwxxq45y8.scala:19:14 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val mid = math.max(a, b)\n       \
    \ val mid2 = math.min(mid, a)\n        val mid3 = math.min(mid, b)\n        val\
    \ mid4 = math.max(mid2, a)\n        val mid5 = math.max(mid3, b)\n        val\
    \ mid6 = math.min(mid4, a)\n        val mid7 = math.min(mid5, b)\n        val\
    \ mid8 = math.max(mid6, a)\n        val mid9 = math.max(mid7, b)\n        val\
    \ mid10 = math.min(mid8, a)\n        val mid11 = math.min(mid9, b)\n        val\
    \ mid12 = math.max(mid10, a)\n        val mid13 = math.max(mid11, b)\n       \
    \ val mid14 = math.min(mid12, a)\n        val mid15 = math.min(mid13, b)\n   \
    \     val mid16 = math.max(mid14, a)\n        val mid17 = math.max(mid15, b)\n\
    \        val mid18 = math.min(mid16, a)\n        val mid19 = math.min(mid17, b)\n\
    \        val mid20 = math.max(mid18, a)\n        val mid21 = math.max(mid19, b)\n\
    \        val mid22 = math.min(mid20, a)\n        val mid23 = math.min(mid21, b)\n\
    \        val mid24 = math.max(mid22, a)\n        val mid25 = math.max(mid23, b)\n\
    \        val mid26 = math.min(mid24, a)\n        val mid27 = math.min(mid25, b)\n\
    \        val mid28 = math.max(mid26, a )\n        val mid29 = math.max(mid27,\
    \ b)\n        val mid30 = math.min(mid28, a)\n        val mid31 = math.min(mid29,\
    \ b)\n        val mid32 = math.max(mid30, a)\n        val mid33 = math.max(mid31,\
    \ b)\n        val mid34 = math.min(mid32, a)\n        val mid35 = math.min(mid33,\
    \ b)\n        val mid36 = math.max(mid34, a )\n        val mid37 = math.max(mid35,\
    \ b)\n        val mid38 = math.min(mid36, a )\n        val mid39 = math.max(mid37,\
    \ b)\n        val mid40 = math.min(mid38, a )\n        val mid41 = math.max(mid39,\
    \ b)\n        val mid42 = math.min(mid40, a )\n        val mid43 = math.max(mid41,\
    \ b)\n        val mid44 = math.min(mid42, a )\n        val mid45 = math.max(mid43,\
    \ b)\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgjwjdyx7.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgjwjdyx7.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n        val\
    \ end = (a / b).toInt\n        val start2 = start / 2\n        val end2 = end\
    \ / 2\n        val start3 = start2 / 2\n        val end3 = end2 / 2\n        val\
    \ start4 = start3 / 2\n        val end4 = end3 / 2\n        val start5 = start4\
    \ / 2\n        val end5 = end4 / 2\n        val start6 = start5 / 2\n        val\
    \ end6 = end5 / 2\n        val start7 = start6 / 2\n        val end7 = end6 /\
    \ 2\n        val start8 = start7 / 2\n        val end8 = end7 / 2\n        val\
    \ start9 = start8 / 2\n        val end9 = end8 / 2\n        val start10 = start9\
    \ / 2\n        val end10 = end9 / 2\n        val start11 = start10 / 2\n     \
    \   val end11 = end10 / 2\n        val start12 = start11 / 2\n        val end12\
    \ = end11 / 2\n        val start13 = start12 / 2\n        val end13 = end12 /\
    \ 2\n        val start14 = start13 / 2\n        val end14 = end13 / 2\n      \
    \  val start15 = start14 / 2\n        val end15 = end14 / 2\n        val start16\
    \ = start15 / 2\n        val end16 = end15 / 2\n        val start17 = start16\
    \ / 2\n        val end17 = end16 / 2\n        val start18 = start17 / 2\n    \
    \    val end18 = end17 / 2\n        val start19 = start18 / 2\n        val end19\
    \ = end18 / 2\n        val start20 = start19 / 2\n        val end20 = end19 /\
    \ 2\n        val start21 = start20 / 2\n        val end21 = end20 / 2\n      \
    \  val start22 = start21 / 2\n        val end22 = end21 / 2\n        val start23\
    \ = start22 / 2\n        val end23 = end22 / 2\n        val start24 = start23\
    \ / 2\n        val end24 = end23 / 2\n        val start25 = start24 / 2\n    \
    \    val end25 = end24 / 2\n        val start26 = start25 / 2\n        val end26\
    \ = end25 / 2\n        val start27 = start\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp28b7x6qe.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp28b7x6qe.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList\n\
    \        val oddsSorted = odds.toList\n        val result = evensSorted.filter(_\
    \ % 2 == 0).sortWith(_ < _)\n        val result2 = oddsSorted.filter(_ % 2 ==\
    \ 1).sortWith(_ < _)\n        val result3 = evensSorted.filter(_ % 2 == 0).sortWith(_\
    \ < _)\n        val result4 = oddsSorted.filter(_ % 2 == 1).sortWith(_ < _)\n\
    \        val result5 = evensSorted.filter(_ % 2 == 0).sortWith(_ < _)\n      \
    \  val result6 = oddsSorted.filter(_ % 2 == 1).sortWith(_ < _)\n        val result7\
    \ = evensSorted.filter(_ % 2 == 0).sortWith(_ < _)\n        val result8 = oddsSorted.filter(_\
    \ % 2 == 1).sortWith(_ < _)\n        val result9 = evensSorted.filter(_ % 2 ==\
    \ 0).sortWith(_ < _)\n        val result10 = oddsSorted.filter(_ % 2 == 1).sortWith(_\
    \ < _)\n        val result11 = evensSorted.filter(_ % 2 == 0).sortWith(_ < _)\n\
    \        val result12 = oddsSorted.filter(_ % 2 == 1).sortWith(_ < _)\n      \
    \  val result13 = evensSorted.filter(_ % 2 == 0).sortWith(_ < _)\n        val\
    \ result14 = oddsSorted.filter(_ % 2 == 1).sortWith(_ < _)\n        val result15\
    \ = evensSorted.filter(_ % 2 == 0).sortWith(_ < _)\n        val result16 = oddsSorted.filter(_\
    \ % 2 == 1).sortWith(_ < _)\n        val result17 = evensSorted.filter(_ % 2 ==\
    \ 0).sortWith(_ < _)\n        val result18 = oddsSorted.filter(_ % 2 == 1).sortWith(_\
    \ < _)\n        val result19 = evensSorted.filter(_ % 2 == 0).sortWith(_ < _)\n\
    \        val result20 = oddsSorted.filter(_ % 2 == 1).sortWith(_ < _)\n      \
    \  val result21 = evensSorted.filter(_ % 2 == 0).sortWith(_ < _)\n        val\
    \ result22 = oddsSorted.filter(_ % 2 == 1).sortWith(_ < _)\n        val result23\
    \ = evensSorted.filter(_ % 2 == 0).sortWith(_ < _)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4r4_rt56.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val range = (a to b).toList\n    \
    \    range.foreach(x => {\n            val digit = x % 10\n            if (digit\
    \ == 0) result.add(x)\n        })\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4p7g377t.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        val evensSet = evens.toSet\n\
    \        val oddsSet = odds.toSet\n        val evensSet2 = evens.toSet\n     \
    \   val oddsSet2 = odds.toSet\n        val evensSet3 = evens.toSet\n        val\
    \ oddsSet3 = odds.toSet\n        val evensSet4 = evens.toSet\n        val oddsSet4\
    \ = odds.toSet\n        val evensSet5 = evens.toSet\n        val oddsSet5 = odds.toSet\n\
    \        val evensSet6 = evens.toSet\n        val oddsSet6 = odds.toSet\n    \
    \    val evensSet7 = evens.toSet\n        val oddsSet7 = odds.toSet\n        val\
    \ evensSet8 = evens.toSet\n        val oddsSet8 = odds.toSet\n        val evensSet9\
    \ = evens.toSet\n        val oddsSet9 = odds.toSet\n        val evensSet10 = evens.toSet\n\
    \        val oddsSet10 = odds.toSet\n        val evensSet11 = evens.toSet\n  \
    \      val oddsSet11 = odds.toSet\n        val evensSet12 = evens.toSet\n    \
    \    val oddsSet12 = odds.toSet\n        val evensSet13 = evens.toSet\n      \
    \  val oddsSet13 = odds.toSet\n        val evensSet14 = evens.toSet\n        val\
    \ oddsSet14 = odds.toSet\n        val evensSet15 = evens.toSet\n        val oddsSet15\
    \ = odds.toSet\n        val evensSet16 = evens.toSet\n        val oddsSet16 =\
    \ odds.toSet\n        val evensSet17 = evens.toSet\n        val oddsSet17 = odds.toSet\n\
    \        val evensSet18 = evens.toSet\n        val oddsSet18 = odds.toSet\n  \
    \      val evensSet19 = evens.toSet\n        val oddsSet19 = odds.toSet\n    \
    \    val evensSet20 = evens.toSet\n        val oddsSet20 = odds.toSet\n      \
    \  val evensSet21 = evens.toSet\n        val oddsSet21 = odds.toSet\n        val\
    \ evensSet22 = evens.toSet\n        val odds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyh2e1mak.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyh2e1mak.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val remainder = a % b\n        val\
    \ remainder2 = remainder.toInt\n        val remainder3 = remainder2.toInt\n  \
    \      val remainder4 = remainder3.toInt\n        val remainder5 = remainder4.toInt\n\
    \        val remainder6 = remainder5.toInt\n        val remainder7 = remainder6.toInt\n\
    \        val remainder8 = remainder7.toInt\n        val remainder9 = remainder8.toInt\n\
    \        val remainder10 = remainder9.toInt\n        val remainder11 = remainder10.toInt\n\
    \        val remainder12 = remainder11.toInt\n        val remainder13 = remainder12.toInt\n\
    \        val remainder14 = remainder13.toInt\n        val remainder15 = remainder14.toInt\n\
    \        val remainder16 = remainder15.toInt\n        val remainder17 = remainder16.toInt\n\
    \        val remainder18 = remainder17.toInt\n        val remainder19 = remainder18.toInt\n\
    \        val remainder20 = remainder19.toInt\n        val remainder21 = remainder20.toInt\n\
    \        val remainder22 = remainder21.toInt\n        val remainder23 = remainder22.toInt\n\
    \        val remainder24 = remainder23.toInt\n        val remainder25 = remainder24.toInt\n\
    \        val remainder26 = remainder25.toInt\n        val remainder27 = remainder26.toInt\n\
    \        val remainder28 = remainder27.toInt\n        val remainder29 = remainder28.toInt\n\
    \        val remainder30 = remainder29.toInt\n        val remainder31 = remainder30.toInt\n\
    \        val remainder32 = remainder31.toInt\n        val remainder33 = remainder32.toInt\n\
    \        val remainder34 = remainder33.toInt\n        val remainder35 = remainder34.toInt\n\
    \        val remainder36 = remainder35.toInt\n        val remainder37 = remainder36.toInt\n\
    \        val remainder38 = remainder37.toInt\n        val remainder39 = remainder38.toInt\n\
    \        val remainder40 = remainder39.toInt\n        val remainder41 = remainder40.toInt\n\
    \        val remainder42 = remainder41.toInt\n        val remainder43 = remainder42.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphnjmsh8e.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmphnjmsh8e.scala:14:25 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphnjmsh8e.scala:58:5 ---------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val x = range.next\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0w80lxu.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_0w80lxu.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        var i = a\n        while(i <= b) {\n\
    \            val digit = i % 10\n            i /= 10\n            if(digit % 2\
    \ == 0) {\n                result += digit.toLong\n            }\n        }\n\
    \        return result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5o4in4z2.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n       \
    \ while(i <= j) {\n            result += i.toLong\n            i += 1\n      \
    \  }\n        result.sortWith(_ < _)\n        return result.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz1dw4iqx.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.toList.sortWith(_ < _)\n        val\
    \ evensSortedList = evensSorted.toList\n        val evensSortedListWithZeros =\
    \ evensSortedList.map(_ + 0).toList\n        val evensSortedListWithZeros = evensSortedList.map(_\
    \ + 0).toList\n        val evensSortedListWithZeros = evensSortedList.map(_ +\
    \ 0).toList\n        val evensSortedListWithZeros = evensSortedList.map(_ + 0).toList\n\
    \        val evensSortedListWithZeros = evensSortedList.map(_ + 0).toList\n  \
    \      val evensSortedListWithZeros = evensSortedList.map(_ + 0).toList\n    \
    \    val evensSortedListWithZeros = evensSortedList.map(_ + 0).toList\n      \
    \  val evensSortedListWithZeros = evensSortedList.map(_ + 0).toList\n        val\
    \ evensSortedListWithZeros = evensSortedList.map(_ + 0).toList\n        val evensSortedListWithZeros\
    \ = evensSortedList.map(_ + 0).toList\n        val evensSortedListWithZeros =\
    \ evensSortedList.map(_ + 0).toList\n        val evensSortedListWithZeros = evensSortedList.map(_\
    \ + 0).toList\n        val evensSortedListWithZeros = evensSortedList.map(_ +\
    \ 0).toList\n        val evensSortedListWithZeros = evensSortedList.map(_ + 0).toList\n\
    \        val evensSortedListWithZeros = evensSortedList.map(_ + 0).toList\n  \
    \      val evensSortedListWithZeros = evensSortedList.map(_ + 0).toList\n    \
    \    val evensSortedListWithZeros = evensSortedList.map(_ + 0).toList\n      \
    \  val evensSortedListWithZeros = evensSortedList.map(_ + 0).toList\n        val\
    \ evensSortedListWithZeros = evensSortedList.map(_ + 0).toList\n        val evensSortedListWithZeros\
    \ = evensSortedList.map(_ + 0).toList\n        val evensSortedListWithZeros =\
    \ evensSortedList.map(_ + 0).toList\n        val evensSortedListWithZeros = evensSortedList.map(_\
    \ + 0).toList\n        val evensSortedListWithZeros = evensSortedList.map(_ +\
    \ 0).toList\n        val evensSortedListWithZeros = evensSortedList.map\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxsj7j64o.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListWithZeros\e\
    [0m = evensSortedList.map(_ + \e[31m0\e[0m).toList\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mevensSortedListWithZeros is already defined as \e[33mvalue\e[0m \e\
    [35mevensSortedListWithZeros\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxsj7j64o.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListWithZeros\e\
    [0m = evensSortedList.map(_ + \e[31m0\e[0m).toList\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mevensSortedListWithZeros is already defined as \e[33mvalue\e[0m \e\
    [35mevensSortedListWithZeros\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxsj7j64o.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListWithZeros\e\
    [0m = evensSortedList.map(_ + \e[31m0\e[0m).toList\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mevensSortedListWithZeros is already defined as \e[33mvalue\e[0m \e\
    [35mevensSortedListWithZeros\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpxsj7j64o.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListWithZeros\e\
    [0m = evensSortedList.map(_ + \e[31m0\e[0m).toList\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mevensSortedListWithZeros is already defined as \e[33mvalue\e[0m \e\
    [35mevensSortedListWithZeros\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNot"
  stdout: ''
  timestamp: 1660009261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to b + 1\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val oddsSortedList = oddsSorted.toList\n     \
    \   val evensSortedListLength = evensSortedList.size\n        val oddsSortedListLength\
    \ = oddsSortedList.size\n        val evensSortedListLength = evensSortedListLength\
    \ until evensSortedListLength filter (_ % 2 == 0)\n        val oddsSortedListLength\
    \ = oddsSortedListLength until oddsSortedListLength filter (_ % 2 == 1)\n    \
    \    val evensSortedListLength = evensSortedListLength until evensSortedListLength\
    \ filter (_ % 2 == 0)\n        val oddsSortedListLength = oddsSortedListLength\
    \ until oddsSortedListLength filter (_ % 2 == 1)\n        val evensSortedListLength\
    \ = evensSortedListLength until evensSortedListLength filter (_ % 2 == 0)\n  \
    \      val oddsSortedListLength = oddsSortedListLength until oddsSortedListLength\
    \ filter (_ % 2 == 1)\n        val evensSortedListLength = evensSortedListLength\
    \ until evensSortedListLength filter (_ % 2 == 0)\n        val oddsSortedListLength\
    \ = oddsSortedListLength until oddsSortedListLength filter (_ % 2 == 1)\n    \
    \    val evensSortedListLength = evensSortedListLength until evensSortedListLength\
    \ filter (_ % 2 == 0)\n        val oddsSortedListLength = oddsSortedListLength\
    \ until oddsSortedListLength filter (_ % 2 == 1)\n        val evensSortedListLength\
    \ = evensSortedListLength until evensSortedListLength filter (_ % 2 == 0)\n  \
    \      val oddsSortedListLength = oddsSortedListLength until oddsSortedListLength\
    \ filter (_ % 2 == 1)\n        val evensSortedListLength = evensSortedListLength\
    \ until evensSortedListLength filter (_ % 2 == 0)\n        val oddsSortedListLength\
    \ = oddsSortedListLength until oddsSortedListLength filter (_ % 2 == 1)\n    \
    \    val evensSortedListLength = evensSortedListLength until evensSortedListLength\
    \ filter (_ % 2 == 0)\n        val oddsSortedListLength = odd\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg54ld25m.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength until evensSortedListLength filter (_ % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg54ld25m.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedListLength until oddsSortedListLength filter (_ % \e[31m2\e[0m ==\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35moddsSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg54ld25m.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength until evensSortedListLength filter (_ % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg54ld25m.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedListLength until oddsSortedListLength filter (_ % \e[31m2\e[0m ==\
    \ \e[31m1\e["
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val evensSortedListIterator = evensSortedList.iterator\n\
    \        val evensSortedListIteratorNext = evensSortedListIterator.next\n    \
    \    val evensSortedListIteratorNextNext = evensSortedListIteratorNext.next\n\
    \        val evensSortedListIteratorNextNextNext = evensSortedListIteratorNextNext.next\n\
    \        val evensSortedListIteratorNextNextNextNext = evensSortedListIteratorNextNextNext.next\n\
    \        val evensSortedListIteratorNextNextNextNextNext = evensSortedListIteratorNextNextNextNext.next\n\
    \        val evensSortedListIteratorNextNextNextNextNextNext = evensSortedListIteratorNextNextNextNextNext.next\n\
    \        val evensSortedListIteratorNextNextNextNextNextNextNext = evensSortedListIteratorNextNextNextNextNextNext.next\n\
    \        val evensSortedListIteratorNextNextNextNextNextNextNextNext = evensSortedListIteratorNextNextNextNextNextNextNext.next\n\
    \        val evensSortedListIteratorNextNextNextNextNextNextNextNextNext = evensSortedListIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val evensSortedListIteratorNextNextNextNextNextNextNextNextNext = evensSortedListIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val evensSortedListIteratorNextNextNextNextNextNextNextNextNextNext =\
    \ evensSortedListIteratorNextNextNextNextNextNextNextNextNextNext.next\n     \
    \   val evensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNext =\
    \ evensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val evensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = evensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val evensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = evensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val evensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = evensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val evensSortedListIteratorNextNextNext\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpguwgwost.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpguwgwost.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedListIteratorNextNextNextNextNextNextNextNextNext\e[0m = evensSortedListIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListIteratorNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mevensSortedListIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpguwgwost.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = evensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mevensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpguwgwost.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = evensSortedListIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm9c27cw6.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpm9c27cw6.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val even\
    \ = a % 2 == 0\n        val evenList = if (even) a :: b :: Nil else b :: a ::\
    \ Nil\n        val odd = a % 2 != 0\n        val oddList = if (odd) a :: b ::\
    \ Nil else b :: a :: Nil\n        val evenAndOdd = even && odd\n        val evenAndEven\
    \ = even && even\n        val oddAndEven = odd && even\n        val evenAndOddAndEven\
    \ = even && odd && even\n        val evenAndOddAndOdd = even && odd && odd\n \
    \       val evenAndOddAndEvenAndOdd = even && odd && even && odd\n        val\
    \ evenAndOddAndEvenAndOddAndEven = even && odd && even && odd && even\n      \
    \  val evenAndOddAndEvenAndOddAndOdd = even && odd && even && odd && odd\n   \
    \     val evenAndOddAndEvenAndOddAndEvenAndOdd = even && odd && even && odd &&\
    \ even && odd\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven = even\
    \ && odd && even && odd && even && odd && even\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndOdd\
    \ = even && odd && even && odd && even && odd && odd\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = even && odd && even && odd && even && odd && even && odd\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = even && odd && even && odd && even && odd && even && odd && even\n       \
    \ val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndOdd = even && odd &&\
    \ even && odd && even && odd && even && odd && odd\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ = even && odd && even && odd && even && odd && even && odd && even && odd\n\
    \        val evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd =\
    \ even && odd && even && odd && even && odd && even && odd && even && odd && even\n\
    \        val evenAndO\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu36wswzk.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu36wswzk.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\e[0m =\
    \ even && odd && even && odd && even && odd && even && odd && even && odd && even\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpu36wswzk.scala:35:5 ---------------------\e[0m\e[0m\n\
    \e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        val evensSorted = evens.sortBy(_.toInt)\n\
    \        val oddsSorted = odds.sortBy(_.toInt)\n        val evensSortedList =\
    \ evensSorted.toList\n        val oddsSortedList = oddsSorted.toList\n       \
    \ val evensSortedListLength = evensSortedList.length\n        val oddsSortedListLength\
    \ = oddsSortedList.length\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val oddsSortedListLength = oddsSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toInt\n        val oddsSortedListLength = oddsSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toInt\n        val\
    \ oddsSortedListLength = oddsSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toInt\n        val oddsSortedListLength = oddsSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toInt\n        val\
    \ oddsSortedListLength = oddsSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toInt\n        val oddsSortedListLength = oddsSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toInt\n        val\
    \ oddsSortedListLength = oddsSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toInt\n        val oddsSortedListLength = oddsSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toInt\n        val\
    \ oddsSortedListLength = oddsSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toInt\n        val oddsSortedListLength = oddsSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toInt\n        val\
    \ oddsSortedListLength = oddsSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toInt\n        val oddsSortedListLength = oddsSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toInt\n        val\
    \ oddsSortedListLength = oddsSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toInt\n        val oddsSortedListLength = odd\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpytzyig36.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpytzyig36.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35moddsSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpytzyig36.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpytzyig36.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedListLength\e[0m\
    \ = oddsSortedListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedListLength is already defined as \e[33mvalue\e[0m\
    \ \e[35moddsSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpytzyig36.scala"
  stdout: ''
  timestamp: 1660009262
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxep252mb.scala:19)\n\tat Problem.main(tmpxep252mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxep252mb.scala:19)\n\tat Problem.main(tmpxep252mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        val evensSet = evens.toSet\n\
    \        val oddsSet = odds.toSet\n        val evensSet2 = evens.filter(_ % 2\
    \ == 0).toSet\n        val oddsSet2 = odds.filter(_ % 2 == 0).toSet\n        val\
    \ evensSet3 = evens.filter(_ % 3 == 0).toSet\n        val oddsSet3 = odds.filter(_\
    \ % 3 == 0).toSet\n        val evensSet4 = evens.filter(_ % 4 == 0).toSet\n  \
    \      val oddsSet4 = odds.filter(_ % 4 == 0).toSet\n        val evensSet5 = evens.filter(_\
    \ % 5 == 0).toSet\n        val oddsSet5 = odds.filter(_ % 5 == 0).toSet\n    \
    \    val evensSet6 = evens.filter(_ % 6 == 0).toSet\n        val oddsSet6 = odds.filter(_\
    \ % 6 == 0).toSet\n        val evensSet7 = evens.filter(_ % 7 == 0).toSet\n  \
    \      val oddsSet7 = odds.filter(_ % 7 == 0).toSet\n        val evensSet8 = evens.filter(_\
    \ % 8 == 0).toSet\n        val oddsSet8 = odds.filter(_ % 8 == 0).toSet\n    \
    \    val evensSet9 = evens.filter(_ % 9 == 0).toSet\n        val oddsSet9 = odds.filter(_\
    \ % 9 == 0).toSet\n        val evensSet10 = evens.filter(_ % 10 == 0).toSet\n\
    \        val oddsSet10 = odds.filter(_ % 10 == 0).toSet\n        val evensSet11\
    \ = evens.filter(_ % 11 == 0).toSet\n        val oddsSet11 = odds.filter(_ % 11\
    \ == 0).toSet\n        val evensSet12 = evens.filter(_ % 12 == 0).toSet\n    \
    \    val oddsSet12 = odds.filter(_ % 12 == 0).toSet\n        val evensSet13 =\
    \ evens.filter(_ % 13 == 0).toSet\n        val oddsSet13 = odds.filter(_ % 13\
    \ == 0).toSet\n        val evensSet14 = evens.filter(_ % 14 == 0).toSet\n    \
    \    val oddsSet14 = odds.filter(_ % 14 == 0).toSet\n        val evensSet15 =\
    \ evens.filter(_ % 15 == 0).toSet\n        val oddsSet15 = odds.filter(_ % 15\
    \ == 0).toSet\n        val evensSet16 = evens.filter(_ % 16 == 0).toSet\n    \
    \    val odd\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuhjay3pw.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpuhjay3pw.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4fho2sty.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4fho2sty.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4fho2sty.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4fho2sty.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4fho2sty.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is alread"
  stdout: ''
  timestamp: 1660009270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val oddsSortedList = oddsSorted.toList\n     \
    \   val evensSortedListWithOdds = evensSortedList.zip(oddsSortedList)\n      \
    \  val evensSortedListWithOddsSorted = evensSortedListWithOdds.sortWith(_._1 <\
    \ _._1)\n        val evensSortedListWithOddsSortedList = evensSortedListWithOddsSorted.map(_._2)\n\
    \        val evensSortedListWithOddsSortedListSorted = evensSortedListWithOddsSortedList.sortWith(_\
    \ < _)\n        val evensSortedListWithOddsSortedListSortedList = evensSortedListWithOddsSortedListSorted.toList\n\
    \        val evensSortedListWithOddsSortedListSortedListSorted = evensSortedListWithOddsSortedListSortedListSorted.toList\n\
    \        val evensSortedListWithOddsSortedListSortedListSortedList = evensSortedListWithOddsSortedListSortedListSortedList.toList\n\
    \        val evensSortedListWithOddsSortedListSortedListSortedListSorted = evensSortedListWithOddsSortedListSortedListSortedListSorted.toList\n\
    \        val evensSortedListWithOddsSortedListSortedListSortedListSortedList =\
    \ evensSortedListWithOddsSortedListSortedListSortedListSortedList.toList\n   \
    \     val evensSortedListWithOddsSortedListSortedListSortedListSortedListSorted\
    \ = evensSortedListWithOddsSortedListSortedListSortedListSortedListSortedList.toList\n\
    \        val evensSortedListWithOddsSortedListSortedListSortedListSortedListSortedListSorted\
    \ = evensSortedListWithOddsSortedListSortedListSortedListSortedListSortedListSorted.toList\n\
    \        val evensSortedListWithOddsSortedListSortedListSortedListSortedListSortedListSortedList\
    \ = evensSortedListWithOddsSortedListSortedListSortedListSortedListSortedListSortedListSortedList.toList\n\
    \        val evensSortedListWithOddsSortedListSortedListSortedListSortedListSortedListSortedListSorted\
    \ = evensSortedListWithO\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb36rpheu.scala:25:64 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListWithOddsSortedListSortedListSorted\e\
    [0m = evensSortedListWithOddsSortedListSortedListSorted.toList\n\e[31m\e[31m \
    \  |\e[0m                                                                ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mevensSortedListWithOddsSortedListSortedListSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb36rpheu.scala:26:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedListWithOddsSortedListSortedListSortedList\e[0m = evensSortedListWithOddsSortedListSortedListSortedList.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mevensSortedListWithOddsSortedListSortedListSortedList\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb36rpheu.scala:27:74\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedListWithOddsSortedListSortedListSortedListSorted\e[0m = evensSortedListWithOddsSortedListSortedListSortedListSorted.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mevensSortedListWithOddsSortedListSortedListSortedListSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb36rpheu.scala:28:78\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedListWithOddsSortedListSortedListSortedListSortedList\e[0m =\
    \ evensSortedListWithOddsSortedListSortedListSortedListSortedList.toList\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \              ^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1660009270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n        val\
    \ end = (a / b).toInt\n        val mid = (a + b) / 2\n        val temp = (a /\
    \ mid).toInt\n        val temp2 = (a / mid).toInt\n        val temp3 = (b / mid).toInt\n\
    \        val temp4 = (b / mid).toInt\n        val temp5 = (a / temp).toInt\n \
    \       val temp6 = (a / temp).toInt\n        val temp7 = (b / temp).toInt\n \
    \       val temp8 = (b / temp).toInt\n        val temp9 = (a / temp2).toInt\n\
    \        val temp10 = (a / temp2).toInt\n        val temp11 = (b / temp2).toInt\n\
    \        val temp12 = (b / temp2).toInt\n        val temp13 = (a / temp3).toInt\n\
    \        val temp14 = (a / temp3).toInt\n        val temp15 = (b / temp3).toInt\n\
    \        val temp16 = (b / temp3).toInt\n        val temp17 = (a / temp4).toInt\n\
    \        val temp18 = (a / temp4).toInt\n        val temp19 = (b / temp4).toInt\n\
    \        val temp20 = (b / temp4).toInt\n        val temp21 = (a / temp5).toInt\n\
    \        val temp22 = (a / temp5).toInt\n        val temp23 = (b / temp5).toInt\n\
    \        val temp24 = (b / temp5).toInt\n        val temp25 = (a / temp6).toInt\n\
    \        val temp26 = (a / temp6).toInt\n        val temp27 = (b / temp6).toInt\n\
    \        val temp28 = (b / temp6).toInt\n        val temp29 = (a / temp7).toInt\n\
    \        val temp30 = (a / temp7).toInt\n        val temp31 = (b / temp7).toInt\n\
    \        val temp32 = (b / temp7).toInt\n        val temp33 = (a / temp8).toInt\n\
    \        val temp34 = (a / temp8).toInt\n        val temp35 = (b / temp8).toInt\n\
    \        val temp36 = (b / temp8).toInt\n        val temp37 = (a / temp9).toInt\n\
    \        val temp38 = (a / temp9).toInt\n        val temp39 = (b / temp9).toInt\n\
    \        val temp40 = (b / temp9).toInt\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpot0nacwn.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpot0nacwn.scala:59:5 ---------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val i = a\n        val j = b\n   \
    \     while(i <= j) {\n            list+=i\n            i+=2\n        }\n    \
    \    list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvepjogsb.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvepjogsb.scala:19:13\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            i+=\e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a / 2\n        val odds = a % 2\n        val evensBefore = evens - 1\n   \
    \     val evensAfter = evens + 1\n        val oddsBefore = odds - 1\n        val\
    \ oddsAfter = odds + 1\n        val evensBeforeList = generateIntegers(evensBefore,\
    \ b)\n        val evensAfterList = generateIntegers(evensAfter, b)\n        val\
    \ oddsBeforeList = generateIntegers(oddsBefore, b)\n        val oddsAfterList\
    \ = generateIntegers(oddsAfter, b)\n        val evensBeforeList2 = evensBeforeList.filter(_\
    \ % 2 == 0)\n        val evensAfterList2 = evensAfterList.filter(_ % 2 == 0)\n\
    \        val oddsBeforeList2 = oddsBeforeList.filter(_ % 2 == 0)\n        val\
    \ oddsAfterList2 = oddsAfterList.filter(_ % 2 == 0)\n        val evensBeforeList3\
    \ = evensBeforeList2.filter(_ % 3 == 0)\n        val evensAfterList3 = evensAfterList2.filter(_\
    \ % 3 == 0)\n        val oddsBeforeList3 = oddsBeforeList2.filter(_ % 3 == 0)\n\
    \        val oddsAfterList3 = oddsAfterList2.filter(_ % 3 == 0)\n        val evensBeforeList4\
    \ = evensBeforeList3.filter(_ % 4 == 0)\n        val evensAfterList4 = evensAfterList3.filter(_\
    \ % 4 == 0)\n        val oddsBeforeList4 = oddsBeforeList3.filter(_ % 4 == 0)\n\
    \        val oddsAfterList4 = oddsAfterList3.filter(_ % 4 == 0)\n        val evensBeforeList5\
    \ = evensBeforeList4.filter(_ % 5 == 0)\n        val evensAfterList5 = evensAfterList4.filter(_\
    \ % 5 == 0)\n        val oddsBeforeList5 = oddsBeforeList4.filter(_ % 5 == 0)\n\
    \        val oddsAfterList5 = oddsAfterList4.filter(_ % 5 == 0)\n        val evensBeforeList6\
    \ = evensBeforeList5.filter(_ % 6 == 0)\n        val evensAfterList6 = evensAfterList5.filter(_\
    \ % 6 == 0)\n        val oddsBeforeList6 = oddsBeforeList5.filter(_ % 6 == 0)\n\
    \        val oddsAfterList6 = oddsAfterList5.filter(_ % 6 == 0)\n        val evensBeforeList7\
    \ = evensBeforeList6.filter(_ % 7 == 0)\n        val evensAfterList7 = evens\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5jd4gge8.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by 2\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplhg89yl8.scala:19)\n\tat Problem.main(tmplhg89yl8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009272
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortBy(_ % 2 == 0)\n        val evensSortedList\
    \ = evensSorted.toList\n        evensSortedList.takeWhile(_ < b).reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmvb4pbin.scala:20)\n\tat Problem.main(tmpmvb4pbin.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList\n\
    \        val oddsSorted = odds.toList\n        val evensSortedSorted: Seq[Long]\
    \ = evensSorted.sortBy(_.toLong)\n        val oddsSortedSorted: Seq[Long] = oddsSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSorted: Seq[Long] = evensSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSorted: Seq[Long] = oddsSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSorted: Seq[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSorted: Seq[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSortedSorted: Seq[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSortedSorted: Seq[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSortedSortedSorted: Seq[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSortedSortedSorted: Seq[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSortedSortedSortedSorted: Seq[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSorted.sortBy(_.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5ldx01mu.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5ldx01mu.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSorted\e[0m: \e[35mSeq\e\
    [0m[\e[35mLong\e[0m] = evensSortedSortedSorted.sortBy(_.toLong)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5ldx01mu.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mLong\e[0m] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35moddsSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5ldx01mu.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mLong\e[0m] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSortedSorted is already defined as\
    \ \e[33mvalue\e[0m \e[35mevensSortedSortedSortedSortedSorted\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error"
  stdout: ''
  timestamp: 1660009273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n  \
    \      while(range.hasNext) {\n            val current = range.next\n        \
    \    if(current % 2 == 0) {\n                result += current.toLong\n      \
    \      }\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphlep7y4n.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        evens ++ odds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj9b8hrgp.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n       \
    \ while (i <= j) {\n            if (i % 2 == 0) {\n                evens += i\n\
    \            }\n            i += 1\n        }\n        evens.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtanvdb9.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val m = math.min(a, b)\n        val n\
    \ = math.max(a, b)\n        for (i <- m until n) {\n            list += i.toLong\n\
    \        }\n        list.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpevaw5s7m.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList\n\
    \        val oddsSorted = odds.toList\n        val evensSortedSorted: List[Long]\
    \ = evensSorted.sortWith(_ < _)\n        val oddsSortedSorted: List[Long] = oddsSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSorted: List[Long] = evensSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSorted: List[Long] = oddsSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSortedSortedSortedSorted: List[Long]\
    \ = oddsSortedSortedSorted.sortWith(_ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ List[Long] = evensSortedSortedSorted.sortWith(_ < _)\n        val oddsSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxs3majir.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxs3majir.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedSortedSortedSorted\e[0m: \e[35mList\e[0m[\e[35mLong\e[0m] =\
    \ evensSortedSortedSorted.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxs3majir.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = oddsSortedSortedSorted.sortWith(_ < _)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35moddsSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxs3majir.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = evensSortedSortedSorted.sortWith(_ < _)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSortedSorted is already defined as\
    \ \e[33mvalue\e[0m \e[35mevensSortedSortedSortedSortedSorted\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp"
  stdout: ''
  timestamp: 1660009273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        for(i <- a to b){\n            if(i.toString.toLong % 2 == 0){\n    \
    \            evens += i.toString.toLong\n            }\n            else{\n  \
    \              odds += i.toString.toLong\n            }\n        }\n        evens.toList\
    \ ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf9613_qc.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf9613_qc.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4fho2sty.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4fho2sty.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4fho2sty.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4fho2sty.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4fho2sty.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is alread"
  stdout: ''
  timestamp: 1660009270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a / 2\n        val odds = a % 2\n        val evensRem = a / 2\n        val\
    \ oddsRem = a % 2\n        val evensRemRem = a / 2\n        val oddsRemRem = a\
    \ % 2\n        val evensRemRemRem = a / 2\n        val oddsRemRemRem = a % 2\n\
    \        val evensRemRemRemRem = a / 2\n        val oddsRemRemRemRem = a % 2\n\
    \        val evensRemRemRemRemRem = a / 2\n        val oddsRemRemRemRemRem = a\
    \ % 2\n        val evensRemRemRemRemRemRem = a / 2\n        val oddsRemRemRemRemRemRem\
    \ = a % 2\n        val evensRemRemRemRemRemRemRem = a / 2\n        val oddsRemRemRemRemRemRemRemRem\
    \ = a % 2\n        val evensRemRemRemRemRemRemRemRem = a / 2\n        val oddsRemRemRemRemRemRemRemRemRem\
    \ = a % 2\n        val evensRemRemRemRemRemRemRemRemRemRem = a / 2\n        val\
    \ oddsRemRemRemRemRemRemRemRemRemRemRem = a % 2\n        val evensRemRemRemRemRemRemRemRemRemRemRemRem\
    \ = a / 2\n        val oddsRemRemRemRemRemRemRemRemRemRemRemRemRem = a % 2\n \
    \       val evensRemRemRemRemRemRemRemRemRemRemRemRemRemRem = a / 2\n        val\
    \ oddsRemRemRemRemRemRemRemRemRemRemRemRemRemRemRem = a % 2\n        val evensRemRemRemRemRemRemRemRemRem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoarewwuh.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpoarewwuh.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        val evensSorted = evens.toList.sortBy(_.toInt)\n\
    \        val oddsSorted = odds.toList.sortBy(_.toInt)\n        val evensSortedList\
    \ = evensSorted.map(_.toLong).toList\n        val oddsSortedList = oddsSorted.map(_.toLong).toList\n\
    \        val evensSortedList2 = evensSorted.map(_.toLong).toList\n        val\
    \ oddsSortedList2 = oddsSorted.map(_.toLong).toList\n        val evensSortedList3\
    \ = evensSorted.map(_.toLong).toList\n        val oddsSortedList3 = oddsSorted.map(_.toLong).toList\n\
    \        val evensSortedList4 = evensSorted.map(_.toLong).toList\n        val\
    \ oddsSortedList4 = oddsSorted.map(_.toLong).toList\n        val evensSortedList5\
    \ = evensSorted.map(_.toLong).toList\n        val oddsSortedList5 = oddsSorted.map(_.toLong).toList\n\
    \        val evensSortedList6 = evensSorted.map(_.toLong).toList\n        val\
    \ oddsSortedList6 = oddsSorted.map(_.toLong).toList\n        val evensSortedList7\
    \ = evensSorted.map(_.toLong).toList\n        val oddsSortedList7 = oddsSorted.map(_.toLong).toList\n\
    \        val evensSortedList8 = evensSorted.map(_.toLong).toList\n        val\
    \ oddsSortedList8 = oddsSorted.map(_.toLong).toList\n        val evensSortedList9\
    \ = evensSorted.map(_.toLong).toList\n        val oddsSortedList9 = oddsSorted.map(_.toLong).toList\n\
    \        val evensSortedList10 = evensSorted.map(_.toLong).toList\n        val\
    \ oddsSortedList10 = oddsSorted.map(_.toLong).toList\n        val evensSortedList11\
    \ = evensSorted.map(_.toLong).toList\n        val oddsSortedList11 = oddsSorted.map(_.toLong).toList\n\
    \        val evensSortedList12 = evensSorted.map(_.toLong).toList\n        val\
    \ oddsSortedList12 = oddsSorted.map(_.toLong).toList\n        val evensSortedList13\
    \ = evensSorted.map(_.toLong).toList\n        val oddsSortedList13 = oddsSorted.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaf9lprsj.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpaf9lprsj.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to b + 1\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val oddsSortedList = oddsSorted.toList\n     \
    \   val evensSortedList2 = evensSortedList.filter(_ % 2 == 0)\n        val oddsSortedList2\
    \ = oddsSortedList.filter(_ % 2 == 1)\n        val evensSortedList3 = evensSortedList2.filter(_\
    \ < b)\n        val oddsSortedList3 = oddsSortedList2.filter(_ < b)\n        val\
    \ evensSortedList4 = evensSortedList3.filter(_ > a)\n        val oddsSortedList4\
    \ = oddsSortedList3.filter(_ > a)\n        val evensSortedList5 = evensSortedList4.filter(_\
    \ < b)\n        val oddsSortedList5 = oddsSortedList4.filter(_ < b)\n        val\
    \ evensSortedList6 = evensSortedList5.filter(_ > a)\n        val oddsSortedList6\
    \ = oddsSortedList5.filter(_ > a)\n        val evensSortedList7 = evensSortedList6.filter(_\
    \ < b)\n        val oddsSortedList7 = oddsSortedList6.filter(_ < b)\n        val\
    \ evensSortedList8 = evensSortedList7.filter(_ > a)\n        val oddsSortedList8\
    \ = oddsSortedList7.filter(_ > a)\n        val evensSortedList9 = evensSortedList8.filter(_\
    \ < b)\n        val oddsSortedList9 = oddsSortedList8.filter(_ < b)\n        val\
    \ evensSortedList10 = evensSortedList9.filter(_ > a)\n        val oddsSortedList10\
    \ = oddsSortedList9.filter(_ > a)\n        val evensSortedList11 = evensSortedList10.filter(_\
    \ < b)\n        val oddsSortedList11 = oddsSortedList10.filter(_ < b)\n      \
    \  val evensSortedList12 = evensSortedList11.filter(_ > a)\n        val oddsSortedList12\
    \ = oddsSortedList11.filter(_ > a)\n        val evensSortedList13 = evensSortedList12.filter(_\
    \ < b)\n        val oddsSortedList13 = oddsSortedList12.filter(_ < b)\n      \
    \  val evensSortedList14 = evensSortedList13.filter(_ > a)\n        val oddsSortedList14\
    \ = oddsSorted\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0x4xtjcv.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val numsEven = mutable.ListBuffer[Long]()\n\
    \        val numsOdd = mutable.ListBuffer[Long]()\n        val numsBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothEven = mutable.ListBuffer[Long]()\n        val numsBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6_rh_phc.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6_rh_phc.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsBothBothBothEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsBothBothBothEven is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsBothBothBothEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6_rh_phc.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsBothBothBothOdd\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsBothBothBothOdd is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsBothBothBothOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6_rh_phc.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsBothBothBothBoth\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsBothBothBothBoth is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6_rh_phc.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnumsBothBothBothEven\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsBothBothBothEven is already defined a"
  stdout: ''
  timestamp: 1660009274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val a = a.toInt\n        val b = b.toInt\n        val c = b - a\n   \
    \     val d = c / 2\n        val e = c % 2\n        val f = d - e\n        val\
    \ g = f / 2\n        val h = f % 2\n        val i = g - h\n        val j = i -\
    \ e\n        val k = j / 2\n        val l = j % 2\n        val m = k - l\n   \
    \     val n = m - e\n        val o = n - h\n        val p = o / 2\n        val\
    \ q = o % 2\n        val r = p - q\n        val s = r / 2\n        val t = r %\
    \ 2\n        val u = s - t\n        val v = u / 2\n        val w = u % 2\n   \
    \     val x = v - w\n        val y = x - e\n        val z = y - h\n        val\
    \ a = z / 2\n        val b = z % 2\n        val c = a - b\n        val d = c -\
    \ a\n        val e = d - b\n        val f = e / 2\n        val g = e % 2\n   \
    \     val h = f - g\n        val i = h - f\n        val j = i - g\n        val\
    \ k = j / 2\n        val l = j % 2\n        val m = k - l\n        val n = m -\
    \ e\n        val o = n - h\n        val p = o / 2\n        val q = o % 2\n   \
    \     val r = p - q\n        val s = r / 2\n        val t = r % 2\n        val\
    \ u = s - t\n        val v = u / 2\n        val w = u % 2\n        val x = v -\
    \ w\n        val y = x - e\n        val z = y - h\n        val a = z / 2\n   \
    \     val b = z % 2\n        val c = a - b\n        val d = c - a\n        val\
    \ e = d - b\n        val f = e / 2\n        val g = e % 2\n        val h = f -\
    \ g\n        val i = h - f\n        val j = i - g\n        val k = j / 2\n   \
    \     val l = j % 2\n        val m = k - l\n        val n = m - e\n        val\
    \ o = n - h\n        val p = o / 2\n        val q = o % 2\n        val r = p -\
    \ q\n        val s = r / 2\n        val t = r % 2\n        val u = s - t\n   \
    \     val v = u\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1206ucf.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = z / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ma is already defined\
    \ as \e[33mvalue\e[0m \e[35ma\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1206ucf.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = z % \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mb is already defined\
    \ as \e[33mvalue\e[0m \e[35mb\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1206ucf.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = a - b\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mc is already defined as\
    \ \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw1206ucf.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = c - a\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined as\
    \ \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw1206ucf.scala:46:12 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36me\e[0m = d - b\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0me is already defined as\
    \ \e[33mvalue\e[0m \e[35me\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpw1206ucf.scala:47:12 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mf\e[0m ="
  stdout: ''
  timestamp: 1660009273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val n = math.min(a, b)\n        val\
    \ d = math.floor((b - a) / 2)\n        val m = math.min(a, b)\n        val r =\
    \ math.floor((b - a) / 2)\n        val t = math.min(a, b)\n        val u = math.floor((b\
    \ - a) / 2)\n        val v = math.min(a, b)\n        val w = math.min(a, b)\n\
    \        val x = math.min(a, b)\n        val y = math.min(a, b)\n        val z\
    \ = math.min(a, b)\n        val a = math.min(a, b)\n        val b = math.min(a,\
    \ b)\n        val c = math.min(a, b)\n        val d = math.min(a, b)\n       \
    \ val e = math.min(a, b)\n        val f = math.min(a, b)\n        val g = math.min(a,\
    \ b)\n        val h = math.min(a, b)\n        val i = math.min(a, b)\n       \
    \ val j = math.min(a, b)\n        val k = math.min(a, b)\n        val l = math.min(a,\
    \ b)\n        val m = math.min(a, b)\n        val n = math.min(a, b)\n       \
    \ val o = math.min(a, b)\n        val p = math.min(a, b)\n        val q = math.min(a,\
    \ b)\n        val r = math.min(a, b)\n        val s = math.min(a, b)\n       \
    \ val t = math.min(a, b)\n        val u = math.min(a, b)\n        val v = math.min(a,\
    \ b)\n        val w = math.min(a, b)\n        val x = math.min(a, b)\n       \
    \ val y = math.min(a, b)\n        val z = math.min(a, b)\n        val a = math.min(a,\
    \ b)\n        val b = math.min(a, b)\n        val c = math.min(a, b)\n       \
    \ val d = math.min(a, b)\n        val e = math.min(a, b)\n        val f = math.min(a,\
    \ b)\n        val g = math.min(a, b)\n        val h = math.min(a, b)\n       \
    \ val i = math.min(a, b)\n        val j = math.min(a, b)\n        val k = math.min(a,\
    \ b)\n        val l = math.min(a, b)\n        val m = math.min(a, b)\n       \
    \ val n = math.min(a, b)\n        val o = math.min(a, b)\n        val p = math.min(a,\
    \ b)\n        val q = math.min(a, b)\n        val r = math.min(a, b)\n       \
    \ val s = math.min(a, b)\n        val t = math.min(a, b)\n        val u = math.min(a,\
    \ b)\n        val v = math.min(a, b)\n        val w = math.min(a, b)\n       \
    \ val x = math.min(a, b)\n        val y = math.min(a, b)\n        val z = math.min(a,\
    \ b)\n        val a = math.min(a, b)\n        val b = math.min(a, b)\n       \
    \ val c = math.min(a, b)\n        val d = math.min(a, b)\n        val e = math.min(a,\
    \ b)\n        val f = math.min(a, b)\n        val g = math.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1r25mm61.scala:85:4 ----------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1r25mm61.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36md\e[0m = math.min(a, b)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined as\
    \ \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1r25mm61.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.min(a, b)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is\
    \ already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1r25mm61.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = math.min(a, b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1r25mm61.scala:43:12 ---------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = math.min(a, b)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as\
    \ \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1r25mm61.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mt\e[0m = math.min(a, b)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mt is\
    \ already defined as \e[33mvalue\e[0m \e"
  stdout: ''
  timestamp: 1660009274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val mid = a + (b - a) / 2\n      \
    \  val midDigit = math.floor(mid)\n        val midDigits = math.abs(mid - midDigit)\n\
    \        val midDigitCount = math.ceil(midDigits)\n        val digits = math.abs(b\
    \ - midDigit)\n        val digitCount = math.ceil(digits)\n        val digits\
    \ = math.abs(midDigit - b)\n        val digitCount = math.ceil(digits)\n     \
    \   val digits = math.abs(midDigit - a)\n        val digitCount = math.ceil(digits)\n\
    \        val digits = math.abs(midDigit - mid)\n        val digitCount = math.ceil(digits)\n\
    \        val digits = math.abs(midDigit - midDigits)\n        val digitCount =\
    \ math.ceil(digits)\n        val digits = math.abs(midDigit - midDigitCount)\n\
    \        val digitCount = math.ceil(digits)\n        val digits = math.abs(midDigit\
    \ - digitCount)\n        val digitCount = math.ceil(digits)\n        val digits\
    \ = math.abs(midDigit - digits)\n        val digitCount = math.ceil(digits)\n\
    \        val digits = math.abs(midDigit - digitCount)\n        val digitCount\
    \ = math.ceil(digits)\n        val digits = math.abs(midDigit - digits)\n    \
    \    val digitCount = math.ceil(digits)\n        val digits = math.abs(midDigit\
    \ - digitCount)\n        val digitCount = math.ceil(digits)\n        val digits\
    \ = math.abs(midDigit - digits)\n        val digitCount = math.ceil(digits)\n\
    \        val digits = math.abs(midDigit - digitCount)\n        val digitCount\
    \ = math.ceil(digits)\n        val digits = math.abs(midDigit - digits)\n    \
    \    val digitCount = math.ceil(digits)\n        val digits = math.abs(midDigit\
    \ - digitCount)\n        val digitCount = math.ceil(digits)\n        val digits\
    \ = math.abs(midDigit - digits)\n        val digitCount = math.ceil(digits)\n\
    \        val digits = math.abs(midDigit - digitCount)\n        val digitCount\
    \ = math.ceil(digits)\n        val digits = math.abs(midDigit - digits)\n    \
    \    val digitCount = math.ceil(digits)\n        val digits = math.abs(midDigit\
    \ - digitCount)\n        val digitCount = math.ceil(digits)\n        val digits\
    \ = math.abs(midDigit - digits)\n        val digitCount = math.ceil(digits)\n\
    \        val digits = math.abs(mid\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl171mrh3.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl171mrh3.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = math.abs(midDigit - b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl171mrh3.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdigitCount\e[0m = math.ceil(digits)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdigitCount is already defined as \e[33mvalue\e[0m \e[35mdigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpl171mrh3.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = math.abs(midDigit - a)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpl171mrh3.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigitCount\e[0m = math.ceil(digits)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mdigitCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl171mrh3.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e"
  stdout: ''
  timestamp: 1660009273
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        evens.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < b).map(x => x.toLong).toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpptriu1dw.scala:20)\n\tat Problem.main(tmpptriu1dw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        val evensSet = evens.toSet\n\
    \        val oddsSet = odds.toSet\n        evensSet.intersect(oddsSet).filter(x\
    \ => x % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppfyblll2.scala:18:60 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        evensSet.intersect(oddsSet).filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sorted\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value sorted is not a member of Set[Long]\n1 error found\n"
  stdout: ''
  timestamp: 1660009279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val x = range.next\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5rh4ytg2.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5rh4ytg2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n      \
    \  val end = (a / b).toInt\n        val start2 = start / 2\n        val end2 =\
    \ end / 2\n        val start3 = start2 / 2\n        val end3 = end2 / 2\n    \
    \    val start4 = start3 / 2\n        val end4 = end3 / 2\n        val start5\
    \ = start4 / 2\n        val end5 = end4 / 2\n        val start6 = start5 / 2\n\
    \        val end6 = end5 / 2\n        val start7 = start6 / 2\n        val end7\
    \ = end6 / 2\n        val start8 = start7 / 2\n        val end8 = end7 / 2\n \
    \       val start9 = start8 / 2\n        val end9 = end8 / 2\n        val start10\
    \ = start9 / 2\n        val end10 = end9 / 2\n        val start11 = start10 /\
    \ 2\n        val end11 = end10 / 2\n        val start12 = start11 / 2\n      \
    \  val end12 = end11 / 2\n        val start13 = start12 / 2\n        val end13\
    \ = end12 / 2\n        val start14 = start13 / 2\n        val end14 = end13 /\
    \ 2\n        val start15 = start14 / 2\n        val end15 = end14 / 2\n      \
    \  val start16 = start15 / 2\n        val end16 = end15 / 2\n        val start17\
    \ = start16 / 2\n        val end17 = end16 / 2\n        val start18 = start17\
    \ / 2\n        val end18 = end17 / 2\n        val start19 = start18 / 2\n    \
    \    val end19 = end18 / 2\n        val start20 = start19 / 2\n        val end20\
    \ = end19 / 2\n        val start21 = start20 / 2\n        val end21 = end20 /\
    \ 2\n        val start22 = start21 / 2\n        val end22 = end21 / 2\n      \
    \  val start23 = start22 / 2\n        val end23 = end22 / 2\n        val start24\
    \ = start23 / 2\n        val end24 = end23 / 2\n        val start25 = start24\
    \ / 2\n        val end25 = end24 / 2\n        val start26 = start25 / 2\n    \
    \    val end26 = end25 / 2\n        val start27 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxi9phy4y.scala:67:21 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \e[36mstart27\e[0m = \n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxi9phy4y.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxi9phy4y.scala:68:5\
    \ ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1)\n        val odds = b until (a - 1)\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbmur_53.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList\n\
    \        val oddsSorted = odds.toList\n        val evensSortedSorted: List[Long]\
    \ = evensSorted.sortBy(_)\n        val oddsSortedSorted: List[Long] = oddsSorted.sortBy(_)\n\
    \        val evensSortedSortedSorted: List[Long] = evensSortedSorted.sortBy(_)\n\
    \        val oddsSortedSortedSorted: List[Long] = oddsSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_)\n\
    \        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_)\n\
    \        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_)\n\
    \        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_)\n\
    \        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_)\n\
    \        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_)\n\
    \        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_)\n\
    \        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_)\n\
    \        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_)\n\
    \        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_)\n\
    \        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7g1lsw2n.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = evensSortedSortedSorted.sortBy(_)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7g1lsw2n.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = oddsSortedSortedSorted.sortBy(_)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35moddsSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7g1lsw2n.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = evensSortedSortedSorted.sortBy(_)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7g1lsw2n.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36moddsSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = oddsSortedSortedSorted.sortBy(_)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n      \
    \  while (range.hasNext) {\n            val current = range.next\n           \
    \ if (current % 2 == 0) {\n                list += current.toLong\n          \
    \  }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfhywkgzg.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList\n\
    \        val oddsSorted = odds.toList\n        val evensSortedSorted: Seq[Long]\
    \ = evensSorted.sortWith(_ < _)\n        val oddsSortedSorted: Seq[Long] = oddsSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSorted: Seq[Long] = evensSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSorted: Seq[Long] = oddsSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: Seq[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSorted: Seq[Long] = evensSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSorted: Seq[Long] = evensSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSorted: Seq[Long] = evensSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSorted: Seq[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSorted.sortWith(_ < _)\n        val\
    \ oddsSortedSortedSortedSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSorted: Seq[Long]\
    \ = evensSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_ < _)\n  \
    \      val oddsSortedSortedSortedSortedSortedSortedSorted: Seq[Long] = oddsSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSorted: Seq\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9iukqzrx.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mLong\e[0m] = evensSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSortedSortedSorted is already defined\
    \ as \e[33mvalue\e[0m \e[35mevensSortedSortedSortedSortedSortedSorted\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9iukqzrx.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36moddsSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mLong\e[0m] = oddsSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedSortedSortedSortedSortedSorted is already defined\
    \ as \e[33mvalue\e[0m \e[35moddsSortedSortedSortedSortedSortedSorted\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9iukqzrx.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mLong\e[0m] = evensSortedSortedSortedSortedSortedSortedSortedSorted.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSortedSortedSortedSorted is already\
    \ defined as \e[33mvalue\e[0m \e[35mevensSortedSortedSortedSortedSortedSortedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in th"
  stdout: ''
  timestamp: 1660009282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val x = range.next\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0w80lxu.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_0w80lxu.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val low = a\n        val high = b\n\
    \        while(low < high) {\n            val mid = (low + high) / 2\n       \
    \     val digit = math.pow(10, mid.toInt)\n            if(mid % 2 == 0) {\n  \
    \              result.add(mid.toLong)\n            }\n            else if(mid\
    \ % 2 == 1) {\n                result.add(mid.toLong * digit)\n            }\n\
    \            low = mid + 1\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphebg6da0.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmphebg6da0.scala:26:16\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            low = mid\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Reassignment to val low\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n   \
    \     while (i <= j) {\n            val temp = i\n            i = i + 1\n    \
    \        list.add(temp.toLong)\n        }\n        list.sortWith((x, y) => x.toLong\
    \ < y.toLong)\n        list.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7uydi4ih.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4fho2sty.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4fho2sty.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4fho2sty.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4fho2sty.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4fho2sty.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is alread"
  stdout: ''
  timestamp: 1660009270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val x = range.next\n            if (x % 2 == 0) {\n                evens\
    \ += x\n            } else {\n                odds += x\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_0w80lxu.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_0w80lxu.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n        val\
    \ end = (b / a).toInt\n        val step = end - start\n        val start2 = start\
    \ + 1\n        val end2 = end + 1\n        val step2 = end2 - start2\n       \
    \ val start3 = start2 + 1\n        val end3 = end2 + 1\n        val step3 = end3\
    \ - start3\n        val start4 = start3 + 1\n        val end4 = end3 + 1\n   \
    \     val step4 = end4 - start4\n        val start5 = start4 + 1\n        val\
    \ end5 = end4 + 1\n        val step5 = end5 - start5\n        val start6 = start5\
    \ + 1\n        val end6 = end5 + 1\n        val step6 = end6 - start6\n      \
    \  val start7 = start6 + 1\n        val end7 = end6 + 1\n        val step7 = end7\
    \ - start7\n        val start8 = start7 + 1\n        val end8 = end7 + 1\n   \
    \     val step8 = end8 - start8\n        val start9 = start8 + 1\n        val\
    \ end9 = end8 + 1\n        val step9 = end9 - start9\n        val start10 = start9\
    \ + 1\n        val end10 = end9 + 1\n        val step10 = end10 - start10\n  \
    \      val start11 = start10 + 1\n        val end11 = end10 + 1\n        val step11\
    \ = end11 - start11\n        val start12 = start11 + 1\n        val end12 = end11\
    \ + 1\n        val step12 = end12 - start12\n        val start13 = start12 + 1\n\
    \        val end13 = end12 + 1\n        val step13 = end13 - start13\n       \
    \ val start14 = start13 + 1\n        val end14 = end13 + 1\n        val step14\
    \ = end14 - start14\n        val start15 = start14 + 1\n        val end15 = end14\
    \ + 1\n        val step15 = end15 - start15\n        val start16 = start15 + 1\n\
    \        val end16 = end15 + 1\n        val step16 = end16 - start16\n       \
    \ val start17 = start16 + 1\n        val end17 = end16 + 1\n        val step17\
    \ = end17 - start17\n        val start18 = start17 + 1\n        val end18 = end17\
    \ + 1\n        val step18 = end18 - start18\n        val start19 = start18 + 1\n\
    \        val end19 = end18 + 1\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp75487fy8.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp75487fy8.scala:72:5 ---------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n       \
    \ while(i <= j) {\n            list += i\n            i += 1\n        }\n    \
    \    list.sortWith(_ < _)\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0i1odzwb.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odd = b until a\n        evens ++ odd\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp08he7h5h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odd\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -1\n        val evensSorted = evens.toList\n\
    \        val oddsSorted = odds.toList\n        val evensSortedSorted: List[Long]\
    \ = evensSorted.sortBy(_ % 2).toList\n        val oddsSortedSorted: List[Long]\
    \ = oddsSorted.sortBy(_ % 2).toList\n        val evensSortedSortedSorted: List[Long]\
    \ = evensSortedSorted.sortBy(_ % 2).toList\n        val oddsSortedSortedSorted:\
    \ List[Long] = oddsSortedSorted.sortBy(_ % 2).toList\n        val evensSortedSortedSortedSorted:\
    \ List[Long] = evensSortedSortedSorted.sortBy(_ % 2).toList\n        val oddsSortedSortedSortedSorted:\
    \ List[Long] = oddsSortedSortedSorted.sortBy(_ % 2).toList\n        val evensSortedSortedSortedSorted:\
    \ List[Long] = evensSortedSortedSorted.sortBy(_ % 2).toList\n        val oddsSortedSortedSortedSorted:\
    \ List[Long] = oddsSortedSortedSorted.sortBy(_ % 2).toList\n        val evensSortedSortedSortedSortedSorted:\
    \ List[Long] = evensSortedSortedSorted.sortBy(_ % 2).toList\n        val oddsSortedSortedSortedSortedSorted:\
    \ List[Long] = oddsSortedSortedSorted.sortBy(_ % 2).toList\n        val evensSortedSortedSortedSortedSorted:\
    \ List[Long] = evensSortedSortedSorted.sortBy(_ % 2).toList\n        val oddsSortedSortedSortedSortedSorted:\
    \ List[Long] = oddsSortedSortedSorted.sortBy(_ % 2).toList\n        val evensSortedSortedSortedSortedSortedSorted:\
    \ List[Long] = evensSortedSortedSorted.sortBy(_ % 2).toList\n        val oddsSortedSortedSortedSortedSortedSorted:\
    \ List[Long] = oddsSortedSortedSorted.sortBy(_ % 2).toList\n        val evensSortedSortedSortedSortedSortedSortedSorted:\
    \ List[Long] = evensSortedSortedSorted.sortBy(_ % 2).toList\n        val oddsSortedSortedSortedSortedSortedSortedSorted:\
    \ List[Long] = oddsSortedSortedSorted.sortBy(_ % 2).toList\n        val evensSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ List[Long] = evensSortedSortedSorted.sortBy(_ % 2).toList\n        val oddsSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ List[Long] = oddsSortedSortedSorted.sortBy(_ % 2).toList\n        val evensSortedSortedSortedSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpflvjyres.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpflvjyres.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedSortedSortedSorted\e[0m: \e[35mList\e[0m[\e[35mLong\e[0m] =\
    \ evensSortedSortedSorted.sortBy(_ % \e[31m2\e[0m).toList\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpflvjyres.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = oddsSortedSortedSorted.sortBy(_ % \e[31m2\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35moddsSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpflvjyres.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = evensSortedSortedSorted.sortBy(_ % \e\
    [31m2\e[0m).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSortedSorted is already defined as\
    \ \e[33mvalue\e[0m \e[35mevensSortedSortedSortedSortedSorted\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplev"
  stdout: ''
  timestamp: 1660009284
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b by 2\n        val odd = a until b by 1\n        val evensOdd = evens\
    \ ++ odd\n        evensOdd.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp29yk0tnx.scala:20)\n\tat Problem.main(tmp29yk0tnx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val min = math.min(a, b)\n        val max = math.max(a, b)\n        for(i\
    \ <- min until max) {\n            val x = math.floor(i.toDouble / 2).toInt\n\
    \            if(x % 2 == 0) {\n                evens += i\n            } else\
    \ {\n                odds += i\n            }\n        }\n        evens.toList\
    \ ++ odds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq7dso971.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpq7dso971.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odd = a to b by 1\n        val evensAndOdd = evens\
    \ ++ odd\n        evensAndOdd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoxicwqi_.scala:20)\n\tat Problem.main(tmpoxicwqi_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSorted\
    \ = evensSorted.toList\n        evensSorted.filter(_ % 2 == 0).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8gmj3zo_.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp8gmj3zo_.scala:17:39 --------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        evensSorted.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m        Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).filter(x => x % 2 == 0)\n        range.foreach(x\
    \ => x % 2 == 0 match {\n            case true => evens += x\n            case\
    \ false => odds += x\n        })\n        evens ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpazzpjd4e.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpazzpjd4e.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpazzpjd4e.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                   ^\e[0m\n\e[31m   |\e[0m                          Found:  \
    \  (a : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpazzpjd4e.scala:16:29 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                      ^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (b : Long)\n\e[31m   |\e[0m                             Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009285
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b + 1)\n        val odd = (b + 1) until (a + 1)\n        evens.filter(x\
    \ => odd.contains(x)).sortBy(x => x).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj6zca88v.scala:19)\n\tat Problem.main(tmpj6zca88v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val m = math.min(a, b)\n        val\
    \ n = math.max(a, b)\n        val digits = math.pow(10, math.ceil(math.log10(n)))\n\
    \        val range = scala.collection.mutable.Range(0, digits)\n        val digitRange\
    \ = range.filter(x => n % x == 0)\n        val evenDigits = digitRange.filter(x\
    \ => x % 2 == 0)\n        val evenDigitRange = evenDigits.filter(x => x % m ==\
    \ 0)\n        val evenDigitRangeList = evenDigitRange.toList\n        val evenDigitRangeListIterator\
    \ = evenDigitRangeList.iterator\n        while (evenDigitRangeListIterator.hasNext)\
    \ {\n            val evenDigitRangeListItem = evenDigitRangeListIterator.next\n\
    \            result.add(evenDigitRangeListItem.toLong)\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_dgzd1wf.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_dgzd1wf.scala:18:45\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mrange\e[0m = scala.collection.mutable.Range(\e[31m0\e[0m, digits)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 value Range is not a member of scala.collection.mutable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n        val\
    \ end = (a / b).toInt\n        val start2 = start * b\n        val end2 = end\
    \  * b\n        val start3 = start2 * b\n        val end3 = end2 * b\n       \
    \ val start4 = start3 * b\n        val end4 = end3 * b\n        val start5 = start4\
    \ * b\n        val end5 = end4 * b\n        val start6 = start5 * b\n        val\
    \ end6 = end5 * b\n        val start7 = start6 * b\n        val end7 = end6 *\
    \ b\n        val start8 = start7 * b\n        val end8 = end7 * b\n        val\
    \ start9 = start8 * b\n        val end9 = end8 * b\n        val start10 = start9\
    \ * b\n        val end10 = end9 * b\n        val start11 = start10 * b\n     \
    \   val end11 = end10 * b\n        val start12 = start11 * b\n        val end12\
    \ = end11 * b\n        val start13 = start12 * b\n        val end13 = end12 *\
    \ b\n        val start14 = start13 * b\n        val end14 = end13 * b\n      \
    \  val start15 = start14 * b\n        val end15 = end14 * b\n        val start16\
    \ = start15 * b\n        val end16 = end15 * b\n        val start17 = start16\
    \ * b\n        val end17 = end16 * b\n        val start18 = start17 * b\n    \
    \    val end18 = end17 * b\n        val start19 = start18 * b\n        val end19\
    \ = end18 * b\n        val start20 = start19 * b\n        val end20 = end19 *\
    \ b\n        val start21 = start20 * b\n        val end21 = end20 * b\n      \
    \  val start22 = start21 * b\n        val end22 = end21 * b\n        val start23\
    \ = start22 * b\n        val end23 = end22 * b\n        val start24 = start23\
    \ * b\n        val end24 = end23 * b\n        val start25 = start24 * b\n    \
    \    val end25 = end24 * b\n        val start26 = start25 * b\n        val end26\
    \ = end25 * b\n        val start27 = start26 * b\n        val end27 = end26 *\
    \ b\n        val start28 = start27 * b\n        val end28 = end27 * b\n      \
    \  val start29 = start28 * b\n        val end29 = end28\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphhvnr28r.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmphhvnr28r.scala:73:5 ---------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val remainder = a % b\n        val remainders = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val remainders =\
    \ mutable.ListBuffer[Long]()\n        val remainders = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val remainders =\
    \ mutable.ListBuffer[Long]()\n        val remainders = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val remainders =\
    \ mutable.ListBuffer[Long]()\n        val remainders = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val remainders =\
    \ mutable.ListBuffer[Long]()\n        val remainders = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val remainders =\
    \ mutable.ListBuffer[Long]()\n        val remainders = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val remainders =\
    \ mutable.ListBuffer[Long]()\n        val remainders = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val remainders =\
    \ mutable.ListBuffer[Long]()\n        val remainders = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val remainders =\
    \ mutable.ListBuffer[Long]()\n        val remainders = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val remainders =\
    \ mutable.ListBuffer[Long]()\n        val remainders = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val remainders =\
    \ mutable.ListBuffer[Long]()\n        val remainders = mutable.ListBuffer[Long]()\n\
    \        val remainders = mutable.ListBuffer[Long]()\n        val remainders =\
    \ mutable.ListBuffer[Long]()\n        val remainders = mutable.ListBuffer[Long]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpz71mkoxi.scala:51:11 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpz71mkoxi.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz71mkoxi.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz71mkoxi.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz71mkoxi.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mremainders\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mremainders is already defined as \e[33mvalue\e[0m \e[35mremainders\e\
    [0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660009285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val m = math.min(math.max(a, b), 1000000000000l)\n\
    \        val n = math.min(math.max(a, b), 1000000000000l)\n        val d = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val r = math.min(math.max(a, b), 1000000000000l)\n\
    \        val t = math.min(math.max(a, b), 1000000000000l)\n        val u = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val v = math.min(math.max(a, b), 1000000000000l)\n\
    \        val w = math.min(math.max(a, b), 1000000000000l)\n        val x = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val y = math.min(math.max(a, b), 1000000000000l)\n\
    \        val z = math.min(math.max(a, b), 1000000000000l)\n        val a = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val b = math.min(math.max(a, b), 1000000000000l)\n\
    \        val c = math.min(math.max(a, b), 1000000000000l)\n        val d = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val e = math.min(math.max(a, b), 1000000000000l)\n\
    \        val f = math.min(math.max(a, b), 1000000000000l)\n        val g = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val h = math.min(math.max(a, b), 1000000000000l)\n\
    \        val i = math.min(math.max(a, b), 1000000000000l)\n        val j = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val k = math.min(math.max(a, b), 1000000000000l)\n\
    \        val l = math.min(math.max(a, b), 1000000000000l)\n        val m = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val n = math.min(math.max(a, b), 1000000000000l)\n\
    \        val o = math.min(math.max(a, b), 1000000000000l)\n        val p = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val q = math.min(math.max(a, b), 1000000000000l)\n\
    \        val r = math.min(math.max(a, b), 1000000000000l)\n        val s = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val t = math.min(math.max(a, b), 1000000000000l)\n\
    \        val u = math.min(math.max(a, b), 1000000000000l)\n        val v = math.min(math.max(a,\
    \ b), 1000000000000l)\n        val w = math.min(math.max(a, b), 1000000000000l)\n\
    \        val x = math.min(math.max(a, b), 1000000000000l)\n        val y = math.min(math.max(a,\
    \ b), 100\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps9h9qu10.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps9h9qu10.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36md\e[0m = math.min(math.max(a, b), \e[31m1000000000000l\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps9h9qu10.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = math.min(math.max(a, b), \e[31m1000000000000l\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps9h9qu10.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mn\e[0m = math.min(math.max(a, b), \e[31m1000000000000l\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps9h9qu10.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = math.min(math.max(a, b), \e[31m1000000000000l\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val numsEven = mutable.ListBuffer[Long]()\n\
    \        val numsOdd = mutable.ListBuffer[Long]()\n        val numsBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothEven = mutable.ListBuffer[Long]()\n        val numsBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBothEven = mutable.ListBuffer[Long]()\n        val\
    \ numsBothBothBothBothOdd = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothEven = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothBothBothOdd = mutable.ListBuffer[Long]()\n      \
    \  val numsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n        val\
    \ numsBothBothBothBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothBothBoth =\
    \ mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothBothBothEven\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothBothBothBoth\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBothBothBothBothBothEven\
    \ = mutable.ListBuffer[Long]\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi94ky19u.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi94ky19u.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi94ky19u.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi94ky19u.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumsEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpi94ky19u.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsOdd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpi94ky19u.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsBoth\e[0m = mutabl"
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val even = a.toInt\n        val odd = b.toInt\n        while(even < odd)\
    \ {\n            evens += even\n            odd += 2\n        }\n        while(even\
    \ > odd) {\n            odds += odd\n            even -= 2\n        }\n      \
    \  evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0onhmg2z.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0onhmg2z.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0onhmg2z.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            odd += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0onhmg2z.scala:24:17\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            even -= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value -= is not a member of Int - did you mean even.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659797581
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n       \
    \ while (i <= j) {\n            list += i\n            i += 1\n        }\n   \
    \     list.sortWith(_ < _)\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph0ok_3z0.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n       \
    \ while (i <= j) {\n            if (i % 2 == 0) {\n                evens += i\n\
    \            }\n            i += 1\n        }\n        evens.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtanvdb9.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val even\
    \ = a % 2 == 0\n        val evenDigits = a / 2\n        val odd = b % 2 == 0\n\
    \        val oddDigits = b / 2\n        val evenList = if (even) List(evenDigits)\
    \ else List()\n        val oddList = if (odd) List(oddDigits) else List()\n  \
    \      val evenAndOdd = if (even && odd) List(evenDigits, oddDigits) else List()\n\
    \        val evenAndOddList = if (even && odd) List(evenAndOdd) else List()\n\
    \        val evenAndOddAndEven = if (even && odd) List(evenAndOdd, evenDigits)\
    \ else List()\n        val evenAndOddAndEvenList = if (even && odd) List(evenAndOddAndEven)\
    \ else List()\n        val evenAndOddAndEvenAndOdd = if (even && odd) List(evenAndOddAndEven,\
    \ oddDigits) else List()\n        val evenAndOddAndEvenAndOddList = if (even &&\
    \ odd) List(evenAndOddAndEvenAndOdd) else List()\n        val evenAndOddAndEvenAndOddAndEven\
    \ = if (even && odd) List(evenAndOddAndEvenAndOdd, evenDigits) else List()\n \
    \       val evenAndOddAndEvenAndOddAndEvenList = if (even && odd) List(evenAndOddAndEvenAndOddList,\
    \ evenAndOddAndEvenAndOdd, evenAndOddAndEvenAndOddAndEven) else List()\n     \
    \   val evenAndOddAndEvenAndOddAndEvenAndOdd = if (even && odd) List(evenAndOddAndEvenAndOddAndEven,\
    \ oddDigits) else List()\n        val evenAndOddAndEvenAndOddAndEvenAndOddList\
    \ = if (even && odd) List(evenAndOddAndEvenAndOddAndEvenAndOdd, evenAndOddAndEvenAndOddAndEvenAndOddList,\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEven) else List()\n        val evenAndOddAndEvenAndOddAndEvenAndOddAndEven\
    \ = if (even && odd) List(evenAndOddAndEvenAndOddAndEvenAndOdd, evenAndOddAndEvenAndOddAndEvenAndOddAndEvenList,\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd) else List()\n        val\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5s_xbn6x.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5s_xbn6x.scala:30:118\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mevenAndOddAndEvenAndOddAndEvenAndOddAndEven\e[0m = \e[33mif\e[0m (even &&\
    \ odd) List(evenAndOddAndEvenAndOddAndEvenAndOdd, evenAndOddAndEvenAndOddAndEvenAndOddAndEvenList,\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd) \e[33melse\e[0m List()\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Not found: evenAndOddAndEvenAndOddAndEvenAndOddAndEvenList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5s_xbn6x.scala:30:167\
    \ -----------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mevenAndOddAndEvenAndOddAndEvenAndOddAndEven\e[0m = \e[33mif\e[0m (even &&\
    \ odd) List(evenAndOddAndEvenAndOddAndEvenAndOdd, evenAndOddAndEvenAndOddAndEvenAndOddAndEvenList,\
    \ evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd) \e[33melse\e[0m List()\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: evenAndOddAndEvenAndOddAndEvenAndOddAndEvenAndOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5s_xbn6x.scala:29:115\
    \ --------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenAndOddAndEvenAndOddAndEvenAndOddList\e[0m = \e[33mif\e[0m (even &&\
    \ odd) List(evenAndOddAndEvenAndOddAndEvenAndOdd, evenAndOddAndEvenAndOddAndEvenAndOddList,\
    \ evenAndOddAndEvenAndOddAndEven"
  stdout: ''
  timestamp: 1660009290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val n = range.next\n            if (n % 2 == 0) {\n                evens\
    \ += n\n            } else {\n                odds += n\n            }\n     \
    \   }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnd4hk5m.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnnd4hk5m.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSorted\
    \ = evensSorted.toList\n        val evensSorted = evensSorted.filter(_ % 2 ==\
    \ 0)\n        val evensSorted = evensSorted.toList\n        val evensSorted =\
    \ evensSorted.filter(_ % 2 == 0)\n        val evensSorted = evensSorted.toList\n\
    \        val evensSorted = evensSorted.filter(_ % 2 == 0)\n        val evensSorted\
    \ = evensSorted.toList\n        val evensSorted = evensSorted.filter(_ % 2 ==\
    \ 0)\n        val evensSorted = evensSorted.toList\n        val evensSorted =\
    \ evensSorted.filter(_ % 2 == 0)\n        val evensSorted = evensSorted.toList\n\
    \        val evensSorted = evensSorted.filter(_ % 2 == 0)\n        val evensSorted\
    \ = evensSorted.toList\n        val evensSorted = evensSorted.filter(_ % 2 ==\
    \ 0)\n        val evensSorted = evensSorted.toList\n        val evensSorted =\
    \ evensSorted.filter(_ % 2 == 0)\n        val evensSorted = evensSorted.toList\n\
    \        val evensSorted = evensSorted.filter(_ % 2 == 0)\n        val evensSorted\
    \ = evensSorted.toList\n        val evensSorted = evensSorted.filter(_ % 2 ==\
    \ 0)\n        val evensSorted = evensSorted.toList\n        val evensSorted =\
    \ evensSorted.filter(_ % 2 == 0)\n        val evensSorted = evensSorted.toList\n\
    \        val evensSorted = evensSorted.filter(_ % 2 == 0)\n        val evensSorted\
    \ = evensSorted.toList\n        val evensSorted = evensSorted.filter(_ % 2 ==\
    \ 0)\n        val evensSorted = evensSorted.toList\n        val evensSorted =\
    \ evensSorted.filter(_ % 2 == 0)\n        val evensSorted = evensSorted.toList\n\
    \        val evensSorted = evensSorted.filter(_ % 2 == 0)\n        val evensSorted\
    \ = evensSorted.toList\n        val evensSorted = evensSorted.filter(_ % 2 ==\
    \ 0)\n        val evensSorted = evensSorted.toList\n        val evensSorted =\
    \ evensSorted.filter(_\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv1xawdlh.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv1xawdlh.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSorted\e[0m = evensSorted.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv1xawdlh.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv1xawdlh.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv1xawdlh.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        val evensSet = evens.toSet\n\
    \        val oddsSet = odds.toSet\n        val result = evensSet.intersect(oddsSet)\n\
    \        result match {\n            case Nil => List()\n            case x =>\
    \ x.toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpivnapoyk.scala:20:17\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m Nil\
    \ => List()\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    (Nil : => collection.immutable.Nil\xB2.type)\n\e[31m   |\e[0m\
    \        Required: Set[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m        where: \
    \   Nil  is a getter in \e[33mpackage object\e[0m \e[35mscala\e[0m\n\e[31m   |\e\
    [0m                  Nil\xB2 is a object in \e[33mpackage\e[0m \e[35mscala.collection.immutable\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        pattern type is incompatible with\
    \ expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b + 1)\n        val odds = b until (a + 1)\n        val evensSet\
    \ = evens.toSet\n        val oddsSet = odds.toSet\n        val result = evensSet.intersect(oddsSet)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5djhzd6r.scala:22)\n\tat Problem.main(tmp5djhzd6r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < b).reverse ++ odds\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiq7c9gls.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(\e[36mx\e[0m => x).takeWhile(\e\
    [36mx\e[0m => x < b).reverse ++ odds\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            if\
    \ (i % 2 == 0) {\n                evens += i\n            } else {\n         \
    \       odds += i\n            }\n            i += 1\n            j += 1\n   \
    \     }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpew93ryev.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpew93ryev.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        evens ++ odds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj9b8hrgp.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n  \
    \      while(range.hasNext) {\n            val current = range.next\n        \
    \    val remainder = current % 10\n            if(remainder == 0) {\n        \
    \        result.add(current.toLong)\n            }\n        }\n        return\
    \ result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb6_r2dhl.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797787
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n       \
    \ while (i <= j) {\n            list += i\n            i += 1\n        }\n   \
    \     list.sortWith(_ < _)\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph0ok_3z0.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val m = math.min(a, b)\n        val\
    \ n = math.max(a, b)\n        for(i <- 0 until m) {\n            for(j <- 0 until\
    \ n) {\n                if(i.toString.toLong % 2 == 0 && j.toString.toLong % 2\
    \ == 0) {\n                    result.append((i.toString.toLong + j.toString.toLong).toLong)\n\
    \                }\n            }\n        }\n        return result.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcnnx97i1.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcnnx97i1.scala:17:25\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until m) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (m : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpcnnx97i1.scala:18:29 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m(j <- \e[31m0\e[0m until n) {\n\e\
    [31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m      \
    \                       Found:    (n : Long)\n\e[31m   |\e[0m                \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        val evensSorted = evens.toList.sortBy(_.toInt)\n\
    \        val oddsSorted = odds.toList.sortBy(_.toInt)\n        val result = evensSorted.intersect(oddsSorted).distinct\n\
    \        result.isEmpty() match {\n            case true => List()\n         \
    \   case false => result\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmp8pre36p5.scala:19:15 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        result.isEmpty() \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \e[33mmethod\e\
    [0m \e[35misEmpty\e[0m in \e[33mclass\e[0m \e[35mList\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val start = (a % b).toInt\n      \
    \  val end = (b - a).toInt\n        val range = (end - start) + 1\n        var\
    \ i = start\n        while (i <= end) {\n            result.add(i.toLong)\n  \
    \          i += 1\n        }\n        result.sortWith(_ < _)\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpik77yiub.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val evensSortedListLength = evensSortedList.length\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.toLong\n        val evensSortedListLength = evensSortedListLength.toInt\n\
    \        val evensSortedListLength = evensSortedListLength.toLong\n        val\
    \ evensSortedListLength = evensSortedListLength.toInt\n        val evensSortedListLength\
    \ = evensSortedListLength.to\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbuc3q510.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbuc3q510.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbuc3q510.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbuc3q510.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListLength\e\
    [0m = evensSortedListLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedListLength is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/t"
  stdout: ''
  timestamp: 1660009294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val even\
    \ = a % 2 == 0\n        val evens = a / 2\n        val odds = b / 2\n        val\
    \ evensAndOdds = even && odds\n        val evensAndOddsOrBoth = even || odds\n\
    \        val evensAndOddsOrBothOrBoth = even || odds || evensAndOdds\n       \
    \ val evensAndOddsOrBothOrBothOrBoth = even || odds || evensAndOdds || evensAndOddsOrBoth\n\
    \        val evensAndOddsOrBothOrBothOrBothOrBoth = even || odds || evensAndOdds\
    \ || evensAndOddsOrBoth || evensAndOddsOrBothOrBoth\n        val evensAndOddsOrBothOrBothOrBothOrBothOrBoth\
    \ = even || odds || evensAndOdds || evensAndOddsOrBoth || evensAndOddsOrBothOrBoth\
    \ || evensAndOddsOrBothOrBothOrBoth\n        val evensAndOddsOrBothOrBothOrBothOrBothOrBoth\
    \ = even || odds || evensAndOdds || evensAndOddsOrBoth || evensAndOddsOrBothOrBoth\
    \ || evensAndOddsOrBothOrBothOrBoth || evensAndOddsOrBothOrBothOrBothOrBoth\n\
    \        val evensAndOddsOrBothOrBothOrBothOrBothOrBothOrBoth = even || odds ||\
    \ evensAndOdds || evensAndOddsOrBoth || evensAndOddsOrBothOrBoth || evensAndOddsOrBothOrBothOrBoth\
    \ || evensAndOddsOrBothOrBothOrBothOrBoth\n        val evensAndOddsOrBothOrBothOrBothOrBothOrBothOrBoth\
    \ = even || odds || evensAndOdds || evensAndOddsOrBoth || evensAndOddsOrBothOrBoth\
    \ || evensAndOddsOrBothOrBothOrBoth || evensAndOddsOrBothOrBothOrBothOrBoth ||\
    \ evensAndOddsOrBothOrBothOrBothOrBothOrBoth\n        val evensAndOddsOrBothOrBothOrBothOrBothOrBothOrBothOrBoth\
    \ = even || odds || evensAndOdds || evensAndOddsOrBoth || evensAndOddsOrBothOrBoth\
    \ || evensAndOddsOrBothOrBothOrBoth || evensAndOddsOrBothOrBothOrBothOrBoth\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphvu6vvoa.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mevensAndOddsOrBothOrBothOrBothOrBothOrBoth\e\
    [0m = even || odds || evensAndOdds || evensAndOddsOrBoth || evensAndOddsOrBothOrBoth\
    \ || evensAndOddsOrBothOrBothOrBoth || evensAndOddsOrBothOrBothOrBothOrBoth\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensAndOddsOrBothOrBothOrBothOrBothOrBoth is already defined\
    \ as \e[33mvalue\e[0m \e[35mevensAndOddsOrBothOrBothOrBothOrBothOrBoth\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphvu6vvoa.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mevensAndOddsOrBothOrBothOrBothOrBothOrBothOrBoth\e\
    [0m = even || odds || evensAndOdds || evensAndOddsOrBoth || evensAndOddsOrBothOrBoth\
    \ || evensAndOddsOrBothOrBothOrBoth || evensAndOddsOrBothOrBothOrBothOrBoth ||\
    \ evensAndOddsOrBothOrBothOrBothOrBothOrBoth\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensAndOddsOrBothOrBothOrBothOrBothOrBothOrBoth is already\
    \ defined as \e[33mvalue\e[0m \e[35mevensAndOddsOrBothOrBothOrBothOrBothOrBothOrBoth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmphvu6vvoa.scala:17:35 --------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mevensAndOdds\e[0m = even && odds\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\e[31m   |\e\
    [0m                 "
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.toList\n        val evensSorted =\
    \ evensSorted.sortBy(_ % 2 == 0)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < b)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < b)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < b)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < b)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < b)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < b)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < b)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < b)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < b)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < b)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < b)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < b)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < b)\n        val evensSorted\
    \ = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_ < b)\n\
    \        val evensSorted = evensSorted.reverse\n        val evensSorted = evensSorted.takeWhile(_\
    \ < b)\n        val evensSorted = evensSorted.reverse\n        val evensSorted\
    \ = evensSorted.takeWhile(_ < b)\n        val evensSorted = evensSorted.reverse\n\
    \        val evensSorted = evensSorted.takeWhile(_ < b)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0bs1uw1x.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.sortBy(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0bs1uw1x.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0bs1uw1x.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.takeWhile(_\
    \ < b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0bs1uw1x.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0bs1uw1x.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.takeWhile(_\
    \ < b)\n\e[31m\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1660009295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n   \
    \     while (i <= j) {\n            result.add(i)\n            i += 1\n      \
    \  }\n        result.sortWith(_ < _)\n        return result.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4e1zndr7.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        val evensSet = evens.toSet\n\
    \        val oddsSet = odds.toSet\n        val evensSetList = evensSet.toList\n\
    \        val oddsSetList = oddsSet.toList\n        val evensSetListSorted = evensSetList.sortWith(_\
    \ < _)\n        val oddsSetListSorted = oddsSetList.sortWith(_ < _)\n        val\
    \ evensSetListSortedReversed = evensSetListSorted.reverse\n        val oddsSetListSortedReversed\
    \ = oddsSetListSorted.reverse\n        val evensSetListSortedReversedSorted =\
    \ evensSetListSortedReversed.sortWith(_ < _)\n        val oddsSetListSortedReversedSorted\
    \ = oddsSetListSortedReversed.sortWith(_ < _)\n        val evensSetListSortedReversedSortedReversed\
    \ = evensSetListSortedReversedSorted.reverse\n        val oddsSetListSortedReversedSortedReversed\
    \ = oddsSetListSortedReversedSorted.reverse\n        val evensSetListSortedReversedSortedReversedSorted\
    \ = evensSetListSortedReversedSortedReversed.sortWith(_ < _)\n        val oddsSetListSortedReversedSortedReversedSorted\
    \ = oddsSetListSortedReversedSortedReversed.sortWith(_ < _)\n        val evensSetListSortedReversedSortedReversedSortedReversed\
    \ = evensSetListSortedReversedSortedReversedSorted.reverse\n        val oddsSetListSortedReversedSortedReversedSortedReversed\
    \ = oddsSetListSortedReversedSortedReversedSorted.reverse\n        val evensSetListSortedReversedSortedReversedSortedReversedSorted\
    \ = evensSetListSortedReversedSortedReversedSortedReversed.sortWith(_ < _)\n \
    \       val oddsSetListSortedReversedSortedReversedSortedReversed = oddsSetListSortedReversedSortedReversedSorted.reverse\n\
    \        val evensSetListSortedReversedSortedReversedSortedReversedSorted = evensSetListSortedReversedSortedReversedSortedReversed.sortWith(_\
    \ < _)\n        val oddsSetListSortedReversedSortedReversedSortedReversedSorted\
    \ = oddsSetListSortedReversedSortedReversedSortedReversed.reverse\n        val\
    \ evensSetListSortedReversedSortedReversedSortedReversedSortedReversed = evensSetListSortedReversedSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpysbazoap.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36moddsSetListSortedReversedSortedReversedSortedReversed\e\
    [0m = oddsSetListSortedReversedSortedReversedSorted.reverse\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSetListSortedReversedSortedReversedSortedReversed is already\
    \ defined as \e[33mvalue\e[0m \e[35moddsSetListSortedReversedSortedReversedSortedReversed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpysbazoap.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mevensSetListSortedReversedSortedReversedSortedReversedSorted\e\
    [0m = evensSetListSortedReversedSortedReversedSortedReversed.sortWith(_ < _)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSetListSortedReversedSortedReversedSortedReversedSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35mevensSetListSortedReversedSortedReversedSortedReversedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpysbazoap.scala:37:5 ---------------------\e[0m\e[0m\n\
    \e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < b).flatMap(x => odds filter (x % 2 == 0))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpobr0j4jw.scala:16:101\
    \ -------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(\e[36mx\e[0m => x).takeWhile(\e\
    [36mx\e[0m => x < b).flatMap(\e[36mx\e[0m => odds filter (x % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                                                               ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                               Found:    Boolean\n\
    \e[31m   |\e[0m                                               Required: \e[1m\e\
    [32mLong\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e\
    [0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList\n\
    \        val oddsSorted = odds.toList\n        val evensSortedSorted: List[Long]\
    \ = evensSorted.sortBy(_.toLong)\n        val oddsSortedSorted: List[Long] = oddsSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSorted: List[Long] = evensSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSorted: List[Long] = oddsSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \        val evensSortedSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \        val oddsSortedSortedSortedSortedSortedSorted: List[Long] = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplfdtjg7_.scala:37:66 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36moddsSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = \n\e[31m\e[31m   |\e[0m              \
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                                      expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplfdtjg7_.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedSortedSortedSorted\e[0m: \e[35mList\e[0m[\e[35mLong\e[0m] =\
    \ evensSortedSortedSorted.sortBy(_.toLong)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplfdtjg7_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = oddsSortedSortedSorted.sortBy(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35moddsSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplfdtjg7_.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = evensSortedSortedSorted.sortBy(_.toLong)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n        val\
    \ end = (a / b).toInt\n        val start2 = start * 2\n        val end2 = end\
    \ * 2\n        val start3 = start2 * 3\n        val end3 = end2 * 3\n        val\
    \ start4 = start3 * 4\n        val end4 = end3 * 4\n        val start5 = start4\
    \ * 5\n        val end5 = end4 * 5\n        val start6 = start5 * 6\n        val\
    \ end6 = end5 * 6\n        val start7 = start6 * 7\n        val end7 = end6 *\
    \ 7\n        val start8 = start7 * 8\n        val end8 = end7 * 8\n        val\
    \ start9 = start8 * 9\n        val end9 = end8 * 9\n        val start10 = start9\
    \ * 10\n        val end10 = end9 * 10\n        val start11 = start10 * 11\n  \
    \      val end11 = end10 * 11\n        val start12 = start11 * 12\n        val\
    \ end12 = end11 * 12\n        val start13 = start12 * 13\n        val end13 =\
    \ end12 * 13\n        val start14 = start13 * 14\n        val end14 = end13 *\
    \ 14\n        val start15 = start14 * 15\n        val end15 = end14 * 15\n   \
    \     val start16 = start15 * 16\n        val end16 = end15 * 16\n        val\
    \ start17 = start16 * 17\n        val end17 = end16 * 17\n        val start18\
    \ = start17 * 18\n        val end18 = end17 * 18\n        val start19 = start18\
    \ * 19\n        val end19 = end18 * 19\n        val start20 = start19 * 20\n \
    \       val end20 = end19 * 20\n        val start21 = start20 * 21\n        val\
    \ end21 = end20 * 21\n        val start22 = start21 * 22\n        val end22 =\
    \ end21 * 22\n        val start23 = start22 * 23\n        val end23 = end22 *\
    \ 23\n        val start24 = start23 * 24\n        val end24 = end23 * 24\n   \
    \     val start25 = start24 * 25\n        val end25 = end24 * 25\n        val\
    \ start26 = start25 * 26\n        val end26 = end25 * 26\n        val start27\
    \ = start26 * 27\n        val end27 = end\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmusspgq0.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpmusspgq0.scala:69:5 ---------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val m = math.min(a, b)\n        val\
    \ n = math.max(a, b)\n        val d = math.floor(m/2)\n        val r = math.floor(n/2)\n\
    \        val c = math.floor(r/2)\n        val t = math.floor(c/2)\n        val\
    \ u = math.floor(t/2)\n        val v = math.floor(u/2)\n        val w = math.floor(v/2)\n\
    \        val x = math.floor(w/2)\n        val y = math.floor(x/2)\n        val\
    \ z = math.floor(y/2)\n        val a = math.floor(z/2)\n        val b = math.floor(a/2)\n\
    \        val c = math.floor(b/2)\n        val d = math.floor(c/2)\n        val\
    \ e = math.floor(d/2)\n        val f = math.floor(e/2)\n        val g = math.floor(f/2)\n\
    \        val h = math.floor(g/2)\n        val i = math.floor(h/2)\n        val\
    \ j = math.floor(i/2)\n        val k = math.floor(j/2)\n        val l = math.floor(k/2)\n\
    \        val m = math.floor(l/2)\n        val n = math.floor(m/2)\n        val\
    \ o = math.floor(n/2)\n        val p = math.floor(o/2)\n        val q = math.floor(p/2)\n\
    \        val r = math.floor(q/2)\n        val s = math.floor(r/2)\n        val\
    \ t = math.floor(s/2)\n        val u = math.floor(t/2)\n        val v = math.floor(u/2)\n\
    \        val w = math.floor(v/2)\n        val x = math.floor(w/2)\n        val\
    \ y = math.floor(x/2)\n        val z = math.floor(y/2)\n        val a = math.floor(z/2)\n\
    \        val b = math.floor(a/2)\n        val c = math.floor(b/2)\n        val\
    \ d = math.floor(c/2)\n        val e = math.floor(d/2)\n        val f = math.floor(e/2)\n\
    \        val g = math.floor(f/2)\n        val h = math.floor(g/2)\n        val\
    \ i = math.floor(h/2)\n        val j = math.floor(i/2)\n        val k = math.floor(j/2)\n\
    \        val l = math.floor(k/2)\n        val m = math.floor(l/2)\n        val\
    \ n = math.floor(m/2)\n        val o = math.floor(n/2)\n        val p = math.floor(o/2)\n\
    \        val q = math.floor(p/2)\n        val r = math.floor(q/2)\n        val\
    \ s = math.floor(r/2)\n        val t = math.floor(s/2)\n        val u = math.floor(t/2)\n\
    \        val v = math.floor(u/2)\n        val w = math.floor(v/2)\n        val\
    \ x = math.floor(w/2)\n        val y = math.floor\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_fgcf2n.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = math.floor(b/\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mc is already defined as \e[33mvalue\e[0m \e[35mc\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_fgcf2n.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36md\e[0m = math.floor(c/\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpo_fgcf2n.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = math.floor(l/\e[31m2\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already\
    \ defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_fgcf2n.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = math.floor(m/\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_fgcf2n.scala:44:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m\
    \ \e[36mr\e[0m = math.floor(q/\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161"
  stdout: ''
  timestamp: 1660009297
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_1 = mutable.ListBuffer[Long]()\n\
    \        val even_1 = mutable.ListBuffer[Long]()\n        val odd_2 = mutable.ListBuffer[Long]()\n\
    \        val even_2 = mutable.ListBuffer[Long]()\n        val odd_3 = mutable.ListBuffer[Long]()\n\
    \        val even_3 = mutable.ListBuffer[Long]()\n        val odd_4 = mutable.ListBuffer[Long]()\n\
    \        val even_4 = mutable.ListBuffer[Long]()\n        val odd_5 = mutable.ListBuffer[Long]()\n\
    \        val even_5 = mutable.ListBuffer[Long]()\n        val odd_6 = mutable.ListBuffer[Long]()\n\
    \        val even_6 = mutable.ListBuffer[Long]()\n        val odd_7 = mutable.ListBuffer[Long]()\n\
    \        val even_7 = mutable.ListBuffer[Long]()\n        val odd_8 = mutable.ListBuffer[Long]()\n\
    \        val even_8 = mutable.ListBuffer[Long]()\n        val odd_9 = mutable.ListBuffer[Long]()\n\
    \        val even_9 = mutable.ListBuffer[Long]()\n        val odd_10 = mutable.ListBuffer[Long]()\n\
    \        val even_10 = mutable.ListBuffer[Long]()\n        val odd_11 = mutable.ListBuffer[Long]()\n\
    \        val even_11 = mutable.ListBuffer[Long]()\n        val odd_12 = mutable.ListBuffer[Long]()\n\
    \        val even_12 = mutable.ListBuffer[Long]()\n        val odd_13 = mutable.ListBuffer[Long]()\n\
    \        val even_13 = mutable.ListBuffer[Long]()\n        val odd_14 = mutable.ListBuffer[Long]()\n\
    \        val even_14 = mutable.ListBuffer[Long]()\n        val odd_15 = mutable.ListBuffer[Long]()\n\
    \        val even_15 = mutable.ListBuffer[Long]()\n        val odd_16 = mutable.ListBuffer[Long]()\n\
    \        val even_16\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpig81hni3.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpig81hni3.scala:14:20\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpig81hni3.scala:15:18\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpig81hni3.scala:16:19\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36meven\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpig81hni3.scala:17:19\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpig81hni3.scala:18:20\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with "
  stdout: ''
  timestamp: 1660009296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b by 2\n        val odds = a until b by -1\n        val evensAndOdds\
    \ = evens ++ odds\n        evensAndOdds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe712am13.scala:21)\n\tat Problem.main(tmpe712am13.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b + 1)\n        val odds = b until (a + 1)\n        val evensSorted\
    \ = evens.sortWith(_ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n   \
    \     val evensSortedList = evensSorted.map(_.toLong).toList\n        val oddsSortedList\
    \ = oddsSorted.map(_.toLong).toList\n        val result = evensSortedList.intersect(oddsSortedList).distinct\n\
    \        result.isEmpty() match {\n            case true => List()\n         \
    \   case false => result\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpna7s4qrz.scala:21:15 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        result.isEmpty() \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \e[33mmethod\e\
    [0m \e[35misEmpty\e[0m in \e[33mclass\e[0m \e[35mList\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val n = a.toInt\n        val m = b.toInt\n\
    \        val d = b.toInt - a.toInt\n        val r = scala.util.Random.nextInt\n\
    \        val c = scala.util.Random.nextInt\n        val q = scala.util.Random.nextInt\n\
    \        val r = scala.util.Random.nextInt\n        val s = scala.util.Random.nextInt\n\
    \        val t = scala.util.Random.nextInt\n        val u = scala.util.Random.nextInt\n\
    \        val v = scala.util.Random.nextInt\n        val w = scala.util.Random.nextInt\n\
    \        val x = scala.util.Random.nextInt\n        val y = scala.util.Random.nextInt\n\
    \        val z = scala.util.Random.nextInt\n        val a = scala.util.Random.nextInt\n\
    \        val b = scala.util.Random.nextInt\n        val c = scala.util.Random.nextInt\n\
    \        val d = scala.util.Random.nextInt\n        val e = scala.util.Random.nextInt\n\
    \        val f = scala.util.Random.nextInt\n        val g = scala.util.Random.nextInt\n\
    \        val h = scala.util.Random.nextInt\n        val i = scala.util.Random.nextInt\n\
    \        val j = scala.util.Random.nextInt\n        val k = scala.util.Random.nextInt\n\
    \        val l = scala.util.Random.nextInt\n        val m = scala.util.Random.nextInt\n\
    \        val n = scala.util.Random.nextInt\n        val o = scala.util.Random.nextInt\n\
    \        val p = scala.util.Random.nextInt\n        val q = scala.util.Random.nextInt\n\
    \        val r = scala.util.Random.nextInt\n        val s = scala.util.Random.nextInt\n\
    \        val t = scala.util.Random.nextInt\n        val u = scala.util.Random.nextInt\n\
    \        val v = scala.util.Random.nextInt\n        val w = scala.util.Random.nextInt\n\
    \        val x = scala.util.Random.nextInt\n        val y = scala.util.Random.nextInt\n\
    \        val z = scala.util.Random.nextInt\n        val a = scala.util.Random.nextInt\n\
    \        val b = scala.util.Random.nextInt\n        val c = scala.util.Random.nextInt\n\
    \        val d = scala.util.Random.nextInt\n        val e = scala.util.Random.nextInt\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8kaujzcs.scala:61:11 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp8kaujzcs.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = scala.util.Random.nextInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mr is already defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8kaujzcs.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mc\e[0m = scala.util.Random.nextInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mc is already defined as \e[33mvalue\e[0m \e[35mc\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8kaujzcs.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36md\e[0m = scala.util.Random.nextInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md\
    \ is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8kaujzcs.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = scala.util.Random.nextInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8kaujzcs.scala:43:12 -------------------"
  stdout: ''
  timestamp: 1660009299
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < b).reverse.flatMap(x => List(x.toLong))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphphqv2k8.scala:16:90\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(\e[36mx\e[0m => x).takeWhile(\e\
    [36mx\e[0m => x < b).reverse.flatMap(\e[36mx\e[0m => List(x.toLong))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while (i <= j) {\n            if\
    \ (i % 2 == 0) {\n                evens += i\n            } else {\n         \
    \       odds += i\n            }\n            i += 1\n            j += 1\n   \
    \     }\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpew93ryev.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpew93ryev.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        val evensSet = evens.toSet\n\
    \        val oddsSet = odds.toSet\n        val evensSetSet = evensSet.toSet\n\
    \        val oddsSetSet = oddsSet.toSet\n        val evensSetSetSet = evensSetSet.toSet\n\
    \        val oddsSetSetSet = oddsSetSet.toSet\n        val evensSetSetSetSet =\
    \ evensSetSetSet.toSet\n        val oddsSetSetSetSet = oddsSetSetSet.toSet\n \
    \       val evensSetSetSetSetSet = evensSetSetSetSet.toSet\n        val oddsSetSetSetSetSet\
    \ = oddsSetSetSetSet.toSet\n        val evensSetSetSetSetSetSet = evensSetSetSetSetSet.toSet\n\
    \        val oddsSetSetSetSetSetSet = oddsSetSetSetSetSet.toSet\n        val evensSetSetSetSetSetSetSet\
    \ = evensSetSetSetSetSetSetSet.toSet\n        val oddsSetSetSetSetSetSetSetSet\
    \ = oddsSetSetSetSetSetSetSet.toSet\n        val evensSetSetSetSetSetSetSetSet\
    \ = evensSetSetSetSetSetSetSetSet.toSet\n        val oddsSetSetSetSetSetSetSetSet\
    \ = oddsSetSetSetSetSetSetSet.toSet\n        val evensSetSetSetSetSetSetSetSet\
    \ = evensSetSetSetSetSetSetSetSetSet.toSet\n        val oddsSetSetSetSetSetSetSetSetSet\
    \ = oddsSetSetSetSetSetSetSetSet.toSet\n        val evensSetSetSetSetSetSetSetSetSet\
    \ = evensSetSetSetSetSetSetSetSetSet.toSet\n        val oddsSetSetSetSetSetSetSetSetSet\
    \ = oddsSetSetSetSetSetSetSetSet.toSet\n        val evensSetSetSetSetSetSetSetSetSet\
    \ = evensSetSetSetSetSetSetSetSetSet.toSet\n        val oddsSetSetSetSetSetSetSetSetSet\
    \ = oddsSetSetSetSetSetSetSetSetSet.toSet\n        val evensSetSetSetSetSetSetSetSetSetSet\
    \ = evensSetSetSetSetSetSetSetSetSetSet.toSet\n        val oddsSetSetSetSetSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_32xf23k.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_32xf23k.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36moddsSetSetSetSetSetSetSetSet\e[0m = oddsSetSetSetSetSetSetSet.toSet\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSetSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35moddsSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_32xf23k.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mevensSetSetSetSetSetSetSetSet\e\
    [0m = evensSetSetSetSetSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSetSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mevensSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_32xf23k.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36moddsSetSetSetSetSetSetSetSetSet\e\
    [0m = oddsSetSetSetSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSetSetSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35moddsSetSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_32xf23k.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSetSetSetSetSetSetSetSetSet\e[0m = evensSetSetSetSetSetSetSetSetSet."
  stdout: ''
  timestamp: 1660009300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        val evensSorted\
    \ = evensSorted.toList\n        evensSorted.filter(_ % 2 == 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2ekn50ye.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp2ekn50ye.scala:17:26 --------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        evensSorted.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n        val\
    \ end = (a / b).toInt\n        val start2 = start / 2\n        val end2 = end\
    \ / 2\n        val start3 = start2 / 2\n        val end3 = end2 / 2\n        val\
    \ start4 = start3 / 2\n        val end4 = end3 / 2\n        val start5 = start4\
    \ / 2\n        val end5 = end4 / 2\n        val start6 = start5 / 2\n        val\
    \ end6 = end5 / 2\n        val start7 = start6 / 2\n        val end7 = end6 /\
    \ 2\n        val start8 = start7 / 2\n        val end8 = end7 / 2\n        val\
    \ start9 = start8 / 2\n        val end9 = end8 / 2\n        val start10 = start9\
    \ / 2\n        val end10 = end9 / 2\n        val start11 = start10 / 2\n     \
    \   val end11 = end10 / 2\n        val start12 = start11 / 2\n        val end12\
    \ = end11 / 2\n        val start13 = start12 / 2\n        val end13 = end12 /\
    \ 2\n        val start14 = start13 / 2\n        val end14 = end13 / 2\n      \
    \  val start15 = start14 / 2\n        val end15 = end14 / 2\n        val start16\
    \ = start15 / 2\n        val end16 = end15 / 2\n        val start17 = start16\
    \ / 2\n        val end17 = end16 / 2\n        val start18 = start17 / 2\n    \
    \    val end18 = end17 / 2\n        val start19 = start18 / 2\n        val end19\
    \ = end18 / 2\n        val start20 = start19 / 2\n        val end20 = end19 /\
    \ 2\n        val start21 = start20 / 2\n        val end21 = end20 / 2\n      \
    \  val start22 = start21 / 2\n        val end22 = end21 / 2\n        val start23\
    \ = start22 / 2\n        val end23 = end22 / 2\n        val start24 = start23\
    \ / 2\n        val end24 = end23 / 2\n        val start25 = start24 / 2\n    \
    \    val end25 = end24 / 2\n        val start26 = start25 / 2\n        val end26\
    \ = end25 / 2\n        val start27 = start\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp28b7x6qe.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp28b7x6qe.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009262
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val digits = math.pow(10, math.ceil(math.log10(b\
    \ - a)))\n        val range = math.min(a, b)\n        var i = a\n        while(i\
    \ <= range) {\n            val d = math.floor(i / digits)\n            val e =\
    \ math.floor(i % digits)\n            list += d\n            list += e\n     \
    \       i += digits\n        }\n        list.sortWith((a, b) => a < b)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3_007yu.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph3_007yu.scala:23:14\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            i += digits\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean Long.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009302
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = Range(a, b).filter(x => x % 2 == 0)\n        range.foreach(x\
    \ => if (x % 2 == 0) evens += x)\n        range.foreach(x => if (x % 2 == 1) odds\
    \ += x)\n        evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm2h2ml09.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpm2h2ml09.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpm2h2ml09.scala:16:26 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                   ^\e[0m\n\e[31m   |\e[0m                          Found:  \
    \  (a : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm2h2ml09.scala:16:29 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = Range(a, b).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                      ^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (b : Long)\n\e[31m   |\e[0m                             Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < b).flatMap(x => List(x.toLong)).toList\
    \ ++ odds.filter(x => x % 2 == 1).sortBy(x => x).takeWhile(x => x < a).flatMap(x\
    \ => List(x.toLong)).toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptbd3ae4n.scala:20)\n\tat Problem.main(tmptbd3ae4n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm9c27cw6.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpm9c27cw6.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val min = a\n        val max = b\n\
    \        var current = 0\n        while (current < max) {\n            val digit\
    \ = current % 10\n            if (digit < min) {\n                result += digit.toLong\n\
    \            }\n            current += 1\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzt0wa5mw.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009299
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        val evensSet = evens.toSet\n\
    \        val oddsSet = odds.toSet\n        val result = evensSet.intersect(oddsSet)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9j_xd7ei.scala:22)\n\tat Problem.main(tmp9j_xd7ei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.map(_.toLong).toList\n        val oddsSortedList = oddsSorted.map(_.toLong).toList\n\
    \        if (evensSortedList.isEmpty && oddsSortedList.isEmpty) List()\n     \
    \   else if (evensSortedList.isEmpty) evensSortedList\n        else oddsSortedList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapo0j360.scala:25)\n\tat Problem.main(tmpapo0j360.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd = mut\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcabf3p20.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcabf3p20.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven is already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcabf3p20.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcabf3p20.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven is already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcabf3p20.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b by 2\n        val odds = a until b by 1\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphzla91f6.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        var i = a\n        while(i <= b) {\n\
    \            list+=i.toLong\n            i+=2\n        }\n        list.sortWith(_\
    \ < _)\n        list.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpizww1uzy.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b by 2\n        val odds = a until b by 1\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphzla91f6.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val n = math.min(a, b)\n        val m = math.max(a, b)\n        val d\
    \ = math.floor(n / 2)\n        val r = n % 2\n        val i = 2\n        while(i\
    \ <= m) {\n            val x = i * 2\n            val y = x + (if (r) 1 else 0)\n\
    \            val z = y + (if (r) 1 else 0)\n            val a = if (x == y) 1\
    \ else 0\n            val b = if (z == y) 1 else 0\n            val c = if (x\
    \ == z) 1 else 0\n            val d = if (y == z) 1 else 0\n            val e\
    \ = if (x == y) 1 else 0\n            val f = if (z == y) 1 else 0\n         \
    \   val g = if (x == z) 1 else 0\n            val h = if (y == z) 1 else 0\n \
    \           val j = if (x == y) 1 else 0\n            val k = if (z == y) 1 else\
    \ 0\n            val l = if (x == z) 1 else 0\n            val m = if (y == z)\
    \ 1 else 0\n            val n = if (x == y) 1 else 0\n            val o = if (z\
    \ == y) 1 else 0\n            val p = if (x == z) 1 else 0\n            val q\
    \ = if (y == z) 1 else 0\n            val r = if (x == y) 1 else 0\n         \
    \   val s = if (z == y) 1 else 0\n            val t = if (x == z) 1 else 0\n \
    \           val u = if (y == z) 1 else 0\n            val v = if (x == y) 1 else\
    \ 0\n            val w = if (z == y) 1 else 0\n            val x = if (x == y)\
    \ 1 else 0\n            val y = if (z == y) 1 else 0\n            val z = if (x\
    \ == z) 1 else 0\n            val a = if (x == y) 1 else 0\n            val b\
    \ = if (z == y) 1 else 0\n            val c = if (x == z) 1 else 0\n         \
    \   val d = if (y == z) 1 else 0\n            val e = if (x == y) 1 else 0\n \
    \           val f = if (z == y) 1 else 0\n            val g = if (x == z) 1 else\
    \ 0\n            val h = if (y == z) 1 else 0\n            val j = if (x == y)\
    \ 1 else 0\n            val k = if (z == y) 1 else 0\n            val l = if (x\
    \ == z) 1 else 0\n            val m = if (y == z) 1 else 0\n            val n\
    \ = if (x == y) 1 else 0\n            val o = if (z == y) 1 else 0\n         \
    \   val p = if (x == z) 1 else 0\n            val q = if (y == z) 1 else 0\n \
    \           val r = if (x == y) 1 else 0\n            val s = if (z == y) 1 else\
    \ 0\n            \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmwenkidm.scala:78:0 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmwenkidm.scala:14:20\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmwenkidm.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmwenkidm.scala:47:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m47 |\e[0m            \e[33mval\e\
    [0m \e[36mx\e[0m = \e[33mif\e[0m (x == y) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mx is already defined as \e[33mvalue\e[0m \e[35mx\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmwenkidm.scala:48:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m            \e[33mval\e\
    [0m \e[36my\e[0m = \e[33mif\e[0m (z == y) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0my is already defined as \e[33mvalue\e[0m \e[35my\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmwenkidm.scala:49:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m49 |\e[0m            \e[33mval\e\
    [0m \e[36mz\e[0m = \e[33mif\e[0m (x == z) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e\
    [0m\n\e[31m\e[31m  "
  stdout: ''
  timestamp: 1660009308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val start = (a % b).toInt\n      \
    \  val end = (b - start).toInt\n        val step = (b - start) / end\n       \
    \ for (i <- 0 until end) {\n            val x = start + i * step\n           \
    \ if (x % 2 == 0) {\n                result.add(x)\n            }\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsjglt3p1.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        var x = a\n        var y = b\n   \
    \     while(x != y) {\n            if(x % 2 == 0) {\n                x /= 2\n\
    \                result += x.toLong\n            } else {\n                x /=\
    \ 2\n                x += 1\n                result += x.toLong\n            }\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp571qx_nx.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        var x = a\n        var y = b\n        while (x != y) {\n            if\
    \ (x % 2 == 0) {\n                evens += x\n            }\n            else\
    \ {\n                odds += x\n            }\n            x = x + 1\n       \
    \     y = y + 1\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wocrlvs.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp8wocrlvs.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        var i = a\n        var j = b\n        while(i <= j) {\n            val\
    \ remainder = i % 10\n            evens += remainder\n            i /= 10\n  \
    \          val remainder2 = i % 10\n            odd += remainder2\n          \
    \  i /= 10\n            val remainder3 = i % 10\n            even += remainder3\n\
    \            i /= 10\n            val remainder4 = i % 10\n            odd +=\
    \ remainder4\n            i /= 10\n            val remainder5 = i % 10\n     \
    \       even += remainder5\n            i /= 10\n            val remainder6 =\
    \ i % 10\n            odd += remainder6\n            i /= 10\n            val\
    \ remainder7 = i % 10\n            even += remainder7\n            i /= 10\n \
    \           val remainder8 = i % 10\n            odd += remainder8\n         \
    \   i /= 10\n            val remainder9 = i % 10\n            even += remainder9\n\
    \            i /= 10\n            val remainder10 = i % 10\n            odd +=\
    \ remainder10\n            i /= 10\n            val remainder11 = i % 10\n   \
    \         even += remainder11\n            i /= 10\n            val remainder12\
    \ = i % 10\n            odd += remainder12\n            i /= 10\n            val\
    \ remainder13 = i % 10\n            even += remainder13\n            i /= 10\n\
    \            val remainder14 = i % 10\n            odd += remainder14\n      \
    \      i /= 10\n            val remainder15 = i % 10\n            even += remainder15\n\
    \            i /= 10\n            val remainder16 = i % 10\n            odd +=\
    \ remainder16\n            i /= 10\n            val remainder17 = i % 10\n   \
    \         even += remainder17\n            i /= 10\n            val remainder18\
    \ = i % 10\n            odd += remainder18\n            i /= 10\n            val\
    \ remainder19 = i % 10\n            even += remainder19\n            i /= 10\n\
    \            val remainder20 = i % 10\n            odd += remainder20\n      \
    \      i /= 10\n            val remainder21 = i % 10\n            even += remainder21\n\
    \            i /= 10\n            val remainder22 = i % 10\n            odd +=\
    \ remainder22\n            i /= 10\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp__6cuncy.scala:96:0 ----------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp__6cuncy.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36modd\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0modd is already\
    \ defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp__6cuncy.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp__6cuncy.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp__6cuncy.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp__6cuncy.scala:95:1 ---------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /t"
  stdout: ''
  timestamp: 1660009308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val min = math.min(a, b)\n        val max = math.max(a, b)\n        val\
    \ range = max - min\n        val step = range / 2\n        for (i <- min until\
    \ max by step) {\n            if (i % 2 == 0) {\n                evens += i\n\
    \            } else {\n                odds += i\n            }\n        }\n \
    \       evens.toList ++ odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxp5aivgt.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxp5aivgt.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList.sortWith(_\
    \ < _)\n        val oddsSorted = odds.toList.sortWith(_ < _)\n        evensSorted.intersect(oddsSorted)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8l50scfo.scala:21)\n\tat Problem.main(tmp8l50scfo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009308
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val even\
    \ = a.toString.filter(_ % 2 == 0).sorted\n        val odd = b.toString.filter(_\
    \ % 2 == 1).sorted\n        val evenList = even.takeWhile(_ < b).map(_.toLong).toList\n\
    \        val oddList = odd.takeWhile(_ < a).map(_.toLong).toList\n        if (evenList.isEmpty\
    \ && oddList.isEmpty) Nil\n        else if (evenList.isEmpty || oddList.isEmpty)\
    \ oddList\n        else evenList ++ oddList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp652f275x.scala:23)\n\tat Problem.main(tmp652f275x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val range = (a to b).iterator\n  \
    \      while(range.hasNext) {\n            val current = range.next\n        \
    \    if(current % 2 == 0) {\n                result += current.toLong\n      \
    \      }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9k_w1qz5.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        val evensAndOdds = evens\
    \ ++ odds\n        evensAndOdds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvf8cq2ct.scala:20)\n\tat Problem.main(tmpvf8cq2ct.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm9c27cw6.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpm9c27cw6.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens.filter(x => x % 2 ==\
    \ 0).sortBy(x => x).takeWhile(x => x < b).reverse ++ odds\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiq7c9gls.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens.filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m0\e[0m).sortBy(\e[36mx\e[0m => x).takeWhile(\e\
    [36mx\e[0m => x < b).reverse ++ odds\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd = mut\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjts94daa.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjts94daa.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0meven is already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjts94daa.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjts94daa.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0meven is already defined as \e[33mvalue\e[0m \e[35meven\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjts94daa.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd is already defined as \e[33mv"
  stdout: ''
  timestamp: 1660009310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1)\n        val odds = b until (a - 1)\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbmur_53.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b by 2\n        val odds = b until a by 2\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk41h0czg.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        val evensSorted = evens.sortWith(_\
    \ < _)\n        val oddsSorted = odds.sortWith(_ < _)\n        val evensSortedList\
    \ = evensSorted.toList\n        val oddsSortedList = oddsSorted.toList\n     \
    \   val evensSortedListWithEvens = evensSortedList.filter(_%2 == 0)\n        val\
    \ evensSortedListWithOdds = evensSortedList.filter(_%2 == 1)\n        val oddsSortedListWithEvens\
    \ = oddsSortedList.filter(_%2 == 0)\n        val oddsSortedListWithOdds = oddsSortedList.filter(_%2\
    \ == 1)\n        val evensSortedListWithEvensAndOdds = evensSortedListWithEvens\
    \ ++ oddsSortedListWithOdds\n        val oddsSortedListWithEvensAndOdds = evensSortedListWithOdds\
    \ ++ oddsSortedListWithEvens\n        val evensSortedListWithEvensAndOddsAndOdds\
    \ = evensSortedListWithEvensAndOdds ++ oddsSortedListWithOddsAndEvens\n      \
    \  val evensSortedListWithEvensAndOddsAndOddsAndOdds = evensSortedListWithEvensAndOddsAndOdds\
    \ ++ oddsSortedListWithOddsAndEvensAndOdds\n        val evensSortedListWithEvensAndOddsAndOddsAndOddsAndOdds\
    \ = evensSortedListWithEvensAndOddsAndOddsAndOdds ++ oddsSortedListWithOddsAndEvensAndOddsAndOdds\n\
    \        val evensSortedListWithEvensAndOddsAndOddsAndOddsAndOddsAndOdds = evensSortedListWithEvensAndOddsAndOddsAndOddsAndOddsAndOdds\n\
    \        val evensSortedListWithEvensAndOddsAndOddsAndOddsAndOddsAndOddsAndOdds\
    \ = evensSortedListWithEvensAndOddsAndOddsAndOddsAndOddsAndOddsAndOdds\n     \
    \   val evensSortedListWithEvensAndOddsAndOddsAndOddsAndOddsAndOddsAndOddsAndOdds\
    \ = evensSortedListWithEvensAndOddsAndOddsAndOddsAndOddsAndOddsAndOddsAndOdds\n\
    \        val evensSortedList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5beg_cmz.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5beg_cmz.scala:26:88\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mevensSortedListWithEvensAndOddsAndOdds\e[0m = evensSortedListWithEvensAndOdds\
    \ ++ oddsSortedListWithOddsAndEvens\n\e[31m\e[31m   |\e[0m                   \
    \                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: oddsSortedListWithOddsAndEvens\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5beg_cmz.scala:27:102\
    \ -----------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mevensSortedListWithEvensAndOddsAndOddsAndOdds\e[0m = evensSortedListWithEvensAndOddsAndOdds\
    \ ++ oddsSortedListWithOddsAndEvensAndOdds\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: oddsSortedListWithOddsAndEvensAndOdds\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5beg_cmz.scala:28:116 -----------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mevensSortedListWithEvensAndOddsAndOddsAndOddsAndOdds\e\
    [0m = evensSortedListWithEvensAndOddsAndOddsAndOdds ++ oddsSortedListWithOddsAndEvensAndOddsAndOdds\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: oddsSortedListWithOddsAndEvensAndOddsAndOdds\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/"
  stdout: ''
  timestamp: 1660009310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.toList.sortWith(_ < _)\n        val\
    \ evensSorted = evensSorted.takeWhile(_ < b)\n        evensSorted.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjppytyk5.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.takeWhile(_\
    \ < b)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009308
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val odds = a to (b+1)\n        val evensSet = evens.toSet\n\
    \        val oddsSet = odds.toSet\n        val evensSetList = evensSet.toList\n\
    \        val oddsSetList = oddsSet.toList\n        val evensSetSet = evensSet.toSet\n\
    \        val oddsSetSet = oddsSet.toSet\n        val evensSetSetList = evensSetSet.toList\n\
    \        val oddsSetSetList = oddsSetSet.toList\n        val evensSetSetSet =\
    \ evensSetSet.toSet\n        val oddsSetSetSet = oddsSetSet.toSet\n        val\
    \ evensSetSetSetList = evensSetSetSet.toList\n        val oddsSetSetSetList =\
    \ oddsSetSetSet.toList\n        val evensSetSetSetSet = evensSetSetSet.toSet\n\
    \        val oddsSetSetSetSet = oddsSetSetSet.toSet\n        val evensSetSetSetSetList\
    \ = evensSetSetSetSet.toList\n        val oddsSetSetSetSetList = oddsSetSetSetSet.toList\n\
    \        val evensSetSetSetSetSet = evensSetSetSetSet.toSet\n        val oddsSetSetSetSetSet\
    \ = oddsSetSetSetSet.toSet\n        val evensSetSetSetSetSetList = evensSetSetSetSet.toList\n\
    \        val oddsSetSetSetSetSetList = oddsSetSetSetSet.toList\n        val evensSetSetSetSetSetSet\
    \ = evensSetSetSetSet.toSet\n        val oddsSetSetSetSetSetSet = oddsSetSetSetSet.toSet\n\
    \        val evensSetSetSetSetSetSetList = evensSetSetSetSetSet.toList\n     \
    \   val oddsSetSetSetSetSetSetList = oddsSetSetSetSetSet.toList\n        val evensSetSetSetSetSetSet\
    \ = evensSetSetSetSet.toSet\n        val oddsSetSetSetSetSetSet = oddsSetSetSetSet.toSet\n\
    \        val evensSetSetSetSetSetSetList = evensSetSetSetSetSet.toList\n     \
    \   val oddsSetSetSetSetSetSetList = oddsSetSetSetSetSet.toList\n        val evensSetSetSetSetSetSetSet\
    \ = evensSetSetSetSetSet.toSet\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7rtrr7e7.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mevensSetSetSetSetSetSet\e\
    [0m = evensSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mevensSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7rtrr7e7.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36moddsSetSetSetSetSetSet\e\
    [0m = oddsSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35moddsSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7rtrr7e7.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mevensSetSetSetSetSetSetList\e\
    [0m = evensSetSetSetSetSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSetSetSetSetSetSetList is already defined as \e[33mvalue\e\
    [0m \e[35mevensSetSetSetSetSetSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7rtrr7e7.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36moddsSetSetSetSetSetSetList\e\
    [0m = oddsSetSetSetSetSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSetSetSetSetSetSetList is already defined as \e[33mvalue\e\
    [0m \e[35moddsSetSetSetSetSetSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[3"
  stdout: ''
  timestamp: 1660009311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val numsEven = mutable.ListBuffer[Long]()\n\
    \        val numsOdd = mutable.ListBuffer[Long]()\n        val numsBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothEven = mutable.ListBuffer[Long]()\n        val numsBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[Long]()\n\
    \        val numsBothBothBothEven = mutable.ListBuffer[Long]()\n        val numsBothBothBothOdd\
    \ = mutable.ListBuffer[Long]()\n        val numsBothBothBothBoth = mutable.ListBuffer[\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6_rh_phc.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6_rh_phc.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsBothBothBothEven\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsBothBothBothEven is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsBothBothBothEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6_rh_phc.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsBothBothBothOdd\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsBothBothBothOdd is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsBothBothBothOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6_rh_phc.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsBothBothBothBoth\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsBothBothBothBoth is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumsBothBothBothBoth\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6_rh_phc.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnumsBothBothBothEven\e[0m\
    \ = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsBothBothBothEven is already defined a"
  stdout: ''
  timestamp: 1660009274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until (b - 1)\n        val odds = b until (a - 1)\n        evens ++ odds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbmur_53.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val nums = scala.math.pow(b,a).toInt\n\
    \        for(i <- 0 until nums) {\n            list += scala.math.pow(a,i).toLong\n\
    \        }\n        list.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0oh6claf.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \        val even_ = mutable.ListBuffer[Long]()\n        val odd_ = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4fho2sty.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4fho2sty.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4fho2sty.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp4fho2sty.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4fho2sty.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd_ is alread"
  stdout: ''
  timestamp: 1660009270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val x = a.toInt\n        val y = b.toInt\n\
    \        while(x >= y) {\n            list+=x.toLong\n            x -= y.toInt\n\
    \        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmyvolxmn.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmyvolxmn.scala:19:14\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            x -= y.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value -=\
    \ is not a member of Int - did you mean x.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val remainder = a % b\n        var i =\
    \ a\n        while (i < b) {\n            list += i\n            i += remainder\n\
    \        }\n        list.sortWith(_ < _)\n        list.filter(i => i % 2 == 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpapinwnb2.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n       \
    \ while(i <= j) {\n            list += i\n            i += 1\n        }\n    \
    \    list.sortWith(_ < _)\n        list.takeWhile(_ % 2 == 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk8k5yje.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val range = (a to b).iterator\n        while (range.hasNext) {\n    \
    \        val current = range.next\n            if (current % 2 == 0) {\n     \
    \           evens += current\n            } else {\n                odds += current\n\
    \            }\n        }\n        evens.toList ++ odds.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm9c27cw6.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpm9c27cw6.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val nums = mutable.ListBuffer[Long]()\n        val numsA = mutable.ListBuffer[Long]()\n\
    \        val numsB = mutable.ListBuffer[Long]()\n        val numsC = mutable.ListBuffer[Long]()\n\
    \        val numsD = mutable.ListBuffer[Long]()\n        val numsE = mutable.ListBuffer[Long]()\n\
    \        val numsF = mutable.ListBuffer[Long]()\n        val numsG = mutable.ListBuffer[Long]()\n\
    \        val numsH = mutable.ListBuffer[Long]()\n        val numsI = mutable.ListBuffer[Long]()\n\
    \        val numsJ = mutable.ListBuffer[Long]()\n        val numsK = mutable.ListBuffer[Long]()\n\
    \        val numsL = mutable.ListBuffer[Long]()\n        val numsM = mutable.ListBuffer[Long]()\n\
    \        val numsN = mutable.ListBuffer[Long]()\n        val numsO = mutable.ListBuffer[Long]()\n\
    \        val numsP = mutable.ListBuffer[Long]()\n        val numsQ = mutable.ListBuffer[Long]()\n\
    \        val numsR = mutable.ListBuffer[Long]()\n        val numsS = mutable.ListBuffer[Long]()\n\
    \        val numsT = mutable.ListBuffer[Long]()\n        val numsU = mutable.ListBuffer[Long]()\n\
    \        val numsV = mutable.ListBuffer[Long]()\n        val numsW = mutable.ListBuffer[Long]()\n\
    \        val numsX = mutable.ListBuffer[Long]()\n        val numsY = mutable.ListBuffer[Long]()\n\
    \        val numsZ = mutable.ListBuffer[Long]()\n        val numsA = mutable.ListBuffer[Long]()\n\
    \        val numsB = mutable.ListBuffer[Long]()\n        val numsC = mutable.ListBuffer[Long]()\n\
    \        val numsD = mutable.ListBuffer[Long]()\n        val numsE = mutable.ListBuffer[Long]()\n\
    \        val numsF = mutable.ListBuffer[Long]()\n        val numsG = mutable.ListBuffer[Long]()\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbxuo1gu7.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mnumsA\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsA is already defined as \e[33mvalue\e[0m \e[35mnumsA\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbxuo1gu7.scala:44:12 ---------------------------\e[0m\e[0m\n\e\
    [31m44 |\e[0m        \e[33mval\e[0m \e[36mnumsB\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsB is already defined as \e[33mvalue\e[0m \e[35mnumsB\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbxuo1gu7.scala:45:12 ---------------------------\e[0m\e[0m\n\e\
    [31m45 |\e[0m        \e[33mval\e[0m \e[36mnumsC\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsC is already defined as \e[33mvalue\e[0m \e[35mnumsC\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbxuo1gu7.scala:46:12 ---------------------------\e[0m\e[0m\n\e\
    [31m46 |\e[0m        \e[33mval\e[0m \e[36mnumsD\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsD is already defined as \e[33mvalue\e[0m \e[35mnumsD\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbxuo1gu7.scala:47:12 ---------------------------\e[0m\e[0m\n\e\
    [31m47 |\e[0m        \e[33mval\e[0m \e[36mnumsE\e[0m = mutable.ListBuffer[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnums"
  stdout: ''
  timestamp: 1660009313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        val nums = a to b\n        nums.foreach(x\
    \ => if (x % 2 == 0) result += x.toLong)\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp91i3mu7h.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odd = a to b by 1\n        val evensAndOdd = evens\
    \ ++ odd\n        evensAndOdd.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoxicwqi_.scala:20)\n\tat Problem.main(tmpoxicwqi_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        var j = b\n       \
    \ while (i <= j) {\n            list += i\n            i += 1\n        }\n   \
    \     list.sortWith(_ < _)\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph0ok_3z0.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009287
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        evens.toList ++ odds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxep252mb.scala:19)\n\tat Problem.main(tmpxep252mb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val start = 0\n        val end = a.toInt\n\
    \        while (start < end) {\n            val mid = start + (end - start) /\
    \ 2\n            if (mid < b) list.add(mid.toLong)\n            else if (mid >\
    \ b) list.add(mid.toLong)\n            else list.add(mid.toLong)\n           \
    \ start = mid + 1\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdc1elh8z.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpdc1elh8z.scala:22:18 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            start = mid + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val start\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.sortWith(_ < _)\n        evensSorted.takeWhile(_\
    \ % 2 == 0).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc9k160ff.scala:16:42\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evensSorted.takeWhile(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\e[31m   |\e[0m      \
    \  Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        var i = a\n        while(i <= b) {\n \
    \           val remainder = i % 10\n            evens += remainder\n         \
    \   i /= 10\n        }\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp588v1nae.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        var low = a\n        var high = b\n  \
    \      while(low < high) {\n            val mid = (low + high) / 2\n         \
    \   if(mid % 2 == 0) {\n                evens += mid.toLong\n                low\
    \ = mid + 1\n            } else {\n                high = mid - 1\n          \
    \  }\n        }\n        evens.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi566qwdt.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b\n        val evensSorted = evens.toList.sortWith(_ < _)\n        val\
    \ evensSorted = evensSorted.filter(_ % 2 == 0)\n        val evensSorted = evensSorted.map(_\
    \ / 2)\n        evensSorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4ihsrpnn.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4ihsrpnn.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mevensSorted\e[0m = evensSorted.map(_\
    \ / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSorted is already defined as \e[33mvalue\e[0m \e[35mevensSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1660009312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \        val even_ = mutable.ListBuffer.empty[Long]\n        val odd_ = mutable.ListBuffer.empty[Long]\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi3vh8v8_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi3vh8v8_.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3vh8v8_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_ is already defined as \e[33mvalue\e[0m \e[35modd_\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi3vh8v8_.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36meven_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_ is already defined as \e[33mvalue\e[0m \e[35meven_\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi3vh8v8_.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36modd_\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659797789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer.empty[Long]\n        val odds = mutable.ListBuffer.empty[Long]\n\
    \        val even = a.toInt\n        val odd = b.toInt\n        while(even < odd)\
    \ {\n            evens += even\n            odd += 2\n        }\n        while(even\
    \ > odd) {\n            odds += odd\n            even -= 2\n        }\n      \
    \  evens.toList\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt6kzj02b.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpt6kzj02b.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpt6kzj02b.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            odd += \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean odd.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt6kzj02b.scala:24:17\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            even -= \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value -= is not a member of Int - did you mean even.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val current = a\n        val remainder\
    \ = b % current\n        val remainder2 = remainder / 2\n        val remainder3\
    \ = remainder2 / 2\n        val remainder4 = remainder3 / 2\n        val remainder5\
    \ = remainder4 / 2\n        val remainder6 = remainder5 / 2\n        val remainder7\
    \ = remainder6 / 2\n        val remainder8 = remainder7 / 2\n        val remainder9\
    \ = remainder8 / 2\n        val remainder10 = remainder9 / 2\n        val remainder11\
    \ = remainder10 / 2\n        val remainder12 = remainder11 / 2\n        val remainder13\
    \ = remainder12 / 2\n        val remainder14 = remainder13 / 2\n        val remainder15\
    \ = remainder14 / 2\n        val remainder16 = remainder15 / 2\n        val remainder17\
    \ = remainder16 / 2\n        val remainder18 = remainder17 / 2\n        val remainder19\
    \ = remainder18 / 2\n        val remainder20 = remainder19 / 2\n        val remainder21\
    \ = remainder20 / 2\n        val remainder22 = remainder21 / 2\n        val remainder23\
    \ = remainder22 / 2\n        val remainder24 = remainder23 / 2\n        val remainder25\
    \ = remainder24 / 2\n        val remainder26 = remainder25 / 2\n        val remainder27\
    \ = remainder26 / 2\n        val remainder28 = remainder27 / 2\n        val remainder29\
    \ = remainder28 / 2\n        val remainder30 = remainder29 / 2\n        val remainder31\
    \ = remainder30 / 2\n        val remainder32 = remainder31 / 2\n        val remainder33\
    \ = remainder32 / 2\n        val remainder34 = remainder33 / 2\n        val remainder35\
    \ = remainder34 / 2\n        val remainder36 = remainder35 / 2\n        val remainder37\
    \ = remainder36 / 2\n        val remainder38 = remainder37 / 2\n        val remainder39\
    \ = remainder38 / 2\n        val remainder40 = remainder39 / 2\n        val remainder41\
    \ = remainder40 / 2\n        val remainder42 = remainder41 / 2\n        val remainder43\
    \ = remainder\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9eiaqlqd.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9eiaqlqd.scala:59:5 ---------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = mutable.ListBuffer[Long]()\n        val num = a * b\n        val remainder\
    \ = num % b\n        val remainder2 = remainder / b\n        val remainder3 =\
    \ remainder2 / b\n        val remainder4 = remainder3 / b\n        val remainder5\
    \ = remainder4 / b\n        val remainder6 = remainder5 / b\n        val remainder7\
    \ = remainder6 / b\n        val remainder8 = remainder7 / b\n        val remainder9\
    \ = remainder8 / b\n        val remainder10 = remainder9 / b\n        val remainder11\
    \ = remainder10 / b\n        val remainder12 = remainder11 / b\n        val remainder13\
    \ = remainder12 / b\n        val remainder14 = remainder13 / b\n        val remainder15\
    \ = remainder14 / b\n        val remainder16 = remainder15 / b\n        val remainder17\
    \ = remainder16 / b\n        val remainder18 = remainder17 / b\n        val remainder19\
    \ = remainder18 / b\n        val remainder20 = remainder19 / b\n        val remainder21\
    \ = remainder20 / b\n        val remainder22 = remainder21 / b\n        val remainder23\
    \ = remainder22 / b\n        val remainder24 = remainder23 / b\n        val remainder25\
    \ = remainder24 / b\n        val remainder26 = remainder25 / b\n        val remainder27\
    \ = remainder26 / b\n        val remainder28 = remainder27 / b\n        val remainder29\
    \ = remainder28 / b\n        val remainder30 = remainder29 / b\n        val remainder31\
    \ = remainder30 / b\n        val remainder32 = remainder31 / b\n        val remainder33\
    \ = remainder32 / b\n        val remainder34 = remainder33 / b\n        val remainder35\
    \ = remainder34 / b\n        val remainder36 = remainder35 / b\n        val remainder37\
    \ = remainder36 / b\n        val remainder38 = remainder37 / b\n        val remainder39\
    \ = remainder38 / b\n        val remainder40 = remainder39 / b\n        val remainder41\
    \ = remainder40 / b\n        val remainder42 = remainder41 / b\n        val remainder43\
    \ = remain\n    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpym4hoqh9.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpym4hoqh9.scala:58:26 ------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \e[36mremainder43\e[0m = remain\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        Not found: remain\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpym4hoqh9.scala:59:5 ---------------------\e[0m\e\
    [0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a until b\n        val odds = b until a\n        evens ++ odds\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwrcuki7h.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    IndexedSeq[Long]\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797571
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val result\
    \ = mutable.ListBuffer[Long]()\n        val start = (a / b).toInt\n        val\
    \ end = (a / b).toInt\n        val start2 = start / 2\n        val end2 = end\
    \ / 2\n        val start3 = start2 / 2\n        val end3 = end2 / 2\n        val\
    \ start4 = start3 / 2\n        val end4 = end3 / 2\n        val start5 = start4\
    \ / 2\n        val end5 = end4 / 2\n        val start6 = start5 / 2\n        val\
    \ end6 = end5 / 2\n        val start7 = start6 / 2\n        val end7 = end6 /\
    \ 2\n        val start8 = start7 / 2\n        val end8 = end7 / 2\n        val\
    \ start9 = start8 / 2\n        val end9 = end8 / 2\n        val start10 = start9\
    \ / 2\n        val end10 = end9 / 2\n        val start11 = start10 / 2\n     \
    \   val end11 = end10 / 2\n        val start12 = start11 / 2\n        val end12\
    \ = end11 / 2\n        val start13 = start12 / 2\n        val end13 = end12 /\
    \ 2\n        val start14 = start13 / 2\n        val end14 = end13 / 2\n      \
    \  val start15 = start14 / 2\n        val end15 = end14 / 2\n        val start16\
    \ = start15 / 2\n        val end16 = end15 / 2\n        val start17 = start16\
    \ / 2\n        val end17 = end16 / 2\n        val start18 = start17 / 2\n    \
    \    val end18 = end17 / 2\n        val start19 = start18 / 2\n        val end19\
    \ = end18 / 2\n        val start20 = start19 / 2\n        val end20 = end19 /\
    \ 2\n        val start21 = start20 / 2\n        val end21 = end20 / 2\n      \
    \  val start22 = start21 / 2\n        val end22 = end21 / 2\n        val start23\
    \ = start22 / 2\n        val end23 = end22 / 2\n        val start24 = start23\
    \ / 2\n        val end24 = end23 / 2\n        val start25 = start24 / 2\n    \
    \    val end25 = end24 / 2\n        val start26 = start25 / 2\n        val end26\
    \ = end25 / 2\n        val start27 = start\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptggp7ci1.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptggp7ci1.scala:68:5 ---------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val list\
    \ = new mutable.ListBuffer[Long]()\n        val low = a\n        val high = b\n\
    \        while(low <= high) {\n            val mid = low + (high - low) / 2\n\
    \            val digit = math.pow(10, mid.toInt)\n            val digits = math.floor(digit\
    \ / 2).toLong\n            val evenDigits = digits % 2\n            list.+=((mid.toLong\
    \ * digit).toLong)\n            list.+=((mid.toLong * digit).toLong)\n       \
    \     list.+=((mid.toLong * digit).toLong)\n            list.+=((mid.toLong *\
    \ digit).toLong)\n            list.+=((mid.toLong * digit).toLong)\n         \
    \   list.+=((mid.toLong * digit).toLong)\n            list.+=((mid.toLong * digit).toLong)\n\
    \            list.+=((mid.toLong * digit).toLong)\n            list.+=((mid.toLong\
    \ * digit).toLong)\n            list.+=((mid.toLong * digit).toLong)\n       \
    \     list.+=((mid.toLong * digit).toLong)\n            list.+=((mid.toLong *\
    \ digit).toLong)\n            list.+=((mid.toLong * digit).toLong)\n         \
    \   list.+=((mid.toLong * digit).toLong)\n            list.+=((mid.toLong * digit).toLong)\n\
    \            list.+=((mid.toLong * digit).toLong)\n            list.+=((mid.toLong\
    \ * digit).toLong)\n            list.+=((mid.toLong * digit).toLong)\n       \
    \     list.+=((mid.toLong * digit).toLong)\n            list.+=((mid.toLong *\
    \ digit).toLong)\n            list.+=((mid.toLong * digit).toLong)\n         \
    \   list.+=((mid.toLong * digit).toLong)\n            list.+=((mid.toLong * digit).toLong)\n\
    \            list.+=((mid.toLong * digit).toLong)\n            list.+=((mid.toLong\
    \ * digit).toLong)\n            list.+=((mid.toLong * digit).toLong)\n       \
    \     list.+=((mid.toLong * digit).toLong)\n            list.+=((mid.toLong *\
    \ digit).toLong)\n            list.+=((mid.toLong * digit).toLong)\n         \
    \   list.+=((mid.toLong * digit).toLong)\n            list.+=((mid.toLong * digit).toLong)\n\
    \            list.+=((mid.toLong * digit).toLong)\n            list.+=((mid.toLong\
    \ * digit).toLong)\n            list.+=((mid.toLong * digit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj_34g6f1.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj_34g6f1.scala:65:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpj_34g6f1.scala:14:23 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpj_34g6f1.scala:64:1 ---------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpj_34g6f1.scala:57:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m57 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660009315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a.toString.takeWhile(_ % 2 == 0).sorted\n        val odds = b.toString.takeWhile(_\
    \ % 2 == 1).sorted\n        evens ++ odds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpagrzp5ki.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        evens ++ odds\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    String\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = mutable.ListBuffer[Long]()\n        val odds = mutable.ListBuffer[Long]()\n\
    \        val max = (math.max(a, b)).toLong\n        val min = (math.min(a, b)).toLong\n\
    \        val range = max - min\n        val step = range / 2\n        val start\
    \ = (min + step).toLong\n        val end = (max + step).toLong\n        val range\
    \ = end - start\n        val step = range / 2\n        val start2 = (min + step).toLong\n\
    \        val end2 = (max + step).toLong\n        val range = end2 - start2\n \
    \       val step = range / 2\n        val start3 = (min + step).toLong\n     \
    \   val end3 = (max + step).toLong\n        val range = end3 - start3\n      \
    \  val step = range / 2\n        val start4 = (min + step).toLong\n        val\
    \ end4 = (max + step).toLong\n        val range = end4 - start4\n        val step\
    \ = range / 2\n        val start5 = (min + step).toLong\n        val end5 = (max\
    \ + step).toLong\n        val range = end5 - start5\n        val step = range\
    \ / 2\n        val start6 = (min + step).toLong\n        val end6 = (max + step).toLong\n\
    \        val range = end6 - start6\n        val step = range / 2\n        val\
    \ start7 = (min + step).toLong\n        val end7 = (max + step).toLong\n     \
    \   val range = end7 - start7\n        val step = range / 2\n        val start8\
    \ = (min + step).toLong\n        val end8 = (max + step).toLong\n        val range\
    \ = end8 - start8\n        val step = range / 2\n        val start9 = (min + step).toLong\n\
    \        val end9 = (max + step).toLong\n        val range = end9 - start9\n \
    \       val step = range / 2\n        val start10 = (min + step).toLong\n    \
    \    val end10 = (max + step).toLong\n        val range = end10 - start10\n  \
    \      val step = range / 2\n        val start11 = (min + step).toLong\n     \
    \   val end11 = (max + step).toLong\n        val range = end11 - start11\n   \
    \     val step = range / 2\n        val start12 = (min + step).toLong\n      \
    \  val end12 = (max + step).toLong\n        val range = end12 - start12\n    \
    \    val step = range / 2\n        val start13 = (\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(generateIntegers((2l), (10l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptfam4ndz.scala:68:23 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \e[36mstart13\e[0m = (\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptfam4ndz.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = end - start\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrange\
    \ is already defined as \e[33mvalue\e[0m \e[35mrange\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptfam4ndz.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstep\e[0m = range / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstep is already defined as \e[33mvalue\e[0m \e[35mstep\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptfam4ndz.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = end2 - start2\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mrange is already\
    \ defined as \e[33mvalue\e[0m \e[35mrange\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptfam4ndz.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstep\e[0m = range / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstep is already defined as \e[33mvalue\e[0m \e[35mstep\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmptfam4ndz.sca"
  stdout: ''
  timestamp: 1660009316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given two positive integers a and b, return the even digits between\
    \ a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
    \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n   \
    \ // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
    \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val evens\
    \ = a to b by 2\n        val odds = a to b by -2\n        val evensSorted = evens.toList\n\
    \        val oddsSorted = odds.toList\n        val evensSortedSorted: List[Long]\
    \ = evensSorted.sortWith(_ < _)\n        val oddsSortedSorted: List[Long] = oddsSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSorted: List[Long] = evensSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSorted: List[Long] = oddsSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSortedSortedSorted: List[Long] = oddsSortedSortedSorted.sortWith(_\
    \ < _)\n        val evensSortedSortedSortedSortedSortedSorted: List[Long] = evensSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddsSortedSortedSortedSortedSortedSortedSorted: List[Long]\
    \ = oddsSortedSortedSorted.sortWith(_ < _)\n        val evensSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ List[Long] = evensSortedSortedSorted.sortWith(_ < _)\n        val odds\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
    \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n\
    \    assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
    \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
    \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz278ku8g.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz278ku8g.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevensSortedSortedSortedSorted\e[0m: \e[35mList\e[0m[\e[35mLong\e[0m] =\
    \ evensSortedSortedSorted.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35mevensSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz278ku8g.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddsSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = oddsSortedSortedSorted.sortWith(_ < _)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddsSortedSortedSortedSorted is already defined as \e[33mvalue\e\
    [0m \e[35moddsSortedSortedSortedSorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz278ku8g.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mevensSortedSortedSortedSortedSorted\e\
    [0m: \e[35mList\e[0m[\e[35mLong\e[0m] = evensSortedSortedSorted.sortWith(_ < _)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevensSortedSortedSortedSortedSorted is already defined as\
    \ \e[33mvalue\e[0m \e[35mevensSortedSortedSortedSortedSorted\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp"
  stdout: ''
  timestamp: 1660009316
