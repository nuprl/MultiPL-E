language: scala
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOfSubstring(substring)\n            if (start != -1) {\n       \
    \         val end = start + substring.length\n                val count = count.get(substring)\
    \ match {\n                    case Some(count) => count + 1\n               \
    \     case None => 1\n                }\n                count.foreach { case\
    \ (k, v) => count.put(k, v + 1) }\n                count.put(substring, 1)\n \
    \           }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe4tx81z0.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe4tx81z0.scala:14:31\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m\
    \ \e[36mstart\e[0m = string.indexOfSubstring(substring)\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                 value indexOfSubstring is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659797844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            if (end > string.length)\
    \ end = string.length\n            val sub = string.substring(start, end)\n  \
    \          if (count.contains(sub)) {\n                count(sub) += 1\n     \
    \       } else {\n                count(sub) = 1 // count the first occurrence\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5exd1bl3.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp5exd1bl3.scala:16:41 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (end > string.length) end =\
    \ string.length\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Reassignment to val end\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val counts = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val substr = string.substring(start,\
    \ end)\n            if (counts.contains(substr)) {\n                counts(substr)\
    \ += 1\n            } else {\n                counts.put(substr, 1L)\n       \
    \     }\n        }\n        counts.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpon7bt3v9.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797725
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length)\n            if (string.charAt(i)\
    \ == substring.charAt(0))\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l) + 1)\n                count.put(string.substring(0,i), count.getOrElse(string.substring(0,i),\
    \ 0l\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq9u5txom.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq9u5txom.scala:12:24\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36mcount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpq9u5txom.scala:13:8 ---------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until string.length)\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e\
    [31m   |\e[0m        Required: Long\n\e[31m14 |\e[0m            \e[33mif\e[0m\
    \ (string.charAt(i) == substring.charAt(\e[31m0\e[0m))\n\e[31m15 |\e[0m      \
    \          count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m16 |\e[0m               \
    \ count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m17 |\e[0m               \
    \ count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m18 |\e[0m               \
    \ count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m19 |\e[0m               \
    \ count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m20 |\e[0m               \
    \ count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m21 |\e[0m               \
    \ count.put(string.substring(\e[31m0\e[0m,i), count.getOrElse(string.substring(\e\
    [31m0\e[0m,i), \e[31m0l\e[0m) + \e[31m1\e[0m)\n\e[31m22 |\e[0m               \
    \ count.put(string.substring(\e[31m"
  stdout: ''
  timestamp: 1659797694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringSet = string.toSet\n\
    \        val substringSet = substring.toSet\n        val count = stringSet.count(substringSet)\n\
    \        val stringSetSize = stringSet.size\n        val substringSetSize = substringSet.size\n\
    \        if (stringSetSize == substringSetSize) {\n            count\n       \
    \ } else {\n            count + (stringSetSize - substringSetSize)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphbposkhx.scala:24)\n\tat Problem.main(tmphbposkhx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val chars = string.split(\"\").toList\n        val substrings\
    \ = substring.split(\"\").toList\n        for(i <- 0 until chars.length){\n  \
    \          val char = chars(i)\n            val sub = substrings(i)\n        \
    \    if(char != sub){\n                val count = count.get(char) + 1\n     \
    \           count.put(sub, count)\n            }\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplhbcwhji.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringSet = string.toSet\n\
    \        val substringSet = substring.toSet\n        var count = 0\n        var\
    \ i = 0\n        while (i < string.length) {\n            if (stringSet.contains(substringSet))\
    \ {\n                count += 1\n            }\n            i += 1\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0zxr6tcn.scala:17:35\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (stringSet.contains(substringSet))\
    \ {\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (substringSet : Set[Char])\n\
    \e[31m   |\e[0m                                   Required: Char\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            if (count.contains(sub)) {\n                count(sub, count)\n\
    \            } else {\n                count(sub, 1L)\n            }\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvt8a62lx.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvt8a62lx.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until string.length) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e\
    [31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: Long\n\e\
    [31m14 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = i\n\e[31m15 |\e[0m\
    \            \e[33mval\e[0m \e[36mend\e[0m = i + substring.length\n\e[31m16 |\e\
    [0m            \e[33mval\e[0m \e[36msub\e[0m = string.substring(start, end)\n\e\
    [31m17 |\e[0m            \e[33mif\e[0m (count.contains(sub)) {\n\e[31m18 |\e[0m\
    \                count(sub, count)\n\e[31m19 |\e[0m            } \e[33melse\e\
    [0m {\n\e[31m20 |\e[0m                count(sub, \e[31m1L\e[0m)\n\e[31m21 |\e\
    [0m            }\n\e[31m22 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring)\n\
    \        val stringSet = stringList.toSet\n        val stringSetSize = stringSet.size\n\
    \        var count = 0\n        for (i <- 0 until stringSetSize) {\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val stringSetSize = stringSet.size\n            val stringSetSize\
    \ = stringSet.size\n            val stringSetSize = stringSet.size\n         \
    \   val stringSetSize = stringSet.size\n            val stringSetSize = stringSet.size\n\
    \            val string\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpulj9635p.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpulj9635p.scala:79:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpulj9635p.scala:18:16 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m            \e[33mval\e[0m \e[36mstringSetSize\e[0m = stringSet.size\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mstringSetSize is already defined as \e[33mvalue\e[0m \e[35mstringSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpulj9635p.scala:19:16 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m            \e[33mval\e[0m \e[36mstringSetSize\e[0m = stringSet.size\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mstringSetSize is already defined as \e[33mvalue\e[0m \e[35mstringSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpulj9635p.scala:20:16 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m            \e[33mval\e[0m \e[36mstringSetSize\e[0m = stringSet.size\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mstringSetSize is already defined as \e[33mvalue\e[0m \e[35mstringSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpulj9635p.scala:21:16 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m            \e[33mval\e[0m \e[36mstringSetSize\e[0m = stringSet.size\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mstringSetSize is already defined as \e[33mvalue\e[0m \e[35mstringSetSi"
  stdout: ''
  timestamp: 1659797845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        val stringArray = string.split(substring)\n        stringArray.foreach(x\
    \ => count.put(x, count.getOrElse(x, 0l) + 1))\n        count.values.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"\
    x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7on6veuc.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOfSubstring(substring, i)\n            if (start != -1) {\n    \
    \            val end = start + substring.length\n                count.put(string.substring(start,\
    \ end), count.getOrElse(string.substring(start, end), 0l) + 1)\n            }\n\
    \        }\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7q3g4s_m.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7q3g4s_m.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(substring,\
    \ i)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value indexOfSubstring is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659797844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        string.split(substring).foreach(x => count.put(x, count.getOrElse(x,\
    \ 0L) + 1))\n        count.values.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjy5y4k0y.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        for (i <- 0 until string.length) {\n            val start = i\n\
    \            val end = i + substring.length\n            val sub = string.substring(start,\
    \ end)\n            if (count.contains(sub)) {\n                count(sub) +=\
    \ 1\n            } else {\n                count(sub) = 1 // count the substring\
    \ only once\n            }\n        }\n        count.values.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwvmu2lwj.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = new mutable.HashMap[String,\
    \ Long]()\n        val subStrings = string.split(substring)\n        for (subStr\
    \ <- subStrings) {\n            val subStringCount = count.get(subStr)\n     \
    \       if (subStringCount == null) {\n                count.put(subStr, 1L)\n\
    \            } else {\n                count.put(subStr, count.get(subStr) + 1L)\n\
    \            }\n        }\n        count.values.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n   \
    \ assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz3vgl9oc.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ string.indexOfSubstring(substring)\n            if (start >= 0) {\n        \
    \        val end = start + substring.length\n                val value = count(substring)\n\
    \                count(substring) = value + 1\n                if (start < end)\
    \ {\n                    count(string.substring(start, end)) = value + 1\n   \
    \             }\n            }\n        }\n        count.values.sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"), (\"x\"\
    )) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu5nf5hiu.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu5nf5hiu.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mstart\e[0m = string.indexOfSubstring(substring)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        value indexOfSubstring is not a member of\
    \ String\n2 errors found\n"
  stdout: ''
  timestamp: 1659797844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val countMap = new mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val start =\
    \ i\n            val end = i + substring.length\n            if (start < string.length\
    \ && end < string.length) {\n                val sub = string.substring(start,\
    \ end)\n                if (countMap.contains(sub)) {\n                    countMap\
    \ += (sub -> countMap.getOrElse(sub, 0l) + 1)\n                } else {\n    \
    \                countMap += (sub -> 1L)\n                }\n            }\n \
    \       }\n        countMap.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp390i8viv.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcountMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap[String,\
    \ Long]()\n        for (i <- 0 until string.length) {\n            val sub = string.substring(i,\
    \ i + substring.length)\n            val count = count.get(sub) match {\n    \
    \            case Some(count) => count + 1\n                case None => 1\n \
    \           }\n            count.put(sub, count)\n        }\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jgo9th4.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659797706
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val stringList = string.split(substring)\n\
    \        val stringListLength = stringList.length\n        val substringList =\
    \ substring.split(\"\")\n        val substringListLength = substringList.length\n\
    \        var count = 0\n        var i = 0\n        while (i < stringListLength)\
    \ {\n            val stringListElement = stringList(i)\n            val substringListElement\
    \ = substringList(i)\n            if (stringListElement == substringListElement)\
    \ {\n                count += 1\n            }\n            i += 1\n        }\n\
    \        count\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.howManyTimes(tmpgjyaqe27.scala:20)\n\tat Problem$.main(tmpgjyaqe27.scala:30)\n\
    \tat Problem.main(tmpgjyaqe27.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val count = mutable.HashMap.empty[String,\
    \ Long]\n        val strings = string.split(substring)\n        strings.foreach(s\
    \ => count.update(s, count.getOrElse(s, 0L) + 1))\n        count.values.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph54jpdfn.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659797843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n\
    \    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    //\
    \ >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string\
    \ : String, substring : String) : Long = {\n        val chars = string.split(substring).toList\n\
    \        val charsCount = chars.count(_ == substring)\n        val charsCountOverlap\
    \ = chars.count(_ == substring) + chars.count(_ != substring)\n        charsCountOverlap\
    \ / charsCount\n    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.howManyTimes(tmp2m91x5le.scala:15)\n\
    \tat Problem$.main(tmp2m91x5le.scala:18)\n\tat Problem.main(tmp2m91x5le.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797845
