name: HumanEval_101_words_string
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given a string of words separated by commas or spaces. Your\
  \ task is\n    // to split the string into words and return an array of the words.\n\
  \    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    //\
  \ (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"\
  One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"\
  three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi,\
  \ my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"\
  John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
  Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
  One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"\
  three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
  \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
  , \"gamal\"))));\n    }\n\n}\n"
completions: ["        val words = s.split(\"\"\"\\s*,\\s*|\\s*,\\s*\"\"\").map(_.trim).toList\n\
    \        words.toList", "        val words = s.split(\"[, ]+\")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        for (word <- words) {\n        \
    \    result.add(word)\n        }\n        return result.toList", "        val\
    \ words = s.split(\"\"\"\\s*,\\s*|\\s*,\\s*\"\"\").map(_.trim).toList\n      \
    \  words.toList", "        val words = s.split(\"[,\\\\s]+\")\n        val list\
    \ = mutable.ListBuffer[String]()\n        for (word <- words) {\n            list\
    \ += word\n        }\n        list.toList", "        val words = s.split(\"[,\\\
    \\s]+\")\n        words.toList", "        val words = s.split(\"[, ]+\")\n   \
    \     val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result += word\n        }\n        return result.toList", " \
    \       val words = s.split(\" \").filter(_.nonEmpty)\n        words.toList",
  "        val words = s.split(\", \")\n        words.toList", "        val words\
    \ = s.split(\" \").filter(_.nonEmpty)\n        words.toList", "        val words\
    \ = s.split(\", \")\n        val words2 = words.map(_.trim).toList\n        words2.toList",
  "        val words = s.split(\",\")\n        val wordsArray = words.toList\n   \
    \     wordsArray", "        val words = s.split(\"[, ]+\")\n        words.toList",
  "        val words = s.split(\"\\\\s*,\\\\s*\")\n        words.toList", "      \
    \  val words = s.split(\"\\\\s*,\\\\s*\")\n        val wordList = words.toList\n\
    \        wordList.map(_.trim).toList", "        val words = s.split(\"[, ]+\"\
    )\n        val wordsArray = words.toList\n        wordsArray", "        val words\
    \ = s.split(\"\"\"\\W+\"\"\")\n        val wordsArray = words.toArray\n      \
    \  wordsArray", "        val words = s.split(\"[,\\\\s]+\")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        for (word <- words) {\n        \
    \    result += word\n        }\n        return result.toList", "        val words\
    \ = s.split(\"[, ]+\")\n        val wordsArray = words.toList\n        wordsArray",
  "        val words = s.split(\"[,\\\\s]+\")\n        val list = mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            list += word\n        }\n        list.toList",
  "        val words = s.split(\" \").map(_.toLowerCase).toList\n        val words2\
    \ = words.filter(!_.isEmpty)\n        val words3 = words2.filter(!_.startsWith(\"\
    ,\"))\n        val words4 = words3.filter(!_.startsWith(\"'\"))\n        val words5\
    \ = words4.filter(!_.startsWith(\"\\\"\"))\n        val words6 = words5.filter(!_.startsWith(\"\
    (\"))\n        val words7 = words6.filter(!_.startsWith(\")\"))\n        val words8\
    \ = words7.filter(!_.startsWith(\",\"))\n        val words9 = words8.filter(!_.startsWith(\"\
    '\"))\n        val words10 = words9.filter(!_.startsWith(\"\\\"\"))\n        val\
    \ words11 = words10.filter(!_.startsWith(\"(\"))\n        val words12 = words11.filter(!_.startsWith(\"\
    )\"))\n        val words13 = words12.filter(!_.startsWith(\",\"))\n        val\
    \ words14 = words13.filter(!_.startsWith(\"'\"))\n        val words15 = words14.filter(!_.startsWith(\"\
    \\\"\"))\n        val words16 = words15.filter(!_.startsWith(\"(\"))\n       \
    \ val words17 = words16.filter(!_.startsWith(\")\"))\n        val words18 = words17.filter(!_.startsWith(\"\
    ,\"))\n        val words19 = words18.filter(!_.startsWith(\"'\"))\n        val\
    \ words20 = words19.filter(!_.startsWith(\"\\\"\"))\n        val words21 = words20.filter(!_.startsWith(\"\
    (\"))\n        val words22 = words21.filter(!_.startsWith(\")\"))\n        val\
    \ words23 = words22.filter(!_.startsWith(\",\"))\n        val words24 = words23.filter(!_.startsWith(\"\
    '\"))\n        val words25 = words24.filter(!_.startsWith(\"\\\"\"))\n       \
    \ val words26 = words25.filter(!_.startsWith(\"(\"))\n        val words27 = words26.filter(!_.startsWith(\"\
    )\"))\n        val words28 = words27.filter(!_.startsWith(\",\"))\n        val\
    \ words29 = words28.filter(!_.startsWith(\"'\"))\n        val words30 = words29.filter(!_.startsWith(\"\
    \\\"\"))\n        val words31 = words30.filter(!_.startsWith(\"(\"))\n       \
    \ val words32 = words31.filter(!_.startsWith(\")\"))\n        val words33 = words31.filter(!_.startsWith"]
stop_tokens:
- "\n    }\n"
