name: HumanEval_131_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the product of the odd digits.\n    //\
  \ Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
  \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
  \    // (15l)\n    def digits(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
  \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
  \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
  \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
completions: ["        val digits = n.toString.reverse.grouped(2).map(_.toLong)\n\
    \        digits.foldLeft(0l)(_ * _)", "        val digits = mutable.ListBuffer[Long]()\n\
    \        val remainder = n % 10\n        val quotient = n / 10\n        while(quotient\
    \ > 0) {\n            digits += quotient\n            quotient = quotient / 10\n\
    \        }\n        digits += remainder\n        digits.reverse.foldLeft(1l)(_\
    \ * _)", "        val digits = n.toString.toInt\n        val odd = digits.filter(_\
    \ % 2 == 1)\n        odd.length == 0 ? 0l : odd.product", "        val digits\
    \ = mutable.ArrayBuffer.empty[Long]\n        val remainder = n % 10\n        n\
    \ /= 10\n        while(n > 0) {\n            digits += remainder\n           \
    \ remainder = n % 10\n            n /= 10\n        }\n        digits.reverse.foldLeft(0l)(_\
    \ * _)", "        val digits = n.toString.reverse.grouped(2).map(_.toLong)\n \
    \       val evens = digits.filter(x => x % 2 == 0)\n        val odds = digits.filter(x\
    \ => x % 2 != 0)\n        evens.foldLeft(0l)(_ * _) + odds.foldLeft(0l)(_ * _)",
  "        val digits = n.toString.reverse.grouped(2).map(_.toLong)\n        digits.foldLeft(1l)((acc,\
    \ x) => acc * x)", "        val digits = mutable.ListBuffer[Long]()\n        var\
    \ product = 1\n        while (n > 0) {\n            digits += n % 10\n       \
    \     n /= 10\n        }\n        digits.reverse.foreach(product *= _)\n     \
    \   if (digits.isEmpty) 0\n        else product", "        val digits = n.toString.reverse.grouped(2).map(_.toLong)\n\
    \        digits.reduceLeft((x, y) => x * y)", "        val digits = n.toString.reverse.grouped(2).map(_.toLong)\n\
    \        digits.reduceLeft(_ * _)", "        val digits = n.toString.reverse.grouped(2).map(_.toLong)\n\
    \        if (digits.forall(_.isEven)) 0 else digits.foldLeft(0l)(_ * _)", "  \
    \      val digits = mutable.ListBuffer[Long]()\n        while(n > 0) {\n     \
    \       digits.append(n % 10)\n            n /= 10\n        }\n        digits.reverse.foldLeft(0l)(_\
    \ * _)", "        val digits = n.toString.reverse.grouped(2).map(_.toInt)\n  \
    \      digits.foldLeft(0l) { (acc, digit) => acc * digit }", "        var result\
    \ = 1\n        var digits = n.toString.reverse\n        while(digits.nonEmpty)\
    \ {\n            val digit = digits.head\n            digits =\n             \
    \   digits.tail\n                if (digit % 2 == 1)\n                    result\
    \ *= digit\n        }\n        result", "        val digits = n.toString.reverse.grouped(2).map(_.toLong)\n\
    \        digits.foldLeft(0l){ (acc, digit) => acc * digit }", "        val digits\
    \ = mutable.ListBuffer[Long]()\n        var product = 1\n        while(n > 0){\n\
    \            digits += n % 10\n            product *= n % 10\n            n /=\
    \ 10\n        }\n        if(digits.isEmpty) 0\n        else product", "      \
    \  val digits = n.toString.reverse.grouped(2).map(_.toInt)\n        val even =\
    \ digits.filter(_.toString.toLong % 2 == 0).length\n        val odd = digits.filter(_.toString.toLong\
    \ % 2 != 0).length\n        if (even > odd) 0\n        else digits.map(_.toString.toLong).product",
  "        var product = 0\n        var digits = n.toString.toInt\n        while(digits\
    \ > 0) {\n            product *= digits\n            digits -= 1\n        }\n\
    \        if (digits == 0) product\n        else 0", "        val digits = mutable.ListBuffer[Long]()\n\
    \        while(n > 0){\n            digits += n % 10\n            n /= 10\n  \
    \      }\n        digits.reverse.foldLeft(0l){ (acc, digit) => acc * digit }",
  "        val digits = n.toString.reverse.grouped(2).map(_.toLong)\n        digits.foldLeft(0l){\
    \ (acc, digit) => acc * digit }", "        val digits = mutable.ListBuffer[Long]()\n\
    \        val factors = mutable.ListBuffer[Long]()\n        val product = mutable.Long(1)\n\
    \        val n = n.toInt\n        val digit = n.toString.charAt(0)\n        val\
    \ factor = (digit.toLong - '0').pow(digits.length)\n        val factors = factor.until(factors.length)\n\
    \        factors.foreach(factor => digits += factor)\n        digits.foreach(digit\
    \ => product *= digit)\n        product"]
stop_tokens:
- "\n    }\n"
