name: HumanEval_47_median
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
  \    def median(l : List[Long]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n  \
  \  assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
  \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
  \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
completions: ["        val n = l.length\n        if (n < 2) 0.0f\n        else {\n\
    \            val mid = n / 2\n            val left = l.take(mid)\n           \
    \ val right = l.drop(mid)\n            val midVal = median(left)\n           \
    \ val leftVal = median(right)\n            val median = (midVal + leftVal) / 2\n\
    \            median\n        }", "        val n = l.length\n        val m = l.min\n\
    \        val median = (m + n) / 2\n        val half = if (n % 2 == 0) n / 2 else\
    \ n / 2\n        val median1 = if (half == 0) m else (m + half) / 2\n        val\
    \ median2 = if (half == 0) n else (m + half) / 2\n        val median3 = if (half\
    \ == 0) n else (m + half) / 2\n        val median4 = if (half == 0) n else (m\
    \ + half) / 2\n        val median5 = if (half == 0) n else (m + half) / 2\n  \
    \      val median6 = if (half == 0) n else (m + half) / 2\n        val median7\
    \ = if (half == 0) n else (m + half) / 2\n        val median8 = if (half == 0)\
    \ n else (m + half) / 2\n        val median9 = if (half == 0) n else (m + half)\
    \ / 2\n        val median10 = if (half == 0) n else (m + half) / 2\n        val\
    \ median11 = if (half == 0) n else (m + half) / 2\n        val median12 = if (half\
    \ == 0) n else (m + half) / 2\n        val median13 = if (half == 0) n else (m\
    \ + half) / 2\n        val median14 = if (half == 0) n else (m + half) / 2\n \
    \       val median15 = if (half == 0) n else (m + half) / 2\n        val median16\
    \ = if (half == 0) n else (m + half) / 2\n        val median17 = if (half == 0)\
    \ n else (m + half) / 2\n        val median18 = if (half == 0) n else (m + half)\
    \ / 2\n        val median19 = if (half == 0) n else (m + half) / 2\n        val\
    \ median20 = if (half == 0) n else (m + half) / 2\n        val median21 = if (half\
    \ == 0) n else (m + half) / 2\n        val median22 = if (half == 0) n else (m\
    \ + half) / 2\n        val median23 = if (half == 0) n else (m + half) / 2\n \
    \       val median24 = if (half == 0) n else (m + half) / 2\n        val median25\
    \ = if (half == 0) n else (m + half) / 2\n        val median26 = if (half == 0)\
    \ n else (m + half) / 2\n        val median27 = if (half == 0) n else (m + half)\
    \ / 2\n        val median28 = if (half == 0) n else (m + half) / 2\n        val\
    \ median29 = if (half == 0) n else (m + half) / 2\n        val median30 = if (half\
    \ == 0) n else (m + half) / 2\n        val median31 = if (half == 0) ", "    \
    \    val n = l.length\n        if (n < 2) 0.0f\n        else {\n            val\
    \ mid = n / 2\n            val left = l.slice(0, mid)\n            val right =\
    \ l.slice(mid)\n            val leftMedian = median(left)\n            val rightMedian\
    \ = median(right)\n            val median = (leftMedian + rightMedian) / 2\n \
    \           median\n        }", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.last\n     \
    \   else sorted.last.toFloat + sorted.last.toFloat / 2", "        val n = l.length\n\
    \        if (n < 2) 0f\n        else {\n            val mid = n / 2\n        \
    \    val left = l.slice(0, mid)\n            val right = l.slice(mid)\n      \
    \      val median = median(left) + median(right)\n            val medianFloat\
    \ = median.toFloat\n            if (medianFloat == 0) 0f\n            else medianFloat\n\
    \        }", "        val n = l.length\n        val m = l.min\n        val median\
    \ = (m + n) / 2\n        val l1 = l.filter(_ < median)\n        val l2 = l.filter(_\
    \ >= median)\n        val l3 = l1.size + l2.size\n        if (l3 > 1) (l1 + l2)\
    \ / 2.0\n        else median", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n        median", " \
    \       val n = l.length\n        if (n < 2) 0.0f\n        else {\n          \
    \  val mid = n / 2\n            val left = l.take(mid)\n            val right\
    \ = l.drop(mid)\n            val median = (left + right).sortWith(_ < _).last\n\
    \            median.toFloat\n        }", "        val n = l.length\n        if\
    \ (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val left\
    \ = l.slice(0, mid)\n            val right = l.slice(mid)\n            val median\
    \ = (left + right).sorted\n            val midPoint = median.head\n          \
    \  val leftMedian = median.tail.head\n            val rightMedian = median.tail.tail.head\n\
    \            val leftMedianIsSmaller = leftMedian < midPoint\n            val\
    \ rightMedianIsSmaller = rightMedian < midPoint\n            if (leftMedianIsSmaller\
    \ && rightMedianIsSmaller) midPoint\n            else (leftMedianIsSmaller ? leftMedian\
    \ : rightMedian)\n        }", "        val n = l.length\n        if (n < 2) 0.0\n\
    \        else {\n            val half = n / 2\n            val left = l.take(half)\n\
    \            val right = l.drop(half)\n            val mid = left match {\n  \
    \              case x :: xs => x\n                case _ => right\n          \
    \  }\n            val median = (left + right) match {\n                case x\
    \ :: xs => x\n                case _ => mid\n            }\n            median.toFloat\n\
    \        }", "        val n = l.length\n        val mid = n / 2\n        val left\
    \ = l.take(mid)\n        val right = l.drop(mid)\n        val median = if (n ==\
    \ 1) left else (left + right) / 2\n        median.toFloat", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n      \
    \      val left = l.take(mid)\n            val right = l.drop(mid)\n         \
    \   val median = median(left) + median(right)\n            val medianFloat = median.toFloat\n\
    \            if (medianFloat == 0.0f) 0.0f\n            else medianFloat\n   \
    \     }", "        val n = l.length\n        if (n < 2) 0.0\n        else {\n\
    \            val half = n / 2\n            val left = l.take(half)\n         \
    \   val right = l.drop(half)\n            val mid = left.length / 2\n        \
    \    val median = (left.take(mid) + right.take(mid)).sorted\n            median.last\n\
    \        }", "        val sorted = l.sorted\n        val mid = sorted.length /\
    \ 2\n        val median = sorted.take(mid).last\n        val left = sorted.drop(mid)\n\
    \        val right = sorted.takeRight(mid)\n        val medianLeft = median(left)\n\
    \        val medianRight = median(right)\n        val medianMedian = median(List(medianLeft,\
    \ medianRight))\n        val medianMedianFloat = medianMedian.toFloat\n      \
    \  val medianMedianInt = medianMedianFloat.toInt\n        val medianMedianLong\
    \ = medianMedianFloat.toLong\n        val medianMedianDouble = medianMedianFloat.toDouble\n\
    \        val medianMedianString = medianMedianFloat.toString\n        val medianMedianBoolean\
    \ = medianMedianFloat.toBoolean\n        val medianMedianNull = medianMedianFloat.isNull\n\
    \        val medianMedianUnit = medianMedianFloat.toUnit\n        val medianMedianNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n        val medianMedianUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Unit]\n        val medianMedianUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Unit]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Unit]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Unit]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        val left = sorted.drop(mid)\n      \
    \  val right = sorted.takeRight(mid)\n        val medianLeft = median(left)\n\
    \        val medianRight = median(right)\n        val medianMedian = (medianLeft\
    \ + medianRight) / 2\n        val medianMedianDiff = medianMedian - median\n \
    \       val medianMedianDiffAbs = Math.abs(medianMedianDiff)\n        if (medianMedianDiffAbs\
    \ < 0.1f)\n            medianMedian\n        else\n            medianMedianDiff",
  "        val n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n\
    \        val right = l.drop(mid)\n        val median = (left + right).sorted match\
    \ {\n            case Nil => 0f\n            case x :: xs => xs.last + 1f\n  \
    \      }\n        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        if (sorted.length == 1) sorted\n        else (sorted take mid)\
    \ match {\n            case x :: xs => if (x < sorted((mid-1).toInt)) x else median(xs)\n\
    \            case _ => sorted((mid-1).toInt)\n        }", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.drop(mid).last\n        val rightMedian = sorted.take(mid).last\n\
    \        val medianOfMedians = leftMedian + rightMedian\n        val medianOfMediansAsFloat\
    \ = medianOfMedians.toFloat\n        val medianOfMediansAsInt = medianOfMediansAsFloat.toInt\n\
    \        val medianOfMediansAsLong = medianOfMediansAsInt.toLong\n        medianOfMediansAsLong",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        median", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n      \
    \      val left = l.take(mid)\n            val right = l.drop(mid)\n         \
    \   val midVal = median(left)\n            val rightVal = median(right)\n    \
    \        val median = if (midVal < rightVal) midVal else rightVal\n          \
    \  median\n        }", "        val n = l.length\n        if (n == 0) 0.0f\n \
    \       else {\n            val mid = n / 2\n            val m1 = l.slice(0, mid)\n\
    \            val m2 = l.slice(mid)\n            val m = (m1 + m2).sortWith(_ <\
    \ _)\n            val half = m.length / 2\n            val median = m.slice(0,\
    \ half).sum / half\n            median\n        }", "        val n = l.length\n\
    \        val half = n / 2\n        val left = l.take(half)\n        val right\
    \ = l.drop(half)\n        val median = if (left.length == 0) 0f else left.median\n\
    \        val medianRight = if (right.length == 0) 0f else right.median\n     \
    \   val medianLeft = if (left.length == 0) 0f else left.median\n        val medianRightLeft\
    \ = if (right.length == 0) 0f else right.median\n        val medianLeftRight =\
    \ if (left.length == 0) 0f else left.median\n        val medianRightLeftRight\
    \ = if (right.length == 0) 0f else right.median\n        val medianLeftRightRight\
    \ = if (left.length == 0) 0f else left.median\n        val medianLeftRightRightLeft\
    \ = if (right.length == 0) 0f else right.median\n        val medianLeftRightRightLeftRight\
    \ = if (left.length == 0) 0f else left.median\n        val medianLeftRightRightLeftRightLeft\
    \ = if (right.length == 0) 0f else right.median\n        val medianLeftRightRightLeftRightLeftRight\
    \ = if (left.length == 0) 0f else left.median\n        val medianLeftRightRightLeftRightLeftRightLeft\
    \ = if (right.length == 0) 0f else right.median\n        val medianLeftRightRightLeftRightLeftRightLeftRight\
    \ = if (left.length == 0) 0f else left.median\n        val medianLeftRightRightLeftRightLeftRightLeftRightLeft\
    \ = if (right.length == 0) 0f else right.median\n        val medianLeftRightRightLeftRightLeftRightLeftRightLeftRight\
    \ = if (left.length == 0) 0f else left.median\n        val medianLeftRightRightLeftRightLeftRightLeftRightLeftRightLeft\
    \ = if (right.length == 0) 0f else right.median\n        val medianLeftRightRightLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = if (left.length == 0) 0f else left.median\n        val medianLeftRightRightLeftRightLeftRightLeftRightLeftRightLeftRightLeft\
    \ = if (right.length == 0) 0f else right.median\n        val medianLeftRightRightLeftRightLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = if (left.length == 0) 0f else left.median\n        val medianLeftRightRightLeftRightLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = if (right.length == 0) 0f else right.median\n        val medianLeftRightRightLeftRightLeftRightLeftRightLeftRightLeftRightLeftRightLeft\
    \ = if (left.length == 0) 0f else left.median\n        val medianLeftRightRightLeftRightLeftRightLeftRightLeftRightLeftRightLeftRightLeft",
  "        val n = l.length\n        val m = l.min\n        val h = (n - 1) / 2\n\
    \        val i = h + 1\n        val j = n - 1\n        val m1 = (m + l(i)).toFloat\n\
    \        val m2 = (m + l(j)).toFloat\n        val m = (m1 + m2) / 2\n        val\
    \ h1 = (m - l(i)).toFloat\n        val h2 = (m - l(j)).toFloat\n        val h\
    \ = (h1 + h2) / 2\n        val i1 = (m - l(i)).toFloat\n        val i2 = (m -\
    \ l(j)).toFloat\n        val i = (i1 + i2) / 2\n        val j1 = (m - l(i)).toFloat\n\
    \        val j2 = (m - l(j)).toFloat\n        val j = (j1 + j2) / 2\n        val\
    \ k = (m1 + m2 + h1 + h2 + i1 + i2 + j1 + j2) / 6\n        val k1 = (m - l(i)).toFloat\n\
    \        val k2 = (m - l(j)).toFloat\n        val k = (k1 + k2) / 2\n        val\
    \ l1 = (m - l(i)).toFloat\n        val l2 = (m - l(j)).toFloat\n        val l\
    \ = (l1 + l2) / 2\n        val m1 = (m + l(i)).toFloat\n        val m2 = (m +\
    \ l(j)).toFloat\n        val m = (m1 + m2) / 2\n        val h1 = (m - l(i)).toFloat\n\
    \        val h2 = (m - l(j)).toFloat\n        val h = (h1 + h2) / 2\n        val\
    \ i1 = (m - l(i)).toFloat\n        val i2 = (m - l(j)).toFloat\n        val i\
    \ = (i1 + i2) / 2\n        val j1 = (m - l(i)).toFloat\n        val j2 = (m -\
    \ l(j)).toFloat\n        val j = (j1 + j2) / 2\n        val k = (m1 + m2 + h1\
    \ + h2 + i1 + i2 + j1 + j2) / 6\n        val k1 = (m - l(i)).toFloat\n       \
    \ val k2 = (m - l(j)).toFloat\n        val k = (k1 + k2) / 2\n        val l1 =\
    \ (m - l(i)).toFloat\n        val l2 = (m - l(j)).toFloat\n        val l = (l1\
    \ + l2) / 2\n        val m1 = (m + l(i)).toFloat\n        val m2 = (m + l(j)).toFloat\n\
    \        val m = (m1 + m2) / 2\n        val h1 = (m - l(i)).toFloat\n        val\
    \ h2 = (", "        val n = l.length\n        val m = l.max\n        val l = l.sortWith(_\
    \ < _)\n        val mid = l / 2\n        val m1 = mid - 1\n        val m2 = mid\
    \ + 1\n        val m3 = mid + 1\n        val m4 = mid + 1\n        val m5 = mid\
    \ + 1\n        val m6 = mid + 1\n        val m7 = mid + 1\n        val m8 = mid\
    \ + 1\n        val m9 = mid + 1\n        val m10 = mid + 1\n        val m11 =\
    \ mid + 1\n        val m12 = mid + 1\n        val m13 = mid + 1\n        val m14\
    \ = mid + 1\n        val m15 = mid + 1\n        val m16 = mid + 1\n        val\
    \ m17 = mid + 1\n        val m18 = mid + 1\n        val m19 = mid + 1\n      \
    \  val m20 = mid + 1\n        val m21 = 0l\n        val m22 = 0l\n        val\
    \ m23 = 0l\n        val m24 = 0l\n        val m25 = 0l\n        val m26 = 0l\n\
    \        val m27 = 0l\n        val m28 = 0l\n        val m29 = 0l\n        val\
    \ m30 = 0l\n        val m31 = 0l\n        val m32 = 0l\n        val m33 = 0l\n\
    \        val m34 = 0l\n        val m35 = 0l\n        val m36 = 0l\n        val\
    \ m37 = 0l\n        val m38 = 0l\n        val m39 = 0l\n        val m40 = 0l\n\
    \        val m41 = 0l\n        val m42 = 0l\n        val m43 = 0l\n        val\
    \ m44 = 0l\n        val m45 = 0l\n        val m46 = 0l\n        val m47 = 0l\n\
    \        val m48 = 0l\n        val m49 = 0l\n        val m50 = 0l\n        val\
    \ m51 = 0l\n        val m52 = 0l\n        val m53 = 0l\n        val m54 = 0l\n\
    \        val m55 = 0l\n        val m56 = 0l\n        val m57 = 0l\n        val\
    \ m58 = 0l\n        val m59 = 0l\n        val m60 = 0l\n        val m61 = 0l\n\
    \        val m62 = 0l\n        val m63 = 0l\n        val m64 = 0l\n        val\
    \ m65 = 0l\n        val m66 = 0l", "        val n = l.length\n        val m =\
    \ l.toArray\n        val sorted = m.sortWith(_ < _)\n        val half = n / 2\n\
    \        if (n % 2 == 0) sorted.last else (sorted.last + sorted.head) / 2", " \
    \       val sorted = l.sorted\n        val mid = sorted.length / 2\n        if\
    \ (sorted.length % 2 == 0) sorted.last\n        else (sorted.last + sorted.head)\
    \ / 2", "        val n = l.length\n        val m = l.toArray\n        val sorted\
    \ = m.sortWith(_ < _)\n        val half = n / 2\n        val median = if (n %\
    \ 2 == 0) sorted.last else sorted.last.last\n        val lower = sorted.take(half)\n\
    \        val upper = sorted.drop(half)\n        val medianIndex = lower.indexOf(median)\n\
    \        val lowerIndex = lower\n            .zipWithIndex\n            .filter(_._2\
    \ == medianIndex)\n            .map(_._1)\n            .max\n        val upperIndex\
    \ = upper\n            .zipWithIndex\n            .filter(_._2 == medianIndex)\n\
    \            .map(_._1)\n            .min\n        val lowerMedian = lower\n \
    \           .zipWithIndex\n            .filter(_._2 == medianIndex)\n        \
    \    .map(_._1)\n            .max\n        val upperMedian = upper\n         \
    \   .zipWithIndex\n            .filter(_._2 == medianIndex)\n            .map(_._1)\n\
    \            .min\n        val lowerMedianIndex = lowerIndex\n            .zipWithIndex\n\
    \            .filter(_._2 == medianIndex)\n            .map(_._1)\n          \
    \  .max\n        val upperMedianIndex = upperIndex\n            .zipWithIndex\n\
    \            .filter(_._2 == medianIndex)\n            .map(_._1)\n          \
    \  .min\n        val lowerMedianValue = lower\n            .zipWithIndex\n   \
    \         .filter(_._2 == medianIndex)\n            .map(_._1)\n            .max\n\
    \        val upperMedianValue = upper\n            .zipWithIndex\n           \
    \ .filter(_._2 == medianIndex)\n            .map(_._1)\n            .min\n   \
    \     val lowerMedianValueIndex = lowerIndex\n            .zipWithIndex\n    \
    \        .filter(_._2 == medianIndex)\n            .map(_._1)\n            .max\n\
    \        val upperMedianValueIndex = upperIndex\n            .zipWithIndex\n \
    \           .filter(_._2 == medianIndex)\n            .map(_._1)\n           \
    \ .min\n        val lowerMedianValueValue = lower\n            .zipWithIndex\n\
    \            .filter(_._2 == medianIndex)\n            .map(_._1)\n          \
    \  .max\n        val upperMedianValueValue = upper\n            .zipWithIndex\n\
    \            .filter(_._2 == medianIndex)\n            .map(_._1)\n          \
    \  .min\n        val lowerMedianValueValueIndex = lowerIndex\n            .zipWithIndex\n\
    \            .filter(_._2 == medianIndex)\n            .map(_._1)\n          \
    \  .max\n        val upperMedianValueValueIndex = upperIndex\n            .zipWithIndex\n\
    \            .filter(_._2 == medianIndex)\n            .map(_._1)\n          \
    \  .min\n        ", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val left = sorted.drop(mid)\n\
    \        val right = sorted.takeRight(mid)\n        val medianLeft = median(left)\n\
    \        val medianRight = median(right)\n        val medianMedian = median(List(medianLeft,\
    \ medianRight))\n        val medianMedianFloat = medianMedian.toFloat\n      \
    \  val medianMedianInt = medianMedianFloat.toInt\n        val medianMedianLong\
    \ = medianMedianInt.toLong\n        val medianMedianDouble = medianMedianLong.toDouble\n\
    \        val medianMedianString = medianMedianDouble.toString\n        val medianMedianBoolean\
    \ = medianMedianString.toBoolean\n        val medianMedianChar = medianMedianString.toChar\n\
    \        val medianMedianInt = medianMedianChar.toInt\n        val medianMedianLong\
    \ = medianMedianInt.toLong\n        val medianMedianDouble = medianMedianLong.toDouble\n\
    \        val medianMedianString = medianMedianDouble.toString\n        val medianMedianBoolean\
    \ = medianMedianString.toBoolean\n        val medianMedianChar = medianMedianString.toChar\n\
    \        val medianMedianInt = medianMedianChar.toInt\n        val medianMedianLong\
    \ = medianMedianInt.toLong\n        val medianMedianDouble = medianMedianLong.toDouble\n\
    \        val medianMedianString = medianMedianDouble.toString\n        val medianMedianBoolean\
    \ = medianMedianString.toBoolean\n        val medianMedianChar = medianMedianString.toChar\n\
    \        val medianMedianInt = medianMedianChar.toInt\n        val medianMedianLong\
    \ = medianMedianInt.toLong\n        val medianMedianDouble = medianMedianLong.toDouble\n\
    \        val medianMedianString = medianMedianDouble.toString\n        val medianMedianBoolean\
    \ = medianMedianString.toBoolean\n        val medianMedianChar = medianMedianString.toChar\n\
    \        val medianMedianInt = medianMedianChar.toInt\n        val medianMedianLong\
    \ = medianMedianInt.toLong\n        val medianMedianDouble = medianMedianLong.toDouble\n\
    \        val medianMedianString = medianMedianDouble.toString\n        val medianMedianBoolean\
    \ = medianMedianString.toBoolean\n        val medianMedianChar = medianMedianString.toChar\n\
    \        ", "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n\
    \            val mid = n / 2\n            val left = l.slice(0, mid)\n       \
    \     val right = l.slice(mid)\n            val median = median(left) + median(right)\n\
    \            val medianFloat = median.toFloat\n            medianFloat\n     \
    \   }", "        val sorted = l.sorted\n        val mid = sorted.length / 2\n\
    \        val median = sorted.take(mid).last\n        val leftMedian = sorted.drop(mid).last\n\
    \        val rightMedian = sorted.last\n        val leftMedianIsBetter = (leftMedian\
    \ < median)\n        val rightMedianIsBetter = (rightMedian < median)\n      \
    \  if (leftMedianIsBetter && rightMedianIsBetter)\n            median\n      \
    \  else if (leftMedianIsBetter)\n            leftMedian\n        else\n      \
    \      rightMedian", "        val n = l.length\n        if (n < 2) 0.0f\n    \
    \    else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val median = (left + right).sorted.last\n\
    \            median.toFloat\n        }", "        val sorted = l.sorted\n    \
    \    val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median.toFloat", "        val n = l.length\n        if (n <= 1) 0.0f\n\
    \        else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val m = (left + right).sorted\n\
    \            val midPoint = m.length / 2\n            val median = m.apply(midPoint)\n\
    \            median\n        }", "        val n = l.length\n        if (n <= 1)\
    \ 0f\n        else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val median = (left + right).sorted\n\
    \            val medianIndex = median.indexWhere(_ > median.last)\n          \
    \  median(medianIndex.toFloat)\n        }", "        val n = l.length\n      \
    \  val half = n / 2\n        if (n < 3) {\n            l.head\n        }\n   \
    \     else {\n            val m = (l.head + l.last) / 2\n            val lo =\
    \ l.take(half)\n            val hi = l.drop(half)\n            val mid = median(lo)\
    \ + median(hi) - m\n            val median = if (n == 1) m else m\n          \
    \  median\n        }", "        val n = l.length\n        if (n < 2) 0.0f\n  \
    \      else {\n            val mid = n / 2\n            val left = l.slice(0,\
    \ mid)\n            val right = l.slice(mid)\n            val m = (left + right).sortWith(_\
    \ < _)\n            val median = m.length / 2\n            val medianValue = m.last\n\
    \            medianValue\n        }", "        val n = l.length\n        val mid\
    \ = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n \
    \       val median = if (n % 2 == 0) (left + right) / 2f else (left + right) /\
    \ 2\n        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val leftHalf = sorted.drop(mid)\n\
    \        val rightHalf = sorted.takeRight(mid)\n        val medianOfLeftHalf =\
    \ median(leftHalf)\n        val medianOfRightHalf = median(rightHalf)\n      \
    \  if (median == 0l) {\n            medianOfLeftHalf\n        } else if (median\
    \ == 0l) {\n            medianOfRightHalf\n        } else {\n            val leftMedian\
    \ = median(leftHalf)\n            val rightMedian = median(rightHalf)\n      \
    \      val medianOfBoth = median(sorted)\n            val medianOfBoth = median(sorted)\n\
    \            val medianOfBoth = median(sorted)\n            val medianOfBoth =\
    \ median(sorted)\n            val medianOfBoth = median(sorted)\n            val\
    \ medianOfBoth = median(sorted)\n            val medianOfBoth = median(sorted)\n\
    \            val medianOfBoth = median(sorted)\n            val medianOfBoth =\
    \ median(sorted)\n            val medianOfBoth = median(sorted)\n            val\
    \ medianOfBoth = median(sorted)\n            val medianOfBoth = median(sorted)\n\
    \            val medianOfBoth = median(sorted)\n            val medianOfBoth =\
    \ median(sorted)\n            val medianOfBoth = median(sorted)\n            val\
    \ medianOfBoth = median(sorted)\n            val medianOfBoth = median(sorted)\n\
    \            val medianOfBoth = median(sorted)\n            val medianOfBoth =\
    \ median(sorted)\n            val medianOfBoth = median(sorted)\n            val\
    \ medianOfBoth = median(sorted)\n            val medianOfBoth = median(sorted)\n\
    \            val medianOfBoth = median(sorted)\n            val medianOfBoth =\
    \ median(sorted)\n            val medianOfBoth = median(sorted)\n            val\
    \ medianOfBoth = median(sorted)\n            val medianOfBoth = median(sorted)\n\
    \            val medianOfBoth = median(sorted)\n            val medianOfBoth =\
    \ median(sorted)\n            val medianOfBoth = median(sorted)\n            val\
    \ medianOfBoth = median(sorted)\n            val medianOfBoth = median(sorted)\n\
    \            val medianOfBoth = median(sorted)\n            val medianOfBoth =\
    \ median(sorted)\n            val medianOfBoth = median(", "        val n = l.length\n\
    \        val half = n / 2\n        val m1 = l.slice(0, half)\n        val m2 =\
    \ l.slice(half, n)\n        val m = (m1 + m2).sortWith(_ < _)\n        val m1\
    \ = m.head\n        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n\
    \        val m1 = m.head\n        val m2 = m.last\n        val m = (m1 + m2).sortWith(_\
    \ < _)\n        val m1 = m.head\n        val m2 = m.last\n        val m = (m1\
    \ + m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2 = m.last\n  \
    \      val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n        val\
    \ m2 = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n\
    \        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val\
    \ m1 = m.head\n        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ <\
    \ _)\n        val m1 = m.head\n        val m2 = m.last\n        val m = (m1 +\
    \ m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2 = m.last\n    \
    \    val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2\
    \ = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n\
    \        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val\
    \ m1 = m.head\n        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ <\
    \ _)\n        val m1 = m.head\n        val m2 = m.last\n        val m = (m1 +\
    \ m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2 = m.last\n    \
    \    val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n        val m2\
    \ = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n        val m1 = m.head\n\
    \        val m2 = m.last\n        val m = (m1 + m2).sortWith(_ < _)\n", "    \
    \    val n = l.length\n        val m = l.toArray\n        val sorted = m.sortWith(_\
    \ < _)\n        val mid = sorted.length / 2\n        val median = if (n % 2 ==\
    \ 0) sorted[mid] else sorted[mid-1]\n        median.toFloat", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val lower = sorted.take(mid)\n\
    \        val upper = sorted.drop(mid)\n        val medianOfLower = median(lower)\n\
    \        val medianOfUpper = median(upper)\n        val medianOfMedian = median(sorted)\n\
    \        val medianOfMedianOfLower = median(lower.take(mid))\n        val medianOfMedianOfUpper\
    \ = median(upper.take(mid))\n        val medianOfMedianOfMedian = median(sorted.take(mid))\n\
    \        val medianOfMedianOfMedianOfLower = median(lower.take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfUpper = median(upper.take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedian = median(sorted.take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfLower = median(lower.take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfUpper = median(upper.take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedian = median(sorted.take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfLower = median(lower.take(mid).take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfUpper = median(upper.take(mid).take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedian = median(sorted.take(mid).take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfLower = median(lower.take(mid).take(mid).take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfUpper = median(upper.take(mid).take(mid).take(mid).take(mid).take(mid",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        if\
    \ (sorted.length % 2 == 0) {\n            val even = sorted.take(mid)\n      \
    \      val odd = sorted.drop(mid)\n            val median = even.median + odd.median\n\
    \            median\n        } else {\n            val even = sorted.take(mid)\n\
    \            val odd = sorted.drop(mid)\n            val median = even.min + odd.max\n\
    \            median\n        }", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        val median = sorted.take(mid).last\n        median",
  "        val n = l.length\n        if (n <= 1) 0f\n        else {\n            val\
    \ mid = n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val midVal = median(right)\n            val leftVal = median(left)\n\
    \            val median = leftVal + midVal\n            median.toFloat\n     \
    \   }", "        val sorted = l.sorted\n        val mid = sorted.length / 2\n\
    \        val m1 = sorted.take(mid)\n        val m2 = sorted.drop(mid)\n      \
    \  val m = (m1.length + m2.length) / 2\n        val median = (m1 + m2).sum / m\n\
    \        median", "        val n = l.length\n        if (n < 2) 0.0f\n       \
    \ else {\n            val mid = l.length / 2\n            val m1 = l.slice(0,\
    \ mid)\n            val m2 = l.slice(mid)\n            val m = (m1 + m2).sortWith(_\
    \ < _)\n            val m3 = m.take(mid)\n            val m4 = m.drop(mid)\n \
    \           val m5 = m3.sum / mid\n            val m6 = m4.sum / mid\n       \
    \     val m7 = m5.toFloat / m6\n            m7\n        }", "        val n = l.length\n\
    \        if (n < 2) 0f\n        else {\n            val mid = n / 2\n        \
    \    val left = l.slice(0, mid)\n            val right = l.slice(mid)\n      \
    \      val midVal = median(left)\n            val rightVal = median(right)\n \
    \           if (midVal < rightVal) midVal\n            else rightVal\n       \
    \ }", "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n   \
    \         val mid = n / 2\n            val left = l.take(mid)\n            val\
    \ right = l.drop(mid)\n            val median = (left + right).sorted\n      \
    \      val midPoint = median.last\n            val medianIndex = median.indexOfLast(midPoint)\n\
    \            val medianValue = median(medianIndex)\n            val medianIndex1\
    \ = medianIndex - 1\n            val medianValue1 = median(medianIndex1)\n   \
    \         val medianIndex2 = medianIndex + 1\n            val medianValue2 = median(medianIndex2)\n\
    \            val medianIndex3 = medianIndex + 2\n            val medianValue3\
    \ = median(medianIndex3)\n            val medianIndex4 = medianIndex + 3\n   \
    \         val medianValue4 = median(medianIndex4)\n            val medianIndex5\
    \ = medianIndex + 4\n            val medianValue5 = median(medianIndex5)\n   \
    \         val medianIndex6 = medianIndex + 5\n            val medianValue6 = median(medianIndex6)\n\
    \            val medianIndex7 = medianIndex + 6\n            val medianValue7\
    \ = median(medianIndex7)\n            val medianIndex8 = medianIndex + 7\n   \
    \         val medianValue8 = median(medianIndex8)\n            val medianIndex9\
    \ = medianIndex + 8\n            val medianValue9 = median(medianIndex9)\n   \
    \         val medianIndex10 = medianIndex + 9\n            val medianValue10 =\
    \ median(medianIndex10)\n            val medianIndex11 = medianIndex + 10\n  \
    \          val medianValue11 = median(medianIndex11)\n            val medianIndex12\
    \ = medianIndex + 11\n            val medianValue12 = median(medianIndex12)\n\
    \            val medianIndex13 = medianIndex + 12\n            val medianValue13\
    \ = median(medianIndex13)\n            val medianIndex14 = medianIndex + 13\n\
    \            val medianValue14 = median(medianIndex14)\n            val medianIndex15\
    \ = medianIndex + 14\n            val medianValue15 = median(medianIndex15)\n\
    \            val medianIndex16 = medianIndex + 15\n            val medianValue16\
    \ = median(medianIndex16)\n            val medianIndex17 = medianIndex + 16\n\
    \            val medianValue17 = median(medianIndex17)\n            val medianIndex18\
    \ = medianIndex + 17\n            val medianValue18 = median(medianIndex18)\n\
    \            val medianIndex19 = medianIndex + 18\n            val medianValue19\
    \ = median(medianIndex19)\n            val medianIndex20 = medianIndex + 19\n\
    \            val medianValue20 = median(median", "        val n = l.length\n \
    \       if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n       \
    \     val left = l.slice(0, mid)\n            val right = l.slice(mid)\n     \
    \       val median = median(left) + median(right)\n            val diff = (median.toDouble\
    \ - l.toDouble(n)) / n\n            diff * diff\n        }", "        val n =\
    \ l.length\n        val m = l.head\n        val sorted = l.toList.sortWith(_ <\
    \ m)\n        val half = n / 2\n        if (n % 2 == 0) sorted else sorted.take(half)\
    \ + sorted.drop(half)", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val lower = sorted.take(mid)\n\
    \        val upper = sorted.drop(mid)\n        val medianOfLower = median(lower)\n\
    \        val medianOfUpper = median(upper)\n        val medianOfBoth = median(lower\
    \ ++ upper)\n        val medianOfBothInt = medianOfBoth.toInt\n        val medianOfBothFloat\
    \ = medianOfBoth.toFloat\n        val medianOfBothLong = medianOfBoth.toLong\n\
    \        val medianOfBothDouble = medianOfBoth.toDouble\n        val medianOfBothString\
    \ = medianOfBoth.toString\n        val medianOfBothBoolean = medianOfBoth.toBoolean\n\
    \        val medianOfBothChar = medianOfBoth.toChar\n        val medianOfBothUnit\
    \ = medianOfBoth.toUnit\n        val medianOfBothNull = medianOfBoth.toNull\n\
    \        val medianOfBothUnitNull = medianOfBoth.toNull\n        val medianOfBothNullUnit\
    \ = medianOfBoth.toNull\n        val medianOfBothNullFloat = medianOfBoth.toNull\n\
    \        val medianOfBothNullInt = medianOfBoth.toNull\n        val medianOfBothNullLong\
    \ = medianOfBoth.toNull\n        val medianOfBothNullDouble = medianOfBoth.toNull\n\
    \        val medianOfBothNullString = medianOfBoth.toNull\n        val medianOfBothNullBoolean\
    \ = medianOfBoth.toNull\n        val medianOfBothNullChar = medianOfBoth.toNull\n\
    \        val medianOfBothNullUnit = medianOfBoth.toNull\n        val medianOfBothNullNull\
    \ = medianOfBoth.toNull\n        val medianOfBothNullNullUnit = medianOfBoth.toNull\n\
    \        val medianOfBothNullNullFloat = medianOfBoth.toNull\n        val medianOfBothNullNullInt\
    \ = medianOfBoth.toNull\n        val medianOfBothNullNullLong = medianOfBoth.toNull\n\
    \        val medianOfBothNullNullDouble = medianOfBoth.toNull\n        val medianOfBothNullNullString\
    \ = medianOfBoth.toNull\n        val medianOfBothNullNullBoolean = medianOfBoth.toNull\n\
    \        val medianOfBothNullNullChar = medianOfBoth.toNull\n        val medianOfBothNullNullUnit\
    \ = medianOfBoth.toNull\n        val medianOfBothNullNullNull = medianOfBoth.toNull\n\
    \        val medianOfBothNullNullNullUnit", "        val n = l.length\n      \
    \  if (n < 2) 0f\n        else (l.sorted take (n/2) map (_+l.sorted take (n/2-1)).sum\
    \ / 2).toFloat", "        val n = l.length\n        if (n < 2) 0.0f\n        else\
    \ {\n            val mid = n / 2\n            val left = l.slice(0, mid)\n   \
    \         val right = l.slice(mid)\n            val leftMedian = median(left)\n\
    \            val rightMedian = median(right)\n            (leftMedian + rightMedian)\
    \ / 2\n        }", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val left = sorted.take(mid)\n        val right = sorted.drop(mid)\n\
    \        val median = (left.sum + right.sum) / 2\n        median.toFloat", " \
    \       val n = l.length\n        if (n < 2) 0.0f\n        else {\n          \
    \  val mid = n / 2\n            val left = l.slice(0, mid)\n            val right\
    \ = l.slice(mid)\n            val median = median(left) + median(right)\n    \
    \        median.toFloat\n        }", "        val n = l.length\n        if (n\
    \ <= 1) l.head\n        else (l.head + l.tail.take(n / 2).sum / 2).toFloat", " \
    \       val sorted = l.sorted\n        val half = sorted.length / 2\n        if\
    \ (sorted.length % 2 == 0) sorted.last\n        else sorted.last.toFloat + sorted.last.toFloat\
    \ / 2", "        val n = l.length\n        val m = l.max\n        val half = n\
    \ / 2\n        val left = l.take(half)\n        val right = l.drop(half)\n   \
    \     val median = (left + right).sortWith(_ < _).last\n        val medianFloat\
    \ = median.toFloat\n        medianFloat", "        val n = l.length\n        val\
    \ m = l.min\n        val median = (m + n) / 2\n        val lower = l filter (_\
    \ < median)\n        val upper = l filter (_ > median)\n        if (lower.length\
    \ == 0) 0f else median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        if (sorted.length % 2 == 0) sorted.apply(mid) else (sorted.apply(mid\
    \ - 1) + sorted.apply(mid)).toFloat", "        val n = l.length\n        if (n\
    \ < 2) 0.0f\n        else {\n            val mid = n / 2\n            val left\
    \ = l.slice(0, mid)\n            val right = l.slice(mid)\n            val median\
    \ = median(left) + median(right)\n            median\n        }", "        val\
    \ n = l.length\n        if (n < 2) 0.0f\n        else {\n            val mid =\
    \ l.length / 2\n            val left = l.slice(0, mid)\n            val right\
    \ = l.slice(mid)\n            val median = if (left.length < right.length) median(left)\
    \ else median(right)\n            val medianOfLeftAndRight = median(left) + median(right)\n\
    \            val medianOfLeftAndRightInt = medianOfLeftAndRight.toInt\n      \
    \      val medianOfLeftAndRightFloat = medianOfLeftAndRightInt.toFloat\n     \
    \       val medianOfLeftAndRightDouble = medianOfLeftAndRightFloat.toDouble\n\
    \            medianOfLeftAndRightDouble\n        }", "        val n = l.length\n\
    \        if (n < 2) 0f\n        else {\n            val mid = n / 2\n        \
    \    val left = l.slice(0, mid)\n            val right = l.slice(mid)\n      \
    \      val median = median(left) + median(right)\n            if (median == 0f)\
    \ 0f\n            else median.toFloat\n        }", "        val sorted = l.sorted\n\
    \        val middle = sorted.length / 2\n        val median = sorted.take(middle).last\n\
    \        median.toFloat", "        val n = l.length\n        if (n < 2) 0.0f\n\
    \        else {\n            val half = n / 2\n            val left = l.take(half)\n\
    \            val right = l.drop(half)\n            val median = math.median(left)\
    \ + math.median(right)\n            median.toFloat\n        }", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val left  = sorted.drop(mid)\n        val right = sorted.takeRight(mid)\n\
    \        val leftMedian = median(left)\n        val rightMedian = median(right)\n\
    \        val medianMedian = median(left ++ right)\n        val medianLeftMedian\
    \ = median(left.toList)\n        val medianRightMedian = median(right.toList)\n\
    \        val medianMedianMedian = median(left.toList ++ right.toList)\n      \
    \  val medianLeftMedianMedian = median(left.toSeq)\n        val medianRightMedianMedian\
    \ = median(right.toSeq)\n        val medianMedianMedianMedian = median(left.toSeq\
    \ ++ right.toSeq)\n        val medianLeftMedianMedianMedian = median(left.toSet)\n\
    \        val medianRightMedianMedianMedian = median(right.toSet)\n        val\
    \ medianMedianMedianMedianMedian = median(left.toSet ++ right.toSet)\n       \
    \ val medianLeftMedianMedianMedianMedian = median(left.toMap)\n        val medianRightMedianMedianMedianMedian\
    \ = median(right.toMap)\n        val medianMedianMedianMedianMedianMedian = median(left.toMap\
    \ ++ right.toMap)\n        val medianLeftMedianMedianMedianMedianMedian = median(left.toSeq.sorted)\n\
    \        val medianRightMedianMedianMedianMedianMedian = median(right.toSeq.sorted)\n\
    \        val medianMedianMedianMedianMedianMedianMedian = median(left.toSeq.sorted\
    \ ++ right.toSeq.sorted)\n        val medianLeftMedianMedianMedianMedianMedianMedian\
    \ = median(left.toSet.sorted)\n        val medianRightMedianMedianMedianMedianMedianMedian\
    \ = median(right.toSet.sorted)\n        val medianMedianMedianMedianMedianMedianMedianMedian\
    \ = median(left.toSet.sorted ++ right.toSet.sorted)\n        val medianLeftMedianMedianMedianMedianMedianMedianMedian\
    \ = median(left.toMap.sorted)\n        val medianRightMedianMedianMedianMedianMedianMedian\
    \ = median(right", "        val n = l.length\n        if (n < 2) 0.0\n       \
    \ else {\n            val mid = n / 2\n            val left = l.slice(0, mid)\n\
    \            val right = l.slice(mid)\n            val midVal = median(left)\n\
    \            val rightVal = median(right)\n            if (midVal < rightVal)\
    \ midVal\n            else rightVal\n        }", "        val n = l.length\n \
    \       if (n < 2) 0.0\n        else {\n            val half = n / 2\n       \
    \     val left = l.slice(0, half)\n            val right = l.slice(half, n)\n\
    \            val median = math.min(left.sorted.last, right.sorted.last)\n    \
    \        val diff = left.sorted.last - right.sorted.last\n            diff / median\n\
    \        }", "        val sorted = l.sorted\n        val mid = sorted.length /\
    \ 2\n        val m1 = sorted.take(mid)\n        val m2 = sorted.drop(mid)\n  \
    \      val median = (m1.sum + m2.sum) / 2\n        median", "        val sorted\
    \ = l.sortWith(_ < _)\n        val mid = sorted.length / 2\n        val median\
    \ = sorted.take(mid).last\n        median.toFloat", "        val n = l.length\n\
    \        val m = l.toList.sortWith(_ < _).length\n        if (m == 0) 0\n    \
    \    else if (m == 1) l(0)\n        else (l(m-1) + l(m)) / 2", "        val n\
    \ = l.length\n        if (n < 2) 0.0f\n        else {\n            val mid = l.length\
    \ / 2\n            val l1 = l.take(mid)\n            val l2 = l.drop(mid)\n  \
    \          val l3 = l1.zip(l2).map { case (x, y) => x + y }\n            val l4\
    \ = l3.toList\n            val l5 = l4.sortWith(_ < _)\n            val l6 = l5.take(mid)\n\
    \            val l7 = l5.drop(mid)\n            val l8 = l6.zip(l7).map { case\
    \ (x, y) => x + y }\n            val l9 = l8.toList\n            val l10 = l9.sortWith(_\
    \ < _)\n            val l11 = l10.take(mid)\n            val l12 = l10.drop(mid)\n\
    \            val l13 = l11.zip(l12).map { case (x, y) => x + y }\n           \
    \ val l14 = l13.toList\n            val l15 = l14.sortWith(_ < _)\n          \
    \  val l16 = l15.take(mid)\n            val l17 = l15.drop(mid)\n            val\
    \ l18 = l16.zip(l17).map { case (x, y) => x + y }\n            val l19 = l18.toList\n\
    \            val l20 = l19.sortWith(_ < _)\n            val l21 = l20.take(mid)\n\
    \            val l22 = l20.drop(mid)\n            val l23 = l21.zip(l22).map {\
    \ case (x, y) => x + y }\n            val l24 = l23.toList\n            val l25\
    \ = l24.sortWith(_ < _)\n            val l26 = l25.take(mid)\n            val\
    \ l27 = l25.drop(mid)\n            val l28 = l26.zip(l27).map { case (x, y) =>\
    \ x + y }\n            val l29 = l28.toList\n            val l30 = l29.sortWith(_\
    \ < _)\n            val l31 = l30.take(mid)\n            val l32 = l30.drop(mid)\n\
    \            val l33 = l31.zip(l32).map { case (x, y) => x + y }\n           \
    \ val l34 = l33.toList\n            val l35 = l34.sortWith(_ < _)\n          \
    \  val l36 = l35.take(mid)\n            val l37 = l35.drop(mid", "        val\
    \ n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n    \
    \    val right = l.drop(mid)\n        val median = if (n == 1) left else (left\
    \ + right) / 2\n        median.toFloat", "        val n = l.length\n        val\
    \ mid = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n\
    \        val midVal = left.reduce((a, b) => a + b) / mid\n        val rightVal\
    \ = right.reduce((a, b) => a + b) / mid\n        if (rightVal < midVal)\n    \
    \        rightVal\n        else\n            midVal", "        val n = l.length\n\
    \        val mid = n / 2\n        val left = l.take(mid)\n        val right =\
    \ l.drop(mid)\n        val median = if (n % 2 == 0) left.median else right.median\n\
    \        median.toFloat", "        val n = l.length\n        val m = l.groupBy(x\
    \ => x).mapValues(_.length).max\n        val k = l.size / 2\n        val i = math.floor(k).toInt\n\
    \        val j = math.ceil(k).toInt\n        val mid = l.apply(i)\n        val\
    \ m1 = l.apply(j)\n        val m2 = l.apply(k - j)\n        val m3 = l.apply(k\
    \ - i)\n        val m4 = l.apply(k + i)\n        val m5 = l.apply(k + j)\n   \
    \     val m6 = l.apply(k + k - j)\n        val m7 = l.apply(k + k - i)\n     \
    \   val m8 = l.apply(k + k + i)\n        val m9 = l.apply(k + k + j)\n       \
    \ val m10 = l.apply(k + k + k - j)\n        val m11 = l.apply(k + k + k - i)\n\
    \        val m12 = l.apply(k + k + k + i)\n        val m13 = l.apply(k + k + k\
    \ + j)\n        val m14 = l.apply(k + k + k + k - j)\n        val m15 = l.apply(k\
    \ + k + k + k - i)\n        val m16 = l.apply(k + k + k + k + i)\n        val\
    \ m17 = l.apply(k + k + k + k + j)\n        val m18 = l.apply(k + k + k + k +\
    \ k - j)\n        val m19 = l.apply(k + k + k + k + k - i)\n        val m20 =\
    \ l.apply(k + k + k + k + k + i)\n        val m21 = l.apply(k + k + k + k + k\
    \ + j)\n        val m22 = l.apply(k + k + k + k + k + k - j)\n        val m23\
    \ = l.apply(k + k + k + k + k + k - i)\n        val m24 = l.apply(k + k + k +\
    \ k + k + k + i)\n        val m25 = l.apply(k + k + k + k + k + k + j)\n     \
    \   val m26 = l.apply(k + k + k + k + k + k + k - j)\n        val m27 = l.apply(k\
    \ + k + k + k + k + k + k - i)\n        val m28 = l.apply(k + k + k + k + k +\
    \ k + k + i)\n        val m29 = l.apply(k", "        val n = l.length\n      \
    \  if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val\
    \ left = l.slice(0, mid)\n            val right = l.slice(mid)\n            val\
    \ median = median(left)\n            val median2 = median(right)\n           \
    \ (median + median2) / 2\n        }", "        val n = l.length\n        if (n\
    \ == 0) 0.0f\n        else {\n            val mid = n / 2\n            val left\
    \ = l.slice(0, mid)\n            val right = l.slice(mid)\n            val median\
    \ = (left + right).sortWith(_ < _).last\n            median.toFloat\n        }",
  "        val n = l.length\n        val mid = n / 2\n        val left = l.slice(0,\
    \ mid)\n        val right = l.slice(mid, n)\n        val median = if (n % 2 ==\
    \ 0) left.reduceLeft(_ + _) / n else right.reduceRight(_ + _) / n\n        median",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        val leftHalf = sorted.take(mid)\n  \
    \      val rightHalf = sorted.drop(mid)\n        val medianOfLeftHalf = median(leftHalf)\n\
    \        val medianOfRightHalf = median(rightHalf)\n        val medianOfBothHalfs\
    \ = medianOfLeftHalf + medianOfRightHalf\n        val medianOfBothHalfsIsEven\
    \ = medianOfBothHalfs % 2 == 0\n        if (medianOfBothHalfsIsEven) {\n     \
    \       medianOfBothHalfs\n        } else {\n            medianOfBothHalfs + 0.5f\n\
    \        }", "        val n = l.length\n        if (n < 2) 0.0f\n        else\
    \ {\n            val mid = n / 2\n            val left = l.take(mid)\n       \
    \     val right = l.drop(mid)\n            val median = median(left) + median(right)\n\
    \            median\n        }", "        val n = l.length\n        val m = l.toList.sortWith(_\
    \ < _).length / 2\n        if (m == 0) l.head else l.toList.sortWith(_ < _).take(m).last",
  "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n           \
    \ val mid = l.length / 2\n            val left = l.slice(0, mid)\n           \
    \ val right = l.slice(mid)\n            val median = (left + right).sortWith(_\
    \ < _).last\n            val median2 = l.sortWith(_ < _).last\n            val\
    \ median3 = l.sortWith(_ < _).last\n            val median4 = l.sortWith(_ < _).last\n\
    \            val median5 = l.sortWith(_ < _).last\n            val median6 = l.sortWith(_\
    \ < _).last\n            val median7 = l.sortWith(_ < _).last\n            val\
    \ median8 = l.sortWith(_ < _).last\n            val median9 = l.sortWith(_ < _).last\n\
    \            val median10 = l.sortWith(_ < _).last\n            val median11 =\
    \ l.sortWith(_ < _).last\n            val median12 = l.sortWith(_ < _).last\n\
    \            val median13 = l.sortWith(_ < _).last\n            val median14 =\
    \ l.sortWith(_ < _).last\n            val median15 = l.sortWith(_ < _).last\n\
    \            val median16 = l.sortWith(_ < _).last\n            val median17 =\
    \ l.sortWith(_ < _).last\n            val median18 = l.sortWith(_ < _).last\n\
    \            val median19 = l.sortWith(_ < _).last\n            val median20 =\
    \ l.sortWith(_ < _).last\n            val median21 = l.sortWith(_ < _).last\n\
    \            val median22 = l.sortWith(_ < _).last\n            val median23 =\
    \ l.sortWith(_ < _).last\n            val median24 = l.sortWith(_ < _).last\n\
    \            val median25 = l.sortWith(_ < _).last\n            val median26 =\
    \ l.sortWith(_ < _).last\n            val median27 = l.sortWith(_ < _).last\n\
    \            val median28 = l.sortWith(_ < _).last\n            val median29 =\
    \ l.sortWith(_ < _).last\n            val median30 = l.sortWith(_ < _).last\n\
    \            val median31 = l.sortWith(_ < _).last\n            val median32 =\
    \ l.sortWith(_ < _).last\n            val median33 = l.sortWith(_ < _).last\n\
    \            val median34 = l.sortWith(_ < _).last\n            val median35 =\
    \ l.sort", "        val sorted = l.sortWith(_ < _)\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        median.toFloat", " \
    \       val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        median", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n      \
    \      val left = l.take(mid)\n            val right = l.drop(mid)\n         \
    \   val median = median(left) + median(right)\n            val midPoint = (left\
    \ + right).length / 2\n            val medianPoint = midPoint + mid\n        \
    \    val medianValue = median(l.drop(midPoint))\n            val medianPointValue\
    \ = median(l.take(midPoint))\n            val medianPointValueAbs = medianPointValue\
    \ - medianValue\n            val medianPointValueAbsSqr = medianPointValueAbs\
    \ * medianPointValueAbs\n            val medianPointValueAbsSqrSqrt = Math.sqrt(medianPointValueAbsSqrt);\n\
    \            val medianPointValueAbsSqrSqrt = medianPointValueAbsSqr * medianPointValueAbsSqr\n\
    \            val medianPointValueAbsSqrSqrt = medianPointValueAbsSqr * medianPointValueAbsSqr\n\
    \            val medianPointValueAbsSqrSqrt = medianPointValueAbsSqr * medianPointValueAbsSqr\n\
    \            val medianPointValueAbsSqrSqrt = medianPointValueAbsSqr * medianPointValueAbsSqr\n\
    \            val medianPointValueAbsSqrSqrt = medianPointValueAbsSqr * medianPointValueAbsSqr\n\
    \            val medianPointValueAbsSqrSqrt = medianPointValueAbsSqr * medianPointValueAbsSqr\n\
    \            val medianPointValueAbsSqrSqrt = medianPointValueAbsSqr * medianPointValueAbsSqr\n\
    \            val medianPointValueAbsSqrSqrt = medianPointValueAbsSqr * medianPointValueAbsSqr\n\
    \            val medianPointValueAbsSqrSqrt = medianPointValueAbsSqr * medianPointValueAbsSqr\n\
    \            val medianPointValueAbsSqrSqrt = medianPointValueAbsSqr * medianPointValueAbsSqr\n\
    \            val medianPointValueAbsSqrSqrt = medianPointValueAbsSqr * medianPointValueAbsSqr\n\
    \            val medianPointValueAbsSqrSqrt = medianPointValueAbsSqr * medianPointValueAbsSqr\n\
    \            val medianPointValueAbsSqrSqrt = medianPointValueAbsS", "       \
    \ val n = l.length\n        if (n < 2) 0.0f\n        else {\n            val mid\
    \ = n / 2\n            val left = l.slice(0, mid)\n            val right = l.slice(mid)\n\
    \            val median = (left + right).sortWith(_ < _).last\n            median.toFloat\n\
    \        }", "        val n = l.length\n        if (n < 2) 0.0f\n        else\
    \ {\n            val mid = n / 2\n            val left = l.take(mid)\n       \
    \     val right = l.drop(mid)\n            val median = median(left) + median(right)\n\
    \            val diff = (median * 2.0f) - ((left.sum + right.sum) / 2.0f)\n  \
    \          diff / 2.0f\n        }", "        val sorted = l.sorted\n        val\
    \ mid = sorted.length / 2\n        val median = sorted.take(mid).last\n      \
    \  median.toFloat", "        val n = l.length\n        val m = l.sortWith(_ <\
    \ _).length\n        if (m % 2 == 0) l.last\n        else l.last + l.dropRight(1).last",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        median", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n      \
    \      val left = (0 until mid).map(l => l(0)).sum\n            val right = (mid\
    \ until n).map(l => l(mid)).sum\n            (left + right) / 2.0f\n        }",
  "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n           \
    \ val mid = n / 2\n            val left = l.slice(0, mid)\n            val right\
    \ = l.slice(mid)\n            val leftMedian = median(left)\n            val rightMedian\
    \ = median(right)\n            val median = (leftMedian + rightMedian) / 2\n \
    \           median\n        }", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        val median = sorted.take(mid).last\n        val\
    \ left = sorted.drop(mid)\n        val right = sorted.takeRight(mid)\n       \
    \ val medianLeft = median(left)\n        val medianRight = median(right)\n   \
    \     val medianMedian = (medianLeft + medianRight) / 2\n        val medianMedianFloat\
    \ = medianMedian.toFloat\n        val medianMedianInt = medianMedianFloat.toInt\n\
    \        val medianMedianLong = medianMedianInt.toLong\n        val medianMedianDouble\
    \ = medianMedianFloat.toDouble\n        val medianMedianFloatString = medianMedianDouble.toString\n\
    \        val medianMedianFloatStringWithDot = medianMedianFloatString.replace(\"\
    .\", \",\")\n        val medianMedianFloatStringWithComma = medianMedianFloatString.replace(\"\
    ,\", \".\")\n        val medianMedianFloatStringWithDotComma = medianMedianFloatStringWithDot\
    \ + \",\" + medianMedianFloatStringWithComma\n        val medianMedianFloatStringWithCommaDot\
    \ = medianMedianFloatStringWithComma + \",\" + medianMedianFloatStringWithDot\n\
    \        val medianMedianFloatStringWithDotCommaDot = medianMedianFloatStringWithDotComma\
    \ + \",\" + medianMedianFloatStringWithDot\n        val medianMedianFloatStringWithDotCommaDotDot\
    \ = medianMedianFloatStringWithDotCommaDot + \",\" + medianMedianFloatStringWithDot\n\
    \        val medianMedianFloatStringWithDotCommaDotDotDot = medianMedianFloatStringWithDotCommaDotDot\
    \ + \",\" + medianMedianFloatStringWithDot\n        val medianMedianFloatStringWithDotCommaDotDotDotDot\
    \ = medianMedianFloatStringWithDotCommaDotDotDot + \",\" + medianMedianFloatStringWithDot\n\
    \        val medianMedianFloatStringWithDotCommaDotDotDotDotDot = medianMedianFloatStringWithDotCommaDotDotDotDot\
    \ + \",\" + medianMedianFloatStringWithDot\n        val medianMedianFloatStringWithDotCommaDotDotDotDotDotDot\
    \ = medianMedianFloatStringWithDotCommaDotDotDotDotDot + \",\" + medianMedianFloatStringWithDot\n\
    \        val medianMedianFloatStringWithDotCommaDotDotDotDotDotDot = medianMedianFloatStringWithDotCommaDotDotDotDot",
  "        val n = l.length\n        val m = l.max\n        val r = l.min\n      \
    \  val m1 = m / 2\n        val r1 = r / 2\n        val m2 = m1 - 1\n        val\
    \ r2 = r1 - 1\n        val m3 = m1 + 1\n        val r3 = r1 + 1\n        val m4\
    \ = m2 - 1\n        val r4 = r2 + 1\n        val m5 = m2 + 1\n        val r5 =\
    \ r3 - 1\n        val m6 = m3 + 1\n        val r6 = r3 + 1\n        val m7 = m4\
    \ - 1\n        val r7 = r5 + 1\n        val m8 = m5 + 1\n        val r8 = r6 -\
    \ 1\n        val m9 = m6 + 1\n        val r9 = r6 + 1\n        val m10 = m7 -\
    \ 1\n        val r10 = r9 + 1\n        val m11 = m8 + 1\n        val r11 = r10\
    \ - 1\n        val m12 = m9 + 1\n        val r12 = r11 - 1\n        val m13 =\
    \ m10 + 1\n        val r13 = r12 - 1\n        val m14 = m11 + 1\n        val r14\
    \ = r13 - 1\n        val m15 = m12 + 1\n        val r15 = r14 - 1\n        val\
    \ m16 = m13 + 1\n        val r16 = r15 - 1\n        val m17 = m14 + 1\n      \
    \  val r17 = r16 - 1\n        val m18 = m15 + 1\n        val r18 = r17 - 1\n \
    \       val m19 = m16 + 1\n        val r19 = r18 - 1\n        val m20 = m17 +\
    \ 1\n        val r20 = r19 - 1\n        val m21 = m18 + 1\n        val r21 = r20\
    \ - 1\n        val m22 = m19 + 1\n        val r22 = r21 - 1\n        val m23 =\
    \ m20 + 1\n        val r23 = r22 - 1\n        val m24 = m21 + 1\n        val r24\
    \ = r23 - 1\n        val m25 = m22 + 1\n        val r25 = r24 - 1\n        val\
    \ m26 = m23 + 1\n        val r26 = r25 - 1\n        val m27 = m24 + 1\n      \
    \  val r27 = r26 - 1\n        val m28 = m25 + 1\n        val r28 = r27 - 1\n \
    \       val m29 = m26 + 1\n        val r29 = r28 - 1\n        val m30 = m27 +\
    \ 1\n        val r30 = r29 - 1\n        val m31 = m28 + 1\n        val r31 = ",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = if (sorted.length % 2 == 0) sorted.apply(mid) else (sorted.apply(mid)\
    \ + sorted.apply(mid - 1)).toFloat\n        median", "        val n = l.length\n\
    \        val mid = n / 2\n        val left = l.take(mid)\n        val right =\
    \ l.drop(mid)\n        val median = left.reduceLeft(_ + _) / n.toFloat\n     \
    \   if (n == 1) median.toFloat\n        else (median + median.toFloat) / 2", " \
    \       val n = l.length\n        val m = l.foldLeft(0l) { (sum, e) => sum + e\
    \ }\n        val div = n / 2\n        val left = l.take(div)\n        val right\
    \ = l.drop(div)\n        val m1 = median(left)\n        val m2 = median(right)\n\
    \        val m = (m1 + m2) / 2\n        if (m == 0) 0f else m", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val m1 = sorted.take(mid)\n\
    \        val m2 = sorted.drop(mid)\n        val median = (m1.sum + m2.sum) / 2\n\
    \        median", "        val n = l.length\n        if (n == 0) 0.0f\n      \
    \  else {\n            val sorted = l.sorted\n            val half = n / 2\n \
    \           val m1 = sorted.head\n            val m2 = sorted.last\n         \
    \   val m = (m1 + m2) / 2\n            val m3 = if (n < 2) m else m + 1\n    \
    \        val m4 = if (n < 2) m else m + 2\n            val m5 = if (n < 2) m else\
    \ m + 3\n            val m6 = if (n < 2) m else m + 4\n            val m7 = if\
    \ (n < 2) m else m + 5\n            val m8 = if (n < 2) m else m + 6\n       \
    \     val m9 = if (n < 2) m else m + 7\n            val m10 = if (n < 2) m else\
    \ m + 8\n            val m11 = if (n < 2) m else m + 9\n            val m12 =\
    \ if (n < 2) m else m + 10\n            val m13 = if (n < 2) m else m + 11\n \
    \           val m14 = if (n < 2) m else m + 12\n            val m15 = if (n <\
    \ 2) m else m + 13\n            val m16 = if (n < 2) m else m + 14\n         \
    \   val m17 = if (n < 2) m else m + 15\n            val m18 = if (n < 2) m else\
    \ m + 16\n            val m19 = if (n < 2) m else m + 17\n            val m20\
    \ = if (n < 2) m else m + 18\n            val m21 = if (n < 2) m else m + 19\n\
    \            val m22 = if (n < 2) m else m + 20\n            val m23 = if (n <\
    \ 2) m else m + 21\n            val m24 = if (n < 2) m else m + 22\n         \
    \   val m25 = if (n < 2) m else m + 23\n            val m26 = if (n < 2) m else\
    \ m + 24\n            val m27 = if (n < 2) m else m + 25\n            val m28\
    \ = if (n < 2) m else m + 26\n            val m29 = if (n < 2) m else m + 27\n\
    \            val m30 = if (n < 2) m else m + 28\n            val m31 = if (n <\
    \ 2) m else m + 29\n            val m32 = if (n < 2) m else m + 30\n         \
    \   val m33 = if (n < 2) m else m + 31\n            val m34 = if (n < 2) m else\
    \ m + 32\n            val m35 = if (n < 2) m else m + 33\n            val m36\
    \ = if (n < 2) m else m + 34\n            val m37 = if (n < 2) m else m + 35\n\
    \            val m38 = if (n < 2) m else m + 36\n            val ", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ if (sorted.length % 2 == 0) sorted.apply(mid) else sorted.apply(mid + 1)\n \
    \       median.toFloat", "        val n = l.length\n        val m = l.toArray.sortWith(_\
    \ < _).length\n        if (m == 0) 0\n        else if (m == 1) l.toArray.head\n\
    \        else l.toArray.take(m/2).sum / 2", "        val sorted = l.sorted\n \
    \       val middle = sorted.length / 2\n        val median = if (sorted.length\
    \ % 2 == 0) sorted.apply(middle) else (sorted.apply(middle - 1) + sorted.apply(middle))\
    \ / 2.0\n        median", "        val n = l.length\n        if (n <= 1) 0.0\n\
    \        else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val median = (left + right).sorted\n\
    \            val midPoint = median.length / 2\n            median(midPoint)\n\
    \        }", "        val n = l.length\n        val m = l.max\n        val median\
    \ = (m + (n - 1) / 2.0).toFloat\n        val l2 = l.filter(_ < median)\n     \
    \   val l3 = l.filter(_ >= median)\n        if (l2.length == 0) median\n     \
    \   else if (l3.length == 0) l2.head\n        else median", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.drop(mid).last\n        val rightMedian = sorted.take(mid).last\n\
    \        val medianValue = if (median < 0f) leftMedian else rightMedian\n    \
    \    medianValue.toFloat", "        val n = l.length\n        if (n < 2) 0f\n\
    \        else {\n            val mid = n / 2\n            val left = new Array[Long](n)\n\
    \            val right = new Array[Long](n)\n            System.arraycopy(l, 0,\
    \ left, 0, mid)\n            System.arraycopy(l, mid, right, 0, n - mid)\n   \
    \         val lMedian = median(left)\n            val rMedian = median(right)\n\
    \            (lMedian + rMedian) / 2\n        }", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.drop(mid)\n        val rightHalf = sorted.takeRight(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        val medianOfBothHalfs = median(leftHalf ++ rightHalf)\n\
    \        val medianOfBothHalfsIfEven = median(leftHalf ++ rightHalf.takeRight(1))\n\
    \        val medianOfBothHalfsIfOdd = median(leftHalf ++ rightHalf.drop(1))\n\
    \        val medianOfBothHalfsIfEvenIfOdd = median(leftHalf ++ rightHalf.takeRight(1)\
    \ ++ rightHalf.drop(1))\n        val medianOfBothHalfsIfEvenIfOddIfEven = median(leftHalf\
    \ ++ rightHalf.takeRight(1) ++ rightHalf.drop(1) ++ leftHalf.drop(1))\n      \
    \  val medianOfBothHalfsIfEvenIfOddIfOdd = median(leftHalf ++ rightHalf.takeRight(1)\
    \ ++ rightHalf.drop(1) ++ leftHalf.drop(1))\n        val medianOfBothHalfsIfEvenIfOddIfEvenIfOdd\
    \ = median(leftHalf ++ rightHalf.takeRight(1) ++ rightHalf.drop(1) ++ leftHalf.drop(1)\
    \ ++ leftHalf.take(1))\n        val medianOfBothHalfsIfEvenIfOddIfOddIfEven =\
    \ median(leftHalf ++ rightHalf.takeRight(1) ++ rightHalf.drop(1) ++ leftHalf.drop(1)\
    \ ++ leftHalf.take(1) ++ leftHalf.drop(1))\n        val medianOfBothHalfsIfEvenIfOddIfOddIfOdd\
    \ = median(leftHalf ++ rightHalf.takeRight(1) ++ rightHalf.drop(1) ++ leftHalf.drop(1)\
    \ ++ leftHalf.take(1) ++ leftHalf.drop(1) ++ leftHalf.take(1))\n        val medianOfBothHalfsIfEvenIfOddIfOddIfEvenIfOdd\
    \ = median(leftHalf ++ rightHalf.takeRight(1) ++ rightHalf.drop(1) ++ leftHalf.drop(1)\
    \ ++ leftHalf.take(1) ++ leftHalf.drop(1) ++ leftHalf.take(1) ++ leftHalf.drop(1))\n\
    \        val medianOfBothHalfsIfEvenIfO", "        val n = l.length\n        if\
    \ (n < 2) 0f\n        else {\n            val mid = n / 2\n            val left\
    \ = new Array[Long](n)\n            val right = new Array[Long](n)\n         \
    \   System.arraycopy(l, 0, left, 0, mid)\n            System.arraycopy(l, mid,\
    \ right, 0, n - mid)\n            val leftMedian = median(left)\n            val\
    \ rightMedian = median(right)\n            val median = (leftMedian + rightMedian)\
    \ / 2\n            if (leftMedian < rightMedian) median\n            else -median\n\
    \        }", "        val n = l.length\n        val half = n / 2\n        val\
    \ left = l.take(half)\n        val right = l.drop(half)\n        val median =\
    \ (left ++ right).sortWith(_ < _).last\n        median.toFloat", "        val\
    \ sorted = l.sortWith(_ < _)\n        val mid = sorted.length / 2\n        val\
    \ median = if (sorted.length % 2 == 0) sorted.apply(mid) else sorted.apply(mid\
    \ + 1)\n        median.toFloat", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else (sorted.apply(mid - 1) + sorted.apply(mid)) / 2.0\n        median", " \
    \       val n = l.length\n        if (n < 2) 0.0f\n        else {\n          \
    \  val half = n / 2\n            val left = l.slice(0, half)\n            val\
    \ right = l.slice(half, n)\n            val mid = left.zip(right).map { case (x,\
    \ y) => x + y }.sorted\n            val median = mid.last\n            median.toFloat\n\
    \        }", "        val sorted = l.sorted\n        val half = sorted.length\
    \ / 2\n        if (sorted.length % 2 == 0) sorted.last\n        else sorted.last.toFloat\
    \ + sorted.last.toFloat / 2", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        val median = sorted.take(mid).last\n        val\
    \ left = sorted.drop(mid)\n        val right = sorted.takeRight(mid)\n       \
    \ val medianLeft = median(left)\n        val medianRight = median(right)\n   \
    \     val medianMedian = median(List(medianLeft, medianRight))\n        val medianMedianFloat\
    \ = medianMedian.toFloat\n        val medianMedianInt = medianMedianFloat.toInt\n\
    \        val medianMedianLong = medianMedianInt.toLong\n        val medianMedianString\
    \ = medianMedianLong.toString\n        val medianMedianDouble = medianMedianFloat.toDouble\n\
    \        val medianMedianBigDecimal = medianMedianDouble.toBigDecimal\n      \
    \  val medianMedianBigInt = medianMedianBigDecimal.toBigInt\n        val medianMedianBigDecimalString\
    \ = medianMedianBigDecimal.toString\n        val medianMedianBigDecimalFloat =\
    \ medianMedianBigDecimal.toFloat\n        val medianMedianBigDecimalInt = medianMedianBigDecimalFloat.toInt\n\
    \        val medianMedianBigDecimalLong = medianMedianBigDecimalInt.toLong\n \
    \       val medianMedianBigDecimalString = medianMedianBigDecimalLong.toString\n\
    \        val medianMedianBigDecimalDouble = medianMedianBigDecimalFloat.toDouble\n\
    \        val medianMedianBigDecimalBigDecimal = medianMedianBigDecimalDouble.toBigDecimal\n\
    \        val medianMedianBigDecimalBigInt = medianMedianBigDecimalBigDecimal.toBigInt\n\
    \        val medianMedianBigDecimalBigDecimalString = medianMedianBigDecimalBigDecimal.toString\n\
    \        val medianMedianBigDecimalBigDecimalFloat = medianMedianBigDecimalBigDecimal.toFloat\n\
    \        val medianMedianBigDecimalBigDecimalInt = medianMedianBigDecimalBigDecimalFloat.toInt\n\
    \        val medianMedianBigDecimalBigDecimalLong = medianMedianBigDecimalBigDecimalInt.toLong\n\
    \        val medianMedianBigDecimalBigDecimalString = medianMedianBigDecimalBigDecimalLong.toString\n\
    \        val medianMedianBigDecimalBigDecimalDouble = medianMedianBigDecimalBigDecimalFloat.toDouble\n\
    \        val medianMedianBigDecimalBigDecimalBigDecimal = medianMedianBigDecimalBigDecimalDouble.toBigDecimal\n\
    \        val medianMedianBigDecimalBigDecimalBigInt = medianMedianBigDecimalBigDecimalBigDecimal.toBigInt\n\
    \        val medianMedianBigDecimalBig", "        val n = l.length\n        if\
    \ (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val left\
    \ = l.slice(0, mid)\n            val right = l.slice(mid)\n            val m1\
    \ = median(left)\n            val m2 = median(right)\n            val m = math.max(m1,\
    \ m2)\n            if (m == 0.0f) 0.0f\n            else m\n        }", "    \
    \    val n = l.length\n        val half = n / 2\n        val left = l.take(half)\n\
    \        val right = l.drop(half)\n        val median = (left + right).sorted.last\n\
    \        median.toFloat", "        val n = l.length\n        if (n <= 1) l.head\n\
    \        else {\n            val mid = n / 2\n            val left = l.take(mid)\n\
    \            val right = l.drop(mid)\n            val leftMedian = median(left)\n\
    \            val rightMedian = median(right)\n            val median = (leftMedian\
    \ + rightMedian) / 2\n            median\n        }", "        val n = l.length\n\
    \        val m = l.toList.sortWith(_ < _).length\n        val half = m / 2\n \
    \       if (half == 0) l.head else l.head + half * (l.last - l.head)", "     \
    \   val sorted = l.sorted\n        val mid = sorted.length / 2\n        val median\
    \ = if (sorted.length % 2 == 0) sorted.apply(mid) else (sorted.apply(mid - 1)\
    \ + sorted.apply(mid))/2\n        median", "        val sorted = l.sorted\n  \
    \      val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.take(mid).last\n        val rightMedian = sorted.last\n\
    \        val leftMedianIndex = sorted.lastIndexWhere(x => x < median)\n      \
    \  val rightMedianIndex = sorted.lastIndexWhere(x => x > median)\n        if (leftMedianIndex\
    \ == -1) leftMedianIndex = 0\n        if (rightMedianIndex == -1) rightMedianIndex\
    \ = sorted.length - 1\n        if (leftMedianIndex == rightMedianIndex) leftMedianIndex\n\
    \        else if (leftMedianIndex > rightMedianIndex) leftMedianIndex\n      \
    \  else rightMedianIndex", "        val n = l.length\n        val mid = n / 2\n\
    \        val left = l.slice(0, mid)\n        val right = l.slice(mid)\n      \
    \  val median = (left.length + right.length) / 2\n        if (left.length == 0\
    \ || right.length == 0) {\n            0f\n        } else if (left.length == median)\
    \ {\n            left.last\n        } else if (right.length == median) {\n   \
    \         right.last\n        } else {\n            val leftMedian = median(left)\n\
    \            val rightMedian = median(right)\n            (leftMedian + rightMedian)\
    \ / 2\n        }", "        val n = l.length\n        val m = l.toList.sortWith(_\
    \ < _).length / 2\n        if (m == 0) 0f else l.toList.sortWith(_ < _)[m]", " \
    \       val n = l.length\n        if (n < 2) 0.0f\n        else {\n          \
    \  val mid = n / 2\n            val left = l.slice(0, mid)\n            val right\
    \ = l.slice(mid)\n            val median = (left + right).sortWith(_ < _).last\n\
    \            median.toFloat\n        }", "        val sorted = l.sorted\n    \
    \    val mid = sorted.length / 2\n        val median = if (sorted.length % 2 ==\
    \ 0) sorted.apply(mid) else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n\
    \        median", "        val n = l.length\n        val m = l.head\n        val\
    \ l = l.tail\n        if (l.length == 0) m\n        else if (l.length == 1) l.head\n\
    \        else if (l.length == 2) l.head + l.last\n        else (l.head + l.last)\
    \ / 2.0", "        val n = l.length\n        val m = l.head\n        val r = l.tail\n\
    \        val m1 = m + r.length / 2\n        val m2 = m - r.length / 2\n      \
    \  val m3 = m + r.length\n        val m4 = m - r.length\n        val m5 = m +\
    \ r.length * 2\n        val m6 = m - r.length * 2\n        val m7 = m + r.length\
    \ * 3\n        val m8 = m - r.length * 3\n        val m9 = m + r.length * 4\n\
    \        val m10 = m - r.length * 4\n        val m11 = m + r.length * 5\n    \
    \    val m12 = m - r.length * 5\n        val m13 = m + r.length * 6\n        val\
    \ m14 = m - r.length * 6\n        val m15 = m + r.length * 7\n        val m16\
    \ = m - r.length * 7\n        val m17 = m + r.length * 8\n        val m18 = m\
    \ - r.length * 8\n        val m19 = m + r.length * 9\n        val m20 = m - r.length\
    \ * 9\n        val m21 = 0l\n        val m22 = 0l\n        val m23 = 0l\n    \
    \    val m24 = 0l\n        val m25 = 0l\n        val m26 = 0l\n        val m27\
    \ = 0l\n        val m28 = 0l\n        val m29 = 0l\n        val m30 = 0l\n   \
    \     val m31 = 0l\n        val m32 = 0l\n        val m33 = 0l\n        val m34\
    \ = 0l\n        val m35 = 0l\n        val m36 = 0l\n        val m37 = 0l\n   \
    \     val m38 = 0l\n        val m39 = 0l\n        val m40 = 0l\n        val m41\
    \ = 0l\n        val m42 = 0l\n        val m43 = 0l\n        val m44 = 0l\n   \
    \     val m45 = 0l\n        val m46 = 0l\n        val m47 = 0l\n        val m48\
    \ = 0l\n        val m49 = 0l\n        val m50 = 0l\n        val m51 = 0l\n   \
    \     val m52 = 0l\n        val m53 = 0l\n        val m54 = 0l\n        val m55\
    \ = 0l\n        val m56 = 0l\n        val m57 = 0l\n        val m58 = 0l\n   \
    \     val m59 = 0l\n        val m60 = 0l\n        val m61 = 0l\n        val m62\
    \ = 0", "        val sorted = l.sorted\n        val mid = sorted.length / 2\n\
    \        val median = sorted.take(mid).last\n        val lower = sorted.take(mid)\n\
    \        val upper = sorted.drop(mid)\n        val medianOfLower = median(lower)\n\
    \        val medianOfUpper = median(upper)\n        val medianOfMedian = median(sorted)\n\
    \        val medianOfMedianOfLower = median(lower.take(mid))\n        val medianOfMedianOfUpper\
    \ = median(upper.take(mid))\n        val medianOfMedianOfMedian = median(sorted.take(mid))\n\
    \        val medianOfMedianOfMedianOfLower = median(lower.take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfUpper = median(upper.take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedian = median(sorted.take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfLower = median(lower.take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfUpper = median(upper.take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedian = median(sorted.take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfLower = median(lower.take(mid).take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfUpper = median(upper.take(mid).take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedian = median(sorted.take(mid).take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfLower = median(lower.take(mid).take(mid).take(mid).take(mid).take(mid))\n\
    \        val medianOfMedianOfMedianOfMedianOfMedianOfUpper = median(upper.take(mid).take(mid).take(mid).take(mid).take(mid",
  "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n           \
    \ val mid = n / 2\n            val left = l.slice(0, mid)\n            val right\
    \ = l.slice(mid)\n            val median = median(left) + median(right)\n    \
    \        median.toFloat\n        }", "        val n = l.length\n        val m\
    \ = l.toArray\n        val sorted = m.sortWith(_ < _)\n        val half = n /\
    \ 2\n        val median = (sorted take half).sum / half\n        median", "  \
    \      val n = l.length\n        val m = l.toArray\n        val sorted = m.sortWith(_\
    \ < _)\n        val half = n / 2\n        if (n % 2 == 0) sorted.last else (sorted.last\
    \ + sorted.head) / 2", "        val n = l.length\n        val mid = n / 2\n  \
    \      val left = l.take(mid)\n        val right = l.drop(mid)\n        val median\
    \ = (left + right).sorted\n        val medianIndex = median.indexWhere(_ > 0)\n\
    \        val medianValue = median(medianIndex)\n        medianValue", "      \
    \  val n = l.length\n        val m = l.max\n        val median = (m + n) / 2\n\
    \        val half = if (n % 2 == 0) n / 2 else n / 2\n        val left = (0 until\
    \ half).map(i => l(i)).sum\n        val right = (half until n).map(i => l(i)).sum\n\
    \        val medianValue = if (left > right) left else right\n        medianValue.toFloat",
  "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n           \
    \ val mid = n / 2\n            val left = l.slice(0, mid)\n            val right\
    \ = l.slice(mid, n)\n            val median = (left + right).sortWith(_ < _).last\n\
    \            median.toFloat\n        }", "        val sorted = l.sorted\n    \
    \    val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median", "        val sorted = l.sorted\n        val middle = sorted.length\
    \ / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(middle) else\
    \ (sorted.apply(middle - 1) + sorted.apply(middle))/2\n        median", "    \
    \    val n = l.length\n        val half = n / 2\n        if (n < 2) 0f\n     \
    \   else {\n            val mid = l.sortWith(_ < _).reverse.head\n           \
    \ val low = l.take(half)\n            val high = l.drop(half)\n            val\
    \ midVal = mid.asInstanceOf[Float]\n            val lowVal = low.asInstanceOf[Float]\n\
    \            val highVal = high.asInstanceOf[Float]\n            val midValAbs\
    \ = midVal.abs\n            val lowValAbs = lowVal.abs\n            val highValAbs\
    \ = highVal.abs\n            val midValAbsDiff = midValAbs - lowValAbs\n     \
    \       val lowValAbsDiff = lowValAbs - highValAbs\n            val highValAbsDiff\
    \ = highValAbs - midValAbs\n            val midValAbsDiffAbs = midValAbsDiff.abs\n\
    \            val lowValAbsDiffAbs = lowValAbsDiff.abs\n            val highValAbsDiffAbs\
    \ = highValAbsDiff.abs\n            val midValAbsDiffAbsAbs = midValAbsDiffAbs.abs\n\
    \            val lowValAbsDiffAbsAbs = lowValAbsDiffAbs.abs\n            val highValAbsDiffAbsAbs\
    \ = highValAbsDiffAbs.abs\n            val midValAbsDiffAbsAbsAbs = midValAbsDiffAbsAbs.abs\n\
    \            val lowValAbsDiffAbsAbsAbs = lowValAbsDiffAbsAbs.abs\n          \
    \  val highValAbsDiffAbsAbsAbs = highValAbsDiffAbsAbs.abs\n            val midValAbsDiffAbsAbsAbsAbs\
    \ = midValAbsDiffAbsAbsAbs.abs\n            val lowValAbsDiffAbsAbsAbsAbs = lowValAbsDiffAbsAbsAbs.abs\n\
    \            val highValAbsDiffAbsAbsAbsAbs = highValAbsDiffAbsAbsAbs.abs\n  \
    \          val midValAbsDiffAbsAbsAbsAbsAbs = midValAbsDiffAbsAbsAbsAbs.abs\n\
    \            val lowValAbsDiffAbsAbsAbsAbsAbs = lowValAbsDiffAbsAbsAbsAbs.abs\n\
    \            ", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid) else\
    \ (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n        median", "    \
    \    val n = l.length\n        if (n < 2) 0.0f\n        else {\n            val\
    \ mid = n / 2\n            val left = new Array[Long](n)\n            val right\
    \ = new Array[Long](n)\n            System.arraycopy(l, 0, left, 0, mid)\n   \
    \         System.arraycopy(l, mid, right, 0, n - mid)\n            val leftMedian\
    \ = median(left)\n            val rightMedian = median(right)\n            val\
    \ median = (leftMedian + rightMedian) / 2\n            median\n        }", " \
    \       val n = l.length\n        val m = l.min\n        val median = (m + n)\
    \ / 2\n        val half = n / 2\n        val left = (0 until half).map(i => l(i)).toList\n\
    \        val right = (half until n).map(i => l(i)).toList\n        val medianLeft\
    \ = median(left)\n        val medianRight = median(right)\n        val medianMedian\
    \ = (medianLeft + medianRight) / 2\n        val leftMedian = median(left.drop(half))\n\
    \        val rightMedian = median(right.drop(half))\n        val medianMedianMedian\
    \ = (leftMedian + rightMedian) / 2\n        val medianMedianMedianMedian = medianMedian\n\
    \        val medianMedianMedianMedianMedian = medianMedianMedian\n        val\
    \ medianMedianMedianMedianMedianMedian = medianMedianMedianMedian\n        val\
    \ medianMedianMedianMedianMedianMedianMedian = medianMedianMedianMedianMedianMedian\n\
    \        val medianMedianMedianMedianMedianMedianMedian = medianMedianMedianMedianMedianMedianMedianMedian\n\
    \        val medianMedianMedianMedianMedianMedianMedianMedian = medianMedianMedianMedianMedianMedianMedianMedianMedianMedian\n\
    \        val medianMedianMedianMedianMedianMedianMedianMedianMedian = medianMedianMedianMedianMedianMedianMedianMedianMedianMedianMedian\n\
    \        val medianMedianMedianMedianMedianMedianMedianMedianMedianMedian = medianMedianMedianMedianMedianMedianMedianMedianMedianMedianMedianMedian\n\
    \        val medianMedianMedianMedianMedianMedianMedianMedianMedianMedian = medianMedianMedianMedianMedianMedianMedianMedianMedianMedianMedianMedian\n\
    \        val medianMedianMedianMedianMedianMedianMedianMedianMedianMedian = medianMedianMedianMedianMedianMedianMedianMedianMedianMedianMedianMedian\n\
    \        val medianMedianMedianMedianMedianMedianMedianMedianMedianMedian = medianMedianMedianMedianMedianMedianMedianMedianMedianMedianMedianMedian",
  "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n           \
    \ val mid = n / 2\n            val left = l.slice(0, mid)\n            val right\
    \ = l.slice(mid)\n            val m1 = median(left)\n            val m2 = median(right)\n\
    \            val m = m1 + m2\n            if (m < 0.0f) 0.0f\n            else\
    \ m\n        }", "        val n = l.length\n        if (n < 2) 0.0f\n        else\
    \ {\n            val mid = n / 2\n            val left = l.slice(0, mid)\n   \
    \         val right = l.slice(mid)\n            val m = (left.length + right.length)\
    \ / 2\n            val median = if (m == 0) 0.0f else (left.sum / m).toFloat\n\
    \            val leftMedian = if (m == 0) 0.0f else (left.sum / m).toFloat\n \
    \           val rightMedian = if (m == 0) 0.0f else (right.sum / m).toFloat\n\
    \            val medianDiff = leftMedian - rightMedian\n            val medianDiffAbs\
    \ = if (medianDiff < 0.0f) 0.0f else Math.abs(medianDiff)\n            val medianDiffAbsSqr\
    \ = if (medianDiffAbs < 0.0f) 0.0f else Math.sqrt(medianDiffAbs)\n           \
    \ val medianDiffSqrt = if (medianDiffAbsSqr < 0.0f) 0.0f else Math.sqrt(medianDiffAbsSqr)\n\
    \            val medianDiffSqrt = if (medianDiffAbsSqr < 0.0f) 0.0f else Math.sqrt(medianDiffAbsSqrt)\
    \ * 2.0f\n            val medianDiffSqrt = if (medianDiffAbsSqr < 0.0f) 0.0f else\
    \ Math.sqrt(medianDiffAbsSqrt) * 4.0f\n            val medianDiffSqrt = if (medianDiffAbsSqr\
    \ < 0.0f) 0.0f else Math.sqrt(medianDiffAbsSqrt) * 8.0f\n            val medianDiffSqrt\
    \ = if (medianDiffAbsSqr < 0.0f) 0.0f else Math.sqrt(medianDiffAbsSqrt) * 16.0f\n\
    \            val medianDiffSqrt = if (medianDiffAbsSqr < 0.0f) 0.0f else Math.sqrt(medianDiffAbsSqrt)\
    \ * 32.0f\n            val medianDiffSqrt = if (medianDiffAbsSqr < 0.0f) 0.0f\
    \ else Math.sqrt(medianDiffAbsSqrt) * 64.0f\n            val medianDiffSqrt =\
    \ if (medianDiffAbsSqr < 0.0f) 0.0f else Math.sqrt(medianDiffAbsSqrt) * 128.0f\n\
    \            val medianDiffSqrt = if (medianDiffAbsSqr < 0.0f) 0.0f else Math.sqrt(medianDiffAbsSqrt)\
    \ * 256.0f\n            val medianDiffSqrt = if (medianDiffAbsSqr < 0.0f) 0.0f\
    \ else Math.sqrt(medianDiffAbsSqrt) * 512.0f\n            val medianDiffSqrt =\
    \ if (medianDiffAbsSqr", "        val n = l.length\n        val m = l.min\n  \
    \      val h = l.max\n        val mid = n / 2\n        val m1 = mid - 1\n    \
    \    val m2 = mid + 1\n        val m3 = mid + 2\n        val m4 = mid - 2\n  \
    \      val m5 = mid - 3\n        val m6 = mid - 4\n        val m7 = mid - 5\n\
    \        val m8 = mid - 6\n        val m9 = mid - 7\n        val m10 = mid - 8\n\
    \        val m11 = mid - 9\n        val m12 = mid - 10\n        val m13 = mid\
    \ - 11\n        val m14 = mid - 12\n        val m15 = mid - 13\n        val m16\
    \ = mid - 14\n        val m17 = mid - 15\n        val m18 = mid - 16\n       \
    \ val m19 = mid - 17\n        val m20 = mid - 18\n        val m21 = mid - 19\n\
    \        val m22 = mid - 20\n        val m23 = mid - 21\n        val m24 = mid\
    \ - 22\n        val m25 = mid - 23\n        val m26 = mid - 24\n        val m27\
    \ = mid - 25\n        val m28 = mid - 26\n        val m29 = mid - 27\n       \
    \ val m30 = mid - 28\n        val m31 = mid - 29\n        val m32 = mid - 30\n\
    \        val m33 = mid - 31\n        val m34 = mid - 32\n        val m35 = mid\
    \ - 33\n        val m36 = mid - 34\n        val m37 = mid - 35\n        val m38\
    \ = mid - 36\n        val m39 = mid - 37\n        val m40 = mid - 38\n       \
    \ val m41 = mid - 39\n        val m42 = mid - 40\n        val m43 = mid - 41\n\
    \        val m44 = mid - 42\n        val m45 = mid - 43\n        val m46 = mid\
    \ - 44\n        val m47 = mid - 45\n        val m48 = mid - 46\n        val m49\
    \ = mid - 47\n        val m50 = mid - 48\n        val m51 = mid - 49\n       \
    \ val m52 = mid - 50\n        val m53 = mid - 51\n        val m54", "        val\
    \ n = l.length\n        if (n == 0) 0.0f\n        else {\n            val mid\
    \ = n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val median = median(left) + median(right)\n            median\n \
    \       }", "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n\
    \            val mid = n / 2\n            val left = l.take(mid)\n           \
    \ val right = l.drop(mid)\n            val midVal = median(left)\n           \
    \ val leftVal = median(right)\n            val median = midVal + leftVal\n   \
    \         median.toFloat\n        }", "        val n = l.length\n        val mid\
    \ = n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n \
    \       val median = (left + right).sorted\n        median.last", "        val\
    \ n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n    \
    \    val right = l.drop(mid)\n        val midVal = left.sum / mid\n        val\
    \ rightVal = right.sum / mid\n        val median = (midVal + rightVal) / 2\n \
    \       median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val m1 = sorted.take(mid)\n        val m2 = sorted.drop(mid)\n\
    \        val median = (m1.sum + m2.sum) / 2\n        median", "        val n =\
    \ l.length\n        val m = l.groupBy(x => x).mapValues(_.length).maxBy(_._1)._1\n\
    \        val half = n / 2\n        val m1 = l.groupBy(x => x).mapValues(_.length).maxBy(_._1)._1\n\
    \        val m2 = l.groupBy(x => x).mapValues(_.length).minBy(_._1)._1\n     \
    \   val m3 = l.groupBy(x => x).mapValues(_.length).maxBy(_._1)._1\n        val\
    \ m4 = l.groupBy(x => x).mapValues(_.length).minBy(_._1)._1\n        val m5 =\
    \ l.groupBy(x => x).mapValues(_.length).maxBy(_._1)._1\n        val m6 = l.groupBy(x\
    \ => x).mapValues(_.length).minBy(_._1)._1\n        val m7 = l.groupBy(x => x).mapValues(_.length).maxBy(_._1)._1\n\
    \        val m8 = l.groupBy(x => x).mapValues(_.length).minBy(_._1)._1\n     \
    \   val m9 = l.groupBy(x => x).mapValues(_.length).maxBy(_._1)._1\n        val\
    \ m10 = l.groupBy(x => x).mapValues(_.length).minBy(_._1)._1\n        val m11\
    \ = l.groupBy(x => x).mapValues(_.length).maxBy(_._1)._1\n        val m12 = l.groupBy(x\
    \ => x).mapValues(_.length).minBy(_._1)._1\n        val m13 = l.groupBy(x => x).mapValues(_.length).maxBy(_._1)._1\n\
    \        val m14 = l.groupBy(x => x).mapValues(_.length).minBy(_._1)._1\n    \
    \    val m15 = l.groupBy(x => x).mapValues(_.length).maxBy(_._1)._1\n        val\
    \ m16 = l.groupBy(x => x).mapValues(_.length).minBy(_._1)._1\n        val m17\
    \ = l.groupBy(x => x).mapValues(_.length).maxBy(_._1)._1\n        val m18 = l.groupBy(x\
    \ => x).mapValues(_.length).minBy(_._1)._1\n        val m19 = l.groupBy(x => x).mapValues(_.length).maxBy(_._1)._1\n\
    \        val m20 = l.groupBy(x => x).mapValues(_.length).minBy(_._1)._1\n    \
    \    val m21 = l.groupBy(x => x).mapValues(_.length).maxBy(_._1)._1\n        val\
    \ m22 = l.group", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val leftHalf = sorted.drop(mid)\n\
    \        val rightHalf = sorted.takeRight(mid)\n        val medianOfLeftHalf =\
    \ median(leftHalf)\n        val medianOfRightHalf = median(rightHalf)\n      \
    \  if (medianOfLeftHalf < medianOfRightHalf)\n            medianOfLeftHalf\n \
    \       else\n            medianOfRightHalf", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftHalf = sorted.take(mid)\n        val rightHalf = sorted.drop(mid)\n\
    \        val medianOfLeftHalf = median(leftHalf)\n        val medianOfRightHalf\
    \ = median(rightHalf)\n        if (median == 0l) {\n            medianOfLeftHalf\n\
    \        } else if (median == 0l) {\n            medianOfRightHalf\n        }\
    \ else {\n            val medianOfBothHalfs = medianOfLeftHalf + medianOfRightHalf\n\
    \            val medianOfBothHalfsAsFloat = medianOfBothHalfs.toFloat\n      \
    \      medianOfBothHalfsAsFloat\n        }", "        val n = l.length\n     \
    \   if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n           \
    \ val left = l.take(mid)\n            val right = l.drop(mid)\n            val\
    \ median = median(left) + median(right)\n            median.toFloat\n        }",
  "        val n = l.length\n        val half = n / 2\n        if (n <= 1) 0.0f\n\
    \        else {\n            val m1 = l.take(half)\n            val m2 = l.drop(half)\n\
    \            val m = (m1 + m2).sort\n            val mid = m.length / 2\n    \
    \        (m1.head + m2.head) / 2.0f\n        }", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val left = sorted.take(mid)\n  \
    \      val right = sorted.drop(mid)\n        val median = (left.last + right.head)\
    \ / 2\n        median", "        val sorted = l.sorted\n        val half = sorted.length\
    \ / 2\n        if (sorted.length == 1) sorted.head\n        else if (sorted.length\
    \ == 2) sorted.last\n        else sorted.init(half).last", "        val n = l.length\n\
    \        if (n == 0) 0\n        else if (n == 1) l.head\n        else (l.head\
    \ + l.last) / 2.0", "        val n = l.length\n        if (n < 2) 0.0\n      \
    \  else {\n            val mid = n / 2\n            val left = l.take(mid)\n \
    \           val right = l.drop(mid)\n            val m = (left + right).sorted\n\
    \            val median = m.last\n            median\n        }", "        val\
    \ n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n    \
    \    val right = l.drop(mid)\n        val median = (left.sum + right.sum) / 2\n\
    \        median.toFloat", "        val n = l.length\n        val m = l.toList.sortBy(_.toFloat).length\
    \ / 2\n        if (m == 0) l.toList.sortBy(_.toFloat).last\n        else l.toList.sortBy(_.toFloat).last.toFloat\
    \ + l.toList.sortBy(_.toFloat).drop(m).last.toFloat", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n      \
    \      val left = l.slice(0, mid)\n            val right = l.slice(mid)\n    \
    \        val median = median(left) + median(right)\n            val diff = median.toFloat\
    \ - l.toFloat.median\n            if (diff < 0.0f) median\n            else l.toFloat.median\
    \ + diff\n        }", "        val n = l.length\n        if (n < 2) 0.0f\n   \
    \     else {\n            val mid = n / 2\n            val left = l.slice(0, mid)\n\
    \            val right = l.slice(mid)\n            val median = median(left) +\
    \ median(right)\n            median\n        }", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median", "        val n = l.length\n        if (n <= 1) 0f\n        else\
    \ {\n            val mid = n / 2\n            val left = l.take(mid)\n       \
    \     val right = l.drop(mid)\n            val median = median(left) + median(right)\n\
    \            median.toFloat\n        }", "        val n = l.length\n        val\
    \ m = l.sortWith(_ < _).length\n        val half = m / 2\n        if (half ==\
    \ 0) l.head else l.head + half * (l.last - l.head)", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val m1 = sorted.take(mid)\n        val m2 = sorted.drop(mid)\n      \
    \  val median1 = m1.last\n        val median2 = m2.last\n        val median3 =\
    \ m1.last + m2.last\n        val median4 = m1.last + m2.last + m3.last\n     \
    \   val median5 = m1.last + m2.last + m3.last + m4.last\n        val median6 =\
    \ m1.last + m2.last + m3.last + m4.last + m5.last\n        val median7 = m1.last\
    \ + m2.last + m3.last + m4.last + m5.last + m6.last\n        val median8 = m1.last\
    \ + m2.last + m3.last + m4.last + m5.last + m6.last + m7.last\n        val median9\
    \ = m1.last + m2.last + m3.last + m4.last + m5.last + m6.last + m7.last + m8.last\n\
    \        val median10 = m1.last + m2.last + m3.last + m4.last + m5.last + m6.last\
    \ + m7.last + m8.last + m9.last\n        val median11 = m1.last + m2.last + m3.last\
    \ + m4.last + m5.last + m6.last + m7.last + m8.last + m9.last + m10.last\n   \
    \     val median12 = m1.last + m2.last + m3.last + m4.last + m5.last + m6.last\
    \ + m7.last + m8.last + m9.last + m10.last + m11.last\n        val median13 =\
    \ m1.last + m2.last + m3.last + m4.last + m5.last + m6.last + m7.last + m8.last\
    \ + m9.last + m10.last + m11.last + m12.last\n        val median14 = m1.last +\
    \ m2.last + m3.last + m4.last + m5.last + m6.last + m7.last + m8.last + m9.last\
    \ + m10.last + m11.last + m12.last + m13.last\n        val median15 = m1.last\
    \ + m2.last + m3.last + m4.last + m5.last + m6.last + m7.last + m8.last + m",
  "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n           \
    \ val mid = n / 2\n            val left = l.take(mid)\n            val right =\
    \ l.drop(mid)\n            val median = median(left) + median(right)\n       \
    \     val diff = (median * 2.0) - n\n            if (diff < 0.0f) 0.0f\n     \
    \       else diff\n        }", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        val median = sorted.take(mid).last\n        val\
    \ lower = sorted.take(mid)\n        val upper = sorted.drop(mid)\n        val\
    \ lowerMedian = median(lower)\n        val upperMedian = median(upper)\n     \
    \   if (median == lowerMedian) {\n            lowerMedian\n        } else if (median\
    \ == upperMedian) {\n            upperMedian\n        } else {\n            val\
    \ medianOfLower = median(lower)\n            val medianOfUpper = median(upper)\n\
    \            val lowerMedianOfLower = medianOfLower / 2\n            val lowerMedianOfUpper\
    \ = medianOfUpper / 2\n            val upperMedianOfLower = medianOfLower / 2\n\
    \            val upperMedianOfUpper = medianOfUpper / 2\n            val medianOfLowerOfLower\
    \ = medianOfLowerOfLower / 2\n            val medianOfLowerOfUpper = medianOfLowerOfUpper\
    \ / 2\n            val medianOfUpperOfLower = medianOfUpperOfLower / 2\n     \
    \       val medianOfUpperOfUpper = medianOfUpperOfUpper / 2\n            val medianOfLowerOfLowerOfLower\
    \ = medianOfLowerOfLowerOfLower / 2\n            val medianOfLowerOfLowerOfUpper\
    \ = medianOfLowerOfLowerOfUpper / 2\n            val medianOfLowerOfUpperOfLower\
    \ = medianOfLowerOfUpperOfLower / 2\n            val medianOfLowerOfUpperOfUpper\
    \ = medianOfLowerOfUpperOfUpper / 2\n            val medianOfUpperOfLowerOfLower\
    \ = medianOfUpperOfLowerOfLower / 2\n            val medianOfUpperOfLowerOfUpper\
    \ = medianOfUpperOfLowerOfUpper / 2\n            val medianOfUpperOfUpperOfLower\
    \ = medianOfUpperOfUpperOfLower / 2\n            val medianOfUpperOfUpperOfUpper\
    \ = medianOfUpperOfUpperOfUpper / 2\n            val medianOfLowerOfLowerOfLowerOfLower\
    \ = medianOfLowerOfLowerOfLowerOfLower / 2\n            val medianOfLowerOfLowerOfLowerOfUpper\
    \ = medianOfLowerOfLowerOfLowerOfUpper / 2\n            val medianOfLowerOfLowerOfUpperOfLower\
    \ = medianOfLowerOfLowerOfUpperOfLower / 2\n            val medianOfLowerOfLowerOfUpperOfUpper\
    \ = medianOfLowerOfLowerOf", "        val n = l.length\n        if (n < 2) 0.0\n\
    \        else {\n            val mid = n / 2\n            val left = l.slice(0,\
    \ mid)\n            val right = l.slice(mid)\n            val m1 = median(left)\n\
    \            val m2 = median(right)\n            (m1 + m2) / 2\n        }", " \
    \       val n = l.length\n        if (n < 2) 0.0f\n        else {\n          \
    \  val mid = n / 2\n            val left = (0 until mid).toList\n            val\
    \ right = (mid until n).toList\n            val midVal = l.apply(mid)\n      \
    \      val leftVal = l.apply(left.max)\n            val rightVal = l.apply(right.max)\n\
    \            val median = if (leftVal < rightVal) leftVal else rightVal\n    \
    \        median\n        }", "        val sorted = l.sorted\n        val half\
    \ = sorted.length / 2\n        if (sorted.length == 1) sorted.head\n        else\
    \ if (sorted.length % 2 == 0) sorted.last\n        else sorted.last(half) + sorted.last(half+1)",
  "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n           \
    \ val mid = n / 2\n            val left = l.slice(0, mid)\n            val right\
    \ = l.slice(mid)\n            val median = (left.sum + right.sum) / 2.0\n    \
    \        median.toFloat\n        }", "        val sorted = l.sorted\n        val\
    \ mid = sorted.length / 2\n        val median = sorted.take(mid).last\n      \
    \  median", "        val sorted = l.sorted\n        val mid = sorted.length /\
    \ 2\n        val left = sorted.take(mid)\n        val right = sorted.drop(mid)\n\
    \        val median = if (left.length == 0) right.head else left.median\n    \
    \    median", "        val n = l.length\n        val m = l.min\n        val median\
    \ = (m + n) / 2\n        val half = n / 2\n        val left  = l.filter(_ < median)\n\
    \        val right = l.filter(_ >= median)\n        val leftMedian = median(left)\n\
    \        val rightMedian = median(right)\n        if (leftMedian == rightMedian)\n\
    \            median\n        else if (leftMedian < rightMedian)\n            median\n\
    \        else\n            rightMedian", "        val n = l.length\n        val\
    \ m = l.min\n        val median = l.sortWith(_ < m).length / 2\n        if (median\
    \ == 0) m else m", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        median", "        val\
    \ n = l.length\n        if (n < 2) 0.0f\n        else {\n            val mid =\
    \ l.length / 2\n            val l1 = l.take(mid)\n            val l2 = l.drop(mid)\n\
    \            val m = (l1.length + l2.length) / 2\n            val l3 = l1.take(m)\n\
    \            val l4 = l2.take(m)\n            val l5 = l3.take(m)\n          \
    \  val l6 = l4.take(m)\n            val l7 = l5.take(m)\n            val l8 =\
    \ l6.take(m)\n            val l9 = l7.take(m)\n            val l10 = l8.take(m)\n\
    \            val l11 = l9.take(m)\n            val l12 = l10.take(m)\n       \
    \     val l13 = l11.take(m)\n            val l14 = l12.take(m)\n            val\
    \ l15 = l13.take(m)\n            val l16 = l14.take(m)\n            val l17 =\
    \ l15.take(m)\n            val l18 = l16.take(m)\n            val l19 = l17.take(m)\n\
    \            val l20 = l18.take(m)\n            val l21 = l19.take(m)\n      \
    \      val l22 = l20.take(m)\n            val l23 = l21.take(m)\n            val\
    \ l24 = l22.take(m)\n            val l25 = l23.take(m)\n            val l26 =\
    \ l24.take(m)\n            val l27 = l25.take(m)\n            val l28 = l26.take(m)\n\
    \            val l29 = l27.take(m)\n            val l30 = l28.take(m)\n      \
    \      val l31 = l29.take(m)\n            val l32 = l30.take(m)\n            val\
    \ l33 = l31.take(m)\n            val l34 = l32.take(m)\n            val l35 =\
    \ l33.take(m)\n            val l36 = l34.take(m)\n            val l37 = l35.take(m)\n\
    \            val l38 = l36.take(m)\n            val l39 = l37.take(m)\n      \
    \      val l40 = l38.take(m)\n            val l41 = l39.take(m)\n            val\
    \ l42 = l40.take(m)\n            val l43 = l41.take(m)\n            val l44 =\
    \ l42.take(m)\n            val ", "        val n = l.length\n        val mid =\
    \ n / 2\n        val left = l.take(mid)\n        val right = l.drop(mid)\n   \
    \     val median = if (n == 1) left else (left + right) / 2\n        median.toFloat",
  "        val sorted = l.sortWith(_ < _)\n        val mid = sorted.length / 2\n \
    \       val median = if (sorted.length % 2 == 0) sorted.apply(mid) else sorted.apply(mid\
    \ + 1)\n        median.toFloat", "        val n = l.length\n        if (n <= 1)\
    \ 0.0f\n        else {\n            val mid = n / 2\n            val left = new\
    \ Array[Long](n)\n            val right = new Array[Long](n)\n            val\
    \ i = 1\n            while (i <= n) {\n                left(i) = l(i)\n      \
    \          i += 1\n            }\n            while (i <= mid) {\n           \
    \     right(i - 1) = l(i)\n                i -= 1\n            }\n           \
    \ val leftMedian = median(left)\n            val rightMedian = median(right)\n\
    \            val median = (leftMedian + rightMedian) / 2\n            median\n\
    \        }", "        val n = l.length\n        val half = n / 2\n        if (n\
    \ < 1) throw new IllegalArgumentException(\"List must have at least two elements\"\
    )\n        if (n == 1) return l.head\n        val m1 = l.head\n        val m2\
    \ = l.last\n        val m = (m1 + m2) / 2\n        val l1 = l.take(half)\n   \
    \     val l2 = l.drop(half)\n        val l3 = l1.zip(l2).map { case (x, y) =>\
    \ x + y }\n        val l4 = l3.zipWithIndex.map { case (x, i) => x }\n       \
    \ val l5 = l4.zipWithIndex.map { case (x, i) => x }\n        val l6 = l5.zipWithIndex.map\
    \ { case (x, i) => x }\n        val l7 = l6.zipWithIndex.map { case (x, i) =>\
    \ x }\n        val l8 = l7.zipWithIndex.map { case (x, i) => x }\n        val\
    \ l9 = l8.zipWithIndex.map { case (x, i) => x }\n        val l10 = l9.zipWithIndex.map\
    \ { case (x, i) => x }\n        val l11 = l10.zipWithIndex.map { case (x, i) =>\
    \ x }\n        val l12 = l11.zipWithIndex.map { case (x, i) => x }\n        val\
    \ l13 = l12.zipWithIndex.map { case (x, i) => x }\n        val l14 = l13.zipWithIndex.map\
    \ { case (x, i) => x }\n        val l15 = l14.zipWithIndex.map { case (x, i) =>\
    \ x }\n        val l16 = l15.zipWithIndex.map { case (x, i) => x }\n        val\
    \ l17 = l16.zipWithIndex.map { case (x, i) => x }\n        val l18 = l17.zipWithIndex.map\
    \ { case (x, i) => x }\n        val l19 = l18.zipWithIndex.map { case (x, i) =>\
    \ x }\n        val l20 = l19.zipWithIndex.map { case (x, i) => x }\n        val\
    \ l21 = l20.zipWithIndex.map { case (x, i) => x }\n        val l22 = l21.zipWithIndex.map\
    \ { case (x, i) => x }\n        val l23 = l22.zipWithIndex.map { case (x, i) =>\
    \ x }\n        val l24 = l23.zipWithIndex.map { case (x, i) => x }\n        val\
    \ l25 = l", "        val n = l.length\n        if (n < 2) 0.0f\n        else {\n\
    \            val mid = n / 2\n            val left = l.take(mid)\n           \
    \ val right = l.drop(mid)\n            val median = median(left) + median(right)\n\
    \            median.toFloat\n        }", "        val n = l.length\n        if\
    \ (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val left\
    \ = l.slice(0, mid)\n            val right = l.slice(mid)\n            val median\
    \ = median(left) + median(right)\n            val midPoint = if (n % 2 == 0) mid\
    \ / 2 else (mid + 1) / 2\n            val medianPoint = if (n % 2 == 0) mid /\
    \ 2 else (mid + 1) / 2\n            val medianPoint2 = if (n % 2 == 0) mid / 2\
    \ else (mid + 1) / 2\n            val medianPoint3 = if (n % 2 == 0) mid / 2 else\
    \ (mid + 1) / 2\n            val medianPoint4 = if (n % 2 == 0) mid / 2 else (mid\
    \ + 1) / 2\n            val medianPoint5 = if (n % 2 == 0) mid / 2 else (mid +\
    \ 1) / 2\n            val medianPoint6 = if (n % 2 == 0) mid / 2 else (mid + 1)\
    \ / 2\n            val medianPoint7 = if (n % 2 == 0) mid / 2 else (mid + 1) /\
    \ 2\n            val medianPoint8 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n\
    \            val medianPoint9 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint10 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint11 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint12 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint13 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint14 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint15 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint16 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint17 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint18 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint19 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint20 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint21 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint22 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint23 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n \
    \           val medianPoint24 = if (n % 2 == 0) mid / 2 else (mid + 1) / 2\n",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        median", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val m1 = sorted.take(mid)\n    \
    \    val m2 = sorted.drop(mid)\n        val median = (m1.sum + m2.sum) / 2\n \
    \       median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        median", "        val\
    \ sorted = l.sorted\n        val mid = sorted.length / 2\n        val median =\
    \ sorted.take(mid).last\n        median", "        val sorted = l.sorted\n   \
    \     val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        val leftMedian = sorted.take(mid)\n\
    \        val rightMedian = sorted.drop(mid)\n        val leftMedianSum = leftMedian.sum\n\
    \        val rightMedianSum = rightMedian.sum\n        val leftMedianCount = leftMedian.count\n\
    \        val rightMedianCount = rightMedian.count\n        val leftMedianSumOfSquares\
    \ = leftMedianSum * leftMedianSum\n        val rightMedianSumOfSquares = rightMedianSum\
    \ * rightMedianSum\n        val leftMedianSumOfSquaresOfHalf = leftMedianSumOfSquares\
    \ / leftMedianCount\n        val rightMedianSumOfSquaresOfHalf = rightMedianSumOfSquares\
    \ / rightMedianCount\n        val leftMedianSumOfSquaresOfHalfOfHalf = leftMedianSumOfSquaresOfHalf\
    \ * leftMedianCount\n        val rightMedianSumOfSquaresOfHalfOfHalf = rightMedianSumOfSquaresOfHalf\
    \ * rightMedianCount\n        val leftMedianSumOfSquaresOfHalfOfHalfOfHalf = leftMedianSumOfSquaresOfHalfOfHalf\
    \ * leftMedianCount\n        val rightMedianSumOfSquaresOfHalfOfHalfOfHalf = rightMedianSumOfSquaresOfHalfOfHalf\
    \ * rightMedianCount\n        val leftMedianSumOfSquaresOfHalfOfHalfOfHalfOfHalf\
    \ = leftMedianSumOfSquaresOfHalfOfHalfOfHalf * leftMedianCount\n        val rightMedianSumOfSquaresOfHalfOfHalfOfHalfOfHalf\
    \ = rightMedianSumOfSquaresOfHalfOfHalfOfHalf * rightMedianCount\n        val\
    \ leftMedianSumOfSquaresOfHalfOfHalfOfHalfOfHalfOfHalf = leftMedianSumOfSquaresOfHalfOfHalfOfHalfOfHalf\
    \ * leftMedianCount\n        val rightMedianSumOfSquaresOfHalfOfHalfOfHalfOfHalfOfHalf\
    \ = rightMedianSumOfSquaresOfHalfOfHalfOfHalfOfHalf * rightMedianCount\n     \
    \   val leftMedianSumOfSquaresOfHalfOfHalfOfHalfOfHalfOfHalfOfHalf = leftMedianSumOfSquaresOfHalfOfHalfOfHalfOfHalfOfHalf\
    \ * left", "        val sorted = l.sorted\n        val mid = sorted.length / 2\n\
    \        val median = if (sorted.length % 2 == 0) sorted.apply(mid) else sorted.apply(mid\
    \ + 1)\n        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        val median = sorted.take(mid).last\n        median", "        val\
    \ n = l.length\n        if (n < 2) 0.0\n        else {\n            val mid =\
    \ n / 2\n            val left = l.slice(0, mid)\n            val right = l.slice(mid)\n\
    \            val median = (left + right).sortBy(_).last\n            median.toFloat\n\
    \        }", "        val sorted = l.sorted\n        val mid = sorted.length /\
    \ 2\n        val median = sorted.take(mid).last\n        val leftHalf = sorted.drop(mid)\n\
    \        val rightHalf = sorted.takeRight(mid)\n        val medianOfLeftHalf =\
    \ median(leftHalf)\n        val medianOfRightHalf = median(rightHalf)\n      \
    \  val medianOfBothHalfs = median(leftHalf ++ rightHalf)\n        val medianOfBothHalfsIfEven\
    \ = median(leftHalf ++ rightHalf.takeRight(1))\n        val medianOfBothHalfsIfOdd\
    \ = median(leftHalf ++ rightHalf.drop(1))\n        val medianOfBothHalfsIfEvenAndOdd\
    \ = median(leftHalf ++ rightHalf.takeRight(1) ++ leftHalf ++ rightHalf.drop(1))\n\
    \        val medianOfBothHalfsIfEvenAndEven = median(leftHalf ++ rightHalf.takeRight(1)\
    \ ++ leftHalf ++ rightHalf.drop(2))\n        val medianOfBothHalfsIfEvenAndOddAndEven\
    \ = median(leftHalf ++ rightHalf.takeRight(1) ++ leftHalf ++ rightHalf.drop(2)\
    \ ++ leftHalf ++ rightHalf.takeRight(2) ++ leftHalf ++ rightHalf.drop(2))\n  \
    \      val medianOfBothHalfsIfOddAndEven = median(leftHalf ++ rightHalf.drop(2)\
    \ ++ leftHalf ++ rightHalf.takeRight(2))\n        val medianOfBothHalfsIfOddAndOdd\
    \ = median(leftHalf ++ rightHalf.drop(2) ++ leftHalf ++ rightHalf.takeRight(2)\
    \ ++ leftHalf ++ rightHalf.drop(2))\n        val medianOfBothHalfsIfOddAndEvenAndEven\
    \ = median(leftHalf ++ rightHalf.drop(2) ++ leftHalf ++ rightHalf.takeRight(2)\
    \ ++ leftHalf ++ rightHalf.drop(2) ++ leftHalf ++ rightHalf.takeRight(2) ++ leftHalf\
    \ ++ rightHalf.drop(2))\n        val medianOfBothHalfsIfOddAndEvenAndOdd = median(leftHalf\
    \ ++ rightHalf.drop(2) ++ leftHalf ++ rightHalf.takeRight(2) ++ leftHalf ++ rightHalf.drop(2)\
    \ ++ leftHalf ++ rightHalf.takeRight(2) ++ leftHalf ++ rightHal", "        val\
    \ n = l.length\n        if (n <= 1) 0f\n        else {\n            val mid =\
    \ n / 2\n            val left = l.take(mid)\n            val right = l.drop(mid)\n\
    \            val midVal = median(left)\n            val rightVal = median(right)\n\
    \            (midVal + rightVal) / 2\n        }", "        val sorted = l.sorted\n\
    \        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        median.toFloat", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        if (sorted.length % 2 == 0) {\n            val mid1 = sorted.slice(0,\
    \ mid)\n            val mid2 = sorted.slice(mid)\n            val median = (mid1\
    \ + mid2).sorted / 2\n            median.toFloat\n        } else {\n         \
    \   val mid1 = sorted.slice(0, mid)\n            val mid2 = sorted.slice(mid)\n\
    \            val median = (mid1 + mid2).sorted / 2\n            median.toFloat\n\
    \        }", "        val n = l.length\n        val half = n / 2\n        val\
    \ left = l.take(half)\n        val right = l.drop(half)\n        val median =\
    \ (left + right).sorted.last\n        median.toFloat", "        val sorted = l.sorted\n\
    \        val half = sorted.length / 2\n        val median = sorted.take(half).last\n\
    \        val rest = sorted.drop(half)\n        val medianOfRest = median(rest)\n\
    \        val medianOfRestAndMedian = medianOfRest + median\n        val medianOfRestAndMedianAsFloat\
    \ = medianOfRestAndMedian.toFloat\n        medianOfRestAndMedianAsFloat", "  \
    \      val n = l.length\n        val half = n / 2\n        if (n % 2 == 0) {\n\
    \            val m1 = l.take(half)\n            val m2 = l.drop(half)\n      \
    \      val m = (m1 + m2).sort\n            val m3 = m.last\n            val m4\
    \ = m.head\n            (m3 + m4) / 2\n        } else {\n            val m1 =\
    \ l.take(half)\n            val m2 = l.drop(half)\n            (m1 + m2).sort\n\
    \        }"]
stop_tokens:
- "\n    }\n"
