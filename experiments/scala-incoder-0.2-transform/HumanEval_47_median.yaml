name: HumanEval_47_median
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
  \    def median(l : List[Long]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n  \
  \  assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
  \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
  \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
completions: ["        val n = l.length\n        if (n < 2) 0.0f\n        else {\n\
    \            val mid = n / 2\n            val left = l.take(mid)\n           \
    \ val right = l.drop(mid)\n            val midVal = median(left)\n           \
    \ val leftVal = median(right)\n            val median = (midVal + leftVal) / 2\n\
    \            median\n        }", "        val n = l.length\n        val m = l.min\n\
    \        val median = (m + n) / 2\n        val half = if (n % 2 == 0) n / 2 else\
    \ n / 2\n        val median1 = if (half == 0) m else (m + half) / 2\n        val\
    \ median2 = if (half == 0) n else (m + half) / 2\n        val median3 = if (half\
    \ == 0) n else (m + half) / 2\n        val median4 = if (half == 0) n else (m\
    \ + half) / 2\n        val median5 = if (half == 0) n else (m + half) / 2\n  \
    \      val median6 = if (half == 0) n else (m + half) / 2\n        val median7\
    \ = if (half == 0) n else (m + half) / 2\n        val median8 = if (half == 0)\
    \ n else (m + half) / 2\n        val median9 = if (half == 0) n else (m + half)\
    \ / 2\n        val median10 = if (half == 0) n else (m + half) / 2\n        val\
    \ median11 = if (half == 0) n else (m + half) / 2\n        val median12 = if (half\
    \ == 0) n else (m + half) / 2\n        val median13 = if (half == 0) n else (m\
    \ + half) / 2\n        val median14 = if (half == 0) n else (m + half) / 2\n \
    \       val median15 = if (half == 0) n else (m + half) / 2\n        val median16\
    \ = if (half == 0) n else (m + half) / 2\n        val median17 = if (half == 0)\
    \ n else (m + half) / 2\n        val median18 = if (half == 0) n else (m + half)\
    \ / 2\n        val median19 = if (half == 0) n else (m + half) / 2\n        val\
    \ median20 = if (half == 0) n else (m + half) / 2\n        val median21 = if (half\
    \ == 0) n else (m + half) / 2\n        val median22 = if (half == 0) n else (m\
    \ + half) / 2\n        val median23 = if (half == 0) n else (m + half) / 2\n \
    \       val median24 = if (half == 0) n else (m + half) / 2\n        val median25\
    \ = if (half == 0) n else (m + half) / 2\n        val median26 = if (half == 0)\
    \ n else (m + half) / 2\n        val median27 = if (half == 0) n else (m + half)\
    \ / 2\n        val median28 = if (half == 0) n else (m + half) / 2\n        val\
    \ median29 = if (half == 0) n else (m + half) / 2\n        val median30 = if (half\
    \ == 0) n else (m + half) / 2\n        val median31 = if (half == 0) ", "    \
    \    val n = l.length\n        if (n < 2) 0.0f\n        else {\n            val\
    \ mid = n / 2\n            val left = l.slice(0, mid)\n            val right =\
    \ l.slice(mid)\n            val leftMedian = median(left)\n            val rightMedian\
    \ = median(right)\n            val median = (leftMedian + rightMedian) / 2\n \
    \           median\n        }", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        if (sorted.length % 2 == 0) sorted.last\n     \
    \   else sorted.last.toFloat + sorted.last.toFloat / 2", "        val n = l.length\n\
    \        if (n < 2) 0f\n        else {\n            val mid = n / 2\n        \
    \    val left = l.slice(0, mid)\n            val right = l.slice(mid)\n      \
    \      val median = median(left) + median(right)\n            val medianFloat\
    \ = median.toFloat\n            if (medianFloat == 0) 0f\n            else medianFloat\n\
    \        }", "        val n = l.length\n        val m = l.min\n        val median\
    \ = (m + n) / 2\n        val l1 = l.filter(_ < median)\n        val l2 = l.filter(_\
    \ >= median)\n        val l3 = l1.size + l2.size\n        if (l3 > 1) (l1 + l2)\
    \ / 2.0\n        else median", "        val sorted = l.sorted\n        val mid\
    \ = sorted.length / 2\n        val median = if (sorted.length % 2 == 0) sorted.apply(mid)\
    \ else (sorted.apply(mid) + sorted.apply(mid - 1)).toFloat\n        median", " \
    \       val n = l.length\n        if (n < 2) 0.0f\n        else {\n          \
    \  val mid = n / 2\n            val left = l.take(mid)\n            val right\
    \ = l.drop(mid)\n            val median = (left + right).sortWith(_ < _).last\n\
    \            median.toFloat\n        }", "        val n = l.length\n        if\
    \ (n < 2) 0.0f\n        else {\n            val mid = n / 2\n            val left\
    \ = l.slice(0, mid)\n            val right = l.slice(mid)\n            val median\
    \ = (left + right).sorted\n            val midPoint = median.head\n          \
    \  val leftMedian = median.tail.head\n            val rightMedian = median.tail.tail.head\n\
    \            val leftMedianIsSmaller = leftMedian < midPoint\n            val\
    \ rightMedianIsSmaller = rightMedian < midPoint\n            if (leftMedianIsSmaller\
    \ && rightMedianIsSmaller) midPoint\n            else (leftMedianIsSmaller ? leftMedian\
    \ : rightMedian)\n        }", "        val n = l.length\n        if (n < 2) 0.0\n\
    \        else {\n            val half = n / 2\n            val left = l.take(half)\n\
    \            val right = l.drop(half)\n            val mid = left match {\n  \
    \              case x :: xs => x\n                case _ => right\n          \
    \  }\n            val median = (left + right) match {\n                case x\
    \ :: xs => x\n                case _ => mid\n            }\n            median.toFloat\n\
    \        }", "        val n = l.length\n        val mid = n / 2\n        val left\
    \ = l.take(mid)\n        val right = l.drop(mid)\n        val median = if (n ==\
    \ 1) left else (left + right) / 2\n        median.toFloat", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n      \
    \      val left = l.take(mid)\n            val right = l.drop(mid)\n         \
    \   val median = median(left) + median(right)\n            val medianFloat = median.toFloat\n\
    \            if (medianFloat == 0.0f) 0.0f\n            else medianFloat\n   \
    \     }", "        val n = l.length\n        if (n < 2) 0.0\n        else {\n\
    \            val half = n / 2\n            val left = l.take(half)\n         \
    \   val right = l.drop(half)\n            val mid = left.length / 2\n        \
    \    val median = (left.take(mid) + right.take(mid)).sorted\n            median.last\n\
    \        }", "        val sorted = l.sorted\n        val mid = sorted.length /\
    \ 2\n        val median = sorted.take(mid).last\n        val left = sorted.drop(mid)\n\
    \        val right = sorted.takeRight(mid)\n        val medianLeft = median(left)\n\
    \        val medianRight = median(right)\n        val medianMedian = median(List(medianLeft,\
    \ medianRight))\n        val medianMedianFloat = medianMedian.toFloat\n      \
    \  val medianMedianInt = medianMedianFloat.toInt\n        val medianMedianLong\
    \ = medianMedianFloat.toLong\n        val medianMedianDouble = medianMedianFloat.toDouble\n\
    \        val medianMedianString = medianMedianFloat.toString\n        val medianMedianBoolean\
    \ = medianMedianFloat.toBoolean\n        val medianMedianNull = medianMedianFloat.isNull\n\
    \        val medianMedianUnit = medianMedianFloat.toUnit\n        val medianMedianNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n        val medianMedianUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Unit]\n        val medianMedianUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Unit]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Unit]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Unit]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit\
    \ = medianMedianFloat.asInstanceOf[Nullable[Unit]]\n        val medianMedianUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnitNullableUnit",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        val left = sorted.drop(mid)\n      \
    \  val right = sorted.takeRight(mid)\n        val medianLeft = median(left)\n\
    \        val medianRight = median(right)\n        val medianMedian = (medianLeft\
    \ + medianRight) / 2\n        val medianMedianDiff = medianMedian - median\n \
    \       val medianMedianDiffAbs = Math.abs(medianMedianDiff)\n        if (medianMedianDiffAbs\
    \ < 0.1f)\n            medianMedian\n        else\n            medianMedianDiff",
  "        val n = l.length\n        val mid = n / 2\n        val left = l.take(mid)\n\
    \        val right = l.drop(mid)\n        val median = (left + right).sorted match\
    \ {\n            case Nil => 0f\n            case x :: xs => xs.last + 1f\n  \
    \      }\n        median", "        val sorted = l.sorted\n        val mid = sorted.length\
    \ / 2\n        if (sorted.length == 1) sorted\n        else (sorted take mid)\
    \ match {\n            case x :: xs => if (x < sorted((mid-1).toInt)) x else median(xs)\n\
    \            case _ => sorted((mid-1).toInt)\n        }", "        val sorted\
    \ = l.sorted\n        val mid = sorted.length / 2\n        val median = sorted.take(mid).last\n\
    \        val leftMedian = sorted.drop(mid).last\n        val rightMedian = sorted.take(mid).last\n\
    \        val medianOfMedians = leftMedian + rightMedian\n        val medianOfMediansAsFloat\
    \ = medianOfMedians.toFloat\n        val medianOfMediansAsInt = medianOfMediansAsFloat.toInt\n\
    \        val medianOfMediansAsLong = medianOfMediansAsInt.toLong\n        medianOfMediansAsLong",
  "        val sorted = l.sorted\n        val mid = sorted.length / 2\n        val\
    \ median = sorted.take(mid).last\n        median", "        val n = l.length\n\
    \        if (n < 2) 0.0f\n        else {\n            val mid = n / 2\n      \
    \      val left = l.take(mid)\n            val right = l.drop(mid)\n         \
    \   val midVal = median(left)\n            val rightVal = median(right)\n    \
    \        val median = if (midVal < rightVal) midVal else rightVal\n          \
    \  median\n        }"]
stop_tokens:
- "\n    }\n"
