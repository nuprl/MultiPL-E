language: scala
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.sortWith(_ < _)\n        val\
    \ l12 = l11.sortWith(_ < _)\n        val l13 = l12.sortWith(_ < _)\n        val\
    \ l14 = l13.sortWith(_ < _)\n        val l15 = l14.sortWith(_ < _)\n        val\
    \ l16 = l15.sortWith(_ < _)\n        val l17 = l16.sortWith(_ < _)\n        val\
    \ l18 = l17.sortWith(_ < _)\n        val l19 = l18.sortWith(_ < _)\n        val\
    \ l20 = l19.sortWith(_ < _)\n        val l21 = l20.sortWith(_ < _)\n        val\
    \ l22 = l21.sortWith(_ < _)\n        val l23 = l22.sortWith(_ < _)\n        val\
    \ l24 = l23.sortWith(_ < _)\n        val l25 = l24.sortWith(_ < _)\n        val\
    \ l26 = l25.sortWith(_ < _)\n        val l27 = l26.sortWith(_ < _)\n        val\
    \ l28 = l27.sortWith(_ < _)\n        val l29 = l28.sortWith(_ < _)\n        val\
    \ l30 = l29.sortWith(_ < _)\n        val l31 = l30.sortWith(_ < _)\n        val\
    \ l32 = l31.sortWith(_ < _)\n        val l33 = l32.sortWith(_ < _)\n        val\
    \ l34 = l33.sortWith(_ < _)\n        val l35 = l34.sortWith(_ < _)\n        val\
    \ l36 = l35.sortWith(_ < _)\n        val l37 = l36.sortWith(_ < _)\n        val\
    \ l38 = l37.sortWith(_ < _)\n        val l39 = l38.sortWith(_ < _)\n        val\
    \ l\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdx_oomvm.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdx_oomvm.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdx_oomvm.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val sortedList = l.sorted\n        val first = sortedList.head\n\
    \        val last = sortedList.last\n        val isIncreasing = first < last\n\
    \        val isDecreasing = first > last\n        isIncreasing || isDecreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgykeh_vo.scala:22)\n\tat Problem.main(tmpgykeh_vo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.forall(l1.last.compareTo(_)\
    \ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptfjfup1u.scala:19)\n\tat Problem.main(tmptfjfup1u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        if (m > n) monotonic(l.tail)\
    \ else (monotonic(l.tail) && m <= n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpag1mytpz.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpag1mytpz.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val m = l.head\n        val\
    \ n = l.tail\n        val m = m.toLong\n        val n = n.toLong\n        if (m\
    \ > n) monotonic(l.tail) else (m == n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp50kbgz2w.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp50kbgz2w.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp50kbgz2w.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0wvspsb.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l = l.sortWith(_ < _)\n\
    \        l.head == l.last\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsfksw8lt.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_ <\
    \ _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsfksw8lt.scala:12:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val l1 = l.tail\n        val l2 = l.tail.tail\n        val l3 = l.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val l10\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptuui8g9e.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptuui8g9e.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m1 = l.tail.tail.head\n        val n1 = l.tail.tail.tail.head\n        val\
    \ m2 = l.tail.tail.tail.tail.head\n        val n2 = l.tail.tail.tail.tail.tail.head\n\
    \        val m3 = l.tail.tail.tail.tail.tail.tail.head\n        val n3 = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m4 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ n4 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val m5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m9 = l.tail.tail\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp40ol_409.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.reverse\n        val l10 = l9.toList\n        val l11 = l10.reverse\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.reverse\n        val l16 = l15.toList\n\
    \        val l17 = l16.reverse\n        val l18 = l17.toList\n        val l19\
    \ = l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n\
    \        val l22 = l21.toList\n        val l23 = l22.reverse\n        val l24\
    \ = l23.toList\n        val l25 = l24.reverse\n        val l26 = l25.toList\n\
    \        val l27 = l26.reverse\n        val l28 = l27.toList\n        val l29\
    \ = l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n\
    \        val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34\
    \ = l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n\
    \        val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39\
    \ = l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n\
    \        val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44\
    \ = l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n\
    \        val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49\
    \ = l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n\
    \        val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54\
    \ = l53.toList\n        val l55 = \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3r563302.scala:66:17 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36ml55\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3r563302.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.reverse\n        val l10 = l9.toList\n        val l11 = l10.reverse\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.reverse\n        val l16 = l15.toList\n\
    \        val l17 = l16.reverse\n        val l18 = l17.toList\n        val l19\
    \ = l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n\
    \        val l22 = l21.toList\n        val l23 = l22.reverse\n        val l24\
    \ = l23.toList\n        val l25 = l24.reverse\n        val l26 = l25.toList\n\
    \        val l27 = l26.reverse\n        val l28 = l27.toList\n        val l29\
    \ = l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n\
    \        val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34\
    \ = l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n\
    \        val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39\
    \ = l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n\
    \        val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44\
    \ = l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n\
    \        val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49\
    \ = l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n\
    \        val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54\
    \ = l53.toList\n        val l55 = \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3r563302.scala:66:17 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36ml55\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3r563302.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val min = l.min\n        val max = l.max\n        val\
    \ l1 = l.toList\n        val l2 = l1.reverse\n        val l3 = l2.toList\n   \
    \     val l4 = l3.reverse\n        val l5 = l4.toList\n        val l6 = l5.toList\n\
    \        val l7 = l6.reverse\n        val l8 = l7.toList\n        val l9 = l8.toList\n\
    \        val l10 = l9.reverse\n        val l11 = l10.toList\n        val l12 =\
    \ l11.toList\n        val l13 = l12.reverse\n        val l14 = l13.toList\n  \
    \      val l15 = l14.toList\n        val l16 = l15.reverse\n        val l17 =\
    \ l16.toList\n        val l18 = l17.toList\n        val l19 = l18.reverse\n  \
    \      val l20 = l19.toList\n        val l21 = l20.toList\n        val l22 = l21.reverse\n\
    \        val l23 = l22.toList\n        val l24 = l23.reverse\n        val l25\
    \ = l24.toList\n        val l26 = l25.reverse\n        val l27 = l26.toList\n\
    \        val l28 = l27.toList\n        val l29 = l28.reverse\n        val l30\
    \ = l29.toList\n        val l31 = l30.reverse\n        val l32 = l31.toList\n\
    \        val l33 = l32.reverse\n        val l34 = l33.toList\n        val l35\
    \ = l34.reverse\n        val l36 = l35.toList\n        val l37 = l36.reverse\n\
    \        val l38 = l37.toList\n        val l39 = l38.reverse\n        val l40\
    \ = l39.toList\n        val l41 = l40.reverse\n        val l42 = l41.toList\n\
    \        val l43 = l42.reverse\n        val l44 = l43.toList\n        val l45\
    \ = l44.reverse\n        val l46 = l45.toList\n        val l47 = l46.reverse\n\
    \        val l48 = l47.toList\n        val l49 = l48.reverse\n        val l50\
    \ = l49.toList\n        val l51 = l50.reverse\n        val l52 = l51.toList\n\
    \        val l53 = l52.reverse\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp806zpfct.scala:68:5\
    \ ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0wvspsb.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.reverse\n        val l24 =\
    \ l23.toList\n        val l25 = l24.reverse\n        val l26 = l25.toList\n  \
    \      val l27 = l26.reverse\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdli_hhw0.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdli_hhw0.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdli_hhw0.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minValue = l.min\n        val maxValue = l.max\n\
    \        val minIndex  = l.indexWhere(x => x == minValue)\n        val maxIndex\
    \  = l.indexWhere(x => x == maxValue)\n        val minIndex2 = l.indexWhere(x\
    \ => x == minValue)\n        val maxIndex2 = l.indexWhere(x => x == maxValue)\n\
    \        val minIndex3 = l.indexWhere(x => x == minValue)\n        val maxIndex3\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex4 = l.indexWhere(x =>\
    \ x == minValue)\n        val maxIndex4 = l.indexWhere(x => x == maxValue)\n \
    \       val minIndex5 = l.indexWhere(x => x == minValue)\n        val maxIndex5\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex6 = l.indexWhere(x =>\
    \ x == minValue)\n        val maxIndex6 = l.indexWhere(x => x == maxValue)\n \
    \       val minIndex7 = l.indexWhere(x => x == minValue)\n        val maxIndex7\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex8 = l.indexWhere(x =>\
    \ x == minValue)\n        val maxIndex8 = l.indexWhere(x => x == maxValue)\n \
    \       val minIndex9 = l.indexWhere(x => x == minValue)\n        val maxIndex9\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex10 = l.indexWhere(x\
    \ => x == minValue)\n        val maxIndex10 = l.indexWhere(x => x == maxValue)\n\
    \        val minIndex11 = l.indexWhere(x => x == minValue)\n        val maxIndex11\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex12 = l.indexWhere(x\
    \ => x == minValue)\n        val maxIndex12 = l.indexWhere(x => x == maxValue)\n\
    \        val minIndex13 = l.indexWhere(x => x == minValue)\n        val maxIndex13\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex14 = l.indexWhere(x\
    \ => x == minValue)\n        val maxIndex14 = l.indexWhere(x => x == maxValue)\n\
    \        val minIndex15 = l.indexWhere(x => x == minValue)\n        val maxIndex15\
    \ = l.indexWhere(x => x == maxValue)\n        val minIndex16 = l.indexWhere(x\
    \ => x == minValue)\n        val maxIndex16 = l.indexWhere(x => x == maxValue)\n\
    \        val minIndex17 = l.indexWhere(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt82m6pwa.scala:46:38 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mminIndex17\e[0m = l.indexWhere(\n\
    \e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt82m6pwa.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.sortWith(_ < _)\n        val\
    \ l12 = l11.sortWith(_ < _)\n        val l13 = l12.sortWith(_ < _)\n        val\
    \ l14 = l13.sortWith(_ < _)\n        val l15 = l14.sortWith(_ < _)\n        val\
    \ l16 = l15.sortWith(_ < _)\n        val l17 = l16.sortWith(_ < _)\n        val\
    \ l18 = l17.sortWith(_ < _)\n        val l19 = l18.sortWith(_ < _)\n        val\
    \ l20 = l19.sortWith(_ < _)\n        val l21 = l20.sortWith(_ < _)\n        val\
    \ l22 = l21.sortWith(_ < _)\n        val l23 = l22.sortWith(_ < _)\n        val\
    \ l24 = l23.sortWith(_ < _)\n        val l25 = l24.sortWith(_ < _)\n        val\
    \ l26 = l25.sortWith(_ < _)\n        val l27 = l26.sortWith(_ < _)\n        val\
    \ l28 = l27.sortWith(_ < _)\n        val l29 = l28.sortWith(_ < _)\n        val\
    \ l30 = l29.sortWith(_ < _)\n        val l31 = l30.sortWith(_ < _)\n        val\
    \ l32 = l31.sortWith(_ < _)\n        val l33 = l32.sortWith(_ < _)\n        val\
    \ l34 = l33.sortWith(_ < _)\n        val l35 = l34.sortWith(_ < _)\n        val\
    \ l36 = l35.sortWith(_ < _)\n        val l37 = l36.sortWith(_ < _)\n        val\
    \ l38 = l37.sortWith(_ < _)\n        val l39 = l38.sortWith(_ < _)\n        val\
    \ l\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdx_oomvm.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdx_oomvm.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdx_oomvm.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.reverse\n        val l24 =\
    \ l23.toList\n        val l25 = l24.reverse\n        val l26 = l25.toList\n  \
    \      val l27 = l26.reverse\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdli_hhw0.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdli_hhw0.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdli_hhw0.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l = l.sortBy(_)\n     \
    \   val l = l.drop(l.length-1)\n        val l = l.drop(1)\n        l.forall(x\
    \ => x <= l.head)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps81gz1tk.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortBy(_)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already\
    \ defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps81gz1tk.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.drop(l.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps81gz1tk.scala:15:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmps81gz1tk.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l1 = l.tail\n        val\
    \ l2 = l.init\n        val l3 = l2.tail\n        val l4 = l3.init\n        val\
    \ l5 = l4.tail\n        val l6 = l5.init\n        val l7 = l6.tail\n        val\
    \ l8 = l7.init\n        val l9 = l8.tail\n        val l10 = l9.init\n        val\
    \ l11 = l10.tail\n        val l12 = l11.init\n        val l13 = l12.tail\n   \
    \     val l14 = l13.init\n        val l15 = l14.tail\n        val l16 = l15.init\n\
    \        val l17 = l16.tail\n        val l18 = l17.init\n        val l19 = l18.tail\n\
    \        val l20 = l19.init\n        val l21 = l20.tail\n        val l22 = l21.init\n\
    \        val l23 = l22.tail\n        val l24 = l23.init\n        val l25 = l24.tail\n\
    \        val l26 = l25.init\n        val l27 = l26.tail\n        val l28 = l27.init\n\
    \        val l29 = l28.tail\n        val l30 = l29.init\n        val l31 = l30.tail\n\
    \        val l32 = l31.init\n        val l33 = l32.tail\n        val l34 = l33.init\n\
    \        val l35 = l34.tail\n        val l36 = l35.init\n        val l37 = l36.tail\n\
    \        val l38 = l37.init\n        val l39 = l38.tail\n        val l40 = l39.init\n\
    \        val l41 = l40.tail\n        val l42 = l41.init\n        val l43 = l42.tail\n\
    \        val l44 = l43.init\n        val l45 = l44.tail\n        val l46 = l45.init\n\
    \        val l47 = l46.tail\n        val l48 = l47.init\n        val l49 = l48.tail\n\
    \        val l50 = l49.init\n        val l51 = l50.tail\n        val l52 = l51.init\n\
    \        val l53 = l52.tail\n        val l54 = l53.init\n        val l55 = l54.tail\n\
    \        val l56 = l55.init\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpm7niw1k7.scala:69:11 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm7niw1k7.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpm7niw1k7.scala:70:5 ---------------------\e[0m\e\
    [0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val m1\
    \ = m.toLong\n        val n1 = n.toLong\n        if (m1 == n1) true\n        else\
    \ if (m1 < n1) false\n        else monotonic(n.drop(1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprsx2_7e3.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn1\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong is not\
    \ a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpri00qvxp.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpri00qvxp.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0wvspsb.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val sorted = l.sortWith(_ <\
    \ _)\n        val first = sorted.head\n        val last = sorted.last\n      \
    \  val length = sorted.length\n        val isIncreasing = first < last\n     \
    \   val isDecreasing = first > last\n        val isMonotonic = length <= 1\n \
    \       val isMonotonicIncreasing = isIncreasing && isMonotonic\n        val isMonotonicDecreasing\
    \ = isDecreasing && isMonotonic\n        isMonotonicIncreasing || isMonotonicDecreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_09s20p9.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val sortedList = l.sorted\n        val first = sortedList.head\n\
    \        val last = sortedList.last\n        val isIncreasing = first < last\n\
    \        val isDecreasing = first > last\n        val isMonotonic = isIncreasing\
    \ || isDecreasing\n        isMonotonic\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphp4csnuy.scala:23)\n\tat Problem.main(tmphp4csnuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.sortWith(_ > _)\n        l1 == l3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxr7g0qhr.scala:18)\n\tat Problem.main(tmpxr7g0qhr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val min = l.min\n        val\
    \ max = l.max\n        val minIndex = 0\n        val maxIndex = l.size - 1\n \
    \       val minDiff = max - min\n        val maxDiff = max - max\n        val\
    \ minIsIncreasing = minDiff < 0\n        val maxIsIncreasing = maxDiff < 0\n \
    \       val minIsDecreasing = minDiff > 0\n        val maxIsDecreasing = maxDiff\
    \ > 0\n        val minIsNonIncreasing = minIsIncreasing && minIndex < l.size -\
    \ 1\n        val maxIsNonIncreasing = maxIsIncreasing && maxIndex > 0\n      \
    \  val minIsNonDecreasing = minIsDecreasing && minIndex > 0\n        val maxIsNonDecreasing\
    \ = maxIsDecreasing && maxIndex < l.size - 1\n        val minIsNonNonIncreasing\
    \ = minIsNonIncreasing && minIndex < l.size - 1\n        val maxIsNonNonIncreasing\
    \ = maxIsNonIncreasing && maxIndex > 0\n        val minIsNonNonDecreasing = minIsNonDecreasing\
    \ && minIndex > 0\n        val maxIsNonNonDecreasing = maxIsNonDecreasing && maxIndex\
    \ < l.size - 1\n        val minIsNonNonNonIncreasing = minIsNonNonIncreasing &&\
    \ minIndex < l.size - 1\n        val maxIsNonNonNonIncreasing = maxIsNonNonIncreasing\
    \ && maxIndex > 0\n        val minIsNonNonNonDecreasing = minIsNonNonDecreasing\
    \ && minIndex > 0\n        val maxIsNonNonNonDecreasing = maxIsNonNonDecreasing\
    \ && maxIndex < l.size - 1\n        val minIsNonNonNonNonIncreasing = minIsNonNonNonIncreasing\
    \ && minIndex < l.size - 1\n        val maxIsNonNonNonIncreasing = maxIsNonNonNonIncreasing\
    \ && maxIndex > 0\n        val minIsNonNonNonDecreasing = minIsNonNonNonDecreasing\
    \ && minIndex > 0\n        val maxIsNonNonNonDecreasing = maxIsNonNonNonDecreasing\
    \ && maxIndex < l.size - 1\n        val minIsNonNonNonNonIncreasing = minIsNonNonNonIncreasing\
    \ && minIndex < l.size - 1\n        val maxIsNonNonNonIncreasing = maxIsNonNonNonIncreasing\
    \ && maxIndex\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp25hpc7r8.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mmaxIsNonNonNonIncreasing\e\
    [0m = maxIsNonNonNonIncreasing && maxIndex > \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIsNonNonNonIncreasing is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIsNonNonNonIncreasing\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp25hpc7r8.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mminIsNonNonNonDecreasing\e\
    [0m = minIsNonNonNonDecreasing && minIndex > \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIsNonNonNonDecreasing is already defined as \e[33mvalue\e\
    [0m \e[35mminIsNonNonNonDecreasing\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp25hpc7r8.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mmaxIsNonNonNonDecreasing\e\
    [0m = maxIsNonNonNonDecreasing && maxIndex < l.size - \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIsNonNonNonDecreasing is already defined as \e[33mvalue\e\
    [0m \e[35mmaxIsNonNonNonDecreasing\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp25hpc7r8.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mminIsNonNonNonNonIncreasing\e\
    [0m = minIsNonNonNonIncreasing && minIndex < l.size - \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminIsNonNonNonNonIncreasing "
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0wvspsb.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l = l.sortWith(_ < _)\n\
    \        val l = l.toList\n        val l = l.sortWith(_ > _)\n        l.forall(x\
    \ => x == l.head)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp65d2vrv6.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_ <\
    \ _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp65d2vrv6.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp65d2vrv6.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_ > _)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already\
    \ defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp65d2vrv6.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortBy(_)\n  \
    \      val l3 = l2.reverse\n        val l4 = l3.sortBy(_)\n        val l5 = l4.reverse\n\
    \        val l6 = l5.sortBy(_)\n        val l7 = l6.reverse\n        val l8 =\
    \ l7.sortBy(_)\n        val l9 = l8.reverse\n        val l10 = l9.sortBy(_)\n\
    \        val l11 = l10.reverse\n        val l12 = l11.sortBy(_)\n        val l13\
    \ = l12.reverse\n        val l14 = l13.sortBy(_)\n        val l15 = l14.reverse\n\
    \        val l16 = l15.sortBy(_)\n        val l17 = l16.reverse\n        val l18\
    \ = l17.sortBy(_)\n        val l19 = l18.reverse\n        val l20 = l19.sortBy(_)\n\
    \        val l21 = l20.reverse\n        val l22 = l21.sortBy(_)\n        val l23\
    \ = l22.reverse\n        val l24 = l23.sortBy(_)\n        val l25 = l24.reverse\n\
    \        val l26 = l25.sortBy(_)\n        val l27 = l26.reverse\n        val l28\
    \ = l27.sortBy(_)\n        val l29 = l28.reverse\n        val l30 = l29.sortBy(_)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortBy(_)\n        val l33\
    \ = l32.reverse\n        val l34 = l33.sortBy(_)\n        val l35 = l34.reverse\n\
    \        val l36 = l35.sortBy(_)\n        val l37 = l36.reverse\n        val l38\
    \ = l37.sortBy(_)\n        val l39 = l38.reverse\n        val l40 = l39.sortBy(_)\n\
    \        val l41 = l40.reverse\n        val l42 = l41.sortBy(_)\n        val l43\
    \ = l42.reverse\n        val l44 = l43.sortBy(_)\n        val l45 = l44.reverse\n\
    \        val l46 = l45.sortBy(_)\n        val l47 = l46.reverse\n        val l48\
    \ = l47.sortBy(_)\n        val l49 = l48.reverse\n        val l50 = l49.\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu7u1en9e.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpu7u1en9e.scala:13:29\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36ml2\e[0m = l1.sortBy(_)\n\e[31m\e[31m   |\e[0m         \
    \                    ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for Any..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmpu7u1en9e.scala:15:27 -----------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36ml4\e[0m = l3.sortBy(_)\n\e[31m\e[31m\
    \   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => l3.sortBy(_$2).\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpu7u1en9e.scala:17:27 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ml6\e[0m = l5.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => l5.sortBy(_$3).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpu7u1en9e.scala:19:27 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ml8\e[0m = l7.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => l7.sortBy(_$4).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpu7u1en9e.scala:21:28 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m     "
  stdout: ''
  timestamp: 1660009612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.size\n        val\
    \ m = l.head\n        val r = l.tail\n        val m = m.toLong\n        val r\
    \ = r.toLong\n        val c = new Array[Long](n+1)\n        val d = new Array[Long](n+1)\n\
    \        val e = new Array[Long](n+1)\n        val f = new Array[Long](n+1)\n\
    \        val g = new Array[Long](n+1)\n        val h = new Array[Long](n+1)\n\
    \        val i = new Array[Long](n+1)\n        val j = new Array[Long](n+1)\n\
    \        val k = new Array[Long](n+1)\n        val l = new Array[Long](n+1)\n\
    \        val m1 = new Array[Long](n+1)\n        val m2 = new Array[Long](n+1)\n\
    \        val m3 = new Array[Long](n+1)\n        val m4 = new Array[Long](n+1)\n\
    \        val m5 = new Array[Long](n+1)\n        val m6 = new Array[Long](n+1)\n\
    \        val m7 = new Array[Long](n+1)\n        val m8 = new Array[Long](n+1)\n\
    \        val m9 = new Array[Long](n+1)\n        val m10 = new Array[Long](n+1)\n\
    \        val m11 = new Array[Long](n+1)\n        val m12 = new Array[Long](n+1)\n\
    \        val m13 = new Array[Long](n+1)\n        val m14 = new Array[Long](n+1)\n\
    \        val m15 = new Array[Long](n+1)\n        val m16 = new Array[Long](n+1)\n\
    \        val m17 = new Array[Long](n+1)\n        val m18 = new Array[Long](n+1)\n\
    \        val m19 = new Array[Long](n+1)\n        val m20 = new Array[Long](n+1)\n\
    \        val m21 = new Array[Long](n+1)\n        val m22 = new Array[Long](n+1)\n\
    \        val m23 = new Array[Long](n+1)\n        val m24 = new Array[Long](n+1)\n\
    \        val m25 = new Array[Long](n+1)\n        val m26 = new Array[Long](n+1)\n\
    \        val m27 = new Array[Long](n+1)\n        val m28 = new Array[Long](n+1)\n\
    \        val m29 = new Array[Long](n+1)\n        val m30 = new Array[Long](n+1)\n\
    \        val m3\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpks14zear.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpks14zear.scala:16:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mm\e[0m = m.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpks14zear.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.toLong\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined as \e[33mvalue\e\
    [0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpks14zear.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined as\
    \ \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpks14zear.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpks14zear.scala:59:5 ---------------------\e[0m\e\
    [0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling w"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        val m = l.head\n        val\
    \ i = 1 // index of current element\n        val j = n - 1 // index of next element\n\
    \        val k = 1 // index of previous element\n        val l1 = l.tail\n   \
    \     val l2 = l1.tail\n        val l3 = l2.tail\n        val l4 = l3.tail\n \
    \       val l5 = l4.tail\n        val l6 = l5.tail\n        val l7 = l6.tail\n\
    \        val l8 = l7.tail\n        val l9 = l8.tail\n        val l10 = l9.tail\n\
    \        val l11 = l10.tail\n        val l12 = l11.tail\n        val l13 = l12.tail\n\
    \        val l14 = l13.tail\n        val l15 = l14.tail\n        val l16 = l15.tail\n\
    \        val l17 = l16.tail\n        val l18 = l17.tail\n        val l19 = l18.tail\n\
    \        val l20 = l19.tail\n        val l21 = l20.tail\n        val l22 = l21.tail\n\
    \        val l23 = l22.tail\n        val l24 = l23.tail\n        val l25 = l24.tail\n\
    \        val l26 = l25.tail\n        val l27 = l26.tail\n        val l28 = l27.tail\n\
    \        val l29 = l28.tail\n        val l30 = l29.tail\n        val l31 = l30.tail\n\
    \        val l32 = l31.tail\n        val l33 = l32.tail\n        val l34 = l33.tail\n\
    \        val l35 = l34.tail\n        val l36 = l35.tail\n        val l37 = l36.tail\n\
    \        val l38 = l37.tail\n        val l39 = l38.tail\n        val l40 = l39.tail\n\
    \        val l41 = l40.tail\n        val l42 = l41.tail\n        val l43 = l42.tail\n\
    \        val l44 = l43.tail\n        val l45 = l44.tail\n        val l46 = l45.tail\n\
    \        val l47 = l46.tail\n        val l48 = l47.tail\n        val l49 = l48.tail\n\
    \        val l50 = l49.tail\n        val l51 = l50.tail\n        val l52 = l51.tail\n\
    \        val l53 = l5\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpimtd3mos.scala:70:5\
    \ ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val i = l.tail.tail.head\n        val j = l.tail.tail.tail.head\n        val\
    \ k = l.tail.tail.tail.tail.head\n        val l = l.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.head\n        val n = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n       \
    \ val j = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n    \
    \    val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwqns61le.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwqns61le.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwqns61le.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwqns61le.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwqns61le.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val min = l.min\n        val max = l.max\n        val\
    \ l2 = l.toList\n        val l3 = l2.reverse\n        val l4 = l3.toList\n   \
    \     val l5 = l4.toList\n        val l6 = l5.toList\n        val l7 = l6.toList\n\
    \        val l8 = l7.toList\n        val l9 = l8.toList\n        val l10 = l9.toList\n\
    \        val l11 = l10.toList\n        val l12 = l11.toList\n        val l13 =\
    \ l12.toList\n        val l14 = l13.toList\n        val l15 = l14.toList\n   \
    \     val l16 = l15.toList\n        val l17 = l16.toList\n        val l18 = l17.toList\n\
    \        val l19 = l18.toList\n        val l20 = l19.toList\n        val l21 =\
    \ l20.toList\n        val l22 = l21.toList\n        val l23 = l22.toList\n   \
    \     val l24 = l23.toList\n        val l25 = l24.toList\n        val l26 = l25.toList\n\
    \        val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.toList\n        val l30 = l29.toList\n        val l31 = l30.toList\n   \
    \     val l32 = l31.toList\n        val l33 = l32.toList\n        val l34 = l33.toList\n\
    \        val l35 = l34.toList\n        val l36 = l35.toList\n        val l37 =\
    \ l36.toList\n        val l38 = l37.toList\n        val l39 = l38.toList\n   \
    \     val l40 = l39.toList\n        val l41 = l40.toList\n        val l42 = l41.toList\n\
    \        val l43 = l42.toList\n        val l44 = l43.toList\n        val l45 =\
    \ l44.toList\n        val l46 = l45.toList\n        val l47 = l46.toList\n   \
    \     val l48 = l47.toList\n        val l49 = l48.toList\n        val l50 = l49.toList\n\
    \        val l51 = l50.toList\n        val l52 = l51.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj58xgzbl.scala:65:5\
    \ ---------------------\e[0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minValue = l.min\n        val maxValue = l.max\n\
    \        val minIndex = 0\n        val maxIndex = 0\n        val minIndexInc =\
    \ false\n        val maxIndexInc = false\n        val minIndexDec = false\n  \
    \      val maxIndexDec = false\n        for (i <- 0 until l.size) {\n        \
    \    if (l(i) < minValue) {\n                minIndex = i\n                minValue\
    \ = l(i)\n            }\n            if (l(i) > maxValue) {\n                maxIndex\
    \ = i\n                maxValue = l(i)\n            }\n            if (l(i) ==\
    \ minValue) {\n                minIndexInc = true\n            }\n           \
    \ if (l(i) == maxValue) {\n                maxIndexInc = true\n            }\n\
    \            if (l(i) < minValue) {\n                minIndexDec = true\n    \
    \        }\n            if (l(i) > maxValue) {\n                maxIndexDec =\
    \ true\n            }\n        }\n        if (minIndexInc && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexDec && maxIndexDec) {\n\
    \            return true\n        }\n        if (minIndexInc && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexDec && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexInc && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexDec && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexInc && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexDec && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexInc && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexDec && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexInc && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexDec && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexInc && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexDec && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexInc && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexDec && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexInc && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexDec && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexInc && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexDec && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexInc && maxIndexInc) {\n\
    \            return true\n        }\n        if (minIndexDec && maxIndexInc) {\n\
    \            return true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpyz7yqjw0.scala:22:25 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                minIndex = i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val minIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpyz7yqjw0.scala:23:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                minValue\
    \ = l(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Reassignment to val minValue\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpyz7yqjw0.scala:26:25 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                maxIndex = i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpyz7yqjw0.scala:27:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                maxValue\
    \ = l(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Reassignment to val maxValue\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpyz7yqjw0.scala:30:28 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                minIndexInc = \e[31mtrue\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \        Reassignment to val minIndexInc\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpyz7yqjw0.scala:33:28 -----------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m                maxIndexInc = \e[31mtrue\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Reassignment to val maxIndexInc\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation a"
  stdout: ''
  timestamp: 1660009608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val l = l.tail.tail\n        if (l == Nil) true\n        else if (m > n) monotonic(l)\n\
    \        else monotonic(l)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpf33o_jd2.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.tail.tail\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009606
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        if (m.toLong\
    \ < n.head.toLong)\n            monotonic(l)\n        else if (m.toLong > n.head.toLong)\n\
    \            monotonic(l)\n        else\n            monotonic(n.tail)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.sortWith(_ > _)\n        l1 == l3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxr7g0qhr.scala:18)\n\tat Problem.main(tmpxr7g0qhr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        if (m.toLong\
    \ < n.head.toLong)\n            monotonic(l)\n        else if (m.toLong > n.head.toLong)\n\
    \            monotonic(l)\n        else\n            monotonic(n.tail)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n      \
    \  val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd8m2yyi4.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpd8m2yyi4.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minValue = l.min\n        val maxValue = l.max\n\
    \        val minIndex = 0\n        val maxIndex = 0\n        val minIndexValue\
    \ = l.head\n        val maxIndexValue = l.head\n        val minIndexIndex = -1\n\
    \        val maxIndexIndex = -1\n        val minIndexValue = l.head\n        val\
    \ maxIndexValue = l.head\n        val minIndexIndex = -1\n        val maxIndexIndex\
    \ = -1\n        val minIndexValue = l.head\n        val maxIndexValue = l.head\n\
    \        val minIndexIndex = -1\n        val maxIndexIndex = -1\n        val minIndexValue\
    \ = l.head\n        val maxIndexValue = l.head\n        val minIndexIndex = -1\n\
    \        val maxIndexIndex = -1\n        val minIndexValue = l.head\n        val\
    \ maxIndexValue = l.head\n        val minIndexIndex = -1\n        val maxIndexIndex\
    \ = -1\n        val minIndexValue = l.head\n        val maxIndexValue = l.head\n\
    \        val minIndexIndex = -1\n        val maxIndexIndex = -1\n        val minIndexValue\
    \ = l.head\n        val maxIndexValue = l.head\n        val minIndexIndex = -1\n\
    \        val maxIndexIndex = -1\n        val minIndexValue = l.head\n        val\
    \ maxIndexValue = l.head\n        val minIndexIndex = -1\n        val maxIndexIndex\
    \ = -1\n        val minIndexValue = l.head\n        val maxIndexValue = l.head\n\
    \        val minIndexIndex = -1\n        val maxIndexIndex = -1\n        val minIndexValue\
    \ = l.head\n        val maxIndexValue = l.head\n        val minIndexIndex = -1\n\
    \        val maxIndexIndex = -1\n        val minIndexValue = l.head\n        val\
    \ maxIndexValue = l.head\n        val minIndexIndex = -1\n        val maxIndexIndex\
    \ = -1\n        val minIndexValue = l.head\n        val maxIndexValue = l.head\n\
    \        val minIndexIndex = -1\n        val maxIndexIndex = -1\n        val minIndexValue\
    \ = l.head\n        val maxIndexValue = l.head\n        val minIndexIndex = -1\n\
    \        val maxIndexIndex = -1\n        val minIndexValue = l.head\n        val\
    \ maxIndexValue = l.head\n        val minIndexIndex = -1\n        val maxIndexIndex\
    \ = -1\n        val minIndexValue = l.head\n        val maxIndexValue = l.head\n\
    \        val minIndexIndex = -1\n        val maxIndexIndex = -1\n        val minIndexValue\
    \ = l.head\n        val maxIndexValue = l.head\n        val minIndexIndex = -1\n\
    \        val maxIndexIndex = -1\n        val minIndexValue = l.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0jpzyuws.scala:81:4 ----------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0jpzyuws.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mminIndexValue\e[0m = l.head\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminIndexValue\
    \ is already defined as \e[33mvalue\e[0m \e[35mminIndexValue\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0jpzyuws.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexValue\e[0m = l.head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexValue is already defined as \e[33mvalue\e[0m \e[35mmaxIndexValue\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0jpzyuws.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mminIndexIndex\e[0m = -\e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mminIndexIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mminIndexIndex\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0jpzyuws.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmaxIndexIndex\e[0m = -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmaxIndexIndex is already defined as \e[33mvalue\e[0m \e[35mmaxIndexIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0jpzyuws.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minVal = l.head\n        val maxVal = l.last\n  \
    \      val minIndex = 0\n        val maxIndex = l.length - 1\n        val isIncreasing\
    \ = true\n        val isDecreasing = true\n        val isMonotonic = true\n  \
    \      val isIncreasingOrDecreasing = true\n        val isMonotonicOrIncreasing\
    \ = true\n        val isMonotonicOrDecreasing = true\n        val isMonotonicOrIncreasingOrDecreasing\
    \ = true\n        val isMonotonicOrIncreasingOrDecreasingOrMonotonic = true\n\
    \        val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing = true\n\
    \        val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrDecreasing = true\n\
    \        val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true\n        val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true\n        val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrDecreasing\
    \ = true\n        val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true\n        val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true\n        val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true\n        val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrDecre\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxnwk1vzm.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxnwk1vzm.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.forall(x\
    \ => x >= l1.last)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx3z_qtzq.scala:19)\n\tat Problem.main(tmpx3z_qtzq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.forall(l1.last.lt(l1.head))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp0infa1f.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        l4.forall(l1.last.lt(l1.head))\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ value lt is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.toList\n        val l34 =\
    \ l33.reverse\n        val l35 = l34.toList\n        val l36 = l35.reverse\n \
    \       val l37 = l36.toList\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.toList\n        val l44 =\
    \ l43.reverse\n        val l45 = l44.toList\n        val l46 = l45.reverse\n \
    \       val l47 = l46.toList\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.toList\n        val l54 =\
    \ l53.reverse\n\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfh8fjy4t.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n == 0) true\n        else\
    \ if (n == 1) false\n        else if (l.head < l.tail.head) monotonic(l.tail)\n\
    \        else monotonic(l.init) ++ monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj4adk2q2.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m monotonic(l.init) ++ monotonic(l.tail)\n\
    \e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \            value ++ is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1660009617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val l = l.tail.tail\n        if (m > n) monotonic(l)\n        else m <= n &&\
    \ monotonic(l)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5opy_k1f.scala:14:16 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.tail.tail\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.length\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        var l1 = l(0)\n       \
    \ var l2 = l(0)\n        var l3 = l(0)\n        var l4 = l(0)\n        var l5\
    \ = l(0)\n        var l6 = l(0)\n        var l7 = l(0)\n        var l8 = l(0)\n\
    \        var l9 = l(0)\n        var l10 = l(0)\n        var l11 = l(0)\n     \
    \   var l12 = l(0)\n        var l13 = l(0)\n        var l14 = l(0)\n        var\
    \ l15 = l(0)\n        var l16 = l(0)\n        var l17 = l(0)\n        var l18\
    \ = l(0)\n        var l19 = l(0)\n        var l20 = l(0)\n        var l21 = l(0)\n\
    \        var l22 = l(0)\n        var l23 = l(0)\n        var l24 = l(0)\n    \
    \    var l25 = l(0)\n        var l26 = l(0)\n        var l27 = l(0)\n        var\
    \ l28 = l(0)\n        var l29 = l(0)\n        var l30 = l(0)\n        var l31\
    \ = l(0)\n        var l32 = l(0)\n        var l33 = l(0)\n        var l34 = l(0)\n\
    \        var l35 = l(0)\n        var l36 = l(0)\n        var l37 = l(0)\n    \
    \    var l38 = l(0)\n        var l39 = l(0)\n        var l40 = l(0)\n        var\
    \ l41 = l(0)\n        var l42 = l(0)\n        var l43 = l(0)\n        var l44\
    \ = l(0)\n        var l45 = l(0)\n        var l46 = l(0)\n        var l47 = l(0)\n\
    \        var l48 = l(0)\n        var l49 = l(0)\n        var l50 = l(0)\n    \
    \    var l51 = l(0)\n        var l52 = l(0)\n        var l53 = l(0)\n        var\
    \ l54 = l(0)\n        var l55 = l(0)\n        var l56 = l(0)\n        var l57\
    \ = l(0)\n        var l58 = l(0)\n        var l59 = l(0)\n        var l60 = l(0)\n\
    \        var l61 = l(0)\n        var l62 = l(0)\n        var l63 = l(0)\n    \
    \    var l64 = l(0)\n        var l65 = l(0)\n        var l66 = l(0)\n        var\
    \ l67 = l(0)\n        var l68 = l(0)\n        var l69 = l(0)\n        var l70\
    \ = l(0)\n        var l71 = l(0)\n        var l72 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp08og8bg4.scala:88:17 ---------------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m        \e[33mvar\e[0m \e[36ml72\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp08og8bg4.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp08og8bg4.scala:89:5 ---------------------\e[0m\e[0m\n\e[31m89\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m1 = l.tail.tail.head\n        val n1 = l.tail.tail.tail.head\n        val\
    \ m2 = l.tail.tail.tail.tail.head\n        val n2 = l.tail.tail.tail.tail.tail.head\n\
    \        val m3 = l.tail.tail.tail.tail.tail.tail.head\n        val n3 = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m4 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ n4 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val m5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n5 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m9 = l.tail.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ob7jclj.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.toList\n        val l34 =\
    \ l33.reverse\n        val l35 = l34.toList\n        val l36 = l35.reverse\n \
    \       val l37 = l36.toList\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.toList\n        val l44 =\
    \ l43.reverse\n        val l45 = l44.toList\n        val l46 = l45.reverse\n \
    \       val l47 = l46.toList\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.toList\n        val l54 =\
    \ l53.reverse\n\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfh8fjy4t.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minValue = l.min\n        val maxValue = l.max\n\
    \        val minIndex = 0\n        val maxIndex = 0\n        val minDiff = Long.MaxValue\n\
    \        val maxDiff = Long.MinValue\n        val minMonotonic = l.foldLeft(false)((acc,\
    \ x) => {\n            if (acc && x > minValue) {\n                minDiff = x\
    \ - minValue\n                minIndex = l.indexOf(x)\n            }\n       \
    \     if (acc && x < maxValue) {\n                maxDiff = x - maxValue\n   \
    \             maxIndex = l.indexOf(x)\n            }\n            acc\n      \
    \  })\n        val maxMonotonic = l.foldLeft(false)((acc, x) => {\n          \
    \  if (acc && x > maxValue) {\n                maxDiff = x - maxValue\n      \
    \          maxIndex = l.indexOf(x)\n            }\n            if (acc && x <\
    \ minValue) {\n                minDiff = x - minValue\n                minIndex\
    \ = l.indexOf(x)\n            }\n            acc\n        })\n        minMonotonic\
    \ && maxMonotonic\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpoma5ikqb.scala:20:24 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                minDiff = x - minValue\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Reassignment to val minDiff\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpoma5ikqb.scala:21:25 -----------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m                minIndex = l.indexOf(x)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Reassignment to val minIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpoma5ikqb.scala:24:24 -----------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m                maxDiff = x - maxValue\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxDiff\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpoma5ikqb.scala:25:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                maxIndex\
    \ = l.indexOf(x)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val maxIndex\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpoma5ikqb.scala:31:24 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                maxDiff = x - maxValue\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Reassignment to val maxDiff\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpoma5ikqb.scala:32:25 -----------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                maxIndex = l.indexOf(x)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Reassignment t"
  stdout: ''
  timestamp: 1660009617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l1 = l.tail\n        val\
    \ l2 = l.head\n        val l3 = l.tail.tail\n        val l4 = l.tail.head\n  \
    \      val l5 = l.tail.tail.tail\n        val l6 = l.tail.tail.head\n        val\
    \ l7 = l.tail.tail.tail.tail\n        val l8 = l.tail.tail.tail.head\n       \
    \ val l9 = l.tail.tail.tail.tail.tail\n        val l10 = l.tail.tail.tail.tail.head\n\
    \        val l11 = l.tail.tail.tail.tail.tail.tail\n        val l12 = l.tail.tail.tail.tail.tail.head\n\
    \        val l13 = l.tail.tail.tail.tail.tail.tail.tail\n        val l14 = l.tail.tail.tail.tail.tail.tail.head\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail\n        val l16\
    \ = l.tail.tail.tail.tail.tail.tail.tail.head\n        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l18 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ l19 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val l20 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l21 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l22 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l23 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l24 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l25 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l26 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpicyotada.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpicyotada.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpicyotada.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val l1 = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n      \
    \  val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9_08hsua.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9_08hsua.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.reverse\n        val l10 = l9.toList\n        val l11 = l10.reverse\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.reverse\n        val l16 = l15.toList\n\
    \        val l17 = l16.reverse\n        val l18 = l17.toList\n        val l19\
    \ = l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n\
    \        val l22 = l21.toList\n        val l23 = l22.reverse\n        val l24\
    \ = l23.toList\n        val l25 = l24.reverse\n        val l26 = l25.toList\n\
    \        val l27 = l26.reverse\n        val l28 = l27.toList\n        val l29\
    \ = l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n\
    \        val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34\
    \ = l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n\
    \        val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39\
    \ = l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n\
    \        val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44\
    \ = l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n\
    \        val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49\
    \ = l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n\
    \        val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54\
    \ = l53.toList\n        val l55 = \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3r563302.scala:66:17 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36ml55\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3r563302.scala:67:5 ---------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val mn = l.tail.tail.head\n        val mx = l.tail.tail.tail.head\n        val\
    \ mx = l.tail.tail.tail.tail.head\n        val mn = l.tail.tail.tail.tail.tail.head\n\
    \        val mx = l.tail.tail.tail.tail.tail.tail.head\n        val mn = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mx = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ mn = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val mx = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mn = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mx = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mn = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mx = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mn = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mx = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mn = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mx = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmq9rz49k.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mmx\e[0m = l.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmx is already defined as \e[33mvalue\e[0m \e[35mmx\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmq9rz49k.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmn\e[0m = l.tail.tail.tail.tail.tail.head\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmn is already\
    \ defined as \e[33mvalue\e[0m \e[35mmn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmq9rz49k.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmx\e[0m = l.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmx is already defined as \e[33mvalue\e[0m \e[35mmx\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmq9rz49k.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmn\e[0m = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmn is already defined as \e[33mvalue\e[0m \e[35mmn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmq9rz49k.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mmx\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmx "
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortBy(-_)\n \
    \       val l3 = l2.reverse\n        val l4 = l3.sortBy(-_)\n        val l5 =\
    \ l4.sortBy(-_)\n        val l6 = l5.sortBy(-_)\n        val l7 = l6.sortBy(-_)\n\
    \        val l8 = l7.sortBy(-_)\n        val l9 = l8.sortBy(-_)\n        val l10\
    \ = l9.sortBy(-_)\n        val l11 = l10.sortBy(-_)\n        val l12 = l11.sortBy(-_)\n\
    \        val l13 = l12.sortBy(-_)\n        val l14 = l13.sortBy(-_)\n        val\
    \ l15 = l14.sortBy(-_)\n        val l16 = l15.sortBy(-_)\n        val l17 = l16.sortBy(-_)\n\
    \        val l18 = l17.sortBy(-_)\n        val l19 = l18.sortBy(-_)\n        val\
    \ l20 = l19.sortBy(-_)\n        val l21 = l20.sortBy(-_)\n        val l22 = l21.sortBy(-_)\n\
    \        val l23 = l22.sortBy(-_)\n        val l24 = l23.sortBy(-_)\n        val\
    \ l25 = l24.sortBy(-_)\n        val l26 = l25.sortBy(-_)\n        val l27 = l26.sortBy(-_)\n\
    \        val l28 = l27.sortBy(-_)\n        val l29 = l28.sortBy(-_)\n        val\
    \ l30 = l29.sortBy(-_)\n        val l31 = l30.sortBy(-_)\n        val l32 = l31.sortBy(-_)\n\
    \        val l33 = l32.sortBy(-_)\n        val l34 = l33.sortBy(-_)\n        val\
    \ l35 = l34.sortBy(-_)\n        val l36 = l35.sortBy(-_)\n        val l37 = l36.sortBy(-_)\n\
    \        val l38 = l37.sortBy(-_)\n        val l39 = l38.sortBy(-_)\n        val\
    \ l40 = l39.sortBy(-_)\n        val l41 = l40.sortBy(-_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp39l12ly6.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp39l12ly6.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmofek3mz.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmofek3mz.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val sorted = l.sortWith(_ <\
    \ _)\n        val last = sorted.last\n        val first = sorted.head\n      \
    \  val isIncreasing = last < first\n        val isDecreasing = first > last\n\
    \        isIncreasing || isDecreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxwmeur8z.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        if (m > n) true\n      \
    \  else if (m == n) false\n        else monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd72rcswz.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd72rcswz.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcgd_2ugj.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.last\n        val i\
    \ = l.indexOf(n)\n        val j = l.indexOf(m)\n        val k = l.indexOf(i)\n\
    \        if (i == j) true\n        else if (i == k) false\n        else if (j\
    \ == k) monotonic(l.drop(j))\n        else monotonic(l.drop(k))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ if (m > n) true\n        else if (m == n) monotonic(l.tail)\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwoc9bbvf.scala:19)\n\tat Problem.main(tmpwoc9bbvf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.sortWith(_ < _)\n        val\
    \ l12 = l11.sortWith(_ < _)\n        val l13 = l12.sortWith(_ < _)\n        val\
    \ l14 = l13.sortWith(_ < _)\n        val l15 = l14.sortWith(_ < _)\n        val\
    \ l16 = l15.sortWith(_ < _)\n        val l17 = l16.sortWith(_ < _)\n        val\
    \ l18 = l17.sortWith(_ < _)\n        val l19 = l18.sortWith(_ < _)\n        val\
    \ l20 = l19.sortWith(_ < _)\n        val l21 = l20.sortWith(_ < _)\n        val\
    \ l22 = l21.sortWith(_ < _)\n        val l23 = l22.sortWith(_ < _)\n        val\
    \ l24 = l23.sortWith(_ < _)\n        val l25 = l24.sortWith(_ < _)\n        val\
    \ l26 = l25.sortWith(_ < _)\n        val l27 = l26.sortWith(_ < _)\n        val\
    \ l28 = l27.sortWith(_ < _)\n        val l29 = l28.sortWith(_ < _)\n        val\
    \ l30 = l29.sortWith(_ < _)\n        val l31 = l30.sortWith(_ < _)\n        val\
    \ l32 = l31.sortWith(_ < _)\n        val l33 = l32.sortWith(_ < _)\n        val\
    \ l34 = l33.sortWith(_ < _)\n        val l35 = l34.sortWith(_ < _)\n        val\
    \ l36 = l35.sortWith(_ < _)\n        val l37 = l36.sortWith(_ < _)\n        val\
    \ l38 = l37.sortWith(_ < _)\n        val l39 = l38.sortWith(_ < _)\n        val\
    \ l\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdx_oomvm.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdx_oomvm.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdx_oomvm.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l2\
    \ = l.tail.tail\n        val l3 = l.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpndiesp24.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val sortedList = l.sorted\n        val first = sortedList.head\n\
    \        val last = sortedList.last\n        val isIncreasing = first < last\n\
    \        val isDecreasing = first > last\n        isIncreasing || isDecreasing\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgykeh_vo.scala:22)\n\tat Problem.main(tmpgykeh_vo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcgd_2ugj.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val m = l.head\n        val\
    \ n = l.last\n        val l1 = l.tail\n        val l2 = l.tail.reverse\n     \
    \   val l3 = l.tail.reverse.reverse\n        val l4 = l.tail.reverse.reverse.reverse\n\
    \        val l5 = l.tail.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0_day01g.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp0_day01g.scala:20:5 ---------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.toList\n        val l34 =\
    \ l33.reverse\n        val l35 = l34.toList\n        val l36 = l35.reverse\n \
    \       val l37 = l36.toList\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.toList\n        val l44 =\
    \ l43.reverse\n        val l45 = l44.toList\n        val l46 = l45.reverse\n \
    \       val l47 = l46.toList\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.toList\n        val l54 =\
    \ l53.reverse\n\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfh8fjy4t.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val i = l.tail.tail.head\n        val j = l.tail.tail.tail.head\n        val\
    \ k = l.tail.tail.tail.tail.head\n        val l = l.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.head\n        val n = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val j\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val j = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppx9x1got.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppx9x1got.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppx9x1got.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppx9x1got.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppx9x1got.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Erro"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n == 0) true\n        else\
    \ if (n == 1) false\n        else {\n            var i = 0\n            var j\
    \ = n - 1\n            var k = l(0)\n            var l = l(1)\n            while\
    \ (i < j) {\n                if (k < l) k = l\n                if (l < k) l =\
    \ k\n                i += 1\n                j -= 1\n            }\n         \
    \   if (l < k) true\n            else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpg2xgi2st.scala:19:20 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mvar\e[0m \e[36ml\e[0m = l(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m       \
    \             Recursive \e[33mvariable\e[0m \e[35ml\e[0m needs type\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.reverse\n        val l24 =\
    \ l23.toList\n        val l25 = l24.reverse\n        val l26 = l25.toList\n  \
    \      val l27 = l26.reverse\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdli_hhw0.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdli_hhw0.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdli_hhw0.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.length\n        val\
    \ m = l.head\n        val r = l.tail\n        val l1 = l.tail\n        val l2\
    \ = l.tail\n        val l3 = l.tail\n        val l4 = l.tail\n        val l5 =\
    \ l.tail\n        val l6 = l.tail\n        val l7 = l.tail\n        val l8 = l.tail\n\
    \        val l9 = l.tail\n        val l10 = l.tail\n        val l11 = l.tail\n\
    \        val l12 = l.tail\n        val l13 = l.tail\n        val l14 = l.tail\n\
    \        val l15 = l.tail\n        val l16 = l.tail\n        val l17 = l.tail\n\
    \        val l18 = l.tail\n        val l19 = l.tail\n        val l20 = l.tail\n\
    \        val l21 = l.tail\n        val l22 = l.tail\n        val l23 = l.tail\n\
    \        val l24 = l.tail\n        val l25 = l.tail\n        val l26 = l.tail\n\
    \        val l27 = l.tail\n        val l28 = l.tail\n        val l29 = l.tail\n\
    \        val l30 = l.tail\n        val l31 = l.tail\n        val l32 = l.tail\n\
    \        val l33 = l.tail\n        val l34 = l.tail\n        val l35 = l.tail\n\
    \        val l36 = l.tail\n        val l37 = l.tail\n        val l38 = l.tail\n\
    \        val l39 = l.tail\n        val l40 = l.tail\n        val l41 = l.tail\n\
    \        val l42 = l.tail\n        val l43 = l.tail\n        val l44 = l.tail\n\
    \        val l45 = l.tail\n        val l46 = l.tail\n        val l47 = l.tail\n\
    \        val l48 = l.tail\n        val l49 = l.tail\n        val l50 = l.tail\n\
    \        val l51 = l.tail\n        val l52 = l.tail\n        val l53 = l.tail\n\
    \        val l54 = l.tail\n        val l55 = l.tail\n        val l56 = l.tail\n\
    \        val l57 = l.tail\n        val l58 = l.tail\n        val l59 = l.tail\n\
    \        val l60 = l.tail\n        val l61 = l.tail\n        val l62 = l.tail\n\
    \        val l\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf_pxwl9k.scala:79:4 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpf_pxwl9k.scala:12:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_pxwl9k.scala:79:5\
    \ ---------------------\e[0m\e[0m\n\e[31m79 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        if (m > n) monotonic(l.tail)\
    \ else false\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe2csgxm6.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe2csgxm6.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l = l.sortWith(_ < _)\n\
    \        val l = l.drop(l.length-1)\n        l.head == l.last\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9q_hrboz.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_ <\
    \ _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9q_hrboz.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.drop(l.length-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp9q_hrboz.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.size\n        val\
    \ m = l.head\n        val r = l.tail\n        val r = r.tail\n        val m =\
    \ m.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val r\
    \ = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.to\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiwkt26yv.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiwkt26yv.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiwkt26yv.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiwkt26yv.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiwkt26yv.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiwkt26yv.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36"
  stdout: ''
  timestamp: 1660009625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        l3.forall(l1.last.lt(_))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdshch0_r.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        l3.forall(l1.last.lt(_))\n\e[31m\e[31m   |\e\
    [0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value lt\
    \ is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val m = l.head\n        val\
    \ n = l.last\n        val r = l.tail\n        val m = m.toLong\n        val n\
    \ = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.toLong\n        val\
    \ n = n.toLong\n        val r = r.toLong\n        val m = m.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb4plxb6u.scala:86:4 ----------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpb4plxb6u.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e\
    [0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpb4plxb6u.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb4plxb6u.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb4plxb6u.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb4plxb6u.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded me"
  stdout: ''
  timestamp: 1660009628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.last\n        val l1\
    \ = l.tail\n        val l2 = l.tail.reverse\n        val l3 = l.tail.reverse.reverse\n\
    \        val l4 = l.tail.reverse.reverse.reverse\n        val l5 = l.tail.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2pwn9g4a.scala:19:5\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val l2 = l.tail.tail\n        val m2 = m.toLong\n        val n2 = n.toLong\n\
    \        val l3 = l2.tail.tail\n        val m3 = m2.toLong\n        val n3 = n2.toLong\n\
    \        val l4 = l3.tail.tail\n        val m4 = m3.toLong\n        val n4 = n3.toLong\n\
    \        val l5 = l4.tail.tail\n        val m5 = m4.toLong\n        val n5 = n4.toLong\n\
    \        val l6 = l5.tail.tail\n        val m6 = m5.toLong\n        val n6 = n5.toLong\n\
    \        val l7 = l6.tail.tail\n        val m7 = m6.toLong\n        val n7 = n6.toLong\n\
    \        val l8 = l7.tail.tail\n        val m8 = m7.toLong\n        val n8 = n7.toLong\n\
    \        val l9 = l8.tail.tail\n        val m9 = m8.toLong\n        val n9 = n8.toLong\n\
    \        val l10 = l9.tail.tail\n        val m10 = m9.toLong\n        val n10\
    \ = n9.toLong\n        val l11 = l10.tail.tail\n        val m11 = m10.toLong\n\
    \        val n11 = n10.toLong\n        val l12 = l11.tail.tail\n        val m12\
    \ = m11.toLong\n        val n12 = n11.toLong\n        val l13 = l12.tail.tail\n\
    \        val m13 = m12.toLong\n        val n13 = n12.toLong\n        val l14 =\
    \ l13.tail.tail\n        val m14 = m13.toLong\n        val n14 = n13.toLong\n\
    \        val l15 = l14.tail.tail\n        val m15 = m14.toLong\n        val n15\
    \ = n14.toLong\n        val l16 = l15.tail.tail\n        val m16 = m15.toLong\n\
    \        val n16 = n15.toLong\n        val l17 = l16.tail.tail\n        val m17\
    \ = m16.toLong\n        val n17 = n16.toLong\n        val l18 = l17.tail.tail\n\
    \        val m18 = m17.toLong\n        val n18 = n17.toLong\n        val l19 =\
    \ l18.tail.tail\n        val m19 = m18.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpotg_z6da.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val m = l.head\n        val\
    \ n = l.last\n        val i = l.indexOf(n)\n        val j = l.indexOf(m)\n   \
    \     val k = l.indexOf(i)\n        val l = l.indexOf(0)\n        val m = l.indexOf(m)\n\
    \        val n = l.indexOf(n)\n        val i = l.indexOf(i)\n        val j = l.indexOf(j)\n\
    \        val k = l.indexOf(k)\n        val l = l.indexOf(0)\n        val m = l.indexOf(m)\n\
    \        val n = l.indexOf(n)\n        val i = l.indexOf(i)\n        val j = l.indexOf(j)\n\
    \        val k = l.indexOf(k)\n        val l = l.indexOf(0)\n        val m = l.indexOf(m)\n\
    \        val n = l.indexOf(n)\n        val i = l.indexOf(i)\n        val j = l.indexOf(j)\n\
    \        val k = l.indexOf(k)\n        val l = l.indexOf(0)\n        val m = l.indexOf(m)\n\
    \        val n = l.indexOf(n)\n        val i = l.indexOf(i)\n        val j = l.indexOf(j)\n\
    \        val k = l.indexOf(k)\n        val l = l.indexOf(0)\n        val m = l.indexOf(m)\n\
    \        val n = l.indexOf(n)\n        val i = l.indexOf(i)\n        val j = l.indexOf(j)\n\
    \        val k = l.indexOf(k)\n        val l = l.indexOf(0)\n        val m = l.indexOf(m)\n\
    \        val n = l.indexOf(n)\n        val i = l.indexOf(i)\n        val j = l.indexOf(j)\n\
    \        val k = l.indexOf(k)\n        val l = l.indexOf(0)\n        val m = l.indexOf(m)\n\
    \        val n = l.indexOf(n)\n        val i = l.indexOf(i)\n        val j = l.indexOf(j)\n\
    \        val k = l.indexOf(k)\n        val l = l.indexOf(0)\n        val m = l.indexOf(m)\n\
    \        val n = l.indexOf(n)\n        val i = l.indexOf(i)\n        val j = l.indexOf(j)\n\
    \        val k = l.indexOf(k)\n        val l = l.indexOf(0)\n        val m = l.indexOf(m)\n\
    \        val n = l.indexOf(n)\n        val i = l.indexOf(i)\n        val j = l.indexOf(j)\n\
    \        val k = l.indexOf(k)\n        val l = l.indexOf(0)\n        val m = l.indexOf(m)\n\
    \        val n = l.indexOf(n)\n        val i = l.indexOf(i)\n        val j = l.indexOf(j)\n\
    \        val k = l.indexOf(k)\n        val l = l.indexOf(0)\n        val m = l.indexOf(m)\n\
    \        val n = l.indexOf(n)\n        val i = l.indexOf(i)\n        val j = l.indexOf(j)\n\
    \        val k = l.indexOf(k)\n        val l = l.indexOf(0)\n        val m = \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3jo392mt.scala:85:15 ---------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = \n\e[31m\e[31m\
    \   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3jo392mt.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.indexOf(\e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3jo392mt.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.indexOf(m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already\
    \ defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3jo392mt.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.indexOf(n)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already\
    \ defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3jo392mt.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = l.indexOf(i)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already\
    \ defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3jo392mt.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e["
  stdout: ''
  timestamp: 1660009630
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.toList\n        val l4 = l3.sortWith(_ > _)\n        l4.forall(x\
    \ => x == l1.last)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowc14qu_.scala:19)\n\tat Problem.main(tmpowc14qu_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.sortWith(_ < _)\n        val l6 = l5.sortWith(_ < _)\n        val l7\
    \ = l6.sortWith(_ < _)\n        val l8 = l7.sortWith(_ < _)\n        val l9 =\
    \ l8.sortWith(_ < _)\n        val l10 = l9.sortWith(_ < _)\n        val l11 =\
    \ l10.sortWith(_ < _)\n        val l12 = l11.sortWith(_ < _)\n        val l13\
    \ = l12.sortWith(_ < _)\n        val l14 = l13.sortWith(_ < _)\n        val l15\
    \ = l14.sortWith(_ < _)\n        val l16 = l15.sortWith(_ < _)\n        val l17\
    \ = l16.sortWith(_ < _)\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.sortWith(_ < _)\n        val l20 = l19.sortWith(_ < _)\n        val l21\
    \ = l20.sortWith(_ < _)\n        val l22 = l21.sortWith(_ < _)\n        val l23\
    \ = l22.sortWith(_ < _)\n        val l24 = l23.sortWith(_ < _)\n        val l25\
    \ = l24.sortWith(_ < _)\n        val l26 = l25.sortWith(_ < _)\n        val l27\
    \ = l26.sortWith(_ < _)\n        val l28 = l27.sortWith(_ < _)\n        val l29\
    \ = l28.sortWith(_ < _)\n        val l30 = l29.sortWith(_ < _)\n        val l31\
    \ = l30.sortWith(_ < _)\n        val l32 = l31.sortWith(_ < _)\n        val l33\
    \ = l32.sortWith(_ < _)\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.sortWith(_ < _)\n        val l36 = l35.sortWith(_ < _)\n        val l37\
    \ = l36.sortWith(_ < _)\n        val l38 = l37.sortWith(_ < _)\n        val l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsx0fr80.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprsx0fr80.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprsx0fr80.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l1 = l.tail\n        val\
    \ l2 = l.init\n        val l3 = l.tail.tail\n        val l4 = l.init.init.tail\n\
    \        val l5 = l.tail.init.init.tail\n        val l6 = l.init.init.init.init.tail\n\
    \        val l7 = l.tail.init.init.init.init.tail\n        val l8 = l.init.init.init.init.init.init.tail\n\
    \        val l9 = l.tail.init.init.init.init.init.init.tail\n        val l10 =\
    \ l.init.init.init.init.init.init.init.init.tail\n        val l11 = l.tail.init.init.init.init.init.init.init.init.tail\n\
    \        val l12 = l.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l13 = l.tail.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l14 = l.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l15 = l.tail.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l16 = l.init.init.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l17 = l.tail.init.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l18 = l.init.init.init.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l19 = l.tail.init.init.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l20 = l.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l21 = l.tail.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l22 = l.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l23 = l.tail.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l24 = l.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l25 = l.tail.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l26 = l.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l27 = l.tail.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.init.tail\n\
    \        val l28 = \n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphepp1ot_.scala:40:17 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36ml28\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmphepp1ot_.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphepp1ot_.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0wvspsb.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcgd_2ugj.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l1 = l.tail\n        val\
    \ l2 = l.head\n        val l3 = l.tail.tail\n        val l4 = l.head.tail\n  \
    \      val l5 = l.tail.head\n        val l6 = l.tail.tail.head\n        val l7\
    \ = l.tail.tail.tail.head\n        val l8 = l.tail.tail.tail.tail.head\n     \
    \   val l9 = l.tail.tail.tail.tail.tail.head\n        val l10 = l.tail.tail.tail.tail.tail.tail.head\n\
    \        val l11 = l.tail.tail.tail.tail.tail.tail.tail.head\n        val l12\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l13 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l14 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l16 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l18 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l19 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l20 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l21 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp59cg1til.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp59cg1til.scala:34:5 ---------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009632
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ if (m > n) monotonic(l.tail) else monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmparzots6r.scala:13)\n\
    \tat Problem$.main(tmparzots6r.scala:17)\n\tat Problem.main(tmparzots6r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val l1 = l.tail\n        val l2 = l.tail.tail\n        val l3 = l.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val\
    \ l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val l10\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptuui8g9e.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptuui8g9e.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortBy(_)\n  \
    \      val l3 = l2.reverse\n        val l4 = l3.sortBy(_)\n        val l5 = l4.reverse\n\
    \        val l6 = l5.sortBy(_)\n        val l7 = l6.reverse\n        val l8 =\
    \ l7.sortBy(_)\n        val l9 = l8.reverse\n        val l10 = l9.sortBy(_)\n\
    \        val l11 = l10.reverse\n        val l12 = l11.sortBy(_)\n        val l13\
    \ = l12.reverse\n        val l14 = l13.sortBy(_)\n        val l15 = l14.reverse\n\
    \        val l16 = l15.sortBy(_)\n        val l17 = l16.reverse\n        val l18\
    \ = l17.sortBy(_)\n        val l19 = l18.reverse\n        val l20 = l19.sortBy(_)\n\
    \        val l21 = l20.reverse\n        val l22 = l21.sortBy(_)\n        val l23\
    \ = l22.reverse\n        val l24 = l23.sortBy(_)\n        val l25 = l24.reverse\n\
    \        val l26 = l25.sortBy(_)\n        val l27 = l26.reverse\n        val l28\
    \ = l27.sortBy(_)\n        val l29 = l28.reverse\n        val l30 = l29.sortBy(_)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortBy(_)\n        val l33\
    \ = l32.reverse\n        val l34 = l33.sortBy(_)\n        val l35 = l34.reverse\n\
    \        val l36 = l35.sortBy(_)\n        val l37 = l36.reverse\n        val l38\
    \ = l37.sortBy(_)\n        val l39 = l38.reverse\n        val l40 = l39.sortBy(_)\n\
    \        val l41 = l40.reverse\n        val l42 = l41.sortBy(_)\n        val l43\
    \ = l42.reverse\n        val l44 = l43.sortBy(_)\n        val l45 = l44.reverse\n\
    \        val l46 = l45.sortBy(_)\n        val l47 = l46.reverse\n        val l48\
    \ = l47.sortBy(_)\n        val l49 = l48.reverse\n        val l50 = l49.\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu7u1en9e.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpu7u1en9e.scala:13:29\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36ml2\e[0m = l1.sortBy(_)\n\e[31m\e[31m   |\e[0m         \
    \                    ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for Any..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmpu7u1en9e.scala:15:27 -----------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36ml4\e[0m = l3.sortBy(_)\n\e[31m\e[31m\
    \   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => l3.sortBy(_$2).\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpu7u1en9e.scala:17:27 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ml6\e[0m = l5.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => l5.sortBy(_$3).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpu7u1en9e.scala:19:27 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ml8\e[0m = l7.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => l7.sortBy(_$4).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpu7u1en9e.scala:21:28 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m     "
  stdout: ''
  timestamp: 1660009612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        val m = l.head\n        var\
    \ i = 2\n        var j = 1\n        var k = n - 1\n        var x = m\n       \
    \ var y = m\n        while (i < n) {\n            if (l(i) > x) {\n          \
    \      k = i\n                x = l(i)\n            }\n            i += 1\n  \
    \      }\n        while (j < n) {\n            if (l(j) < y) {\n             \
    \   k = j\n                y = l(j)\n            }\n            j += 1\n     \
    \   }\n        if (k == n) {\n            return true\n        }\n        if (k\
    \ > n) {\n            return false\n        }\n        if (k == 1) {\n       \
    \     return false\n        }\n        if (k == 2) {\n            return true\n\
    \        }\n        if (k == n - 1) {\n            return true\n        }\n  \
    \      if (k == n - 2) {\n            return false\n        }\n        if (k ==\
    \ n - 3) {\n            return true\n        }\n        if (k == n - 4) {\n  \
    \          return false\n        }\n        if (k == n - 5) {\n            return\
    \ true\n        }\n        if (k == n - 6) {\n            return false\n     \
    \   }\n        if (k == n - 7) {\n            return true\n        }\n       \
    \ if (k == n - 8) {\n            return false\n        }\n        if (k == n -\
    \ 9) {\n            return true\n        }\n        if (k == n - 10) {\n     \
    \       return false\n        }\n        if (k == n - 11) {\n            return\
    \ true\n        }\n        if (k == n - 12) {\n            return false\n    \
    \    }\n        if (k == n - 13) {\n            return true\n        }\n     \
    \   if (k == n - 14) {\n            return false\n        }\n        if (k ==\
    \ n - 15) {\n            return true\n        }\n        if (k == n - 16) {\n\
    \            return false\n        }\n        if (k == n - 17) {\n           \
    \ return true\n        }\n        if (k == n - 18) {\n            return false\n\
    \        }\n        if (k == n - 19) {\n            return true\n        }\n \
    \       if (k == n - 20) {\n            return false\n        }\n        if (k\
    \ == n - 21) {\n            return true\n        }\n        if (k == n - 22) {\n\
    \            return false\n        }\n        if (k == n - 23) {\n           \
    \ return true\n        }\n        if (k == n - 24) {\n            return false\n\
    \        }\n        if (k == n - 25) {\n            return true\n        }\n \
    \       if (k == n - 26) {\n            return false\n        }\n        if (k\
    \ == n - 27) {\n            return true\n        }\n        if (k == n - 28) {\n\
    \            return false\n        }\n        if (k == n - 29) {\n           \
    \ return true\n        }\n        if (k == n - 30) {\n            return false\n\
    \        }\n        if (k == n - 31) {\n            return true\n        }\n \
    \       if (k == n - 32) {\n            return false\n        }\n        if (k\
    \ == n - 33) {\n\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx_gbgudx.scala:156:0 ---------------------------\e\
    [0m\e[0m\n\e[31m156 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_gbgudx.scala:155:1\
    \ --------------------\e[0m\e[0m\n\e[31m155 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: Boolean\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpx_gbgudx.scala:144:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m144 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660009633
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.forall(x\
    \ => x == l1.last)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb9pafk28.scala:19)\n\tat Problem.main(tmpb9pafk28.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.foldLeft(0L) { (sum, e) =>\n            val\
    \ curr = sum + e\n            if (curr < e) sum + 1 else curr\n        }\n   \
    \     m == 0\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2mjl0il2.scala:19)\n\tat Problem.main(tmp2mjl0il2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val minValue = l.head\n        val maxValue = l.last\n\
    \        val minIndex = 0\n        val maxIndex = l.length - 1\n        val isIncreasing\
    \ = true\n        val isDecreasing = true\n        val isMonotonic = true\n  \
    \      for (i <- 0 until l.length) {\n            if (l(i) < minValue) {\n   \
    \             minIndex = i\n                minValue = l(i)\n            } else\
    \ if (l(i) > maxValue) {\n                maxIndex = i\n                maxValue\
    \ = l(i)\n            }\n            if (l(i) < minValue && l(i) > maxValue) {\n\
    \                isDecreasing = false\n            } else if (l(i) > minValue\
    \ && l(i) < maxValue) {\n                isIncreasing = false\n            }\n\
    \            if (l(i) == minValue && l(i) == maxValue) {\n                isMonotonic\
    \ = false\n            }\n        }\n        if (isIncreasing && isDecreasing\
    \ && isMonotonic) {\n            return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4diaqfid.scala:21:25 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                minIndex = i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val minIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4diaqfid.scala:22:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                minValue\
    \ = l(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Reassignment to val minValue\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp4diaqfid.scala:24:25 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                maxIndex = i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val maxIndex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp4diaqfid.scala:25:25\
    \ -----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                maxValue\
    \ = l(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                Reassignment to val maxValue\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmp4diaqfid.scala:28:29 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                isDecreasing = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Reassignment to val isDecreasing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp4diaqfid.scala:30:29 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                isIncreasing = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Reassignment to val isIncreasing\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer exp"
  stdout: ''
  timestamp: 1660009630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.forall(l1.last.lt(l1.head))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp0infa1f.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        l4.forall(l1.last.lt(l1.head))\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ value lt is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.forall(x\
    \ => x == l1.last)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb9pafk28.scala:19)\n\tat Problem.main(tmpb9pafk28.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val d = l.tail.tail.head\n        val r = l.tail.tail.tail.head\n        val\
    \ s = l.tail.tail.tail.tail.head\n        val t = l.tail.tail.tail.tail.tail.head\n\
    \        val u = l.tail.tail.tail.tail.tail.tail.head\n        val v = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val w = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val y =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n       \
    \ val z = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val a = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprcpx0j06.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprcpx0j06.scala:25:5 ---------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val i = l.tail.tail.head\n        val j = l.tail.tail.tail.head\n        val\
    \ k = l.tail.tail.tail.tail.head\n        val l = l.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.head\n        val n = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val j\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val n = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val j = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9fytkhbz.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9fytkhbz.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9fytkhbz.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9fytkhbz.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9fytkhbz.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mj is already defined as \e[33mvalue\e[0m \e[35mj\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Erro"
  stdout: ''
  timestamp: 1660009632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.sortWith(_ < _)\n        val l6 = l5.sortWith(_ < _)\n        val l7\
    \ = l6.sortWith(_ < _)\n        val l8 = l7.sortWith(_ < _)\n        val l9 =\
    \ l8.sortWith(_ < _)\n        val l10 = l9.sortWith(_ < _)\n        val l11 =\
    \ l10.sortWith(_ < _)\n        val l12 = l11.sortWith(_ < _)\n        val l13\
    \ = l12.sortWith(_ < _)\n        val l14 = l13.sortWith(_ < _)\n        val l15\
    \ = l14.sortWith(_ < _)\n        val l16 = l15.sortWith(_ < _)\n        val l17\
    \ = l16.sortWith(_ < _)\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.sortWith(_ < _)\n        val l20 = l19.sortWith(_ < _)\n        val l21\
    \ = l20.sortWith(_ < _)\n        val l22 = l21.sortWith(_ < _)\n        val l23\
    \ = l22.sortWith(_ < _)\n        val l24 = l23.sortWith(_ < _)\n        val l25\
    \ = l24.sortWith(_ < _)\n        val l26 = l25.sortWith(_ < _)\n        val l27\
    \ = l26.sortWith(_ < _)\n        val l28 = l27.sortWith(_ < _)\n        val l29\
    \ = l28.sortWith(_ < _)\n        val l30 = l29.sortWith(_ < _)\n        val l31\
    \ = l30.sortWith(_ < _)\n        val l32 = l31.sortWith(_ < _)\n        val l33\
    \ = l32.sortWith(_ < _)\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.sortWith(_ < _)\n        val l36 = l35.sortWith(_ < _)\n        val l37\
    \ = l36.sortWith(_ < _)\n        val l38 = l37.sortWith(_ < _)\n        val l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsx0fr80.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprsx0fr80.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprsx0fr80.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.foldLeft(0L) { (sum, e) =>\n            val\
    \ x = sum + e\n            if (x < 0) -(x) else x\n        }\n        m > 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp28b5n2h1.scala:21)\n\tat Problem.main(tmp28b5n2h1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val min = l.min\n        val max = l.max\n        val\
    \ minIndex : Int = l.indexOf(min)\n        val maxIndex : Int = l.indexOf(max)\n\
    \        val diff : Int = maxIndex - minIndex\n        if (diff == 0) true\n \
    \       else false\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmq9c4hq2.scala:21)\n\tat Problem.main(tmpmq9c4hq2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val m\
    \ = m.toLong\n        val n = n.toLong\n        if (m > n) true\n        else\
    \ if (m < n) false\n        else monotonic(n.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppfva74e_.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppfva74e_.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmppfva74e_.scala:16:14 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (m > n) \e[31mtrue\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e\
    [31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m  \
    \ |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e\
    [0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments ((n : List[Long]))\n\e\
    [31m\e[31m-- [E134] Type Error: /tmp/tmppfva74e_.scala:17:19 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (m < n) \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m<\e[0m in \e[33mclass\e[0m\
    \ \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e\
    [0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x:\
    \ Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short):\
    \ Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments\
    \ ((n : List[Long]))\n4 errors found\n"
  stdout: ''
  timestamp: 1660009632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l2\
    \ = l.tail.tail\n        val l3 = l.tail.tail.tail\n        val l4 = l.tail.tail.tail.tail\n\
    \        val l5 = l.tail.tail.tail.tail.tail.tail\n        val l6 = l.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n \
    \       val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpndiesp24.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.head\n        val l2 = l.tail.tail.head\n        val l3 = l.tail.tail.tail.head\n\
    \        val l4 = l.tail.tail.tail.tail.head\n        val l5 = l.tail.tail.tail.tail.tail.head\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.head\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l10 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l11 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n       \
    \ val l12 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l13 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l14 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l16 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l18 = l.tail.tail.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr4szdgi6.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr4szdgi6.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l = l.sortWith(_ < _)\n\
    \        val l = l.toList\n        val l = l.sortWith(_ > _)\n        l.forall(x\
    \ => x == l)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1kzt6bmg.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_ <\
    \ _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1kzt6bmg.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp1kzt6bmg.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_ > _)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already\
    \ defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1kzt6bmg.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val min = l.min\n        val\
    \ max = l.max\n        val isIncreasing = min < max\n        val isDecreasing\
    \ = max < min\n        isIncreasing || isDecreasing\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt1ou0hkf.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009633
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.foldLeft((0l, 0l)) {\n            case ((a,\
    \ b), x) => (if (x < a) (x, a) else (b, x))\n        }\n        val n = l.foldLeft((0l,\
    \ 0l)) {\n            case ((a, b), x) => (if (x > b) (x, b) else (b, x))\n  \
    \      }\n        (m._1 < n._1)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqpc0r39j.scala:25)\n\tat Problem.main(tmpqpc0r39j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        if (m.toLong\
    \ < n.head.toLong) monotonic(m)\n        else if (m.toLong > n.head.toLong) monotonic(n)\n\
    \        else true\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_sfel5_3.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (m.toLong\
    \ < n.head.toLong) monotonic(m)\n\e[31m\e[31m   |\e[0m                       \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \                    Found:    (m : Long)\n\e[31m   |\e[0m                   \
    \                             Required: List[Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val min = l.head\n        val max = l.last\n        val\
    \ mid = l.size / 2\n        val isIncreasing = true\n        val isDecreasing\
    \ = true\n        val isMonotonic = true\n        val isIncreasingOrDecreasing\
    \ = isIncreasing || isDecreasing\n        val isMonotonicOrIncreasing = isMonotonic\
    \ || isIncreasingOrDecreasing\n        val isMonotonicOrDecreasing = isMonotonic\
    \ || isDecreasingOrIncreasing\n        val isMonotonicOrIncreasingOrDecreasing\
    \ = isMonotonicOrIncreasing || isMonotonicOrDecreasing\n        val isMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = isMonotonicOrIncreasing || isMonotonicOrDecreasing || isMonotonic\n      \
    \  val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonic = isMonotonicOrIncreasing\
    \ || isMonotonicOrDecreasing || isMonotonic || isMonotonicOrMonotonic\n      \
    \  val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonic =\
    \ isMonotonicOrIncreasing || isMonotonicOrDecreasing || isMonotonic || isMonotonicOrMonotonic\
    \ || isMonotonicOrMonotonicOrMonotonic\n        val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = isMonotonicOrIncreasing || isMonotonicOrDecreasing || isMonotonic || isMonotonicOrMonotonic\
    \ || isMonotonicOrMonotonicOrMonotonic || isMonotonicOrMonotonicOrMonotonicOrMonotonic\n\
    \        val isMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = isMonotonicOrIncreasing || isMonotonicOrDecreasing || isMonotonic || isMonotonicOrMonotonic\
    \ || isMonotonicOrMonotonicOrMonotonic || isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\n\
    \        val isMonotonicOrIncreasingOrDecreasing\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuk75yoip.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuk75yoip.scala:20:53\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misMonotonicOrDecreasing\e[0m = isMonotonic || isDecreasingOrIncreasing\n\e\
    [31m\e[31m   |\e[0m                                                     ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: isDecreasingOrIncreasing\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuk75yoip.scala:23:141\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonic\e[0m = isMonotonicOrIncreasing\
    \ || isMonotonicOrDecreasing || isMonotonic || isMonotonicOrMonotonic\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \ ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \        Not found: isMonotonicOrMonotonic\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpuk75yoip.scala:24:152 -----------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonic\e\
    [0m = isMonotonicOrIncreasing || isMonotonicOrDecreasing || isMonotonic || isMonotonicOrMonotonic\
    \ || isMonotonicOrMonotonicOrMonotonic\n\e[31m\e[31m   |\e[0m                \
    \                                                                            \
    \                                                            ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Not found: isMonotonicOrMonotonic\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[3"
  stdout: ''
  timestamp: 1660009640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val mn = l.tail.tail.head\n        val mx = l.tail.tail.tail.head\n        val\
    \ mx = l.tail.tail.tail.tail.head\n        val mn = l.tail.tail.tail.tail.tail.head\n\
    \        val mx = l.tail.tail.tail.tail.tail.tail.head\n        val mn = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mx = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ mn = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val mx = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mn = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mx = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mn = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mx = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mn = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val mx = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpazmju93c.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpazmju93c.scala:16:12 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m \e[36mmx\e[0m = l.tail.tail.tail.tail.head\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mmx is already defined as \e[33mvalue\e[0m \e[35mmx\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpazmju93c.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmn\e[0m = l.tail.tail.tail.tail.tail.head\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmn is already\
    \ defined as \e[33mvalue\e[0m \e[35mmn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpazmju93c.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmx\e[0m = l.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmx is already defined as \e[33mvalue\e[0m \e[35mmx\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpazmju93c.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mmn\e[0m = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmn is already defined as \e[33mvalue\e[0m \e[35mmn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpazmju93c.scala:20:12 ---------------------------\e[0m\e"
  stdout: ''
  timestamp: 1660009640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0wvspsb.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        if (n == 0) true\n        else\
    \ {\n            val m = l.head\n            val i = 1 // index of current element\n\
    \            val j = n - 1 // index of next element\n            val k = 1 //\
    \ index of previous element\n            val l = 1 // index of next element\n\
    \            val m = l.head\n            val i = 1 // index of current element\n\
    \            val j = n - 1 // index of next element\n            val k = 1 //\
    \ index of previous element\n            val l = 1 // index of next element\n\
    \            val m = l.head\n            val i = 1 // index of current element\n\
    \            val j = n - 1 // index of next element\n            val k = 1 //\
    \ index of previous element\n            val l = 1 // index of next element\n\
    \            val m = l.head\n            val i = 1 // index of current element\n\
    \            val j = n - 1 // index of next element\n            val k = 1 //\
    \ index of previous element\n            val l = 1 // index of next element\n\
    \            val m = l.head\n            val i = 1 // index of current element\n\
    \            val j = n - 1 // index of next element\n            val k = 1 //\
    \ index of previous element\n            val l = 1 // index of next element\n\
    \            val m = l.head\n            val i = 1 // index of current element\n\
    \            val j = n - 1 // index of next element\n            val k = 1 //\
    \ index of previous element\n            val l = 1 // index of next element\n\
    \            val m = l.head\n            val i = 1 // index of current element\n\
    \            val j = n - 1 // index of next element\n            val k = 1 //\
    \ index of previous element\n            val l = 1 // index of next element\n\
    \            val m = l.head\n            val i = 1 // index of current element\n\
    \            val j = n - 1 // index of next element\n            val k = 1 //\
    \ index of previous element\n            val l = 1 // index of next element\n\
    \            val m = l.head\n            val i = 1 // index of current element\n\
    \            val j = n - 1 // index of next element\n            val k = 1 //\
    \ index of previous element\n            val l = 1 // index of next element\n\
    \            val m = l.head\n            val i = 1 // index of current element\n\
    \            val j = n - 1 // index of next element\n            val k = 1 //\
    \ index of previous element\n            val l = 1 // index of next element\n\
    \            val m = l.head\n            val i = 1 // index of current element\n\
    \            val j = n - 1 // index of next element\n            val k = 1 //\
    \ index of previous element\n            val l = 1 // index of next element\n\
    \            val m = l.head\n            val i = 1 // index of current element\n\
    \            val j = n - 1 // index of next element\n            \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5wrmzs_j.scala:87:0 ----------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5wrmzs_j.scala:20:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mm\e[0m = l.head\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5wrmzs_j.scala:21:16 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m            \e[33mval\e[0m \e[36mi\e[0m = \e[31m1\e[0m \e[34m// index\
    \ of current element\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mi is already defined as \e[33mvalue\e[0m \e[35mi\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5wrmzs_j.scala:22:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mj\e[0m = n - \e[31m1\e[0m \e[34m// index of next element\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mj is already defined\
    \ as \e[33mvalue\e[0m \e[35mj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5wrmzs_j.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mk\e[0m = \e[31m1\e[0m\
    \ \e[34m// index of previous element\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mk is already defined as \e[33mvalue\e[0m \e[35mk\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5wrmzs_j.scala:24:16 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m            \e[33mval\e[0m \e[36ml\e[0m = \e[31m1\e[0m \e[34m// index\
    \ of next element\e[0m\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1660009642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.sortWith(_ < _)\n        val\
    \ l12 = l11.sortWith(_ < _)\n        val l13 = l12.sortWith(_ < _)\n        val\
    \ l14 = l13.sortWith(_ < _)\n        val l15 = l14.sortWith(_ < _)\n        val\
    \ l16 = l15.sortWith(_ < _)\n        val l17 = l16.sortWith(_ < _)\n        val\
    \ l18 = l17.sortWith(_ < _)\n        val l19 = l18.sortWith(_ < _)\n        val\
    \ l20 = l19.sortWith(_ < _)\n        val l21 = l20.sortWith(_ < _)\n        val\
    \ l22 = l21.sortWith(_ < _)\n        val l23 = l22.sortWith(_ < _)\n        val\
    \ l24 = l23.sortWith(_ < _)\n        val l25 = l24.sortWith(_ < _)\n        val\
    \ l26 = l25.sortWith(_ < _)\n        val l27 = l26.sortWith(_ < _)\n        val\
    \ l28 = l27.sortWith(_ < _)\n        val l29 = l28.sortWith(_ < _)\n        val\
    \ l30 = l29.sortWith(_ < _)\n        val l31 = l30.sortWith(_ < _)\n        val\
    \ l32 = l31.sortWith(_ < _)\n        val l33 = l32.sortWith(_ < _)\n        val\
    \ l34 = l33.sortWith(_ < _)\n        val l35 = l34.sortWith(_ < _)\n        val\
    \ l36 = l35.sortWith(_ < _)\n        val l37 = l36.sortWith(_ < _)\n        val\
    \ l38 = l37.sortWith(_ < _)\n        val l39 = l38.sortWith(_ < _)\n        val\
    \ l\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdx_oomvm.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdx_oomvm.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdx_oomvm.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        if (m.toLong\
    \ > n.toLong)\n            monotonic(l)\n        else if (m.toLong < n.toLong)\n\
    \            monotonic(l)\n        else\n            true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp4bhjfko.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (m.toLong > n.toLong)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpp4bhjfko.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (m.toLong < n.toLong)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toLong is not a member of List[Long], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.size\n        val\
    \ m = l.head\n        val r = l.tail\n        val m = m.toLong\n        val r\
    \ = r.toLong\n        val l = r.head\n        val r = r.tail\n        val l =\
    \ l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val r\
    \ = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n        val\
    \ l = l.toLong\n        val r = r.toLong\n        val l = l.toLong\n        val\
    \ r = r.toLong\n        val l = l.toLong\n        val r = r.toLong\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp58uihg8.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp58uihg8.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp58uihg8.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = r.head\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp58uihg8.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp58uihg8.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp58uihg8.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mr\e["
  stdout: ''
  timestamp: 1660009642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        val m = m - n\n        if\
    \ (m > 0) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdthuw_ot.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdthuw_ot.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdthuw_ot.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m - n\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined as\
    \ \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val m = l.head\n        val\
    \ n = l.last\n        val x = l.tail\n        val y = l.init\n        val z =\
    \ l.tail.init\n        val a = l.tail.tail.init\n        val b = l.tail.tail.tail.init\n\
    \        val c = l.tail.tail.tail.tail.init\n        val d = l.tail.tail.tail.tail.tail.init\n\
    \        val e = l.tail.tail.tail.tail.tail.tail.init\n        val f = l.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val g = l.tail.tail.tail.tail.tail.tail.tail.tail.init\n        val h\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n        val i = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val j = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val k = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val l = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val n = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val o = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val p = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val q = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val r = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \        val s = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvhmatck3.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvhmatck3.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpvhmatck3.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.init\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpvhmatck3.scala:12:16 ---------------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m\
    \                ^\e[0m\n\e[31m   |\e[0m                Recursive \e[33mvalue\e\
    [0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvhmatck3.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found: "
  stdout: ''
  timestamp: 1660009642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.reverse\n        val l24 =\
    \ l23.toList\n        val l25 = l24.reverse\n        val l26 = l25.toList\n  \
    \      val l27 = l26.reverse\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdli_hhw0.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdli_hhw0.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdli_hhw0.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        l4.forall(x\
    \ => x >= l1.last)\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx3z_qtzq.scala:19)\n\tat Problem.main(tmpx3z_qtzq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        if (m.toLong\
    \ < n.toLong) {\n            monotonic(l)\n        } else if (m.toLong > n.toLong)\
    \ {\n            monotonic(l)\n        } else {\n            monotonic(l)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2pqm8r7h.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (m.toLong < n.toLong) {\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of List[Long], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2pqm8r7h.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (m.toLong > n.toLong)\
    \ {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toLong is not a member of List[Long], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val n = l.length\n        val m = l.head\n        val\
    \ maxi = n - 1\n        val mini = 0\n        var maxj = n - 1\n        var minij\
    \ = n - 1\n        var isIncreasing = true\n        var isDecreasing = true\n\
    \        var isMonotonic = true\n        var isIncreasing2 = true\n        var\
    \ isDecreasing2 = true\n        var isMonotonic2 = true\n        var isIncreasing3\
    \ = true\n        var isDecreasing3 = true\n        var isMonotonic3 = true\n\
    \        var isIncreasing4 = true\n        var isDecreasing4 = true\n        var\
    \ isMonotonic4 = true\n        var isIncreasing5 = true\n        var isDecreasing5\
    \ = true\n        var isMonotonic5 = true\n        var isIncreasing6 = true\n\
    \        var isDecreasing6 = true\n        var isMonotonic6 = true\n        var\
    \ isIncreasing7 = true\n        var isDecreasing7 = true\n        var isMonotonic7\
    \ = true\n        var isIncreasing8 = true\n        var isDecreasing8 = true\n\
    \        var isMonotonic8 = true\n        var isIncreasing9 = true\n        var\
    \ isDecreasing9 = true\n        var isMonotonic9 = true\n        var isIncreasing10\
    \ = true\n        var isDecreasing10 = true\n        var isMonotonic10 = true\n\
    \        var isIncreasing11 = true\n        var isDecreasing11 = true\n      \
    \  var isMonotonic11 = true\n        var isIncreasing12 = true\n        var isDecreasing12\
    \ = true\n        var isMonotonic12 = true\n        var isIncreasing13 = true\n\
    \        var isDecreasing13 = true\n        var isMonotonic13 = true\n       \
    \ var isIncreasing14 = true\n        var isDecreasing14 = true\n        var isMonotonic14\
    \ = true\n        var isIncreasing15 = true\n        var isDecreasing15 = true\n\
    \        var isMonotonic15 = true\n        var isIncreasing16 = true\n       \
    \ var isDecreasing16 = true\n        var isMonotonic16 = true\n        var isIncreasing17\
    \ = true\n        var isDecreasing17 = true\n        var isMonotonic17 = true\n\
    \        var isIncreasing18 = true\n        var isDecreasing18 = true\n      \
    \  var isMonotonic18 = true\n        var isIncreasing19 = true\n        var isDecreasing19\
    \ = true\n        var isMonotonic19 = true\n        var isIncreas\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd1s6o0cl.scala:76:4 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpd1s6o0cl.scala:76:5 ---------------------\e[0m\e[0m\n\e[31m76 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0wvspsb.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val m\
    \ = m.toLong\n        val n = n.toLong\n        if (m > n) true\n        else\
    \ if (m == n) false\n        else monotonic(n.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzj1lphba.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzj1lphba.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmpzj1lphba.scala:16:14 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (m > n) \e[31mtrue\e[0m\n\e[31m\e\
    [31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\
    \e[31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e\
    [31m   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m  \
    \ |\e[0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e\
    [0m (x: Byte): Boolean\n\e[31m   |\e[0mmatch arguments ((n : List[Long]))\n\e\
    [31m\e[31m-- Error: /tmp/tmpzj1lphba.scala:17:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (m == n) \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m    Values\
    \ of types Long and List[Long] cannot be compared with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1660009643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortBy(_)\n  \
    \      val l3 = l2.reverse\n        val l4 = l3.sortBy(_)\n        val l5 = l4.reverse\n\
    \        val l6 = l5.sortBy(_)\n        val l7 = l6.reverse\n        val l8 =\
    \ l7.sortBy(_)\n        val l9 = l8.reverse\n        val l10 = l9.sortBy(_)\n\
    \        val l11 = l10.reverse\n        val l12 = l11.sortBy(_)\n        val l13\
    \ = l12.reverse\n        val l14 = l13.sortBy(_)\n        val l15 = l14.reverse\n\
    \        val l16 = l15.sortBy(_)\n        val l17 = l16.reverse\n        val l18\
    \ = l17.sortBy(_)\n        val l19 = l18.reverse\n        val l20 = l19.sortBy(_)\n\
    \        val l21 = l20.reverse\n        val l22 = l21.sortBy(_)\n        val l23\
    \ = l22.reverse\n        val l24 = l23.sortBy(_)\n        val l25 = l24.reverse\n\
    \        val l26 = l25.sortBy(_)\n        val l27 = l26.reverse\n        val l28\
    \ = l27.sortBy(_)\n        val l29 = l28.reverse\n        val l30 = l29.sortBy(_)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortBy(_)\n        val l33\
    \ = l32.reverse\n        val l34 = l33.sortBy(_)\n        val l35 = l34.reverse\n\
    \        val l36 = l35.sortBy(_)\n        val l37 = l36.reverse\n        val l38\
    \ = l37.sortBy(_)\n        val l39 = l38.reverse\n        val l40 = l39.sortBy(_)\n\
    \        val l41 = l40.reverse\n        val l42 = l41.sortBy(_)\n        val l43\
    \ = l42.reverse\n        val l44 = l43.sortBy(_)\n        val l45 = l44.reverse\n\
    \        val l46 = l45.sortBy(_)\n        val l47 = l46.reverse\n        val l48\
    \ = l47.sortBy(_)\n        val l49 = l48.reverse\n        val l50 = l49.\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu7u1en9e.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpu7u1en9e.scala:13:29\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36ml2\e[0m = l1.sortBy(_)\n\e[31m\e[31m   |\e[0m         \
    \                    ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for Any..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmpu7u1en9e.scala:15:27 -----------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36ml4\e[0m = l3.sortBy(_)\n\e[31m\e[31m\
    \   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => l3.sortBy(_$2).\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpu7u1en9e.scala:17:27 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ml6\e[0m = l5.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => l5.sortBy(_$3).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpu7u1en9e.scala:19:27 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ml8\e[0m = l7.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$4 of expanded function:\n\e[31m   |\e[0m   _$4 => l7.sortBy(_$4).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpu7u1en9e.scala:21:28 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m     "
  stdout: ''
  timestamp: 1660009612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.last\n        val l1\
    \ = l.tail\n        val l2 = l.tail.reverse\n        val l3 = l.tail.reverse.reverse\n\
    \        val l4 = l.tail.reverse.reverse.reverse\n        val l5 = l.tail.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2pwn9g4a.scala:19:5\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.foldLeft(0l) { (sum, e) => sum + e }\n    \
    \    val n = l.foldRight(0l) { (sum, e) => sum + e }\n        m > n\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7fpsegct.scala:17)\n\tat Problem.main(tmp7fpsegct.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.tail\n        val l2 = l.tail.tail.tail\n        val l3 = l.tail.tail.tail.tail\n\
    \        val l4 = l.tail.tail.tail.tail.tail\n        val l5 = l.tail.tail.tail.tail.tail.tail\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.tail\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l10 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpri00qvxp.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpri00qvxp.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l1 = l.tail\n        val\
    \ l2 = l.head\n        val l3 = l.tail.tail\n        val l4 = l.head.head\n  \
    \      val l5 = l.tail.tail.tail\n        val l6 = l.head.head.head\n        val\
    \ l7 = l.tail.tail.tail.tail\n        val l8 = l.head.head.head.head\n       \
    \ val l9 = l.tail.tail.tail.tail.tail\n        val l10 = l.head.head.head.head.head\n\
    \        val l11 = l.tail.tail.tail.tail.tail.tail\n        val l12 = l.head.head.head.head.head.head\n\
    \        val l13 = l.tail.tail.tail.tail.tail.tail.tail\n        val l14 = l.head.head.head.head.head.head\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail\n        val l16\
    \ = l.head.head.head.head.head.head.head\n        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        val l18 = l.head.head.head.head.head.head.head.head\n        val l19\
    \ = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n        val l20\
    \ = l.head.head.head.head.head.head.head.head.head\n        val l21 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_00sl6yx.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_00sl6yx.scala:34:5 ---------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0wvspsb.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        if (m.toLong\
    \ < n.head.head) {\n            monotonic(m)\n        } else if (m.toLong > n.head.head)\
    \ {\n            monotonic(n)\n        } else {\n            if (m.toLong < n.head.tail.head)\
    \ {\n                monotonic(m)\n            } else if (m.toLong > n.head.tail.head)\
    \ {\n                monotonic(n)\n            } else {\n                monotonic(n.tail)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppm2b78bp.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (m.toLong < n.head.head) {\n\e\
    [31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                     value head is not a member of Long\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmppm2b78bp.scala:15:22 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            monotonic(m)\n\e[31m\e[31m   |\e[0m          \
    \            ^\e[0m\n\e[31m   |\e[0m                      Found:    (m : Long)\n\
    \e[31m   |\e[0m                      Required: List[Long]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppm2b78bp.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (m.toLong > n.head.head)\
    \ {\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value head is not a member of Long\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppm2b78bp.scala:19:34 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (m.toLong < n.head.tail.head)\
    \ {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value tail is not a member of Long\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppm2b78bp.scala:20:26 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                monotonic(m)\n\e[31m\e[31m   |\e[0m \
    \                         ^\e[0m\n\e[31m   |\e[0m                          Found:\
    \    (m : Long)\n\e[31m   |\e[0m                          Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppm2b78bp.scala:21:41\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m (m.toLong > n.head.tail.head) {\n\e[31m\e[31m   |\e[0m     \
    \                             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    value tail is not a member of Long\n6 errors found\n"
  stdout: ''
  timestamp: 1660009644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.reverse\n        val l24 =\
    \ l23.toList\n        val l25 = l24.reverse\n        val l26 = l25.toList\n  \
    \      val l27 = l26.reverse\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val l\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdli_hhw0.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdli_hhw0.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdli_hhw0.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.head\n        val l2 = l.tail.tail.head\n        val l3 = l.tail.tail.tail.head\n\
    \        val l4 = l.tail.tail.tail.tail.head\n        val l5 = l.tail.tail.tail.tail.tail.head\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.head\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l10 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l11 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n       \
    \ val l12 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l13 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l14 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l16 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l18 = l.tail.tail.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr4szdgi6.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr4szdgi6.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val l1 = l.tail.tail\n        if (m > n) monotonic(l1) else monotonic(l.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmpgy38p519.scala:12)\n\
    \tat Problem$.main(tmpgy38p519.scala:18)\n\tat Problem.main(tmpgy38p519.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ if (m > n) monotonic(l.tail) else monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.monotonic(tmparzots6r.scala:13)\n\
    \tat Problem$.main(tmparzots6r.scala:17)\n\tat Problem.main(tmparzots6r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.sortWith(_ < _)\n        val l6 = l5.sortWith(_ < _)\n        val l7\
    \ = l6.sortWith(_ < _)\n        val l8 = l7.sortWith(_ < _)\n        val l9 =\
    \ l8.sortWith(_ < _)\n        val l10 = l9.sortWith(_ < _)\n        val l11 =\
    \ l10.sortWith(_ < _)\n        val l12 = l11.sortWith(_ < _)\n        val l13\
    \ = l12.sortWith(_ < _)\n        val l14 = l13.sortWith(_ < _)\n        val l15\
    \ = l14.sortWith(_ < _)\n        val l16 = l15.sortWith(_ < _)\n        val l17\
    \ = l16.sortWith(_ < _)\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.sortWith(_ < _)\n        val l20 = l19.sortWith(_ < _)\n        val l21\
    \ = l20.sortWith(_ < _)\n        val l22 = l21.sortWith(_ < _)\n        val l23\
    \ = l22.sortWith(_ < _)\n        val l24 = l23.sortWith(_ < _)\n        val l25\
    \ = l24.sortWith(_ < _)\n        val l26 = l25.sortWith(_ < _)\n        val l27\
    \ = l26.sortWith(_ < _)\n        val l28 = l27.sortWith(_ < _)\n        val l29\
    \ = l28.sortWith(_ < _)\n        val l30 = l29.sortWith(_ < _)\n        val l31\
    \ = l30.sortWith(_ < _)\n        val l32 = l31.sortWith(_ < _)\n        val l33\
    \ = l32.sortWith(_ < _)\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.sortWith(_ < _)\n        val l36 = l35.sortWith(_ < _)\n        val l37\
    \ = l36.sortWith(_ < _)\n        val l38 = l37.sortWith(_ < _)\n        val l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsx0fr80.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprsx0fr80.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprsx0fr80.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.length\n        val\
    \ m = l.head\n        val r = l.tail\n        val m = m.toLong\n        val r\
    \ = r.toLong\n        if (n == 0) true\n        else if (n == 1) false\n     \
    \   else if (m > r) true\n        else if (m < r) false\n        else monotonic(l)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppa0irl10.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppa0irl10.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppa0irl10.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l = l.sortWith(_ < _)\n\
    \        val l = l.toList\n        val l = l.sortWith(_ > _)\n        l.forall(x\
    \ => x == 0 || x == l.last)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps79p0bhx.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_ <\
    \ _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps79p0bhx.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmps79p0bhx.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_ > _)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already\
    \ defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps79p0bhx.scala:12:16 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val n = l.size\n        val\
    \ m = l.head\n        val r = l.tail\n        val r = r.tail\n        val m =\
    \ m.toLong\n        val r = r.head.toLong\n        val l = l.head.toLong\n   \
    \     val r = r.tail.toLong\n        val r = r.tail.toLong\n        val l = l.tail.toLong\n\
    \        val r = r.tail.toLong\n        val l = l.tail.toLong\n        val r =\
    \ r.tail.toLong\n        val l = l.tail.toLong\n        val r = r.tail.toLong\n\
    \        val l = l.tail.toLong\n        val r = r.tail.toLong\n        val l =\
    \ l.tail.toLong\n        val r = r.tail.toLong\n        val l = l.tail.toLong\n\
    \        val r = r.tail.toLong\n        val l = l.tail.toLong\n        val r =\
    \ r.tail.toLong\n        val l = l.tail.toLong\n        val r = r.tail.toLong\n\
    \        val l = l.tail.toLong\n        val r = r.tail.toLong\n        val l =\
    \ l.tail.toLong\n        val r = r.tail.toLong\n        val l = l.tail.toLong\n\
    \        val r = r.tail.toLong\n        val l = l.tail.toLong\n        val r =\
    \ r.tail.toLong\n        val l = l.tail.toLong\n        val r = r.tail.toLong\n\
    \        val l = l.tail.toLong\n        val r = r.tail.toLong\n        val l =\
    \ l.tail.toLong\n        val r = r.tail.toLong\n        val l = l.tail.toLong\n\
    \        val r = r.tail.toLong\n        val l = l.tail.toLong\n        val r =\
    \ r.tail.toLong\n        val l = l.tail.toLong\n        val r = r.tail.toLong\n\
    \        val l = l.tail.toLong\n        val r = r.tail.toLong\n        val l =\
    \ l.tail.toLong\n        val r = r.tail.toLong\n        val l = l.tail.toLong\n\
    \        val r = r.tail.toLong\n        val l = l.tail.toLong\n        val r =\
    \ r.tail.toLong\n        val l = l.tail.toLong\n        val r = r.tail.toLong\n\
    \        val l = l.tail.toLong\n        val r = r.tail.toLong\n        val l =\
    \ l.tail.toLong\n        val r = r.tail.toLong\n        val l = l.tail.toLong\n\
    \        val r = r.tail.toLong\n        val l = l.tail.toLong\n        val r =\
    \ r.tail.toLong\n        val l = l.tail.toLong\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpa770y4w_.scala:77:11 ---------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpa770y4w_.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.tail\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already defined\
    \ as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa770y4w_.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa770y4w_.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.head.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mr is already\
    \ defined as \e[33mvalue\e[0m \e[35mr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa770y4w_.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.head.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already\
    \ defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa770y4w_.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = r.tail.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660009644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.reverse\n \
    \       val l22 = l21.toList\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.toList\n        val l34 =\
    \ l33.reverse\n        val l35 = l34.toList\n        val l36 = l35.reverse\n \
    \       val l37 = l36.toList\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.toList\n        val l44 =\
    \ l43.reverse\n        val l45 = l44.toList\n        val l46 = l45.reverse\n \
    \       val l47 = l46.toList\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.toList\n        val l54 =\
    \ l53.reverse\n\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfh8fjy4t.scala:67:5\
    \ ---------------------\e[0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009610
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail.head\n       \
    \ val m = m.toLong\n        val n = n.toLong\n        if (m > n) true\n      \
    \  else if (m < n) false\n        else monotonic(l.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps_nvcn6q.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = m.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvalue\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps_nvcn6q.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0wvspsb.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.reverse\n        val l12 = l11.sortWith(_\
    \ < _)\n        val l13 = l12.reverse\n        val l14 = l13.sortWith(_ < _)\n\
    \        val l15 = l14.reverse\n        val l16 = l15.sortWith(_ < _)\n      \
    \  val l17 = l16.reverse\n        val l18 = l17.sortWith(_ < _)\n        val l19\
    \ = l18.reverse\n        val l20 = l19.sortWith(_ < _)\n        val l21 = l20.reverse\n\
    \        val l22 = l21.sortWith(_ < _)\n        val l23 = l22.reverse\n      \
    \  val l24 = l23.sortWith(_ < _)\n        val l25 = l24.reverse\n        val l26\
    \ = l25.sortWith(_ < _)\n        val l27 = l26.reverse\n        val l28 = l27.sortWith(_\
    \ < _)\n        val l29 = l28.reverse\n        val l30 = l29.sortWith(_ < _)\n\
    \        val l31 = l30.reverse\n        val l32 = l31.sortWith(_ < _)\n      \
    \  val l33 = l32.reverse\n        val l34 = l33.sortWith(_ < _)\n        val l35\
    \ = l34.reverse\n        val l36 = l35.sortWith(_ < _)\n        val l37 = l36.reverse\n\
    \        val l38 = l37.sortWith(_ < _)\n        val l39 = l38.reverse\n      \
    \  val l40 = l39.sortWith(_ < _)\n        val l41 = l40.reverse\n        val l42\
    \ = l41.sortWith(_ < _)\n        val l43 = l42.reverse\n        val l44 = l43.sortWith(_\
    \ < _)\n        val l45 = l44.reverse\n        val l46 = l45\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0wvspsb.scala:58:5\
    \ ---------------------\e[0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l = l.sortWith(_ < _)\n\
    \        l.head < l.last\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw8p96yno.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortWith(_ <\
    \ _)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0ml is already defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw8p96yno.scala:12:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36ml\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Recursive \e[33mvalue\e[0m \e[35ml\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.reverse\n        val l4 = l3.reverse\n        val l5 = l4.reverse\n\
    \        val l6 = l5.reverse\n        val l7 = l6.reverse\n        val l8 = l7.reverse\n\
    \        val l9 = l8.reverse\n        val l10 = l9.reverse\n        val l11 =\
    \ l10.reverse\n        val l12 = l11.reverse\n        val l13 = l12.reverse\n\
    \        val l14 = l13.reverse\n        val l15 = l14.reverse\n        val l16\
    \ = l15.reverse\n        val l17 = l16.reverse\n        val l18 = l17.reverse\n\
    \        val l19 = l18.reverse\n        val l20 = l19.reverse\n        val l21\
    \ = l20.reverse\n        val l22 = l21.reverse\n        val l23 = l22.reverse\n\
    \        val l24 = l23.reverse\n        val l25 = l24.reverse\n        val l26\
    \ = l25.reverse\n        val l27 = l26.reverse\n        val l28 = l27.reverse\n\
    \        val l29 = l28.reverse\n        val l30 = l29.reverse\n        val l31\
    \ = l30.reverse\n        val l32 = l31.reverse\n        val l33 = l32.reverse\n\
    \        val l34 = l33.reverse\n        val l35 = l34.reverse\n        val l36\
    \ = l35.reverse\n        val l37 = l36.reverse\n        val l38 = l37.reverse\n\
    \        val l39 = l38.reverse\n        val l40 = l39.reverse\n        val l41\
    \ = l40.reverse\n        val l42 = l41.reverse\n        val l43 = l42.reverse\n\
    \        val l44 = l43.reverse\n        val l45 = l44.reverse\n        val l46\
    \ = l45.reverse\n        val l47 = l46.reverse\n        val l48 = l47.reverse\n\
    \        val l49 = l48.reverse\n        val l50 = l49.reverse\n        val l51\
    \ = l50.reverse\n        val l52 = l51.reverse\n        val l53 = l52.reverse\n\
    \        val l54 = l53.reverse\n        val l55 = l54.reverse\n        val l56\
    \ = l55.reverse\n        val l57 = l56.reverse\n        val l58 = \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoul__dyf.scala:69:17 ---------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m        \e[33mval\e[0m \e[36ml58\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoul__dyf.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val m = l.head\n        val n = l.tail\n        val l1\
    \ = l.tail.head\n        val l2 = l.tail.tail.head\n        val l3 = l.tail.tail.tail.head\n\
    \        val l4 = l.tail.tail.tail.tail.head\n        val l5 = l.tail.tail.tail.tail.tail.head\n\
    \        val l6 = l.tail.tail.tail.tail.tail.tail.head\n        val l7 = l.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l8 = l.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ l9 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l10 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val l11 =\
    \ l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n       \
    \ val l12 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l13 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l14 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l15 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l16 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l17 = l.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val l18 = l.tail.tail.tail.tail.tail.tail.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong,\
    \ 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsc126tam.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsc126tam.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.reverse\n    \
    \    val l3 = l2.toList\n        val l4 = l3.reverse\n        val l5 = l4.toList\n\
    \        val l6 = l5.toList\n        val l7 = l6.reverse\n        val l8 = l7.toList\n\
    \        val l9 = l8.toList\n        val l10 = l9.reverse\n        val l11 = l10.toList\n\
    \        val l12 = l11.toList\n        val l13 = l12.reverse\n        val l14\
    \ = l13.toList\n        val l15 = l14.toList\n        val l16 = l15.reverse\n\
    \        val l17 = l16.toList\n        val l18 = l17.toList\n        val l19 =\
    \ l18.reverse\n        val l20 = l19.toList\n        val l21 = l20.toList\n  \
    \      val l22 = l21.reverse\n        val l23 = l22.toList\n        val l24 =\
    \ l23.reverse\n        val l25 = l24.toList\n        val l26 = l25.reverse\n \
    \       val l27 = l26.toList\n        val l28 = l27.toList\n        val l29 =\
    \ l28.reverse\n        val l30 = l29.toList\n        val l31 = l30.reverse\n \
    \       val l32 = l31.toList\n        val l33 = l32.reverse\n        val l34 =\
    \ l33.toList\n        val l35 = l34.reverse\n        val l36 = l35.toList\n  \
    \      val l37 = l36.reverse\n        val l38 = l37.toList\n        val l39 =\
    \ l38.reverse\n        val l40 = l39.toList\n        val l41 = l40.reverse\n \
    \       val l42 = l41.toList\n        val l43 = l42.reverse\n        val l44 =\
    \ l43.toList\n        val l45 = l44.reverse\n        val l46 = l45.toList\n  \
    \      val l47 = l46.reverse\n        val l48 = l47.toList\n        val l49 =\
    \ l48.reverse\n        val l50 = l49.toList\n        val l51 = l50.reverse\n \
    \       val l52 = l51.toList\n        val l53 = l52.reverse\n        val l54 =\
    \ l53.toList\n        val \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmprl6dsei2.scala:66:11 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprl6dsei2.scala:67:5 ---------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l = l.toList\n        val l = l.sortBy(_)\n     \
    \   val l = l.toList\n        val l = l.sortBy(-_)\n        val l = l.toList\n\
    \        val l = l.sortBy(-_)\n        val l = l.toList\n        val l = l.sortBy(-_)\n\
    \        val l = l.toList\n        val l = l.sortBy(-_)\n        val l = l.toList\n\
    \        val l = l.sortBy(-_)\n        val l = l.toList\n        val l = l.sortBy(-_)\n\
    \        val l = l.toList\n        val l = l.sortBy(-_)\n        val l = l.toList\n\
    \        val l = l.sortBy(-_)\n        val l = l.toList\n        val l = l.sortBy(-_)\n\
    \        val l = l.toList\n        val l = l.sortBy(-_)\n        val l = l.toList\n\
    \        val l = l.sortBy(-_)\n        val l = l.toList\n        val l = l.sortBy(-_)\n\
    \        val l = l.toList\n        val l = l.sortBy(-_)\n        val l = l.toList\n\
    \        val l = l.sortBy(-_)\n        val l = l.toList\n        val l = l.sortBy(-_)\n\
    \        val l = l.toList\n        val l = l.sortBy(-_)\n        val l = l.toList\n\
    \        val l = l.sortBy(-_)\n        val l = l.toList\n        val l = l.sortBy(-_)\n\
    \        val l = l.toList\n        val l = l.sortBy(-_)\n        val l = l.toList\n\
    \        val l = l.sortBy(-_)\n        val l = l.toList\n        val l = l.sortBy(-_)\n\
    \        val l = l.toList\n        val l = l.sortBy(-_)\n        val l = l.toList\n\
    \        val l = l.sortBy(-_)\n        val l = l.toList\n        val l = l.sortBy(-_)\n\
    \        val l = l.toList\n        val l = l.sortBy(-_)\n        val l = l.toList\n\
    \        val l = l.sortBy(-_)\n        val l = l.toList\n        val l = l.sortBy(-_)\n\
    \        val l = l.toList\n        val l = l.sortBy(-_)\n        val l = l.toList\n\
    \        val l = l.sortBy(-_)\n        val l = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)))\
    \ == (true));\n    assert(monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong,\
    \ 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong, 20l.toLong,\
    \ 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjop1wlbz.scala:72:15 ---------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \n\e[31m\e[31m\
    \   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjop1wlbz.scala:13:12 ---------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortBy(_)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined as \e\
    [33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpjop1wlbz.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjop1wlbz.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortBy(-_)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already\
    \ defined as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjop1wlbz.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvalue\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjop1wlbz.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = l.sortBy(-_"
  stdout: ''
  timestamp: 1660009644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n\
    \    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong,\
    \ 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong,\
    \ 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long])\
    \ : Boolean = {\n        val l1 = l.toList\n        val l2 = l1.sortWith(_ < _)\n\
    \        val l3 = l2.reverse\n        val l4 = l3.sortWith(_ < _)\n        val\
    \ l5 = l4.reverse\n        val l6 = l5.sortWith(_ < _)\n        val l7 = l6.reverse\n\
    \        val l8 = l7.sortWith(_ < _)\n        val l9 = l8.reverse\n        val\
    \ l10 = l9.sortWith(_ < _)\n        val l11 = l10.sortWith(_ < _)\n        val\
    \ l12 = l11.sortWith(_ < _)\n        val l13 = l12.sortWith(_ < _)\n        val\
    \ l14 = l13.sortWith(_ < _)\n        val l15 = l14.sortWith(_ < _)\n        val\
    \ l16 = l15.sortWith(_ < _)\n        val l17 = l16.sortWith(_ < _)\n        val\
    \ l18 = l17.sortWith(_ < _)\n        val l19 = l18.sortWith(_ < _)\n        val\
    \ l20 = l19.sortWith(_ < _)\n        val l21 = l20.sortWith(_ < _)\n        val\
    \ l22 = l21.sortWith(_ < _)\n        val l23 = l22.sortWith(_ < _)\n        val\
    \ l24 = l23.sortWith(_ < _)\n        val l25 = l24.sortWith(_ < _)\n        val\
    \ l26 = l25.sortWith(_ < _)\n        val l27 = l26.sortWith(_ < _)\n        val\
    \ l28 = l27.sortWith(_ < _)\n        val l29 = l28.sortWith(_ < _)\n        val\
    \ l30 = l29.sortWith(_ < _)\n        val l31 = l30.sortWith(_ < _)\n        val\
    \ l32 = l31.sortWith(_ < _)\n        val l33 = l32.sortWith(_ < _)\n        val\
    \ l34 = l33.sortWith(_ < _)\n        val l35 = l34.sortWith(_ < _)\n        val\
    \ l36 = l35.sortWith(_ < _)\n        val l37 = l36.sortWith(_ < _)\n        val\
    \ l38 = l37.sortWith(_ < _)\n        val l39 = l38.sortWith(_ < _)\n        val\
    \ l\n    }\n    def main(args: Array[String]) = {\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 10l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 4l.toLong, 20l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 20l.toLong, 4l.toLong, 10l.toLong))) == (false));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 0l.toLong, -10l.toLong))) == (true));\n    assert(monotonic((List[Long](4l.toLong,\
    \ 1l.toLong, 1l.toLong, 0l.toLong))) == (true));\n    assert(monotonic((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 60l.toLong))) == (false));\n   \
    \ assert(monotonic((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 60l.toLong))) == (true));\n    assert(monotonic((List[Long](9l.toLong, 9l.toLong,\
    \ 9l.toLong, 9l.toLong))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdx_oomvm.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdx_oomvm.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdx_oomvm.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799932
