name: HumanEval_16_count_distinct_characters
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"))\n    // (3l)\n\
  \    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n    def countDistinctCharacters(string\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
  \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
  abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
  )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n\
  \    }\n\n}\n"
completions: ["        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        val distinctCount\
    \ = counts.foldLeft(0L)((a, b) => a + b)\n        distinctCount", "        val\
    \ chars = string.map(_.toLower).toSet\n        chars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower).toSet\n   \
    \     chars.size", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        var distinctCharacterCount\
    \ = 0\n        for(character <- string) {\n            distinctCharacterCount\
    \ += if(character.toLowerCase == character) 1 else 0\n        }\n        distinctCharacterCount",
  "        val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ charsSet = chars.toSet\n        charsSet.size * (charsSet.size + 1) / 2", " \
    \       val chars = string.map(_.toLower).toSet\n        chars.size", "      \
    \  var charCount = 0\n        for(i <- 0 until string.length){\n            charCount\
    \ += string.charAt(i).toChar.map(_.toLowerCase + _.toUpperCase).count(_ == string.charAt(i))\n\
    \        }\n        charCount", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower).toSet\n   \
    \     chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toUpperCase).distinct\n        chars.size", " \
    \       val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        var charCount = 0\n        for(char <- string.toCharArray) {\n\
    \            charCount += string.count(_ == char)\n        }\n        charCount",
  "        val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ val chars = string.map(_.toLower).toSet\n        chars.size", "        val chars\
    \ = string.map(_.toLower)\n        val charCount = mutable.HashMap[Char, Int]()\n\
    \        chars.foreach(c => charCount(c) += 1)\n        charCount.size", "   \
    \     val chars = string.map(_.toLower).toSet\n        chars.toSeq.length", " \
    \       val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.length", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toList.distinct.length", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ val chars = string.map(_.toLower).toSet\n        chars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower).toSet\n   \
    \     chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size * (chars.size + 1)", "   \
    \     val chars = string.map(_.toLower).toSet\n        chars.size", "        val\
    \ chars = string.map(_.toLower)\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        val distinctChars = counts.map(_._2).sum\n        distinctChars", " \
    \       val chars = string.map(_.toLower).toSet\n        chars.size", "      \
    \  val chars = string.map(_.toLower).toSet\n        chars.size", "        val\
    \ chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size - 1)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.length", " \
    \       val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val charSet = chars.distinct\n        charSet.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.toSeq.length", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.length", "        val chars = string.map(_.toLower).toSet\n \
    \       chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val charsSet = chars.toSet\n        charsSet.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size + 1", "        val chars =\
    \ string.map(_.toLower)\n        val uniqueChars = chars.distinct\n        uniqueChars.size",
  "        val chars = string.map(_.toLower)\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        counts.foldLeft(0L)((acc, x) => acc + x._2)", "        val chars = string.map(_.toLower)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        counts.foldLeft(0L)(_\
    \ + _)", "        val chars = string.map(_.toLower).toSet\n        chars.size",
  "        val chars = string.map(_.toLower).toSet\n        chars.toList.distinct.size",
  "        val chars = string.map(_.toLower)\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        counts.map(_._2).sum", "        val chars = string.map(_.toLower)\n \
    \       val counts = chars.groupBy(identity).mapValues(_.length)\n        counts.foldLeft(0L)(_\
    \ + _)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size +\
    \ 1)", "        val chars = string.map(_.toLower).toSet\n        chars.size *\
    \ (chars.size + 1)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val charSet = chars.distinct\n        charSet.size", "        val chars\
    \ = string.map(_.toUpperCase).distinct\n        chars.length", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size", "        val chars = string.map(_.toLower)\n\
    \        val charsSet = chars.toSet\n        charsSet.size + 1", "        val\
    \ chars = string.map(_.toLower).toSet\n        chars.size * (chars.size + 1)",
  "        val chars = string.map(_.toLower)\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        counts.foldLeft(0L){ (count, item) => count + item._2 }", "        val\
    \ chars = string.map(_.toUpperCase)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val charCount = mutable.HashMap.empty[Char,\
    \ Int]\n        chars.foreach(c => charCount(c) += 1)\n        charCount.size",
  "        val chars = string.map(_.toUpperCase)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val counts = chars.groupBy(identity).mapValues(_.size)\n        val distinctCharacters\
    \ = counts.map(_._2).sum\n        distinctCharacters", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toList.distinct.length", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val charsSet = chars.toSet\n\
    \        charsSet.size", "        val chars = string.map(_.toLower)\n        val\
    \ charsSet = chars.toSet\n        charsSet.size // number of distinct characters",
  "        val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.length", "   \
    \     val chars = string.map(_.toLower)\n        val charSet = chars.toSet\n \
    \       charSet.size", "        val chars = string.map(_.toLower)\n        val\
    \ uniqueChars = chars.distinct\n        uniqueChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val charSet = chars.distinct\n        charSet.size",
  "        val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.length", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val charCount = mutable.HashMap.empty[Char, Long]\n        chars.foreach(c\
    \ => charCount(c) += 1)\n        charCount.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ - 1) / 2", "        val chars = string.map(_.toLower).toSet\n        chars.size",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val charSet = chars.distinct\n        charSet.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size * (chars.size + 1)", "   \
    \     val chars = string.map(_.toLower)\n        val counts = chars.groupBy(identity).mapValues(_.length)\n\
    \        counts.foldLeft(0l) { (acc, count) => (acc + count) }", "        var\
    \ distinctCharacterCount = 0\n        string.foreach(x => {\n            if (x.toLower\
    \ != x) {\n                distinctCharacterCount += 1\n            }\n      \
    \  })\n        distinctCharacterCount", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ val chars = string.map(_.toLower)\n        val charSet = chars.distinct\n  \
    \      charSet.size + 1", "        val chars = string.map(_.toLower)\n       \
    \ val distinctChars = chars.distinct\n        distinctChars.size", "        val\
    \ chars = string.map(_.toLower)\n        val counts = chars.groupBy(identity).mapValues(_.size)\n\
    \        val distinctCount = counts.map(_._2).sum\n        distinctCount", " \
    \       val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower).toSet\n        chars.size", "        val\
    \ chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower)\n        val counts = chars.groupBy(identity).mapValues(_.length)\n\
    \        counts.foldLeft(0L)(_ + _)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower)\n        val\
    \ charSet = chars.toSet\n        charSet.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.foldLeft(0L){ (acc,\
    \ c) => (acc + chars.count(_ == c)) }", "        val chars = string.map(_.toLower)\n\
    \        val uniqueChars = chars.distinct\n        uniqueChars.size", "      \
    \  val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size * (chars.size + 1)", "   \
    \     val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      var distinctCharacters = mutable.HashSet[Char]()\n        for (character\
    \ <- string.toCharArray) {\n            distinctCharacters += character\n    \
    \    }\n        distinctCharacters.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size + 1", "        val chars =\
    \ string.map(_.toLower).toSet\n        chars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower).toSet\n     \
    \   chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size + 1", "        var distinctCharacters = 0\n        var charArray\
    \ = string.toCharArray\n        for(i <- 0 until charArray.length){\n        \
    \    val currentChar = charArray(i)\n            if(charSet.contains(currentChar)){\n\
    \                distinctCharacters = distinctCharacters + 1\n            }\n\
    \        }\n        return distinctCharacters", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val uniqueChars = chars.distinct\n        uniqueChars.size", "      \
    \  val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower).toSet\n   \
    \     chars.size", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val charSet = chars.toSet\n        charSet.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.toSet.size + 1", "        val chars\
    \ = string.map(_.toLower)\n        val charsSet = chars.toSet\n        charsSet.size",
  "        val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size +\
    \ 1)", "        val chars = string.map(_.toLower)\n        val distinctChars =\
    \ chars.distinct\n        distinctChars.size", "        var distinctCharacters\
    \ = 0\n        for(character <- string.toCharArray) {\n            distinctCharacters\
    \ = distinctCharacters + string.count(_ == character)\n        }\n        distinctCharacters",
  "        val chars = string.map(_.toLower)\n        val charCount = mutable.HashMap[Char,\
    \ Long]()\n        for (c <- chars) {\n            charCount(c) += 1\n       \
    \ }\n        charCount.size", "        val chars = string.map(_.toLower)\n   \
    \     val counts = chars.groupBy(identity).mapValues(_.length)\n        val distinctChars\
    \ = counts.map(_._2).sum\n        distinctChars", "        val chars = string.map(_.toLower)\n\
    \        val charSet = chars.toSet\n        charSet.size ", "        val chars\
    \ = string.map(_.toLower)\n        val charSet = chars.distinct\n        charSet.size\
    \ + 1", "        val chars = string.map(_.toLower).toSet\n        chars.size *\
    \ (chars.size + 1)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower).toSet\n     \
    \   chars.size", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val charsSet = chars.toSet\n        charsSet.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.toList.distinct.length", "    \
    \    val chars = string.map(_.toLower)\n        val charsSet = chars.distinct\n\
    \        charsSet.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower).toSet\n        chars.size", "        val chars = string.map(_.toLower)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        val distinctCount\
    \ = counts.max\n        distinctCount", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toList.distinct.length", "        val chars = string.map(_.toLower)\n\
    \        val charCount = mutable.HashMap[Char, Long]()\n        for (c <- chars)\
    \ {\n            if (charCount.get(c) == null) {\n                charCount(c)\
    \ = 1\n            } else {\n                charCount(c) += 1\n            }\n\
    \        }\n        charCount.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower).toSet\n        chars.size", "       \
    \ val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        var count = 0\n        string.foreach {\
    \ char =>\n            val lowerChar = char.toLowerCase\n            if (lowerChar\
    \ != char) {\n                count += 1\n            }\n        }\n        count",
  "        val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.toList.distinct.length", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower)\n   \
    \     val distinctChars = chars.distinct\n        distinctChars.size", "     \
    \   val chars = string.map(_.toLower).toSet\n        chars.toSeq.length", "  \
    \      val chars = string.map(_.toLower)\n        val counts = chars.groupBy(identity).mapValues(_.length)\n\
    \        counts.foldLeft(0L)(_ + _)", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        var charCount = 0\n        var\
    \ charSet = mutable.HashSet[Char]()\n        for (c <- string) {\n           \
    \ charCount += 1\n            charSet += c\n        }\n        charSet.size",
  "        val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size * (chars.size + 1)", "        var count = 0L\n        for(i\
    \ <- 0 until string.length)\n            count += string.charAt(i).toLower.toCharArray.distinct().length\n\
    \        count", "        val chars = string.map(_.toLower)\n        val uniqueChars\
    \ = chars.distinct\n        uniqueChars.size"]
stop_tokens:
- "\n    }\n"
