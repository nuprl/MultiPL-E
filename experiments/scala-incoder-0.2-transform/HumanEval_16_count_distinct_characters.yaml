name: HumanEval_16_count_distinct_characters
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"))\n    // (3l)\n\
  \    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n    def countDistinctCharacters(string\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countDistinctCharacters((\"\
  \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
  abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
  )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n\
  \    }\n\n}\n"
completions: ["        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val counts = chars.groupBy(identity).mapValues(_.size)\n        val distinctCount\
    \ = counts.foldLeft(0L)((a, b) => a + b)\n        distinctCount", "        val\
    \ chars = string.map(_.toLower).toSet\n        chars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower).toSet\n   \
    \     chars.size", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        var distinctCharacterCount\
    \ = 0\n        for(character <- string) {\n            distinctCharacterCount\
    \ += if(character.toLowerCase == character) 1 else 0\n        }\n        distinctCharacterCount",
  "        val chars = string.map(_.toLower).toSet\n        chars.size * (chars.size\
    \ + 1)", "        val chars = string.map(_.toLower)\n        val distinctChars\
    \ = chars.distinct\n        distinctChars.size", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size", "  \
    \      val chars = string.map(_.toLower)\n        val distinctChars = chars.distinct\n\
    \        distinctChars.size", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ charsSet = chars.toSet\n        charsSet.size * (charsSet.size + 1) / 2", " \
    \       val chars = string.map(_.toLower).toSet\n        chars.size", "      \
    \  var charCount = 0\n        for(i <- 0 until string.length){\n            charCount\
    \ += string.charAt(i).toChar.map(_.toLowerCase + _.toUpperCase).count(_ == string.charAt(i))\n\
    \        }\n        charCount", "        val chars = string.map(_.toLower).toSet\n\
    \        chars.size", "        val chars = string.map(_.toLower)\n        val\
    \ distinctChars = chars.distinct\n        distinctChars.size", "        val chars\
    \ = string.map(_.toLower)\n        val distinctChars = chars.distinct\n      \
    \  distinctChars.size", "        val chars = string.map(_.toLower).toSet\n   \
    \     chars.size * (chars.size + 1)", "        val chars = string.map(_.toLower)\n\
    \        val distinctChars = chars.distinct\n        distinctChars.size"]
stop_tokens:
- "\n    }\n"
