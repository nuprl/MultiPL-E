name: HumanEval_3_below_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You're given a list of deposit and withdrawal operations on a bank account\
  \ that starts with\n    // zero balance. Your task is to detect if at any point\
  \ the balance of account fallls below zero, and\n    // at that point function should\
  \ return True. Otherwise it should return False.\n    // >>> belowZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong,\
  \ 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(belowZero((List[Long]()))\
  \ == (false));\n    assert(belowZero((List[Long](1l.toLong, 2l.toLong, -3l.toLong,\
  \ 1l.toLong, 2l.toLong, -3l.toLong))) == (false));\n    assert(belowZero((List[Long](1l.toLong,\
  \ 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
  \ -1l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
  \ == (false));\n    assert(belowZero((List[Long](1l.toLong, -1l.toLong, 2l.toLong,\
  \ -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -5l.toLong))) == (true));\n    assert(belowZero((List[Long](1l.toLong,\
  \ -2l.toLong, 2l.toLong, -2l.toLong, 5l.toLong, -5l.toLong, 4l.toLong, -4l.toLong)))\
  \ == (true));\n    }\n\n}\n"
completions: ["        val balance = operations.foldLeft(0l) { (acc, op) => acc +\
    \ op }\n        balance < 0", "        val balance = operations.reduce((a, b)\
    \ => a + b)\n        balance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (sum, op) => sum + op }\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0 && newBalance < 0", "        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0l) { (acc, op) => acc + op }\n        balance < 0", " \
    \       val balance = operations.foldLeft(0L){ (sum, op) => sum + op }\n     \
    \   balance < 0", "        val balance = operations.foldLeft(0l) { (acc, op) =>\
    \ acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (sum, operation) => sum + operation }\n        balance < 0", "        val\
    \ balance = operations.reduce((a, b) => a + b)\n        balance < 0", "      \
    \  val balance = operations.foldLeft(0L){ (acc, op) => acc + op }\n        balance\
    \ < 0", "        val balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val newBalance = operations.last\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0L) { (acc, op) =>\n            val newBalance\
    \ = acc + op\n            if (newBalance < 0L) newBalance else acc\n        }\n\
    \        balance < 0L", "        val balance = operations.last\n        val operations\
    \ = operations.dropRight(1)\n        val newBalance = operations.last\n      \
    \  val newOperations = operations.dropRight(1)\n        if (balance < 0l) true\n\
    \        else belowZero(newOperations)", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L)((acc, x)\
    \ => acc + x)\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0L){ (acc, op) => acc + op }\n        balance < 0", " \
    \       val balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val newBalance = operations.last\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0l) { (sum, operation) => sum + operation }\n\
    \        balance < 0", "        val balance = operations.last\n        val operations\
    \ = operations.dropRight(1)\n        val newBalance = operations.last\n      \
    \  val newOperations = operations.dropRight(1)\n        if (balance < 0 && newBalance\
    \ < 0) {\n            true\n        } else if (balance < 0 && newBalance > 0)\
    \ {\n            false\n        } else if (balance > 0 && newBalance < 0) {\n\
    \            false\n        } else if (balance > 0 && newBalance > 0) {\n    \
    \        belowZero(newOperations)\n        } else {\n            belowZero(newOperations)\n\
    \        }", "        val balance = operations.foldLeft(0L) { (sum, operation)\
    \ => sum + operation }\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L) { (acc,\
    \ op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        if (balance < 0L)\
    \ true\n        else if (newBalance < 0L) belowZero(newOperations)\n        else\
    \ false", "        val balance = operations.foldLeft(0L) { (sum, operation) =>\
    \ sum + operation }\n        balance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0L) true\n        else false", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.reduce((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ op) => acc + op)\n        balance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (sum, operation) => sum + operation }\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0l) { (acc, op) => acc + op }\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L){ (acc, op) => acc + op\
    \ }\n        balance < 0", "        val balance = operations.last\n        val\
    \ operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        val newOperations = operations.dropRight(1)\n        if (balance < 0L)\
    \ newBalance < 0L\n        else newBalance < 0L && belowZero(newOperations)",
  "        val balance = operations.reduceLeft((a, b) => a + b)\n        balance <\
    \ 0", "        val balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val newBalance = operations.last\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0l) { (acc, op) => acc + op }\n        balance\
    \ < 0", "        val balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val newBalance = operations.last\n        val newOperations = operations.dropRight(1)\n\
    \        if (balance < 0l) true\n        else belowZero(newOperations)", "   \
    \     val balance = operations.foldLeft(0L) { (acc, op) => acc + op }\n      \
    \  balance < 0", "        val balance = operations.foldLeft(0l) { (acc, op) =>\
    \ acc + op }\n        balance < 0", "        val balance = operations.last\n \
    \       val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0l) true\n        else false", "        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0L) { (sum, operation) => sum + operation }\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0l) { (acc, op) => acc + op\
    \ }\n        balance < 0", "        val balance = operations.foldLeft(0L){ (sum,\
    \ operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0l) { (acc, curr) => acc + curr }\n        balance < 0",
  "        val balance = operations.foldLeft(0L) { (sum, operation) => sum + operation\
    \ }\n        balance < 0", "        val balance = operations.foldLeft(0L){ (sum,\
    \ operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0L)((acc, op) => acc + op)\n        balance < 0", "  \
    \      val balance = operations.foldLeft(0L){ (acc, op) => acc + op }\n      \
    \  balance < 0", "        val balance = operations.foldLeft(0l) { (acc, op) =>\
    \ acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (sum, operation) => sum + operation }\n        balance < 0", "        val\
    \ balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val newBalance = operations.last\n        if (balance < 0l) true\n  \
    \      else false", "        val balance = operations.foldLeft(0L) { (acc, op)\
    \ => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val withdrawals = operations.takeWhile(_\
    \ > 0)\n        val deposits = operations.dropWhile(_ > 0)\n        withdrawals.forall(withdrawal\
    \ => balance - withdrawal < 0)", "        val balance = operations.foldLeft(0L)\
    \ { (sum, operation) => sum + operation }\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0L) { (sum, operation) => sum + operation }\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L)((acc, op)\
    \ => acc + op)\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, curr) => acc + curr }\n        balance < 0", "        val balance =\
    \ operations.foldLeft(0L) { (acc, op) => acc + op }\n        balance < 0", " \
    \       val balance = operations.foldLeft(0l) { (acc, op) => acc + op }\n    \
    \    balance < 0", "        val balance = operations.foldLeft(0l) { (acc, op)\
    \ => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (acc, op) =>\n            val newAcc = acc + op\n            if (newAcc < 0L)\
    \ newAcc\n            else newAcc\n        }\n        balance < 0L", "       \
    \ val balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val newBalance = operations.last\n        if (balance < 0L) true\n  \
    \      else false", "        val balance = operations.foldLeft(0l) { (acc, op)\
    \ =>\n            val newAcc = acc + op\n            if (newAcc < 0l) newAcc\n\
    \            else newAcc\n        }\n        balance < 0l", "        val balance\
    \ = operations.foldLeft(0L) { (sum, operation) => sum + operation }\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0l) { (sum, operation) => sum\
    \ + operation }\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0", "        val balance = operations.last\n        val operations\
    \ = operations.dropRight(1)\n        val newBalance = operations.last\n      \
    \  if (balance < 0l) true\n        else false", "        val balance = operations.foldLeft(0L){\
    \ (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (acc, op) =>\n            acc + (if (op < 0) -op\n                else op)\n\
    \        }\n        balance < 0", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L){ (acc, op)\
    \ => acc + op }\n        balance < 0", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0L)((acc, op) => acc + op)\n        balance < 0", "  \
    \      val balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val newBalance = operations.last\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0l) { (acc, op) => acc + op }\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L)((acc, op) => acc + op)\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L)((acc, op)\
    \ => acc + op)\n        balance < 0", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0", "        val balance = operations.reduceLeft((a, b) =>\
    \ a + b)\n        balance < 0", "        val balance = operations.last\n     \
    \   val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L){ (sum, operation)\
    \ => sum + operation }\n        balance < 0", "        val balance = operations.reduceLeft((a,\
    \ b) => a + b)\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, operation) => acc + operation }\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0l) { (acc, op) => acc + op }\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0l) { (acc, op) => acc + op\
    \ }\n        balance < 0", "        val balance = operations.foldLeft(0L){ (acc,\
    \ op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0L) { (acc, operation) => acc + operation }\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L) { (acc, op) => acc + op\
    \ }\n        balance < 0", "        val balance = operations.last\n        val\
    \ operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0l && newBalance < 0l) true\n        else false", "   \
    \     val balance = operations.reduceLeft((a, b) => a + b)\n        balance <\
    \ 0", "        val balance = operations.foldLeft(0L) { (sum, operation) => sum\
    \ + operation }\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0l) { (acc, op) => acc + op }\n        balance < 0", " \
    \       val balance = operations.foldLeft(0l) { (sum, operation) => sum + operation\
    \ }\n        balance < 0", "        val balance = operations.foldLeft(0L) { (acc,\
    \ op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0", "        val balance = operations.foldLeft(0l) { (acc,\
    \ op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (sum, operation) => sum + operation }\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0l) { (acc, op) => acc + op }\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L) { (sum, operation) => sum\
    \ + operation }\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ operation) => acc + operation)\n        balance < 0", "        val balance =\
    \ operations.foldLeft(0l) { (acc, operation) => acc + operation }\n        balance\
    \ < 0", "        val balance = operations.reduce((a, b) => a + b)\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L){ (acc, op) => acc + op\
    \ }\n        balance < 0", "        val balance = operations.foldLeft(0L) { (sum,\
    \ operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.last\n        val operations = operations.dropRight(1)\n      \
    \  val newBalance = operations.last\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0L) { (acc, op) => acc + op }\n        balance < 0", " \
    \       val balance = operations.foldLeft(0l) { (acc, op) => acc + op }\n    \
    \    balance < 0", "        val balance = operations.last\n        val operations\
    \ = operations.dropRight(1)\n        val newBalance = operations.last\n      \
    \  if (balance < 0L) true\n        else false", "        val balance = operations.foldLeft(0L){\
    \ (acc, op) =>\n            val newAcc = acc + op\n            if (newAcc < 0L)\
    \ newAcc\n            else newAcc\n        }\n        balance < 0L", "       \
    \ val balance = operations.foldLeft(0L) { (acc, operation) =>\n            acc\
    \ + (operation - operations.last)\n        }\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0L)((acc, op) => acc + op)\n        balance <\
    \ 0", "        val balance = operations.foldLeft(0L) { (acc, op) => acc + op }\n\
    \        balance < 0", "        val balance = operations.foldLeft(0l) { (acc,\
    \ op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (sum, operation) => sum + operation }\n        balance < 0", "        val\
    \ balance = operations.reduce((a, b) => a + b)\n        balance < 0", "      \
    \  val balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val newBalance = operations.last\n        if (balance < 0l) true\n  \
    \      else false", "        val balance = operations.foldLeft(0L){ (acc, op)\
    \ => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (sum, operation) => sum + operation }\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0l) { (acc, op) => acc + op }\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0l) { (acc, op) => acc + op\
    \ }\n        balance < 0", "        val balance = operations.foldLeft(0L){ (sum,\
    \ operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.last\n        val operations = operations.dropRight(1)\n      \
    \  val newBalance = operations.last\n        if (balance < 0l) true\n        else\
    \ false", "        val balance = operations.foldLeft(0l) { (acc, op) => acc +\
    \ op }\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (acc, op) =>\n            val newBalance = acc + op\n            if (newBalance\
    \ < 0L) newBalance else acc\n        }\n        balance < 0L", "        val balance\
    \ = operations.foldLeft(0L) { (acc, op) => acc + op }\n        balance < 0", " \
    \       val balance = operations.foldLeft(0l) { (acc, curr) => acc + curr }\n\
    \        balance < 0", "        val balance = operations.foldLeft(0L){ (acc, op)\
    \ => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0 && newBalance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (acc, op) =>\n            if (op < 0) -acc else acc\n        }\n        balance\
    \ < 0", "        val balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val newBalance = operations.last\n        if (balance < 0l) true\n  \
    \      else false", "        val balance = operations.foldLeft(0L){ (sum, operation)\
    \ => sum + operation }\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val balances = operations.map(_.toLong)\n\
    \        val zero = operations.last.toLong\n        val negativeBalances = balances.filter(x\
    \ => x < 0)\n        val positiveBalances = balances.filter(x => x >= 0)\n   \
    \     val negativeBalance = negativeBalances.last\n        val positiveBalance\
    \ = positiveBalances.last\n        val positiveBalanceDiff = positiveBalance -\
    \ zero\n        val negativeBalanceDiff = zero - negativeBalance\n        val\
    \ positiveBalanceDiffs = positiveBalanceDiff.zip(positiveBalances).filter(_._1\
    \ > _._1)\n        val negativeBalanceDiffs = negativeBalanceDiff.zip(negativeBalances).filter(_._1\
    \ < _._1)\n        val positiveBalanceDiffsCount = positiveBalanceDiffs.map(x\
    \ => x._2).size\n        val negativeBalanceDiffsCount = negativeBalanceDiffs.map(x\
    \ => x._2).size\n        val positiveBalanceDiffsCountMax = positiveBalanceDiffsCount.max\n\
    \        val negativeBalanceDiffsCountMax = negativeBalanceDiffsCount.max\n  \
    \      val positiveBalanceDiffsCountMin = positiveBalanceDiffsCount.min\n    \
    \    val negativeBalanceDiffsCountMin = negativeBalanceDiffsCount.min\n      \
    \  val positiveBalanceDiffsCountMinMax = positiveBalanceDiffsCount.min\n     \
    \   val negativeBalanceDiffsCountMinMax = negativeBalanceDiffsCount.min\n    \
    \    val positiveBalanceDiffsCountMinMaxMax = positiveBalanceDiffsCount.min\n\
    \        val negativeBalanceDiffsCountMinMaxMax = negativeBalanceDiffsCount.min\n\
    \        val positiveBalanceDiffsCountMinMaxMaxMax = positiveBalanceDiffsCount.min\n\
    \        val negativeBalanceDiffsCountMinMaxMaxMax = negativeBalanceDiffsCount.min\n\
    \        val positiveBalanceDiffsCountMinMaxMaxMaxMax = positiveBalanceDiffsCount.min\n\
    \        val negativeBalanceDiffsCountMinMaxMaxMaxMax = negativeBalanceDiffsCount.min\n\
    \        val positiveBalanceDiffsCountMinMaxMaxMaxMax = positiveBalanceDiffsCount.min\n\
    \        val negativeBalanceDiffsCountMinMaxMaxMaxMax = negativeBalanceDiffsCount.min\n\
    \        val positiveBalanceDiffsCountMinMaxMaxMaxMaxMax = positiveBalanceDiffsCount.min\n\
    \        val negativeBalanceDiffsCountMinMaxMaxMaxMaxMax = negativeBalanceDiffsCount.min\n\
    \        val positiveBalanceDiffsCountMinMaxMax", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val balances = operations.map(operation\
    \ => operation - balance)\n        balances.sum < 0", "        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.reduceLeft((a, b) => a + b)\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0L){ (sum, operation) => sum + operation }\n \
    \       balance < 0", "        val balance = operations.foldLeft(0L) { (sum, operation)\
    \ => sum + operation }\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0L){ (sum, operation) => sum + operation }\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L) { (acc, op) => acc + op\
    \ }\n        balance < 0", "        val balance = operations.last\n        val\
    \ operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0L) true\n        else false", "        val balance = operations.foldLeft(0L)\
    \ { (sum, operation) => sum + operation }\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0L){ (acc, op) => acc + op }\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0l) { (acc, op) => acc + op\
    \ }\n        balance < 0", "        val balance = operations.last\n        val\
    \ operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        if (balance < 0l) true\n        else false", "        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0L)((acc, curr) => acc + curr)\n        balance < 0",
  "        val balance = operations.foldLeft(0l) { (acc, op) => acc + op }\n     \
    \   balance < 0", "        val balance = operations.foldLeft(0L) { (acc, op) =>\
    \ acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L)((acc,\
    \ operation) => acc + operation)\n        balance < 0", "        val balance =\
    \ operations.foldLeft(0l) { (acc, op) => acc + op }\n        balance < 0", " \
    \       val balance = operations.foldLeft(0L) { (sum, operation) => sum + operation\
    \ }\n        balance < 0", "        val balance = operations.foldLeft(0l) { (acc,\
    \ op) => acc + op }\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val operationSum =\
    \ operations.sum\n        if (operationSum < balance)\n            false\n   \
    \     else\n            belowZero(operations)", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0 && newBalance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L)\
    \ { (sum, operation) => sum + operation }\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0l) { (acc, op) => acc + op }\n        balance\
    \ < 0", "        val balance = operations.last\n        val operations = operations.dropRight(1)\n\
    \        val newBalance = operations.last\n        balance < 0", "        val\
    \ balance = operations.foldLeft(0l) { (acc, op) => acc + op }\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L){ (sum, operation) => sum\
    \ + operation }\n        balance < 0", "        val balance = operations.last\n\
    \        val operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0", "        val balance = operations.foldLeft(0l) { (acc,\
    \ op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0l)\
    \ { (acc, op) => acc + op }\n        balance < 0", "        val balance = operations.foldLeft(0L){\
    \ (sum, operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0l) { (acc, op) => acc + op }\n        balance < 0", " \
    \       val balance = operations.foldLeft(0L) { (sum, operation) => sum + operation\
    \ }\n        balance < 0", "        val balance = operations.foldLeft(0L){ (sum,\
    \ operation) => sum + operation }\n        balance < 0", "        val balance\
    \ = operations.foldLeft(0L){ (sum, operation) => sum + operation }\n        balance\
    \ < 0", "        val balance = operations.foldLeft(0L){ (acc, op) => acc + op\
    \ }\n        balance < 0", "        val balance = operations.last\n        val\
    \ operations = operations.dropRight(1)\n        val newBalance = operations.last\n\
    \        balance < 0", "        val balance = operations.foldLeft(0l) { (acc,\
    \ op) => acc + op }\n        balance < 0"]
stop_tokens:
- "\n    }\n"
