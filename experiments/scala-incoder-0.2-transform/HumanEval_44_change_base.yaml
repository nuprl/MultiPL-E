name: HumanEval_44_change_base
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Change numerical base of input number x to base.\n    // return string representation\
  \ after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBase((8l),\
  \ (3l))\n    // (\"22\")\n    // >>> changeBase((8l), (2l))\n    // (\"1000\")\n\
  \    // >>> changeBase((7l), (2l))\n    // (\"111\")\n    def changeBase(x : Long,\
  \ base : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(changeBase((8l),\
  \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n\
  \    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
  \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
  )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
  \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
  \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
  \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
  \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
completions: ["        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ < 10) \"0\" + base.toString else base.toString\n        result", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits.mkString(\"\")\n        result + (if (digits.size ==\
    \ base.toInt) \"\" else s\"0\" * (base - digits.size))", "        val digits =\
    \ x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        val baseString = base.toString.reverse\n\
    \        val digitString = digits.mkString(\"\")\n        val result = baseString\
    \ + digitString\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.toUpperCase)", "        val digits =\
    \ x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = if (digits.isEmpty) \"\" else digits.head\n        result + (if (digits.tail.isEmpty)\
    \ \"\" else digits.tail.mkString(\"\"))", "        val baseDigits = base.toString.length\n\
    \        val digits = x.toString.length\n        val result = new StringBuilder(digits)\n\
    \        var i = 0\n        while (i < digits) {\n            val digit = x.toString.charAt(i)\n\
    \            val baseDigit = digit.charAt(0)\n            val newDigit = digit.charAt(digits.length\
    \ - 1)\n            val newBaseDigit = digit.charAt(digits.length - 2)\n     \
    \       if (baseDigit == newBaseDigit) {\n                result.append(newDigit)\n\
    \            } else {\n                val baseDigitIndex = baseDigits.toString.indexOf(newBaseDigit)\n\
    \                result.append(baseDigitIndex.toString.toInt)\n              \
    \  result.append(newDigit)\n            }\n            i += 1\n        }\n   \
    \     return result.toString", "        val str = x.toString.reverse\n       \
    \ val baseStr = str.toCharArray.takeWhile(c => c != '0').mkString\n        val\
    \ baseInt = base.toCharArray.map(c => c - '0').sum\n        val baseIntStr = (baseInt\
    \ / base).toString.reverse\n        val baseStrInt = baseStr.toCharArray.map(c\
    \ => c - '0').sum\n        val baseStrIntStr = (baseStrInt / base).toString.reverse\n\
    \        val baseStrIntStrStr = (baseStrIntStr / base).toString.reverse\n    \
    \    val baseStrIntStrStrStr = (baseStrIntStrStr / base).toString.reverse\n  \
    \      val baseStrIntStrStrStrStr = (baseStrIntStrStrStr / base).toString.reverse\n\
    \        val baseStrIntStrStrStrStrStr = (baseStrIntStrStrStrStrStr / base).toString.reverse\n\
    \        val baseStrIntStrStrStrStrStrStr = (baseStrIntStrStrStrStrStrStrStr /\
    \ base).toString.reverse\n        val baseStrIntStrStrStrStrStrStrStrStr = (baseStrIntStrStrStrStrStrStrStrStrStr\
    \ / base).toString.reverse\n        val baseStrIntStrStrStrStrStrStrStrStrStr\
    \ = (baseStrIntStrStrStrStrStrStrStrStrStrStrStr / base).toString.reverse\n  \
    \      val baseStrIntStrStrStrStrStrStrStrStrStrStrStrStr = (baseStrIntStrStrStrStrStrStrStrStrStrStrStrStrStr\
    \ / base).toString.reverse\n        val baseStrIntStrStrStrStrStrStrStrStrStrStrStrStrStrStr\
    \ = (baseStrIntStrStrStrStrStrStrStrStrStrStrStrStrStrStrStr / base).toString.reverse\n\
    \        val baseStrIntStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStr = (baseStrIntStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStr\
    \ / base).toString.reverse\n        val baseStrIntStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStr\
    \ = (baseStrIntStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStr\
    \ / base).toString.reverse\n        val baseStrIntStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStrStr\
    \ = (baseStrIntStrStrStrStrStrStrStrStrStrStrStrStrStrStr", "        var result\
    \ = \"\"\n        var remainder = x % base\n        var quotient = x / base\n\
    \        while (quotient > 0) {\n            result += quotient.toString.charAt(0)\n\
    \            quotient = quotient / base\n        }\n        if (remainder > 0)\
    \ {\n            result += remainder.toString.charAt(0)\n        }\n        return\
    \ result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = if (digits.isEmpty) \"\" else digits.reverse.mkString(\"\
    \")\n        result", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = digits.map(_.reverse).mkString(\"\")\n        result", " \
    \       val bases = List(\"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\")\n        val digits = List(\"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digitBase\
    \ = bases.zip(digits).map(x => x._1 -> x._2)\n        val digitBase2 = digitBase.map(x\
    \ => x._1 -> x._2.toLong)\n        val digitBase3 = digitBase2.map(x => x._1 ->\
    \ x._2.toLong)\n        val digitBase4 = digitBase3.map(x => x._1 -> x._2.toLong)\n\
    \        val digitBase5 = digitBase4.map(x => x._1 -> x._2.toLong)\n        val\
    \ digitBase6 = digitBase5.map(x => x._1 -> x._2.toLong)\n        val digitBase7\
    \ = digitBase6.map(x => x._1 -> x._2.toLong)\n        val digitBase8 = digitBase7.map(x\
    \ => x._1 -> x._2.toLong)\n        val digitBase9 = digitBase8.map(x => x._1 ->\
    \ x._2.toLong)\n        val digitBase10 = digitBase9.map(x => x._1 -> x._2.toLong)\n\
    \        val digitBase11 = digitBase10.map(x => x._1 -> x._2.toLong)\n       \
    \ val digitBase12 = digitBase11.map(x => x._1 -> x._2.toLong)\n        val digitBase13\
    \ = digitBase12.map(x => x._1 -> x._2.toLong)\n        val digitBase14 = digitBase13.map(x\
    \ => x._1 -> x._2.toLong)\n        val digitBase15 = digitBase14.map(x => x._1\
    \ -> x._2.toLong)\n        val digitBase16 = digitBase15.map(x => x._1 -> x._2.toLong)\n\
    \        val digitBase17 = digitBase16.map(x => x._1 -> x._2.toLong)\n       \
    \ val digitBase18 = digitBase17.map(x => x._1 -> x._2.toLong)\n        val digitBase19\
    \ = digitBase18.map(x => x._1 -> x._2.toLong)\n        val digitBase20 = digitBase19.map(x\
    \ => x._1 ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + (if (digits.tail.isEmpty) \"\" else digits.tail.mkString(\"\"))", "      \
    \  val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + digits.tail.foldLeft(\"\") { (result, digit) => digit + result }", "     \
    \   val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = digits reverse\n        result + (if (digits.isEmpty) \"\
    \" else \"0\" * (base - digits.length))", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val bases\
    \ = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    )\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = bases.zip(digits).map { case (base, digit) => digit + base\
    \ }\n        result.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else s\"0\" * (base - digits.size))", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = digits + digits.dropRight(base.toInt)\n        result +\
    \ (if (digits.isEmpty) \"\" else base.toChar)", "        val digits = x.toString.reverse\n\
    \        val digitLength = digits.length\n        val baseDigits = base.toString.reverse\n\
    \        val baseDigitLength = baseDigits.length\n        val result = new StringBuilder\n\
    \        var i = 0\n        while (i < digitLength) {\n            val digit =\
    \ digits.charAt(i)\n            val baseDigit = baseDigits.charAt(i)\n       \
    \     if (digit == baseDigit) {\n                result.append(digit)\n      \
    \      } else {\n                result.append(digit)\n                result.append(baseDigit)\n\
    \            }\n            i += 1\n        }\n        return result.toString",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.toLong)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.reverse.grouped(base.toInt).map(_.mkString).reverse)",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = digits match {\n            case \"\" => \"\"\n        \
    \    case x => x.reverse\n        }\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else s\"${digits.last}\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = base.toString.reverse\n\
    \        val resultString = result.takeWhile(_ != 0).reverse.mkString(\"\")\n\
    \        resultString + baseString.takeWhile(_ != 0).reverse", "        var result\
    \ = \"\"\n        var remainder = x % base\n        while(x > 0) {\n         \
    \   result += Integer.toString((x % base))\n            x /= base\n        }\n\
    \        if(remainder != 0) {\n            result += Integer.toString(remainder)\n\
    \        }\n        return result", "        val baseDigits = base.toString.toInt\n\
    \        val digits = x.toString.toInt\n        val result = \"\"\n        val\
    \ baseDigit = baseDigits.toInt\n        val digit = digits.toInt\n        while\
    \ (digit > 0) {\n            val digit = digit / baseDigit\n            result\
    \ += digit.toString\n        }\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val len = result.length\n\
    \        val zeros = len - result.length\n        val zeroChar = if (zeros ==\
    \ 0) \"0\" else \"\"\n        val result = zeroChar + result\n        result",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val bases = List(\"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = bases.zip(digits).map { case (base, digit) => digit + base\
    \ }\n        result.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toInt)\n\
    \        val result = digits.map(x => x.toString.reverse).mkString(\"\")\n   \
    \     result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + (if (digits.tail.isEmpty) \"\" else digits.tail.mkString(\"\"))", "      \
    \  val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base.toChar)", "        val baseDigits = base.toString.length\n  \
    \      val digits = x.toString.length\n        val result = new StringBuilder(digits)\n\
    \        var i = 0\n        while (i < digits) {\n            val digit = x.toString.charAt(i)\n\
    \            val digitBase = digit.toString.charAt(0)\n            if (digitBase\
    \ == baseDigits) {\n                result.append(digit)\n            } else {\n\
    \                val digitBaseDigit = digitBase - baseDigits\n               \
    \ if (digitBaseDigit < digit) {\n                    result.append(digit.toString.charAt(digitBaseDigit))\n\
    \                } else {\n                    result.append(digit.toString.charAt(digitBaseDigit\
    \ - digit))\n                }\n            }\n            i += 1\n        }\n\
    \        result.toString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.toInt)", "        var result = \"\"\n\
    \        var remainder = x % base\n        while (x > 0) {\n            if (x\
    \ % base == 0) {\n                result += remainder\n            }\n       \
    \     x /= base\n            remainder = x % base\n        }\n        result",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else \"0\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val len = result.length\n\
    \        val zeros = len - result.length\n        val zeroChar = if (zeros ==\
    \ 0) \"0\" else \"\"\n        val result = result + zeroChar\n        result",
  '        val bases = List("1", "10", "100", "1000", "10000", "100000", "1000000",
    "10000000", "100000000", "1000000000", "10000000000", "100000000000", "1000000000000",
    "10000000000000", "100000000000000", "1000000000000000", "10000000000000000",
    "100000000000000000", "1000000000000000000", "10000000000000000000", "100000000000000000000",
    "1000000000000000000000", "10000000000000000000000", "100000000000000000000000",
    "1000000000000000000000000", "10000000000000000000000000", "100000000000000000000000000",
    "1000000000000000000000000000", "10000000000000000000000000000", "100000000000000000000000000000",
    "1000000000000000000000000000000", "10000000000000000000000000000000", "100000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "1000000000000000000000000000000000",
    "1000000000000000000000000000000000", "1000000000000000000000000000000000", "100000000000000000000000000',
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        val digit = digits.last\n       \
    \ val digits = digits.dropRight(1)\n        val digit = digits.last\n        val\
    \ digits = digits.dropRight(1)\n        val digit = digits.last\n        val digits\
    \ = digits.dropRight(1)\n        val digit = digits.last\n        val digits =\
    \ digits.dropRight(1)\n        val digit = digits.last\n        val digits = digits.dropRight(1)\n\
    \        val digit = digits.last\n        val digits = digits.dropRight(1)\n \
    \       val digit = digits.last\n        val digits = digits.dropRight(1)\n  \
    \      val digit = digits.last\n        val digits = digits.dropRight(1)\n   \
    \     val digit = digits.last\n        val digits = digits.dropRight(1)\n    \
    \    val digit = digits.last\n        val digits = digits.dropRight(1)\n     \
    \   val digit = digits.last\n        val digits = digits.dropRight(1)\n      \
    \  val digit = digits.last\n        val digits = digits.dropRight(1)\n       \
    \ val digit = digits.last\n        val digits = digits.dropRight(1)\n        val\
    \ digit = digits.last\n        val digits = digits.dropRight(1)\n        val digit\
    \ = digits.last\n        val digits = digits.dropRight(1)\n        val digit =\
    \ digits.last\n        val digits = digits.dropRight(1)\n        val digit = digits.last\n\
    \        val digits = digits.dropRight(1)\n        val digit = digits.last\n \
    \       val digits = digits.dropRight(1)\n        val digit = digits.last\n  \
    \      val digits = digits.dropRight(1)\n        val digit = digits.last\n   \
    \     val digits = digits.dropRight(1)\n        val digit = digits.last\n    \
    \    val digits = digits.dropRight(1)\n        val digit = digits.last\n     \
    \   val digits = digits.dropRight(1)\n        val digit = digits.last\n      \
    \  val digits = digits.dropRight(1)\n        ", "        val baseString = base.toString\n\
    \        val baseInt = baseString.toInt\n        val x = x.toString.toInt\n  \
    \      val result = x.toString.toInt\n        val result = result / baseInt\n\
    \        val result = result * baseInt\n        val result = result + baseInt\n\
    \        val result = result + baseString\n        val result = result + baseString.toInt\n\
    \        val result = result + baseString.toInt\n        val result = result +\
    \ baseString.toInt\n        val result = result + baseString.toInt\n        val\
    \ result = result + baseString.toInt\n        val result = result + baseString.toInt\n\
    \        val result = result + baseString.toInt\n        val result = result +\
    \ baseString.toInt\n        val result = result + baseString.toInt\n        val\
    \ result = result + baseString.toInt\n        val result = result + baseString.toInt\n\
    \        val result = result + baseString.toInt\n        val result = result +\
    \ baseString.toInt\n        val result = result + baseString.toInt\n        val\
    \ result = result + baseString.toInt\n        val result = result + baseString.toInt\n\
    \        val result = result + baseString.toInt\n        val result = result +\
    \ baseString.toInt\n        val result = result + baseString.toInt\n        val\
    \ result = result + baseString.toInt\n        val result = result + baseString.toInt\n\
    \        val result = result + baseString.toInt\n        val result = result +\
    \ baseString.toInt\n        val result = result + baseString.toInt\n        val\
    \ result = result + baseString.toInt\n        val result = result + baseString.toInt\n\
    \        val result = result + baseString.toInt\n        val result = result +\
    \ baseString.toInt\n        val result = result + baseString.toInt\n        val\
    \ result = result + baseString.toInt\n        val result = result + baseString.toInt\n\
    \        val result = result + baseString.toInt\n        val result = result +\
    \ baseString.toInt\n        val result = result + baseString.toInt\n        val\
    \ result = result + baseString.toInt\n        val result = result + baseString.toInt\n\
    \        val result = result + baseString.toInt\n        val result = result +\
    \ baseString.toInt\n        val result = result + baseString.toInt\n        val\
    \ result = result + baseString.toInt\n        val result = result + baseString.toInt\n\
    \        val result = result + baseString.toInt\n        val result = result +\
    \ baseString.toInt\n        val result = result + baseString.toInt\n        val\
    \ result = result + ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = base.toString.reverse\n\
    \        val result = baseString.take(baseString.length - digits.length) + result\n\
    \        result", "        val digits = x.toString.reverse\n        val digitLength\
    \ = digits.length\n        val baseDigits = base.toString.reverse\n        val\
    \ baseDigitLength = baseDigits.length\n        val result = new StringBuilder\n\
    \        var i = 0\n        while (i < digitLength) {\n            val digit =\
    \ digits.charAt(i)\n            val baseDigit = baseDigits.charAt(i)\n       \
    \     if (digit == baseDigit) {\n                result.append(digit)\n      \
    \      } else {\n                val newDigit = digit + baseDigit\n          \
    \      result.append(newDigit)\n            }\n            i += 1\n        }\n\
    \        return result.toString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.charAt(base.toInt - digits.size))", " \
    \       val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = if (digits == \"\") digits else digits.reverse\n       \
    \ val baseString = if (base < 10) \"0\" + base.toString else base.toString\n \
    \       result + baseString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base) \"\" else \"0\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + digits.tail.map(_.toString).mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.toChar)", "        val baseDigits = base.toString.length\n\
    \        val digits = x.toString.length\n        val result = new StringBuilder(digits)\n\
    \        var remainder = x % base\n        while (0 != remainder) {\n        \
    \    result.append(baseDigits.toString)\n            remainder = remainder / base\n\
    \        }\n        result.toString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.charAt(base.toInt - digits.size))", " \
    \       val bases = List(1l, 10l, 100l, 1000l, 10000l, 100000l, 1000000l, 10000000l,\
    \ 100000000l, 1000000000l, 10000000000l, 100000000000l, 1000000000000l, 10000000000000l,\
    \ 100000000000000l, 1000000000000000l, 10000000000000000l, 100000000000000000l,\
    \ 1000000000000000000l)\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = \"\"\n        val baseIndex = bases.indexOf(base)\n    \
    \    val digitIndex = digits.indexOf(x)\n        while (digitIndex >= 0) {\n \
    \           result += digits(digitIndex).reverse\n            digitIndex -= 1\n\
    \        }\n        result + (if (digitIndex < 0) \"0\" else \"\") + bases(baseIndex)",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toInt)\n    \
    \    val result = new StringBuilder\n        digits.foreach(x => result.append(x.toString))\n\
    \        result.toString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val bases\
    \ = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    )\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = bases.zip(digits).map(x => x._1 + x._2)\n        val result\
    \ = result.mkString(\"\")\n        val result = result.substring(0, result.length\
    \ - 1)\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = if (digits.isEmpty) \"\" else digits + base.toString\n \
    \       result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.charAt(base.toInt - digits.size))", " \
    \       val baseDigits = base.toString.length\n        val digits = x.toString.length\n\
    \        val result = new StringBuilder(digits)\n        var carry = 0\n     \
    \   var digit = 0\n        while (digit < digits) {\n            val digitValue\
    \ = x.toString.charAt(digit).toLong\n            val digitBase = digitValue /\
    \ base\n            val digitCarry = digitValue % base\n            digit = digit\
    \ + 1\n            if (digit < digits) {\n                val digitBase = x.toString.charAt(digit).toLong\n\
    \                val digitCarry = digitValue % base\n                digit = digit\
    \ + 1\n            }\n            val digitString = digitBase.toString.charAt(digitCarry).toString\n\
    \            val digitLength = digitString.length\n            val digitBaseString\
    \ = digitBase.toString.substring(0, digitLength)\n            val digitCarryString\
    \ = digitCarry.toString.substring(0, digitLength)\n            val digitString\
    \ = digitBaseString + digitCarryString\n            val digitLength = digitString.length\n\
    \            if (carry > 0) {\n                digitString = digitString + digitCarryString\n\
    \                digitLength = digitString.length\n            }\n           \
    \ val digitString = digitString + digitString\n            val digitLength = digitString.length\n\
    \            if (digitLength > 0) {\n                result.append((digitString).substring(0,\
    \ digitLength))\n                carry = digitLength\n            }\n        }\n\
    \        if (carry > 0) {\n            result.append((carry).toString.substring(0,\
    \ digits))\n        }\n        result.toString", "        val bases = List(\"\
    10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\
    \ \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\")\n        val digits = List(\"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\")\n        val baseIndex = bases.indexOf(base)\n\
    \        val digitIndex = digits.indexOf(x.toString.charAt(baseIndex))\n     \
    \   val result = digits(digitIndex) + digits(digitIndex + 1)\n        result",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        digits.tail.foldLeft(result){\n\
    \            case (acc, digit) => acc + digit.drop(base).toString + digit.take(base).toString.reverse\n\
    \        }", "        val baseString = Integer.toString(base)\n        val baseStringLength\
    \ = baseString.length\n        val baseStringBuilder = new StringBuilder(baseString)\n\
    \        val baseStringBuilderLength = baseStringBuilder.length\n        val baseStringBuilderBuilder\
    \ = new StringBuilder(baseStringBuilder)\n        val baseStringBuilderBuilderLength\
    \ = baseStringBuilderBuilder.length\n        val baseStringBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderLength\n        val baseStringBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderLength\n        val baseStringBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderLength\n        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderLength\n        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderLength\n        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderBuilderLength\n        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\n      \
    \  val baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength = baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\n\
    \        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\n\
    \        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\n\
    \        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\n\
    \        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\n\
    \        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\n\
    \        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\n\
    \        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\n\
    \        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\n\
    \        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\n\
    \        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\n\
    \        val baseStringBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderBuilderLength\
    \ = baseStringBuilder", '        val bases = List("1", "10", "100", "1000", "10000",
    "100000", "1000000", "10000000", "100000000", "1000000000", "10000000000", "100000000000",
    "1000000000000", "10000000000000", "100000000000000", "1000000000000000", "10000000000000000",
    "100000000000000000", "1000000000000000000", "10000000000000000000", "100000000000000000000",
    "1000000000000000000000", "10000000000000000000000", "100000000000000000000000",
    "1000000000000000000000000", "10000000000000000000000000", "10000000000000000000000000000000000",
    "100000000000000000000000000000000000", "1000000000000000000000000000000000000",
    "10000000000000000000000000000000000000", "100000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000", "10000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000", "100000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000", "10000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000", "1000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000", "100000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000", "1000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000", "100000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000", "10000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000", "1000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
  "        val baseString = Integer.toString(base)\n        val baseStringLength =\
    \ baseString.length\n        val xString = Integer.toString(x)\n        val xStringLength\
    \ = xString.length\n        val result = new StringBuilder(xStringLength + baseStringLength)\n\
    \        var i = 0\n        while (i < xStringLength) {\n            result.append(xString.charAt(i))\n\
    \            result.append(baseString.charAt(xString.length - i - 1))\n      \
    \      i += 1\n        }\n        return result.toString()", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else base.toString.toInt)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val str = x.toString.reverse\n        val\
    \ baseStr = str.toCharArray.takeWhile(c => c != '0').mkString\n        val baseInt\
    \ = base.toCharArray.map(c => c.toInt).reverse\n        val baseIntStr = baseInt.mkString\n\
    \        val baseStrInt = baseStr.toInt\n        val baseStrIntStr = baseStrInt.mkString\n\
    \        val baseStrIntStrInt = baseStrIntStr.toInt\n        val baseStrIntStrIntStr\
    \ = baseStrIntStrIntStr.toInt\n        val baseStrIntStrIntStrIntStr = baseStrIntStrIntStrIntStr.toInt\n\
    \        val baseStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStrIntStr",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else \"0\")", "        var result = \"\"\n        var remainder\
    \ = x % base\n        while (x > 0) {\n            x /= base\n            result\
    \ += (x % base).toString.toChar\n        }\n        if (remainder > 0) {\n   \
    \         result += remainder.toString.toChar\n        }\n        result", " \
    \       val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = digits match {\n            case \"\" => \"\"\n        \
    \    case x => x + \"\"\n        }\n        result", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = new StringBuilder\n        digits.foreach(x => result.append(x.reverse))\n\
    \        result.toString", "        var s = \"\"\n        var i = 0\n        while\
    \ (i < x.toString.length) {\n            s += x.toString.charAt(i) * base\n  \
    \          i += 1\n        }\n        return s", "        val baseDigits = base.toString.length\n\
    \        val digits = x.toString.length\n        val baseDigit = x.toString.charAt(baseDigits)\n\
    \        val digit = x.toString.charAt(digits)\n        val result = if (digit\
    \ == baseDigit) x else x.toString.substring(0, digits) + baseDigit\n        result",
  "        val baseDigits = base.toString.length\n        val digits = x.toString.length\n\
    \        val result = new StringBuilder(digits)\n        var carry = 0\n     \
    \   var i = 0\n        while (i < digits) {\n            val digit = x.toString.charAt(i)\
    \ - '0'\n            val digitBase = digit.toString.length\n            val digitBaseDigits\
    \ = digitBase.toString.length\n            val digitBaseDigit = digitBase - 1\n\
    \            val digitBaseDigits = digitBaseDigit - 1\n            val digitBaseDigit\
    \ = digitBaseDigit - 1\n            val digitBaseDigit = digitBaseDigit - 1\n\
    \            val digitBaseDigit = digitBaseDigit - 1\n            val digitBaseDigit\
    \ = digitBaseDigit - 1\n            val digitBaseDigit = digitBaseDigit - 1\n\
    \            val digitBaseDigit = digitBaseDigit - 1\n            val digitBaseDigit\
    \ = digitBaseDigit - 1\n            val digitBaseDigit = digitBaseDigit - 1\n\
    \            val digitBaseDigit = digitBaseDigit - 1\n            val digitBaseDigit\
    \ = digitBaseDigit - 1\n            val digitBaseDigit = digitBaseDigit - 1\n\
    \            val digitBaseDigit = digitBaseDigit - 1\n            val digitBaseDigit\
    \ = digitBaseDigit - 1\n            val digitBaseDigit = digitBaseDigit - 1\n\
    \            val digitBaseDigit = digitBaseDigit - 1\n            val digitBaseDigit\
    \ = digitBaseDigit - 1\n            val digitBaseDigit = digitBaseDigit - 1\n\
    \            val digitBaseDigit = digitBaseDigit - 1\n            val digitBaseDigit\
    \ = digitBaseDigit - 1\n            val digitBaseDigit = digitBaseDigit - 1\n\
    \            val digitBaseDigit = digitBaseDigit - 1\n            val digitBaseDigit\
    \ = digitBaseDigit - 1\n            val digitBaseDigit = digitBaseDigit - 1\n\
    \            val digitBaseDigit = digitBaseDigit - 1\n            val digitBaseDigit\
    \ = digitBaseDigit - 1\n            val digitBaseDigit = digitBaseDigit - 1\n\
    \            val digitBaseDigit = digitBaseDigit - 1\n            val digitBaseDigit\
    \ = digitBaseDigit - 1\n            val digitBaseDigit = digitBaseDigit - 1\n\
    \            val digitBaseDigit = digitBaseDigit - 1\n            val digitBaseDigit\
    \ = digitBaseDigit - 1\n            val digitBaseDigit = digitBaseDigit - 1\n\
    \            val digitBaseDigit = digitBaseDigit - 1\n            val digitBaseDigit\
    \ = digitBaseDigit - 1\n            val digitBaseDigit = digit", "        val\
    \ baseDigits = base.toString.length\n        val digits = x.toString.length\n\
    \        val result = new StringBuilder(digits)\n        var carry = 0\n     \
    \   var i = 0\n        while (i < digits) {\n            val digit = x.toString.charAt(i)\
    \ - '0'\n            val digitToAdd = digit + carry\n            val digitToCarry\
    \ = digitToAdd / base\n            val digitToRemainder = digitToAdd - digitToCarry\
    \ * base\n            val digitToAdd = digitToCarry + digitToRemainder\n     \
    \       val digitToAdd = digitToAdd % base\n            result.append(digitToAdd.toString)\n\
    \            carry = digitToRemainder\n            i += 1\n        }\n       \
    \ if (carry > 0) result.append(carry.toString)\n        result.toString", "  \
    \      var result : String = \"\"\n        var remainder : Long = 0\n        var\
    \ quotient : Long = 0\n        var remainder2 : Long = 0\n        var quotient2\
    \ : Long = 0\n        var remainder3 : Long = 0\n        var quotient3 : Long\
    \ = 0\n        var remainder4 : Long = 0\n        var quotient4 : Long = 0\n \
    \       var remainder5 : Long = 0\n        var quotient5 : Long = 0\n        var\
    \ remainder6 : Long = 0\n        var quotient6 : Long = 0\n        var remainder7\
    \ : Long = 0\n        var quotient7 : Long = 0\n        var remainder8 : Long\
    \ = 0\n        var quotient8 : Long = 0\n        var remainder9 : Long = 0\n \
    \       var quotient9 : Long = 0\n        var remainder10 : Long = 0\n       \
    \ var quotient10 : Long = 0\n        var remainder11 : Long = 0\n        var quotient11\
    \ : Long = 0\n        var remainder12 : Long = 0\n        var quotient12 : Long\
    \ = 0\n        var remainder13 : Long = 0\n        var quotient13 : Long = 0\n\
    \        var remainder14 : Long = 0\n        var quotient14 : Long = 0\n     \
    \   var remainder15 : Long = 0\n        var quotient15 : Long = 0\n        var\
    \ remainder16 : Long = 0\n        var quotient16 : Long = 0\n        var remainder17\
    \ : Long = 0\n        var quotient17 : Long = 0\n        var remainder18 : Long\
    \ = 0\n        var quotient18 : Long = 0\n        var remainder19 : Long = 0\n\
    \        var quotient19 : Long = 0\n        var remainder20 : Long = 0\n     \
    \   var quotient20 : Long = 0\n        var remainder21 : Long = 0\n        var\
    \ quotient21 : Long = 0\n        var remainder22 : Long = 0\n        var quotient22\
    \ : Long = 0\n        var remainder23 : Long = 0\n        var quotient23 : Long\
    \ = 0\n        var remainder24 : Long = 0\n        var quotient24 : Long = 0\n\
    \        var remainder25 : Long = 0\n        var quotient25 : Long = 0\n     \
    \   var remainder26 : Long = 0\n        var quotient26 : Long = 0\n        var\
    \ remainder27 : Long = 0\n        var quotient27 : Long = 0\n        var remainder28\
    \ : Long = 0\n        var quotient28 : Long = 0\n        var remainder29 : Long\
    \ = 0\n        var quotient29 : Long = 0\n        var remainder30 : Long = 0\n\
    \        var quotient30 : Long = 0\n        var remainder31 : Long = 0\n     \
    \   var quotient31 : Long = 0\n        var remainder32 : Long = 0\n        var\
    \ quotient32 : Long = 0\n        var ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else s\"${digits.last}\")", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = new StringBuilder\n        for(i <- 0 until digits.length)\n\
    \            result.append(digits(i).mkString(\"\"))\n        result.toString",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        result + (if (digits.size == 1)\
    \ \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head + digits.tail.mkString(\"\
    \")\n        result", "        val bases = List(\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = digits.map(x => bases(x.toInt)).mkString\n        val baseString\
    \ = bases(base)\n        val result = result + baseString\n        result", " \
    \       val bases = List(\"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\")\n        val digits = List(\"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digitBase\
    \ = bases.zip(digits)\n        val digitBaseReverse = digitBase.map(x => x._2\
    \ -> x._1)\n        val digitBaseReverseMap = digitBaseReverse.toMap\n       \
    \ val digitBaseReverseMapReverse = digitBaseReverseMap.reverse\n        val digitBaseReverseMapReverseMap\
    \ : Map[Long, String] = digitBaseReverseMapReverse.toMap\n        val digitBaseReverseMapReverseMapReverse\
    \ = digitBaseReverseMapReverseMap.reverse\n        val digitBaseReverseMapReverseMapReverseMap\
    \ : Map[String, Long] = digitBaseReverseMapReverseMapReverse.toMap\n        val\
    \ digitBaseReverseMapReverseMapReverseMapReverse = digitBaseReverseMapReverseMapReverseMap.reverse\n\
    \        val digitBaseReverseMapReverseMapReverseMapReverseMap : Map[String, String]\
    \ = digitBaseReverseMapReverseMapReverseMapReverse.toMap\n        val digitBaseReverseMapReverseMapReverseMapReverseMap\
    \ : Map[String, Long] = digitBaseReverseMapReverseMapReverseMapReverseMap.reverse.toMap\n\
    \        val digitBaseReverseMapReverseMapReverseMapReverseMapReverseMap : Map[String,\
    \ String] = digitBaseReverseMapReverseMapReverseMapReverseMapReverse.toMap\n \
    \       val digitBaseReverseMapReverseMapReverseMapReverseMapReverseMap : Map[String,\
    \ Long] = digitBaseReverseMapReverseMapReverseMapReverseMap.reverse.toMap\n  \
    \      val digitBaseReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap\
    \ : Map[String, String] = digitBaseReverseMapReverseMapReverseMapReverseMapReverse.toMap\n\
    \        val digitBaseReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap\
    \ : Map[String, Long] = digitBaseReverseMapReverseMapReverseMapReverseMapReverseMap.reverse.toMap\n\
    \        val digitBaseReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap\
    \ : Map[String, String] = digitBaseReverseMapReverseMapReverseMapReverseMapReverse.toMap\n\
    \        val digitBaseReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap\
    \ : Map[String, Long] = digitBaseReverseMapReverseMapReverseMapReverseMapReverseMap.reverse.toMap\n\
    \        val digitBaseReverseMapReverseMapReverseMapReverseMapReverseMapReverseMapReverseMap\
    \ : ", "        val bases = List(\"1\", \"10\", \"100\", \"1000\", \"10000\",\
    \ \"100000\", \"1000000\", \"10000000\", \"100000000\", \"1000000000\", \"10000000000\"\
    , \"100000000000\", \"1000000000000\", \"10000000000000\", \"100000000000000\"\
    , \"1000000000000000\", \"10000000000000000\", \"100000000000000000\", \"1000000000000000000\"\
    )\n        val baseIndex = bases.indexOf(base.toString)\n        val baseDigits\
    \ = x.toString.drop(baseIndex).dropRight(baseIndex).drop(baseIndex + 1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.drop(1).dropRight(1)\n\
    \        val baseDigit = baseDigits.charAt(0)\n        val baseDigits = baseDigits.",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = digits.reverse\n        val result = result.substring(0,\
    \ result.length - base)\n        result + \"\"", "        val bases = List(\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\")\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = bases.zip(digits).map { case (base, digit) => digit + base\
    \ }\n        result.mkString(\"\")", "        val str = x.toString.reverse\n \
    \       val len = str.length\n        val res = new Array[String](len)\n     \
    \   var i = 0\n        while (i < len) {\n            val digit = str.charAt(i).toInt\n\
    \            val newDigit = digit / base\n            val newDigitString = if\
    \ (newDigit == 0) \"\" else newDigit.toString\n            res(i) = str.charAt(i)\
    \ + newDigitString\n            i += 1\n        }\n        new String(res)", " \
    \       val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val bases\
    \ = List(1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l)\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = bases.zip(digits).map { case (base, digit) => digit.charAt(base-1)\
    \ + digit }\n        val result = result.mkString(\"\")\n        val bases = List(1l,\
    \ 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l)\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = bases.zip(digits).map { case (base, digit) => digit.charAt(base-1)\
    \ + digit }\n        val result = result.mkString(\"\")\n        result", "  \
    \      val bases = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"\
    , \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\"\
    , \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val digits = List(\"0\",\
    \ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val\
    \ digitBase = digits.length\n        val digitBases = digits.map(digit(_))\n \
    \       val digitBasesLength = digitBases.length\n        val digitBasesLength\
    \ = digitBasesLength - 1\n        val digitBasesLength = digitBasesLength - 1\n\
    \        val digitBasesLength = digitBasesLength - 1\n        val digitBasesLength\
    \ = digitBasesLength - 1\n        val digitBasesLength = digitBasesLength - 1\n\
    \        val digitBasesLength = digitBasesLength - 1\n        val digitBasesLength\
    \ = digitBasesLength - 1\n        val digitBasesLength = digitBasesLength - 1\n\
    \        val digitBasesLength = digitBasesLength - 1\n        val digitBasesLength\
    \ = digitBasesLength - 1\n        val digitBasesLength = digitBasesLength - 1\n\
    \        val digitBasesLength = digitBasesLength - 1\n        val digitBasesLength\
    \ = digitBasesLength - 1\n        val digitBasesLength = digitBasesLength - 1\n\
    \        val digitBasesLength = digitBasesLength - 1\n        val digitBasesLength\
    \ = digitBasesLength - 1\n        val digitBasesLength = digitBasesLength - 1\n\
    \        val digitBasesLength = digitBasesLength - 1\n        val digitBasesLength\
    \ = digitBasesLength - 1\n        val digitBasesLength = digitBasesLength - 1\n\
    \        val digitBasesLength = digitBasesLength - 1\n        val digitBasesLength\
    \ = digitBasesLength - 1\n        val digitBasesLength = digitBasesLength - 1\n\
    \        val digitBasesLength = digitBasesLength - 1\n        val digitBasesLength\
    \ = digitBasesLength - 1\n        val digitBasesLength = digitBasesLength - 1\n\
    \        val digitBasesLength = digitBasesLength - 1\n        val digitBasesLength\
    \ = digitBasesLength - 1\n        val digitBasesLength = digitBasesLength - 1\n\
    \        val digitBasesLength = digitBasesLength - 1\n        val digitBasesLength\
    \ = digitBasesLength - 1\n        val digitBasesLength = digitBasesLength - 1\n\
    \        val digitBases", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + digits.tail.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"10\" else (base.toString.reverse.grouped(base.toInt).map(_.mkString).reverse).mkString(\"\
    \")\n        result + baseString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString\n        result + (if (digits.size == 1) \"0\" else\
    \ \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.toInt)", "        val baseString = base.toString\n\
    \        val x = x.toString.toLong\n        val y = x.toString.toLong\n      \
    \  val z = x.toString.toLong\n        val result = \"\"\n        val digits =\
    \ x.toString.length\n        val baseDigits = baseString.length\n        var i\
    \ = 0\n        while (i < digits) {\n            val digit = x.toString.charAt(i)\n\
    \            val baseDigit = baseString.charAt(i)\n            if (digit == baseDigit)\
    \ {\n                result += digit\n                i += 1\n            } else\
    \ {\n                val newDigit = digit - baseDigit\n                result\
    \ += newDigit.toString\n                i += 1\n            }\n        }\n   \
    \     return result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = if (digits == \"\") \"\" else digits.reverse\n        result\
    \ + (if (digits.isEmpty) \"\" else digits.reverse)", "        val baseDigits =\
    \ base.toString.length\n        val digits = x.toString.length\n        val result\
    \ = new StringBuilder(digits)\n        var i = 0\n        while (i < digits) {\n\
    \            result.append(x.toString.charAt(i) - '0')\n            i += 1\n \
    \       }\n        while (i < baseDigits) {\n            result.append(base.toString.charAt(i)\
    \ - '0')\n            i += 1\n        }\n        result.toString", "        var\
    \ result = \"\"\n        var remainder = x % base\n        while(x > 0) {\n  \
    \          result += (remainder % base).toString\n            remainder = (remainder\
    \ / base).toLong\n        }\n        result", "        val digits = x.toString.reverse\n\
    \        val digitArray = digits.toCharArray\n        val baseDigitArray = base.toCharArray\n\
    \        var result = \"\"\n        var i = 0\n        while (i < digitArray.length)\
    \ {\n            val digit = digitArray(i)\n            val baseDigit = baseDigitArray(i)\n\
    \            if (digit == baseDigit) {\n                result += digit\n    \
    \        } else {\n                result += digit + baseDigit\n            }\n\
    \            i += 1\n        }\n        return result", "        val bases = List(1l,\
    \ 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l)\n        val digits = x.toString.reverse.grouped(base).map(_.mkString).reverse\n\
    \        val result = bases.zip(digits).map { case (base, digit) => digit * base\
    \ }\n        result.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + digits.tail.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + digits.tail.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = if (digits.isEmpty) \"\" else digits.reverse.mkString(\"\
    \")\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).map(_.toLong)\n\
    \        val result = digits.foldLeft(\"\") { (result, digit) => result + digit.toString}\n\
    \        result.reverse", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else (base.toInt - digits.head.indexOf(0).toInt))", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (result.length < base.toInt)\
    \ \"\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else (base.toInt - digits.size)*base)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = base.pow(digits.length)\n\
    \        val result = baseString + result\n        return result", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits.mkString(\"\")\n        result + (if (digits.size ==\
    \ base.toInt) \"\" else \"0\")", "        var result = \"\"\n        var remainder\
    \ = x % base\n        var quotient = x / base\n        while (quotient > 0) {\n\
    \            result += quotient.toString.charAt(remainder)\n            remainder\
    \ = quotient % base\n            quotient = quotient / base\n        }\n     \
    \   result", "        var result = \"\"\n        var remainder = x % base\n  \
    \      while(x > 0) {\n            result += (remainder % base).toString\n   \
    \         remainder = remainder / base\n        }\n        result", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + digits.tail.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else base.toString.toLong)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = digits.reverse\n        val baseString = base.toString.reverse\n\
    \        val resultString = result.reverse\n        val resultStringLength = resultString.length\n\
    \        val baseStringLength = baseString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = resultString.length\n\
    \        val resultStringLength = resultString.length\n        val resultStringLength\
    \ = resultString.length\n        val resultStringLength = result", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits.mkString(\"\")\n        val baseString = if (base ==\
    \ 10l) \"\" else base.toString.charAt(0).toString.toUpperCase\n        result\
    \ + baseString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head + digits.tail.mkString(\"\
    \")\n        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = digits match {\n            case \"\" => \"\"\n        \
    \    case x => x + (digits.drop(base.toInt))\n        }\n        result", "  \
    \      val baseString = base.toString.toCharArray\n        val baseLength = baseString.length\n\
    \        val x = x.toString.toCharArray\n        val length = x.length\n     \
    \   var result = \"\"\n        var i = 0\n        while (i < length) {\n     \
    \       val digit = x(i) - 48\n            val power = baseLength - i - 1\n  \
    \          val newDigit = digit * Math.pow(baseString, power)\n            result\
    \ += newDigit.toString.toChar\n            i += 1\n        }\n        result",
  "        val bases = List(\"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\")\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = \"\"\n        for(i <- 0 until digits.size) {\n        \
    \    val digit = digits(i)\n            val baseIndex = digits.indexOf(i)\n  \
    \          val baseString = bases(baseIndex)\n            val digitString = digit.reverse\n\
    \            result += baseString + digitString\n        }\n        result", " \
    \       val bases = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\")\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = bases.zip(digits).map { case (base, digit) => digit + base\
    \ }\n        result.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.toChar)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        result + (if (digits.size == 1)\
    \ \"0\" else \"\")", "        val digits = x.toString.reverse\n        val digits_base\
    \ = digits.reverse\n        val digits_base_reverse = digits_base.reverse\n  \
    \      val digits_base_reverse_digits = digits_base_reverse.reverse\n        val\
    \ digits_base_reverse_digits_reverse = digits_base_reverse_digits.reverse\n  \
    \      val digits_base_reverse_digits_reverse_reverse = digits_base_reverse_digits_reverse.reverse\n\
    \        val digits_base_reverse_digits_reverse_reverse_reverse = digits_base_reverse_digits_reverse_reverse.reverse\n\
    \        val digits_base_reverse_digits_reverse_reverse_reverse_reverse = digits_base_reverse_digits_reverse_reverse_reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val result = result.substring(0,\
    \ result.length - base.toInt)\n        result + \"\"", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val bases = List(1l, 2l, 3l, 4l, 5l, 6l, 7l,\
    \ 8l, 9l, 10l)\n        val digits = x.toString.reverse.grouped(base).toList\n\
    \        val result = bases.zip(digits).map { case (base, digit) => digit.map(x\
    \ => x % base).mkString(\"\") }\n        result.mkString(\"\")", "        val\
    \ digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n  \
    \      val result = digits.mkString(\"\")\n        result + (if (digits.size ==\
    \ 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.charAt(base.toInt - digits.size - 1))",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        var result : String = \"\"\n        var remainder\
    \ : Long = x % base\n        var quotient : Long = x / base\n        while (quotient\
    \ != 0) {\n            result = quotient.toString + result\n            remainder\
    \ = remainder % base\n            quotient = quotient / base\n        }\n    \
    \    result = remainder.toString + result\n        return result", "        val\
    \ bases = List(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\
    \ \"10\")\n        val digits = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\")\n        val digitBase = digits.zip(bases)\n   \
    \     val digitBaseLength = digitBase.length\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBase = digitBase.toList\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBaseLength = digitBaseLength.toInt\n        val digitBaseLength\
    \ = digitBaseLength.toInt\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBaseLength = digitBaseLength.toInt\n        val digitBaseLength\
    \ = digitBaseLength.toInt\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBaseLength = digitBaseLength.toInt\n        val digitBaseLength\
    \ = digitBaseLength.toInt\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBaseLength = digitBaseLength.toInt\n        val digitBaseLength\
    \ = digitBaseLength.toInt\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBaseLength = digitBaseLength.toInt\n        val digitBaseLength\
    \ = digitBaseLength.toInt\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBaseLength = digitBaseLength.toInt\n        val digitBaseLength\
    \ = digitBaseLength.toInt\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBaseLength = digitBaseLength.toInt\n        val digitBaseLength\
    \ = digitBaseLength.toInt\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBaseLength = digitBaseLength.toInt\n        val digitBaseLength\
    \ = digitBaseLength.toInt\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBaseLength = digitBaseLength.toInt\n        val digitBaseLength\
    \ = digitBaseLength.toInt\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBaseLength = digitBaseLength.toInt\n        val digitBaseLength\
    \ = digitBaseLength.toInt\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBaseLength = digitBaseLength.toInt\n        val digitBaseLength\
    \ = digitBaseLength.toInt\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBaseLength = digitBaseLength.toInt\n        val digitBaseLength\
    \ = digitBaseLength.toInt\n        val digitBaseLength = digitBaseLength.toInt\n\
    \        val digitBaseLength = digitBaseLength.toInt\n        val digitBaseLength\
    \ = digitBase", "        val digits = x.toString.reverse.grouped(base.toInt)\n\
    \        val result = digits.map(_.mkString).reverse.mkString\n        result\
    \ + (if (result.length < base.toInt) \"\" else \"\")", "        val baseString\
    \ = Integer.toString(base)\n        val x = x.toString.toLong\n        val baseString\
    \ = Integer.toString(base)\n        val result = x.toString(baseString)\n    \
    \    val result = result.substring(0, result.length - 1)\n        result", " \
    \       var result : String = \"\"\n        var remainder : Long = x % base\n\
    \        var quotient : Long = x / base\n        while (quotient > 0) {\n    \
    \        result += quotient.toString.charAt(0)\n            quotient = quotient\
    \ / base\n        }\n        while (quotient > 0) {\n            result += quotient.toString.charAt(0)\n\
    \            quotient = quotient / base\n        }\n        result += remainder.toString.charAt(0)\n\
    \        return result", "        val baseDigit = base.toInt\n        val digits\
    \ = x.toString.reverse.grouped(baseDigit).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == baseDigit)\
    \ \"\" else base.toString.charAt(baseDigit - digits.size))", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.isEmpty) \"\" else\
    \ (base.toInt - digits.length).toString)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = if (digits == \"\") digits else digits.reverse\n       \
    \ val result = if (digits.isEmpty) digits else digits.reverse\n        val result\
    \ = if (digits.isEmpty) digits else digits.reverse\n        val result = if (digits.isEmpty)\
    \ digits else digits.reverse\n        val result = if (digits.isEmpty) digits\
    \ else digits.reverse\n        val result = if (digits.isEmpty) digits else digits.reverse\n\
    \        val result = if (digits.isEmpty) digits else digits.reverse\n       \
    \ val result = if (digits.isEmpty) digits else digits.reverse\n        val result\
    \ = if (digits.isEmpty) digits else digits.reverse\n        val result = if (digits.isEmpty)\
    \ digits else digits.reverse\n        val result = if (digits.isEmpty) digits\
    \ else digits.reverse\n        val result = if (digits.isEmpty) digits else digits.reverse\n\
    \        val result = if (digits.isEmpty) digits else digits.reverse\n       \
    \ val result = if (digits.isEmpty) digits else digits.reverse\n        val result\
    \ = if (digits.isEmpty) digits else digits.reverse\n        val result = if (digits.isEmpty)\
    \ digits else digits.reverse\n        val result = if (digits.isEmpty) digits\
    \ else digits.reverse\n        val result = if (digits.isEmpty) digits else digits.reverse\n\
    \        val result = if (digits.isEmpty) digits else digits.reverse\n       \
    \ val result = if (digits.isEmpty) digits else digits.reverse\n        val result\
    \ = if (digits.isEmpty) digits else digits.reverse\n        val result = if (digits.isEmpty)\
    \ digits else digits.reverse\n        val result = if (digits.isEmpty) digits\
    \ else digits.reverse\n        val result = if (digits.isEmpty) digits else digits.reverse\n\
    \        val result = if (digits.isEmpty) digits else digits.reverse\n       \
    \ val result = if (digits.isEmpty) digits else digits.reverse\n        val result\
    \ = if (digits.isEmpty) digits else digits.reverse\n        val result = if (digits.isEmpty)\
    \ digits else digits.reverse\n        val result = if (digits.isEmpty) digits\
    \ else digits.reverse\n        val result = if (digits.isEmpty) digits else digits.reverse\n\
    \        val result = if (digits.isEmpty) digits else digits.reverse\n       \
    \ val result = if (digits.isEmpty) digits else digits.reverse\n        val result\
    \ = if (digits.isEmpty) digits else digits.reverse\n        val result = if (digits.isEmpty)\
    \ digits else digits.reverse\n        val result = if (digits.isEmpty) digits\
    \ else digits.reverse\n        val result = if (digits.isEmpty) digits else digits.reverse\n\
    \        val result = if (digits.isEmpty) digits else digits.reverse\n       \
    \ val result = if (digits.isEmpty) digits else digits.reverse\n        val result\
    \ = if (digits.isEmpty) digits else digits.reverse\n        val result = if (digits.isEmpty)\
    \ digits else digits.reverse\n        val result = if (digits.isEmpty", "    \
    \    val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) {\n            \"0\"\n        } else {\n            val baseString =\
    \ if (base == 2l) \"\" else base.toString.charAt(0).toString.toUpperCase\n   \
    \         baseString + baseString\n        }\n        result", "        val str\
    \ = x.toString.reverse\n        val len = str.length\n        val baseLen = base.toString.length\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var str1 = \"\
    \"\n        while (i < len) {\n            while (j < baseLen) {\n           \
    \     if (str(i) == base(j)) {\n                    str1 += str(i)\n         \
    \           j++\n                }\n                else {\n                 \
    \   str1 += str(i)\n                    j = 0\n                }\n           \
    \     i += 1\n            }\n            i = 0\n            j += 1\n        }\n\
    \        return str1", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = if (digits.isEmpty) \"\" else digits.reverse.drop(base.toInt).reverse\n\
    \        result", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        var result = \"\"\n        var remainder =\
    \ x % base\n        var quotient = x / base\n        while (quotient > 0) {\n\
    \            result += quotient.toString.charAt(0)\n            quotient = quotient\
    \ / base\n        }\n        result += remainder.toString.charAt(0)\n        result",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        var result = \"\"\n        var remainder =\
    \ x % base\n        while (x > 0) {\n            result += (x % base).toString\
    \ + remainder.toString\n            x /= base\n            remainder = x % base\n\
    \        }\n        result", "        val baseNum = x.toString.toInt\n       \
    \ val baseNumString = baseNum.toString\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNumString.length\n        val baseNumStringLength = baseNumString.length\n\
    \        val baseNumStringLength = baseNumString.length\n        val baseNumStringLength\
    \ = baseNum", "        val digits = x.toString.reverse\n        val baseDigits\
    \ = digits.dropRight(base.toString.length)\n        val result = baseDigits.reverse.mkString(\"\
    \")\n        result + (if (digits.isEmpty) \"\" else digits(base.toString.length))",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = if (digits.isEmpty) \"\" else digits.head\n        result + (if (digits.tail.isEmpty)\
    \ \"\" else digits.tail.mkString(\"\"))", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else \"0\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.toInt)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else (base.toInt - digits.size)*base)", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = if (digits.isEmpty) \"\" else digits.head\n        digits.tail.foldLeft(result)\
    \ { case (acc, digit) => acc + (digit * base) }", "        var result : String\
    \ = \"\"\n        var remainder : Long = 0\n        var quotient : Long = 0\n\
    \        var remainder2 : Long = 0\n        var quotient2 : Long = 0\n       \
    \ var remainder3 : Long = 0\n        var quotient3 : Long = 0\n        var remainder4\
    \ : Long = 0\n        var quotient4 : Long = 0\n        var remainder5 : Long\
    \ = 0\n        var quotient5 : Long = 0\n        var remainder6 : Long = 0\n \
    \       var quotient6 : Long = 0\n        var remainder7 : Long = 0\n        var\
    \ quotient7 : Long = 0\n        var remainder8 : Long = 0\n        var quotient8\
    \ : Long = 0\n        var remainder9 : Long = 0\n        var quotient9 : Long\
    \ = 0\n        var remainder10 : Long = 0\n        var quotient10 : Long = 0\n\
    \        var remainder11 : Long = 0\n        var quotient11 : Long = 0\n     \
    \   var remainder12 : Long = 0\n        var quotient12 : Long = 0\n        var\
    \ remainder13 : Long = 0\n        var quotient13 : Long = 0\n        var remainder14\
    \ : Long = 0\n        var quotient14 : Long = 0\n        var remainder15 : Long\
    \ = 0\n        var quotient15 : Long = 0\n        var remainder16 : Long = 0\n\
    \        var quotient16 : Long = 0\n        var remainder17 : Long = 0\n     \
    \   var quotient17 : Long = 0\n        var remainder18 : Long = 0\n        var\
    \ quotient18 : Long = 0\n        var remainder19 : Long = 0\n        var quotient19\
    \ : Long = 0\n        var remainder20 : Long = 0\n        var quotient20 : Long\
    \ = 0\n        var remainder21 : Long = 0\n        var quotient21 : Long = 0\n\
    \        var remainder22 : Long = 0\n        var quotient22 : Long = 0\n     \
    \   var remainder23 : Long = 0\n        var quotient23 : Long = 0\n        var\
    \ remainder24 : Long = 0\n        var quotient24 : Long = 0\n        var remainder25\
    \ : Long = 0\n        var quotient25 : Long = 0\n        var remainder26 : Long\
    \ = 0\n        var quotient26 : Long = 0\n        var remainder27 : Long = 0\n\
    \        var quotient27 : Long = 0\n        var remainder28 : Long = 0\n     \
    \   var quotient28 : Long = 0\n        var remainder29 : Long = 0\n        var\
    \ quotient29 : Long = 0\n        var remainder30 : Long = 0\n        var quotient30\
    \ : Long = 0\n        var remainder31 : Long = 0\n        var quotient31 : Long\
    \ = 0\n        var remainder32 : Long = 0\n        var quotient32 : Long = 0\n\
    \        var ", "        var res = \"\"\n        var remainder = x % base\n  \
    \      while(x > 0) {\n            res = res + x.toString.charAt(0)\n        \
    \    x = x / base\n        }\n        if(remainder > 0) {\n            res = res\
    \ + remainder.toString.charAt(0)\n        }\n        return res", "        val\
    \ digits = x.toString.reverse\n        val digitLength = digits.length\n     \
    \   val baseDigits = base.toString.reverse\n        val baseDigitLength = baseDigits.length\n\
    \        val result = new StringBuilder\n        val baseDigitIndex = 0\n    \
    \    while (digitIndex < digitLength) {\n            val digit = digits(digitIndex)\n\
    \            val baseDigit = baseDigits(baseDigitIndex)\n            if (digit\
    \ == baseDigit) {\n                result.append(digit)\n                digitIndex\
    \ += 1\n            } else {\n                val digitValue = digit.toInt\n \
    \               val baseDigitValue = baseDigit.toInt\n                if (digitValue\
    \ < baseDigitValue) {\n                    result.append(digitValue)\n       \
    \         } else {\n                    val digitValue = digit.toInt\n       \
    \             val baseDigitValue = baseDigit.toInt\n                    val digitValuePower\
    \ = digitValue - baseDigitValue\n                    val baseDigitValuePower =\
    \ baseDigitValue - digitValue\n                    val digitValuePowerToBase =\
    \ digitValuePower * baseDigitValue\n                    val baseDigitValuePowerToBase\
    \ = baseDigitValuePower * digitValue\n                    result.append(digitValuePowerToBase)\n\
    \                    result.append(baseDigitValuePowerToBase)\n              \
    \  }\n            }\n        }\n        return result.toString", "        val\
    \ baseDigits = base.toString.length\n        val digits = x.toString.length\n\
    \        val result = new StringBuilder(digits)\n        val digitBase = base.toString.charAt(0)\n\
    \        val digitBaseDigit = digitBase.toString.charAt(0)\n        val digitBaseDigits\
    \ = digitBase.toString.length\n        val digitBaseDigit = digitBase.toString.charAt(0)\n\
    \        val digitBaseDigits = digitBase.toString.length\n        val digitBaseDigit\
    \ = digitBase.toString.charAt(0)\n        val digitBaseDigits = digitBase.toString.length\n\
    \        val digitBaseDigit = digitBase.toString.charAt(0)\n        val digitBaseDigits\
    \ = digitBase.toString.length\n        val digitBaseDigit = digitBase.toString.charAt(0)\n\
    \        val digitBaseDigits = digitBase.toString.length\n        val digitBaseDigit\
    \ = digitBase.toString.charAt(0)\n        val digitBaseDigits = digitBase.toString.length\n\
    \        val digitBaseDigit = digitBase.toString.charAt(0)\n        val digitBaseDigits\
    \ = digitBase.toString.length\n        val digitBaseDigit = digitBase.toString.charAt(0)\n\
    \        val digitBaseDigits = digitBase.toString.length\n        val digitBaseDigit\
    \ = digitBase.toString.charAt(0)\n        val digitBaseDigits = digitBase.toString.length\n\
    \        val digitBaseDigit = digitBase.toString.charAt(0)\n        val digitBaseDigits\
    \ = digitBase.toString.length\n        val digitBaseDigit = digitBase.toString.charAt(0)\n\
    \        val digitBaseDigits = digitBase.toString.length\n        val digitBaseDigit\
    \ = digitBase.toString.charAt(0)\n        val digitBaseDigits = digitBase.toString.length\n\
    \        val digitBaseDigit = digitBase.toString.charAt(0)\n        val digitBaseDigits\
    \ = digitBase.toString.length\n        val digitBaseDigit = digitBase.toString.charAt(0)\n\
    \        val digitBaseDigits = digitBase.toString.length\n        val digitBaseDigit\
    \ = digitBase.toString.charAt(0)\n        val digitBaseDigits = digitBase.toString.length\n\
    \        val digitBaseDigit = digitBase.toString.charAt(0)\n        val digitBaseDigits\
    \ = digitBase.toString.length\n        val digitBaseDigit = digitBase.toString.charAt(0)\n\
    \        val digitBaseDigits = digitBase.toString.length\n        val digitBaseDigit\
    \ = digitBase.toString.charAt(0)\n        val digitBaseDigits = digitBase.toString.length\n\
    \        val digitBaseDigit = digitBase.toString.charAt(0)\n        val digitBaseDigits\
    \ = digitBase.toString.", "        val bases = List(1l, 10l, 100l, 1000l, 10000l,\
    \ 100000l, 1000000l, 10000000l, 100000000l, 1000000000l, 10000000000l, 100000000000l,\
    \ 1000000000000l, 10000000000000l, 100000000000000l, 1000000000000000l, 10000000000000000l,\
    \ 100000000000000000l, 1000000000000000000l)\n        val basesLength = bases.length\n\
    \        val basesSum = bases.sum\n        val basesSumLength = basesSum.length\n\
    \        val basesSumLength2 = basesSumLength * basesSumLength\n        val basesSumLength3\
    \ = basesSumLength2 * basesSumLength\n        val basesSumLength4 = basesSumLength3\
    \ * basesSumLength\n        val basesSumLength5 = basesSumLength4 * basesSumLength\n\
    \        val basesSumLength6 = basesSumLength5 * basesSumLength\n        val basesSumLength7\
    \ = basesSumLength6 * basesSumLength\n        val basesSumLength8 = basesSumLength7\
    \ * basesSumLength\n        val basesSumLength9 = basesSumLength8 * basesSumLength\n\
    \        val basesSumLength10 = basesSumLength9 * basesSumLength\n        val\
    \ basesSumLength11 = basesSumLength10 * basesSumLength\n        val basesSumLength12\
    \ = basesSumLength11 * basesSumLength\n        val basesSumLength13 = basesSumLength12\
    \ * basesSumLength\n        val basesSumLength14 = basesSumLength13 * basesSumLength\n\
    \        val basesSumLength15 = basesSumLength14 * basesSumLength\n        val\
    \ basesSumLength16 = basesSumLength15 * basesSumLength\n        val basesSumLength17\
    \ = basesSumLength16 * basesSumLength\n        val basesSumLength18 = basesSumLength17\
    \ * basesSumLength\n        val basesSumLength19 = basesSumLength18 * basesSumLength\n\
    \        val basesSumLength20 = basesSumLength19 * basesSumLength\n        val\
    \ basesSumLength21 = basesSumLength20 * basesSumLength\n        val basesSumLength22\
    \ = basesSumLength21 * basesSumLength\n        val basesSumLength23 = basesSumLength22\
    \ * basesSumLength\n        val basesSumLength24 = basesSumLength23 * basesSumLength\n\
    \        ", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString\n        val zeros = digits.length - result.length\n\
    \        val zeroChar = if (zeros == 0) '0' else \"\"\n        result + zeroChar",
  "        val bases = List(1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l)\n        val\
    \ digits = x.toString.reverse.grouped(base).toList\n        val result = digits(0)\n\
    \        val baseIndex = bases.indexOf(base)\n        val baseDigits = digits(baseIndex)\n\
    \        val baseLength = baseDigits.length\n        val baseDigit = baseDigits(0)\n\
    \        val baseDigitLength = baseDigit.length\n        val baseDigits = baseDigits.drop(1)\n\
    \        val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = baseDigitLength - 1\n        val baseDigitLength = baseDigitLength - 1\n \
    \       val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = baseDigitLength - 1\n        val baseDigitLength = baseDigitLength - 1\n \
    \       val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = baseDigitLength - 1\n        val baseDigitLength = baseDigitLength - 1\n \
    \       val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = baseDigitLength - 1\n        val baseDigitLength = baseDigitLength - 1\n \
    \       val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = baseDigitLength - 1\n        val baseDigitLength = baseDigitLength - 1\n \
    \       val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = baseDigitLength - 1\n        val baseDigitLength = baseDigitLength - 1\n \
    \       val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = baseDigitLength - 1\n        val baseDigitLength = baseDigitLength - 1\n \
    \       val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = baseDigitLength - 1\n        val baseDigitLength = baseDigitLength - 1\n \
    \       val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = baseDigitLength - 1\n        val baseDigitLength = baseDigitLength - 1\n \
    \       val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = baseDigitLength - 1\n        val baseDigitLength = baseDigitLength - 1\n \
    \       val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = baseDigitLength - 1\n        val baseDigitLength = baseDigitLength - 1\n \
    \       val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = baseDigitLength - 1\n        val baseDigitLength = baseDigitLength - 1\n \
    \       val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = baseDigitLength - 1\n        val baseDigitLength = baseDigitLength - 1\n \
    \       val baseDigitLength = baseDigitLength - 1\n        val baseDigitLength\
    \ = base", "        var result = \"\"\n        var remainder = x % base\n    \
    \    var quotient = x / base\n        while (quotient > 0) {\n            result\
    \ = quotient.toString + result\n            quotient = quotient / base\n     \
    \   }\n        if (remainder > 0) {\n            result = remainder.toString +\
    \ result\n        }\n        return result", "        val baseString = base.toString.toCharArray\n\
    \        val x = x.toString.toCharArray\n        val baseLength = baseString.length\n\
    \        val xLength = x.length\n        var i = 0\n        var result = 0\n \
    \       while (i < xLength) {\n            val xChar = x(i)\n            val baseChar\
    \ = baseString(i)\n            val xDigit = scala.math.pow(xChar, base)\n    \
    \        val baseDigit = scala.math.pow(baseChar, base)\n            val xDigitString\
    \ = xDigit.toString\n            val baseDigitString = baseDigit.toString\n  \
    \          val xDigitInt = xDigitString.toInt\n            val baseDigitInt =\
    \ baseDigitString.toInt\n            val xDigitLong = xDigitInt.toLong\n     \
    \       val baseDigitLong = baseDigitInt.toLong\n            val xDigitDouble\
    \ = xDigitLong.toDouble\n            val baseDigitDouble = baseDigitLong.toDouble\n\
    \            val xDigitLongDouble = xDigitDouble.toLong\n            val baseDigitLongDouble\
    \ = baseDigitDouble.toLong\n            val xDigitLongLong = xDigitLongDouble.toLong\n\
    \            val baseDigitLongLong = baseDigitLongDouble.toLong\n            val\
    \ xDigitDoubleDouble = xDigitLongLong.toDouble\n            val baseDigitDoubleDouble\
    \ = baseDigitLongLong.toDouble\n            val xDigitDoubleLongDouble = xDigitDoubleDouble.toDouble\n\
    \            val baseDigitDoubleLongDouble = baseDigitDoubleLong.toDouble\n  \
    \          val xDigitDoubleLongLongDouble = xDigitDoubleLongDouble.toDouble\n\
    \            val baseDigitDoubleLongLongDouble = baseDigitDoubleLongDouble.toDouble\n\
    \            val xDigitDoubleLongLongLongDouble = xDigitDoubleLongLongDouble.toDouble\n\
    \            val baseDigitDoubleLongLongLongDouble = baseDigitDoubleLongLongDouble.toDouble\n\
    \            val xDigitDoubleLongLongLongLongDouble = xDigitDoubleLongLongLongDouble.toDouble\n\
    \            val baseDigitDoubleLongLongLongLongDouble = baseDigitDoubleLongLongLongDouble.toDouble\n\
    \            val xDigitDoubleLongLongLongLongDouble = xDigitDoubleLongLongLongLongDouble.toDouble\n\
    \            val baseDigitDoubleLongLongLongLongDouble = baseDigitDoubleLongLongLongLongDouble.toDouble\n\
    \            val xDigitDoubleLongLongLongLongLongDouble = xDigitDoubleLongLongLongLongLongDouble.toDouble\n\
    \            val baseDigitDoubleLongLongLongLongLongDouble = baseDigitDoubleLongLongLongLongLongDouble.toDouble\n\
    \            val xDigitDoubleLongLongLongLongLongLongDouble = xDigitDoubleLongLongLongLongLongLong",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.toString.reverse).mkString\n\
    \        val result = if (digits == \"\") digits else digits.reverse\n       \
    \ result + (if (digits == \"\") \"\" else \"\" + base)", "        val digits =\
    \ x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base.toInt)\
    \ \"\" else base.toString.charAt(base.toInt - digits.size))", "        val digits\
    \ = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n        val\
    \ result = digits.mkString(\"\")\n        result + (if (digits.size == base) \"\
    \" else s\"${digits.last}\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else (if (digits.head < base) \"\" else \"\"))", "        val bases = List(\"\
    10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\
    \ \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\")\n        val digits = List(\"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digitBases = digits.zip(bases)\n\
    \        val digitBasesSorted = digitBases.sortWith((a, b) => a._1 < b._1)\n \
    \       val digitBasesSortedWithBase = digitBasesSorted.map((x) => x._2)\n   \
    \     val digitBasesSortedWithBaseWithBase = digitBasesSortedWithBase.map((x)\
    \ => x._1)\n        val digitBasesSortedWithBaseWithBaseWithBase = digitBasesSortedWithBaseWithBase.map((x)\
    \ => x._2)\n        val digitBasesSortedWithBaseWithBaseWithBaseWithBase = digitBasesSortedWithBaseWithBaseWithBase.map((x)\
    \ => x._3)\n        val digitBasesSortedWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = digitBasesSortedWithBaseWithBaseWithBaseWithBase.map((x) => x._4)\n      \
    \  val digitBasesSortedWithBaseWithBaseWithBaseWithBaseWithBaseWithBase = digitBasesSortedWithBaseWithBaseWithBaseWithBaseWithBase.map((x)\
    \ => x._5)\n        val digitBasesSortedWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = digitBasesSortedWithBaseWithBaseWithBaseWithBaseWithBase.map((x) => x._6)\n\
    \        val digitBasesSortedWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = digitBasesSortedWithBaseWithBaseWithBaseWithBaseWithBase.map((x) => x._7)\n\
    \        val digitBasesSortedWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = digitBasesSortedWithBaseWithBaseWithBaseWithBaseWithBase.map((x) => x._8)\n\
    \        val digitBasesSortedWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = digitBasesSortedWithBaseWithBaseWithBaseWithBaseWithBase.map((x) => x._9)\n\
    \        val digitBasesSortedWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBaseWithBase\
    \ = digitBasesSortedWithBaseWithBaseWithBaseWithBaseWithBase.map((x) => x._10)\n\
    \        val digitBase", "        val bases = List(\"\", \"K\", \"M\", \"G\",\
    \ \"T\", \"P\", \"E\", \"Z\", \"Y\")\n        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = bases.zip(digits).map { case (base, digit) => digit + base\
    \ }\n        result.mkString", "        val digits = x.toString.reverse\n    \
    \    val digitLength = digits.length\n        val baseDigits = base.toString.reverse\n\
    \        val baseDigitLength = baseDigits.length\n        val digitBase = digits.length\
    \ - baseDigitLength\n        val baseDigitBase = baseDigits.length - digitBase\n\
    \        val digitBaseDigits = digitBase.map(x => digits(x))\n        val baseDigitBaseDigits\
    \ = baseDigitBase.map(x => baseDigits(x))\n        val digitBaseBaseDigits = digitBaseDigits.zip(baseDigitBaseDigits)\n\
    \        val digitBaseBaseDigits = digitBaseBaseDigits.map(x => x._1 + x._2)\n\
    \        val digitBaseBaseDigits = digitBaseBaseDigits.map(x => digits(x))\n \
    \       val digitBaseBaseDigits = digitBaseBaseDigits.map(x => baseDigits(x))\n\
    \        val digitBaseBaseDigits = digitBaseBaseDigits.map(x => digits(x))\n \
    \       val digitBaseBaseDigits = digitBaseBaseDigits.map(x => baseDigits(x))\n\
    \        val digitBaseBaseDigits = digitBaseBaseDigits.map(x => digits(x))\n \
    \       val digitBaseBaseDigits = digitBaseBaseDigits.map(x => baseDigits(x))\n\
    \        val digitBaseBaseDigits = digitBaseBaseDigits.map(x => digits(x))\n \
    \       val digitBaseBaseDigits = digitBaseBaseDigits.map(x => baseDigits(x))\n\
    \        val digitBaseBaseDigits = digitBaseBaseDigits.map(x => digits(x))\n \
    \       val digitBaseBaseDigits = digitBaseBaseDigits.map(x => baseDigits(x))\n\
    \        val digitBaseBaseDigits = digitBaseBaseDigits.map(x => digits(x))\n \
    \       val digitBaseBaseDigits = digitBaseBaseDigits.map(x => baseDigits(x))\n\
    \        val digitBaseBaseDigits = digitBaseBaseDigits.map(x => digits(x))\n \
    \       val digitBaseBaseDigits = digitBaseBaseDigits.map(x => baseDigits(x))\n\
    \        val digitBaseBaseDigits = digitBaseBaseDigits.map(x => digits(x))\n \
    \       val digitBaseBaseDigits = digitBaseBaseDigits.map(x => baseDigits(x))\n\
    \        val digitBaseBaseDigits = digitBaseBaseDigits.map(x => digits(x))\n \
    \       val digitBaseBaseDigits = digitBaseBaseDigits.map(x => baseDigits(x))\n\
    \        val digitBaseBaseDigits = digitBaseBaseDigits.map(x => digits(x))\n \
    \       val digitBaseBaseDigits = digitBase", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + (if (digits.tail.isEmpty) \"\" else digits.tail.mkString(\"\"))", "      \
    \  val str = x.toString.reverse\n        val digits = str.dropWhile(_ == '0').toInt\n\
    \        val newBase = digits.length / base\n        val newDigits = str.take(newBase\
    \ * base).toInt\n        val newStr = newDigits.reverse\n        newStr", "  \
    \      val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.charAt(base.toInt - digits.size))", " \
    \       val bases = List(\"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\")\n        val digits = List(\"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n        val baseIndex\
    \ = bases.indexOf(base)\n        val digitIndex = digits.indexOf(x)\n        val\
    \ result = digits(digitIndex) + digits(digitIndex + 1)\n        if (digitIndex\
    \ < baseIndex) result + digits(digitIndex + 2)\n        else result", "      \
    \  val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else base)", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.charAt(base.toInt - digits.size))", " \
    \       val digits = x.toString.reverse\n        val baseDigits = digits.reverse\n\
    \        val baseDigitCount = baseDigits.length\n        val digitCount = digits.length\n\
    \        val baseDigitCount = baseDigits.length\n        val baseDigits = baseDigits.toCharArray\n\
    \        val digits = digits.toCharArray\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val baseDigits = baseDigits.toCharArray\n\
    \        val digits = digits.toCharArray\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val baseDigits = baseDigits.toCharArray\n\
    \        val digits = digits.toCharArray\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val baseDigits = baseDigits.toCharArray\n\
    \        val digits = digits.toCharArray\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val baseDigits = baseDigits.toCharArray\n\
    \        val digits = digits.toCharArray\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val baseDigits = baseDigits.toCharArray\n\
    \        val digits = digits.toCharArray\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val baseDigits = baseDigits.toCharArray\n\
    \        val digits = digits.toCharArray\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val baseDigits = baseDigits.toCharArray\n\
    \        val digits = digits.toCharArray\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val baseDigits = baseDigits.toCharArray\n\
    \        val digits = digits.toCharArray\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val baseDigits = baseDigits.toCharArray\n\
    \        val digits = digits.toCharArray\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val baseDigits = baseDigits.toCharArray\n\
    \        val digits = digits.toCharArray\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val baseDigits = baseDigits.toCharArray\n\
    \        val digits = digits.toCharArray\n        val baseDigitCount = baseDigits.length\n\
    \        val digitCount = digits.length\n        val baseDigits = baseDigits.toCharArray\n\
    \        val digits = digits.toCharArray\n        val baseDigitCount = ", "  \
    \      val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val length = result.length\n\
    \        val zeros = length - (result.length / base)\n        val zeroString =\
    \ (0 to zeros).map(\"0\") + \"\"\n        val result = zeroString + result\n \
    \       result", "        val baseString = Integer.toString(base)\n        val\
    \ xString = Integer.toString(x)\n        val baseLength = baseString.length\n\
    \        val xLength = xString.length\n        val result = new StringBuilder(xLength\
    \ + baseLength)\n        val baseArray = baseString.toCharArray\n        val xArray\
    \ = xString.toCharArray\n        var i = 0\n        while (i < xLength) {\n  \
    \          result.append(xArray(i))\n            result.append(baseArray(baseString.indexOf(xArray(i),\
    \ baseLength)))\n            i += 1\n        }\n        result.toString", "  \
    \      val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits match {\n            case Nil => \"\"\n         \
    \   case x => x.mkString(\"\")\n        }\n        result", "        var result\
    \ = \"\"\n        var remainder = x % base\n        var quotient = x / base\n\
    \        while (quotient > 0) {\n            if (quotient > 1) {\n           \
    \     result += quotient.toString\n                quotient = quotient / base\n\
    \            } else {\n                result += quotient.toString\n         \
    \   }\n        }\n        if (remainder > 0) {\n            result += remainder.toString\n\
    \        }\n        result", "        val baseString = base.toString.toCharArray\n\
    \        val baseLength = baseString.length\n        var result = 0\n        var\
    \ i = 0\n        while (i < baseLength) {\n            val digit = x.toString.toCharArray(i).toLong\n\
    \            val digitString = digit.toString\n            val digitLength = digitString.length\n\
    \            if (digit < base) {\n                result += (digit - base) * (baseString.length\
    \ - digitLength)\n            } else {\n                result += (digit - base)\
    \ * (baseString.length - digitLength)\n                result += digitString.charAt(digitLength\
    \ - 1)\n            }\n            i += 1\n        }\n        return result.toString",
  "        val bases = List(1l, 10l, 100l, 1000l, 10000l, 100000l, 1000000l, 10000000l,\
    \ 100000000l, 1000000000l, 10000000000l, 100000000000l, 1000000000000l, 10000000000000l,\
    \ 100000000000000l, 1000000000000000l, 10000000000000000l, 100000000000000000l,\
    \ 1000000000000000000l)\n        val basesString = bases.map(x => x.toString).mkString(\"\
    \")\n        val basesStringLength = basesString.length\n        val basesStringLength\
    \ = basesString.length\n        val basesStringLength = basesString.length\n \
    \       val basesStringLength = basesString.length\n        val basesStringLength\
    \ = basesString.length\n        val basesStringLength = basesString.length\n \
    \       val basesStringLength = basesString.length\n        val basesStringLength\
    \ = basesString.length\n        val basesStringLength = basesString.length\n \
    \       val basesStringLength = basesString.length\n        val basesStringLength\
    \ = basesString.length\n        val basesStringLength = basesString.length\n \
    \       val basesStringLength = basesString.length\n        val basesStringLength\
    \ = basesString.length\n        val basesStringLength = basesString.length\n \
    \       val basesStringLength = basesString.length\n        val basesStringLength\
    \ = basesString.length\n        val basesStringLength = basesString.length\n \
    \       val basesStringLength = basesString.length\n        val basesStringLength\
    \ = basesString.length\n        val basesStringLength = basesString.length\n \
    \       val basesStringLength = basesString.length\n        val basesStringLength\
    \ = basesString.length\n        val basesStringLength = basesString.length\n \
    \       val basesStringLength = basesString.length\n        val basesStringLength\
    \ = basesString.length\n        val basesStringLength = basesString.length\n \
    \       val basesStringLength = basesString.length\n        val basesStringLength\
    \ = basesString.length\n        val basesStringLength = basesString.length\n \
    \       val basesStringLength = basesString.length\n        val basesStringLength\
    \ = basesString.length\n        val basesStringLength = basesString.length\n \
    \       val basesStringLength = basesString.length\n        val basesStringLength\
    \ = basesString.length\n        val basesStringLength = basesString.length\n \
    \       val basesStringLength = basesString.length\n        val basesStringLength\
    \ = basesString.length\n        val basesStringLength = basesString.length\n \
    \       val base", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + (if (digits.tail.isEmpty) \"\" else digits.tail.mkString(\"\"))", "      \
    \  val bases = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\")\n        val digits = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\")\n        val digits2 = List(\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\")\n        val digits3  = List(\"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ digits_4 = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    , \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\"\
    , \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n        val\
    \ digits_5 = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    , \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\"\
    , \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"\
    , \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\"\
    , \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\")\n        val digits_6 = List(\"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.isEmpty)\
    \ \"\" else (base.toInt - digits.head.toInt).abs.toString.reverse)", "       \
    \ val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == base.toInt) \"\" else base.toString.reverse.grouped(base.toInt).map(_.mkString).reverse)",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val baseString = base.toString\n        val\
    \ x = x.toString.toLong\n        val y = x.toString.toLong\n        val z = x.toString.toLong\n\
    \        val baseStringLength = baseString.length\n        val baseStringLength2\
    \ = baseStringLength * 2\n        val baseStringLength3 = baseStringLength * 3\n\
    \        val baseStringLength4 = baseStringLength * 4\n        val baseStringLength5\
    \ = baseStringLength * 5\n        val baseStringLength6 = baseStringLength * 6\n\
    \        val baseStringLength7 = baseStringLength * 7\n        val baseStringLength8\
    \ = baseStringLength * 8\n        val baseStringLength9 = baseStringLength * 9\n\
    \        val baseStringLength10 = baseStringLength * 10\n        val baseStringLength11\
    \ = baseStringLength * 11\n        val baseStringLength12 = baseStringLength *\
    \ 12\n        val baseStringLength13 = baseStringLength * 13\n        val baseStringLength14\
    \ = baseStringLength * 14\n        val baseStringLength15 = baseStringLength *\
    \ 15\n        val baseStringLength16 = baseStringLength * 16\n        val baseStringLength17\
    \ = baseStringLength * 17\n        val baseStringLength18 = baseStringLength *\
    \ 18\n        val baseStringLength19 = baseStringLength * 19\n        val baseStringLength20\
    \ = baseStringLength * 20\n        val baseStringLength21 = baseStringLength *\
    \ 21\n        val baseStringLength22 = baseStringLength * 22\n        val baseStringLength23\
    \ = baseStringLength * 23\n        val baseStringLength24 = baseStringLength *\
    \ 24\n        val baseStringLength25 = baseStringLength * 25\n        val baseStringLength26\
    \ = baseStringLength * 26\n        val baseStringLength27 = baseStringLength *\
    \ 27\n        val baseStringLength28 = baseStringLength * 28\n        val baseStringLength29\
    \ = baseStringLength * 29\n        val baseStringLength30 = baseStringLength *\
    \ 30\n        val baseStringLength31 = baseStringLength * 31\n        val baseStringLength32\
    \ = baseStringLength * 32\n        val baseStringLength33 = baseStringLength *\
    \ 33\n        val baseStringLength34 = baseStringLength * 34\n        val baseStringLength35\
    \ = baseStringLength * 35\n        val baseStringLength36 = baseStringLength *\
    \ 36\n        val baseStringLength37 = baseStringLength * 37\n        val baseStringLength38\
    \ = baseStringLength * 38\n", "        val digits = x.toString.reverse\n     \
    \   val baseDigits = digits.dropRight(base.toString.length)\n        val baseDigit\
    \ = digits.takeRight(base.toString.length)\n        val result = baseDigit + baseDigits.reverse\n\
    \        result.toString", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        val baseString = if (base\
    \ == 10) \"base10\" else \"base\" + base\n        val resultString = if (digits\
    \ == \"\") result else result + \"(\" + baseString + \")\"\n        resultString",
  "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = if (digits.isEmpty) \"\" else digits.head\n        result\
    \ + digits.tail.mkString(\"\")", "        val digits = x.toString.reverse.grouped(base.toInt).map(_.mkString).reverse\n\
    \        val result = digits.mkString(\"\")\n        result + (if (digits.size\
    \ == 1) \"0\" else \"\")", "        val str = x.toString.reverse\n        val\
    \ baseStr = str.toCharArray.takeWhile(c => c <= '9').mkString\n        val baseInt\
    \ = base.toCharArray.map(c => c - '0').sum\n        val result = baseStr.zip(baseInt).map(c\
    \ => c._1 * c._2).mkString\n        result + str.reverse"]
stop_tokens:
- "\n    }\n"
