language: scala
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.reverse.mkString\n\
    \        result + (if (shift > x.length) \"\" else \"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79_nlwhu.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp79_nlwhu.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val newDigits\
    \ = digits.dropRight(shift)\n        val newDigitString = newDigits.reverse\n\
    \        val newString = newDigitString + digits.dropRight(digits.length - shift)\n\
    \        newString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpd3fzl0ig.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799792
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (shift > digits.length) result + digits.reverse.mkString(\"\")\n\
    \        else result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp86sc10tf.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp86sc10tf.scala:14:51 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (shift > digits.length) result\
    \ + digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse\
    \ is not a member of Iterator[String] - did you mean digits.reversed?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else x.toString.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb1n86oe_.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpb1n86oe_.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \         value length is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        shiftDigit + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputjwtl7f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmputjwtl7f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ digits.length) result else reversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7m1gzvju.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7m1gzvju.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (shift > digits.length) result.reverse\n        else result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpww6s9e2m.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.lastOption.getOrElse(\"\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkc49vjqk.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpkc49vjqk.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.lastOption.getOrElse(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue lastOption is not a member of Iterator[String] - did you mean\
    \ digits.maxOption?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        val result = shiftDigit\
    \ + shiftDigits\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7t9_f2la.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7t9_f2la.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ 0) {\n            result\n        } else if (shift == 1) {\n            reversed\n\
    \        } else {\n            circularShift(reversed, shift - 1)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyyh8z2vs.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyyh8z2vs.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.reverse.mkString\n\
    \        result + (if (result.length < shift) \"\" else \"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_5a7_sqs.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_5a7_sqs.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (shift > digits.length) result.reverse\n        else result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpww6s9e2m.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift).toString.reverse\n\
    \        digits.drop(shift).reverse + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpelc99uf0.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m   |\e[0m        \
    \                                   ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpelc99uf0.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).reverse + shiftDigits\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzbu8g4j.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppzbu8g4j.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val digits = digits.reverse.grouped(shift)\n        val result = digits.mkString(\"\
    \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzehhfxio.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = digits.reverse.grouped(shift)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzehhfxio.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzehhfxio.scala:12:48 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(shift)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (shift\
    \ : Long)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.substring(shift, digits.length).reverse\n\
    \        digits.substring(0, shift) + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu12pcb33.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length).reverse\n\e[31m\e[31m   |\e[0m  \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu12pcb33.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.dropRight(shift).reverse\n        val result = shiftDigit\
    \ + shiftDigits\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc7nzkp2_.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc7nzkp2_.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.dropRight(shift).reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799794
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ x.toString.length) result else reversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphb3dpx8q.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphb3dpx8q.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        shiftDigit + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputjwtl7f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmputjwtl7f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.size < shift ? digits.reverse.mkString(\"\") : \"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr4wgw2jn.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpr4wgw2jn.scala:14:38 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size < shift ? digits.reverse.mkString(\e\
    [31m\"\"\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ ? is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr4wgw2jn.scala:14:47\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size\
    \ < shift ? digits.reverse.mkString(\e[31m\"\"\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = new StringBuilder\n        var i = 0\n        while (i < digits.length)\
    \ {\n            val digit = digits(i)\n            val shift = shift(i)\n   \
    \         if (digit < shift) {\n                result.append(digit)\n       \
    \     } else {\n                result.append(digits(i - shift))\n           \
    \ }\n            i += 1\n        }\n        return result.toString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfraer_2u.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfraer_2u.scala:18:24 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mshift\e[0m = shift(i)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = new StringBuilder\n        var i = 0\n        while (i < digits.length\
    \ && i < shift.length) {\n            if (digits(i) < shift(i)) {\n          \
    \      result.append(digits(i))\n                i += 1\n            } else {\n\
    \                result.append(shift(i))\n                i += 1\n           \
    \ }\n        }\n        if (i < digits.length) {\n            result.append(digits(i))\n\
    \        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwet7v879.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzbu8g4j.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppzbu8g4j.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.reverse.take(shift) ++ digits.reverse.drop(shift)\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp438enpy2.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        val result = shiftDigit\
    \ + shiftDigits\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpejgo0e_l.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpejgo0e_l.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.substring(shift, digits.length)\n\
    \        val result = digits.substring(0, shift) + shiftDigits\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaotaju7l.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpaotaju7l.scala:14:41 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.substring(\e\
    [31m0\e[0m, shift) + shiftDigits\n\e[31m\e[31m   |\e[0m                      \
    \                   ^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \           Found:    (shift : Long)\n\e[31m   |\e[0m                        \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else x.toString.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb1n86oe_.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpb1n86oe_.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \         value length is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (result.length < shift) result + digits.reverse.mkString(\"\")\n\
    \        else result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnrs4ts83.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrs4ts83.scala:14:51 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (result.length < shift) result\
    \ + digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse\
    \ is not a member of Iterator[String] - did you mean digits.reversed?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.reverse.take(shift) ++ digits.reverse.drop(shift)\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4zrnvjqq.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.substring(0,shift)+digits.substring(shift)\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcl57pe1d.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (result.length < shift) result + digits.reverse.mkString(\"\")\n\
    \        else result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnrs4ts83.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrs4ts83.scala:14:51 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (result.length < shift) result\
    \ + digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse\
    \ is not a member of Iterator[String] - did you mean digits.reversed?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift).toString.reverse\n        shiftDigit\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2n_80a40.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2n_80a40.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        val result = shiftDigit\
    \ + shiftDigits\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpejgo0e_l.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpejgo0e_l.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = new StringBuilder\n        var i = 0\n        while (i < digits.length\
    \ && i < shift.length) {\n            if (digits(i) < shift(i)) {\n          \
    \      result.append((digits(i).toChar))\n                i += 1\n           \
    \ } else {\n                result.append((shift(i).toChar))\n               \
    \ i += 1\n            }\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyt0u1lbq.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = new StringBuilder\n        var i = 0\n        while (i < digits.length)\
    \ {\n            result.append(digits(i)).append(shift(i))\n            i += 1\n\
    \        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkl875u1_.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val digitLen = digits.length\n        val shiftDigits\
    \ = digits.dropRight(shift).toString.reverse\n        val shiftDigitLen = shiftDigits.length\n\
    \        val shiftDigitLenMinusOne = shiftDigitLen - 1\n        val shiftDigitLenMinusOneMinusShift\
    \ = shiftDigitLen - 1 - shift\n        val shiftDigitLenMinusOneMinusShiftMinusOne\
    \ = shiftDigitLen - 1 - shift - 1\n        val shiftDigitLenMinusOneMinusShiftMinusOneMinusShift\
    \ = shiftDigitLen - 1 - shift - 1 - 1\n        val shiftDigitLenMinusOneMinusShiftMinusOneMinusShiftMinusOne\
    \ = shiftDigitLen - 1 - shift - 1 - 1 - 1 - 1\n        val shiftDigitLenMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShift\
    \ = shiftDigitLen - 1 - shift - 1 - 1 - 1 - 1 - 1\n        val shiftDigitLenMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOne\
    \ = shiftDigitLen - 1 - shift - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val shiftDigitLenMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShift\
    \ = shiftDigitLen - 1 - shift - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val\
    \ shiftDigitLenMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOne\
    \ = shiftDigitLen - 1 - shift - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n  \
    \      val shiftDigitLenMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShift\
    \ = shiftDigitLen - 1 - shift - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1\n        val shiftDigitLenMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOne\
    \ = shiftDigitLen - 1 - shift - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1\n        val shiftDigitLenMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShift\
    \ = shiftDigitLen - 1 - shift - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5lfjc73s.scala:27:199 --------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitLenMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShiftMinusOneMinusShift\e\
    [0m = shiftDigitLen - \e[31m1\e[0m - shift - \e[31m1\e[0m - \e[31m1\e[0m - \e\
    [31m1\e[0m - \e[31m1\e[0m - \e[31m1\e[0m - \e[31m1\e[0m - \e[31m1\e[0m - \e[31m1\e\
    [0m - \e[31m1\e[0m - \n\e[31m\e[31m   |\e[0m                                 \
    \                                                                            \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp5lfjc73s.scala:14:43 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e[0m = digits.dropRight(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                           Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                           Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5lfjc73s.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.reverse.mkString(\"\
    \")\n        result + digits.reverse.drop(shift).mkString(\"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzd0n9emb.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpzd0n9emb.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (shift == x.toString.length) {\n            result\n        } else\
    \ {\n            circularShift(result, shift + 1)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8q578z9o.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8q578z9o.scala:17:26 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            circularShift(result, shift + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                        Found:    (result : String)\n\e[31m   |\e[0m        \
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val newDigits\
    \ = digits.substring(0,shift) + digits.substring(shift,digits.length)\n      \
    \  newDigits.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqr3hh8fv.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028817
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val digitLen = digits.length\n        val shiftDigits\
    \ = digits.dropRight(shift).reverse\n        val shiftDigitLen = shiftDigits.length\n\
    \        val result = digits + shiftDigits\n        if (shiftDigitLen > digitLen)\
    \ {\n            val shiftDigitLen = shiftDigitLen - digitLen\n            val\
    \ shiftDigits = digits.drop(digitLen).reverse\n            val result = digits\
    \ + shiftDigits\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzq2t7be.scala:14:43\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).reverse\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                    Found:    (shift : Long)\n\e[31m   |\e[0m               \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmppzq2t7be.scala:18:32 ---------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mshiftDigitLen\e[0m = shiftDigitLen\
    \ - digitLen\n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e\
    [31m   |\e[0m                                Recursive \e[33mvalue\e[0m \e[35mshiftDigitLen\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = \"\"\n        val shiftDigit = digits(shift.length)\n        val shiftDigitLength\
    \ = shiftDigit.length\n        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n\
    \        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val\
    \ shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength\
    \ = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength\
    \ + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n\
    \        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val\
    \ shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength\
    \ = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength\
    \ + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n\
    \        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val\
    \ shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength\
    \ = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength\
    \ + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n\
    \        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val\
    \ shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength\
    \ = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength\
    \ + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n\
    \        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val\
    \ shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength\
    \ = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength\
    \ + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n\
    \        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val\
    \ shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength\
    \ = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength\
    \ + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n\
    \        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val\
    \ shiftDigitLength = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength\
    \ = shiftDigitLength + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength\
    \ + shiftDigitLength\n        val shiftDigitLength = shiftDigitLength + shiftDigitLength\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgvurx0zu.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitLength\e[0m =\
    \ shiftDigitLength + shiftDigitLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitLength is already defined as \e[33mvalue\e[0m \e\
    [35mshiftDigitLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgvurx0zu.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitLength\e[0m =\
    \ shiftDigitLength + shiftDigitLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitLength is already defined as \e[33mvalue\e[0m \e\
    [35mshiftDigitLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgvurx0zu.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitLength\e[0m =\
    \ shiftDigitLength + shiftDigitLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitLength is already defined as \e[33mvalue\e[0m \e\
    [35mshiftDigitLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgvurx0zu.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitLength\e[0m =\
    \ shiftDigitLength + shiftDigitLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitLength is already defined as \e[33mvalue\e[0m \e\
    [35mshiftDigitLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpgvurx0zu.scala:21:"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        shiftDigit + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputjwtl7f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmputjwtl7f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = mutable.StringBuilder()\n        var i = 0\n        while (i < digits.length\
    \ && i < shift.length) {\n            val digit = digits(i)\n            val shift\
    \ = shift(i)\n            if (digit < shift) {\n                result += (digit\
    \ + shift)\n            } else {\n                result += (digit - shift)\n\
    \            }\n            i += 1\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbm6nnq47.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbm6nnq47.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpbm6nnq47.scala:18:24 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mval\e[0m \e[36mshift\e[0m = shift(i)\n\e[31m\e[31m \
    \  |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                     \
    \   Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift).toString.reverse\n        shiftDigit\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2n_80a40.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2n_80a40.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.reverse.take(shift)\n \
    \       val shiftDigitString = shiftDigits.reverse\n        val result = shiftDigitString\
    \ + digits.drop(shift)\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptwqxyfzv.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift)\n\e[31m\e[31m   |\e[0m                      \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                     Found:    (shift : Long)\n\e[31m   |\e[0m              \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptwqxyfzv.scala:15:52 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = shiftDigitString\
    \ + digits.drop(shift)\n\e[31m\e[31m   |\e[0m                                \
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                   Found:    (shift : Long)\n\e[31m   |\e[0m                \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.map(_.mkString).reverse.mkString\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxeunn_ky.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxeunn_ky.scala:13:44 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.map(_.mkString).reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.lastOption.getOrElse(\"\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkc49vjqk.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpkc49vjqk.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.lastOption.getOrElse(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue lastOption is not a member of Iterator[String] - did you mean\
    \ digits.maxOption?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.reverse.take(shift)\n \
    \       val result = shiftDigits.reverse.mkString(\"\")\n        result + digits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptirt2_g5.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift)\n\e[31m\e[31m   |\e[0m                      \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                     Found:    (shift : Long)\n\e[31m   |\e[0m              \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        shiftDigit + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputjwtl7f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmputjwtl7f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val digitLen = digits.length\n        val shiftLen\
    \ = shift.toString.length\n        val shiftDigits = shift.toString.reverse\n\
    \        val shiftDigitLen = shiftDigits.length\n        val shiftDigitCount =\
    \ shiftDigitLen / digitLen\n        val shiftDigitCount = math.min(shiftDigitCount,\
    \ digitLen)\n        val shiftDigitCount = math.max(shiftDigitCount, digitLen)\n\
    \        val shiftDigitCount = math.min(shiftDigitCount, digitLen)\n        val\
    \ shiftDigitCount = math.max(shiftDigitCount, digitLen)\n        val shiftDigitCount\
    \ = math.min(shiftDigitCount, digitLen)\n        val shiftDigitCount = math.max(shiftDigitCount,\
    \ digitLen)\n        val shiftDigitCount = math.min(shiftDigitCount, digitLen)\n\
    \        val shiftDigitCount = math.max(shiftDigitCount, digitLen)\n        val\
    \ shiftDigitCount = math.min(shiftDigitCount, digitLen)\n        val shiftDigitCount\
    \ = math.max(shiftDigitCount, digitLen)\n        val shiftDigitCount = math.min(shiftDigitCount,\
    \ digitLen)\n        val shiftDigitCount = math.max(shiftDigitCount, digitLen)\n\
    \        val shiftDigitCount = math.min(shiftDigitCount, digitLen)\n        val\
    \ shiftDigitCount = math.max(shiftDigitCount, digitLen)\n        val shiftDigitCount\
    \ = math.min(shiftDigitCount, digitLen)\n        val shiftDigitCount = math.max(shiftDigitCount,\
    \ digitLen)\n        val shiftDigitCount = math.min(shiftDigitCount, digitLen)\n\
    \        val shiftDigitCount = math.max(shiftDigitCount, digitLen)\n        val\
    \ shiftDigitCount = math.min(shiftDigitCount, digitLen)\n        val shiftDigitCount\
    \ = math.max(shiftDigitCount, digitLen)\n        val shiftDigitCount = math.min(shiftDigitCount,\
    \ digitLen)\n        val shiftDigitCount = math.max(shiftDigitCount, digitLen)\n\
    \        val shiftDigitCount = math.min(shiftDigitCount, digitLen)\n        val\
    \ shiftDigitCount = math.max(shiftDigitCount, digitLen)\n        val shiftDigitCount\
    \ = math.min(shiftDigitCount, digitLen)\n        val shiftDigitCount = math.max(shiftDigitCount,\
    \ digitLen)\n        val shiftDigitCount = math.min(shiftDigitCount, digitLen)\n\
    \        val shiftDigitCount = math.max(shiftDigitCount, digitLen)\n        val\
    \ shiftDigitCount = math.min(shiftDigitCount, digitLen)\n        val shiftDigitCount\
    \ = math.max(shiftDigitCount, digitLen)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3079nsfu.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitCount\e[0m = math.min(shiftDigitCount,\
    \ digitLen)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitCount is already defined as \e[33mvalue\e[0m \e\
    [35mshiftDigitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3079nsfu.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitCount\e[0m = math.max(shiftDigitCount,\
    \ digitLen)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitCount is already defined as \e[33mvalue\e[0m \e\
    [35mshiftDigitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3079nsfu.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitCount\e[0m = math.min(shiftDigitCount,\
    \ digitLen)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitCount is already defined as \e[33mvalue\e[0m \e\
    [35mshiftDigitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3079nsfu.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mshiftDigitCount\e[0m = math.max(shiftDigitCount,\
    \ digitLen)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitCount is already defined as \e[33mvalue\e[0m \e\
    [35mshiftDigitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3079nsfu.scala:22:12 -------------"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.substring(shift, digits.length).reverse\n\
    \        digits.substring(0, shift) + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu12pcb33.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length).reverse\n\e[31m\e[31m   |\e[0m  \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu12pcb33.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.size % shift != 0 ? \"0\" : \"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1_m8uty7.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1_m8uty7.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size % shift != \e[31m0\e[0m\
    \ ? \e[31m\"0\"\e[0m : \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                value ? is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660028822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.drop(shift).reverse.drop(shift).reverse\n        result + digits.take(shift).reverse.take(shift).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw2vpn7ty.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.substring(shift, digits.length).reverse\n\
    \        digits.substring(0, shift) + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu12pcb33.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length).reverse\n\e[31m\e[31m   |\e[0m  \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu12pcb33.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (result.length < shift) result.reverse\n        else result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvs2qw357.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.map(_.mkString).reverse.mkString\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxeunn_ky.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxeunn_ky.scala:13:44 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.map(_.mkString).reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift).toString.reverse\n        val result\
    \ = shiftDigit + shiftDigits\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_c57tn9f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_c57tn9f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else x.toString.reverse.grouped(shift).mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq027auva.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpq027auva.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value length is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq027auva.scala:14:75 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                                             \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = \"\"\n        val shiftLength = shift.length\n        val digitLength\
    \ = digits.length\n        val shiftIndex = digitLength - shiftLength\n      \
    \  val shiftIndexInt = shiftIndex.toInt\n        val digitIndexInt = digitLength\
    \ - shiftIndexInt\n        val shiftIndexIntInt = shiftIndexInt.toInt\n      \
    \  val digitIndexIntInt = digitIndexInt.toInt\n        val shiftIndexIntIntInt\
    \ = shiftIndexIntInt.toInt\n        val digitIndexIntIntIntInt = digitIndexIntIntInt.toInt\n\
    \        val shiftIndexIntIntIntIntInt = shiftIndexIntIntIntInt.toInt\n      \
    \  val digitIndexIntIntIntIntIntInt = digitIndexIntIntIntIntInt.toInt\n      \
    \  val shiftIndexIntIntIntIntIntIntInt = shiftIndexIntIntIntIntIntInt.toInt\n\
    \        val digitIndexIntIntIntIntIntIntIntInt = digitIndexIntIntIntIntIntIntInt.toInt\n\
    \        val shiftIndexIntIntIntIntIntIntIntIntInt = shiftIndexIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val digitIndexIntIntIntIntIntIntIntIntIntInt = digitIndexIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val shiftIndexIntIntIntIntIntIntIntIntIntIntInt = shiftIndexIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val digitIndexIntIntIntIntIntIntIntIntIntIntIntInt = digitIndexIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val shiftIndexIntIntIntIntIntIntIntIntIntIntIntIntInt = shiftIndexIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val digitIndexIntIntIntIntIntIntIntIntIntIntIntIntIntInt = digitIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val shiftIndexIntIntIntIntIntIntIntIntIntIntIntIntIntInt = shiftIndexIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \        val digitIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = digitIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmputgqmm5o.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmputgqmm5o.scala:23:37 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdigitIndexIntIntIntInt\e\
    [0m = digitIndexIntIntInt.toInt\n\e[31m\e[31m   |\e[0m                       \
    \              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                Not found: digitIndexIntIntInt\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmputgqmm5o.scala:24:40 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mshiftIndexIntIntIntIntInt\e\
    [0m = shiftIndexIntIntIntInt.toInt\n\e[31m\e[31m   |\e[0m                    \
    \                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                           Not found: shiftIndexIntIntIntInt\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmputgqmm5o.scala:25:43 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdigitIndexIntIntIntIntIntInt\e\
    [0m = digitIndexIntIntIntIntInt.toInt\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                 Not found: digitIndexIntIntIntIntInt\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmputgqmm5o.scala:26:46 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mshiftIndexIntIntIntIntIntIntInt\e\
    [0m = shiftIndexIntIntIntIntIntInt.toInt\n\e[31m\e[31m   |\e[0m              \
    \                                ^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660028831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzbu8g4j.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppzbu8g4j.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ 0)\n            result\n        else if (shift == 1)\n            reversed\n\
    \        else\n            circularShift(reversed, shift - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpis1db6q2.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpis1db6q2.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ x.toString.length) result\n        else if (shift == x.toString.length - 1)\
    \ reversed\n        else result + reversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmnry6w30.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpmnry6w30.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ 0)\n            result\n        else if (shift == digits.length)\n         \
    \   reversed\n        else\n            circularShift(reversed, shift - 1)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwy3r_va9.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpwy3r_va9.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.drop(shift).mkString(\"\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ng7g1lq.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ng7g1lq.scala:14:30 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.drop(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Found:    (shift : Long)\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        val result = shiftDigit\
    \ + shiftDigits\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpejgo0e_l.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpejgo0e_l.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else x.toString.reverse.grouped(shift).mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq027auva.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpq027auva.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value length is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq027auva.scala:14:75 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                                             \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        shiftDigit + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputjwtl7f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmputjwtl7f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (shift > digits.length) result else digits.reverse.mkString(\"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnfzbzjsi.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnfzbzjsi.scala:14:54 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (shift > digits.length) result\
    \ \e[33melse\e[0m digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val result = shiftDigits.reverse.dropRight(shift).reverse\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppaqkv_vz.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppaqkv_vz.scala:14:51 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = shiftDigits.reverse.dropRight(shift).reverse\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ (shift : Long)\n\e[31m   |\e[0m                                            \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzbu8g4j.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppzbu8g4j.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.lastOption.getOrElse(\"\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkc49vjqk.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpkc49vjqk.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.lastOption.getOrElse(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue lastOption is not a member of Iterator[String] - did you mean\
    \ digits.maxOption?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.reverse.mkString(\"\
    \")\n        return result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpow6dyk9h.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpow6dyk9h.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ 0)\n            result\n        else\n            result + reversed\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjc0wo6k0.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpjc0wo6k0.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        shiftDigit + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputjwtl7f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmputjwtl7f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else \"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcuwn7he7.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpcuwn7he7.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \      value length is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.dropRight(shift).reverse.drop(shift).reverse\n        result + digits.takeRight(shift).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2w2dyd5o.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.reverse.mkString(\"\
    \")\n        return result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpow6dyk9h.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpow6dyk9h.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        shiftDigit + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputjwtl7f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmputjwtl7f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val digitLength = digits.length\n        val shiftDigits\
    \ = digits.dropRight(shift).toString.reverse\n        val shiftDigitLength = shiftDigits.length\n\
    \        val result = digits(0 until shiftDigitLength) ++ (shiftDigits(0 until\
    \ shiftDigitLength) ++ (digits(shiftDigitLength until digitLength)))\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0za0m26h.scala:14:43\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m   |\e[0m        \
    \                                   ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0za0m26h.scala:16:28 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits(\e\
    [31m0\e[0m until shiftDigitLength) ++ (shiftDigits(\e[31m0\e[0m until shiftDigitLength)\
    \ ++ (digits(shiftDigitLength until digitLength)))\n\e[31m\e[31m   |\e[0m    \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                      Found:    Range\n\e[31m   |\e[0m                      \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0za0m26h.scala:16:70\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = digits(\e[31m0\e[0m until shiftDigitLength) ++ (shiftDigits(\e[31m0\e[0m\
    \ until shiftDigitLength) ++ (digits(shiftDigitLength until digitLength)))\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                                       Found:    Range\n\e[31m   |\e[0m     \
    \                                                    Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0za0m26h.scala:16:107 -------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits(\e\
    [31m0\e[0m until shiftDigitLength) ++ (shiftDigits(\e[31m0\e[0m until shiftDigitLength)\
    \ ++ (digits(shiftDigitLength until digitLength)))\n\e[31m\e[31m  "
  stdout: ''
  timestamp: 1660028834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.drop(shift).mkString(\"\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ng7g1lq.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ng7g1lq.scala:14:30 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.drop(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Found:    (shift : Long)\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.reverse.mkString\n\
    \        result + (if (shift > x.length) \"\" else \"0\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj5b85nt2.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpj5b85nt2.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ x.toString.length) result else reversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphb3dpx8q.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphb3dpx8q.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = mutable.StringBuilder()\n        var i = 0\n        while (i < digits.length)\
    \ {\n            val digit = digits(i)\n            val shift = shift(i)\n   \
    \         val newDigit = digit + shift\n            if (newDigit > 9) {\n    \
    \            result.append((newDigit - 10).toChar)\n            } else {\n   \
    \             result.append(newDigit)\n            }\n            i += 1\n   \
    \     }\n        result.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5zha8rrq.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5zha8rrq.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp5zha8rrq.scala:18:24 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mval\e[0m \e[36mshift\e[0m = shift(i)\n\e[31m\e[31m \
    \  |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                     \
    \   Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ digitLen = digits.length\n        val shiftLen = shift.length\n        val result\
    \ = new StringBuilder\n        var i = 0\n        while (i < digitLen) {\n   \
    \         val digit = digits.charAt(i)\n            val shift = shift.charAt(i)\n\
    \            val newDigit = digit + shift\n            if (newDigit > 9) {\n \
    \               newDigit -= 10\n            }\n            result.append(newDigit)\n\
    \            i += 1\n        }\n        if (shiftLen > digitLen) {\n         \
    \   val shiftDigits = shift.substring(digitLen)\n            val shiftDigitLen\
    \ = shiftDigits.length\n            val shiftDigit = shiftDigits.charAt(0)\n \
    \           val newShift = shiftDigit + digits.substring(digitLen)\n         \
    \   result.append(newShift)\n        }\n        return result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx6eadaox.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx6eadaox.scala:20:24 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mshift\e[0m = shift.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.lastOption.getOrElse(\"\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkc49vjqk.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpkc49vjqk.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.lastOption.getOrElse(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue lastOption is not a member of Iterator[String] - did you mean\
    \ digits.maxOption?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        val result = shiftDigit\
    \ + shiftDigits\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpejgo0e_l.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpejgo0e_l.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ x.toString.length) result\n        else reversed\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp08_he936.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp08_he936.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (shift > digits.length) result.reverse\n        else result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpww6s9e2m.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.map(_.mkString).reverse.mkString(\"\
    \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0q_v72mz.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0q_v72mz.scala:13:44 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.map(_.mkString).reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you\
    \ mean Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ x.toString.length) result\n        else reversed\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp08_he936.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp08_he936.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzbu8g4j.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppzbu8g4j.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else x.toString.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb1n86oe_.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpb1n86oe_.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \         value length is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift).toString.reverse\n\
    \        digits.drop(shift).mkString(\"\") + shiftDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuzbo2z2o.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m   |\e[0m        \
    \                                   ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpuzbo2z2o.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).mkString(\e[31m\"\"\e[0m)\
    \ + shiftDigits\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                    Found:    (shift : Long)\n\e[31m   |\e[0m       \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = \"\"\n        val shiftDigit = shift.charAt(0)\n        val shiftDigitCount\
    \ = digits.length - shift.length\n        val shiftDigitCount = if (shiftDigitCount\
    \ == 0) 0 else shiftDigitCount\n        val digitCount = digits.length\n     \
    \   val digit = digits.charAt(0)\n        val digitCount = digits.length\n   \
    \     val digitCount = digits.length\n        val shiftDigitCount = digits.length\
    \ - shift.length\n        val digitCount = digits.length\n        val digit =\
    \ digits.charAt(0)\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpog9bq73f.scala:82:4 ----------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpog9bq73f.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mshiftDigitCount\e[0m = \e[33mif\e[0m (shiftDigitCount == \e[31m0\e[0m)\
    \ \e[31m0\e[0m \e[33melse\e[0m shiftDigitCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mshiftDigitCount is already defined as \e[33mvalue\e[0m \e\
    [35mshiftDigitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpog9bq73f.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdigitCount\e[0m = digits.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdigitCount is already defined as \e[33mvalue\e[0m \e[35mdigitCount\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpog9bq73f.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigitCount\e[0m = digits.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mdigitCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpog9bq73f.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mshiftDigitCount\e[0m = digits.length - shift.length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mshiftDigitCount is already defined as \e[33mvalue\e[0m \e[35mshiftDigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the "
  stdout: ''
  timestamp: 1660028835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        shiftDigit + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputjwtl7f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmputjwtl7f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.size % shift != 0 ? digits(digits.size - 1) : \"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8bt84mq9.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8bt84mq9.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size % shift != \e[31m0\e[0m\
    \ ? digits(digits.size - \e[31m1\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                         ^^^\e[0m\n\e[31m   |\e[0m        \
    \                                 value ? is not a member of Int\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp8bt84mq9.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size % shift != \e[31m0\e[0m\
    \ ? digits(digits.size - \e[31m1\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                  \e[33mvalue\e[0m \e[35mdigits\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.last.size < shift ? digits.reverse.mkString(\"\")\
    \ : \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp076hry17.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp076hry17.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.last.size < shift ? digits.reverse.mkString(\e\
    [31m\"\"\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue last is not a member of Iterator[String] - did you mean\
    \ digits.wait?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.size % shift != 0 ? digits(digits.size - 1) : \"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8bt84mq9.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8bt84mq9.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size % shift != \e[31m0\e[0m\
    \ ? digits(digits.size - \e[31m1\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                         ^^^\e[0m\n\e[31m   |\e[0m        \
    \                                 value ? is not a member of Int\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp8bt84mq9.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size % shift != \e[31m0\e[0m\
    \ ? digits(digits.size - \e[31m1\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                  \e[33mvalue\e[0m \e[35mdigits\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzbu8g4j.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppzbu8g4j.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.size % shift != 0 ? digits.dropRight(digits.size %\
    \ shift).mkString(\"\") : \"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0xy3etzt.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0xy3etzt.scala:14:43 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size % shift != \e[31m0\e[0m\
    \ ? digits.dropRight(digits.size % shift).mkString(\e[31m\"\"\e[0m) : \e[31m\"\
    \"\e[0m)\n\e[31m\e[31m   |\e[0m                                         ^^^\e\
    [0m\n\e[31m   |\e[0m                                         value ? is not a\
    \ member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0xy3etzt.scala:14:52\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size\
    \ % shift != \e[31m0\e[0m ? digits.dropRight(digits.size % shift).mkString(\e\
    [31m\"\"\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       value dropRight is not a member of Iterator[String]\n3 errors found\n"
  stdout: ''
  timestamp: 1660028843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else x.toString.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb1n86oe_.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpb1n86oe_.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \         value length is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ 0)\n            result\n        else if (shift == 1)\n            reversed\n\
    \        else\n            circularShift(reversed, shift - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpis1db6q2.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpis1db6q2.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (shift > digits.length) result.reverse\n        else result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpww6s9e2m.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.substring(shift, digits.length)\n\
    \        val shiftDigit = digits.charAt(shift)\n        val result = shiftDigit\
    \ + shiftDigits\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjztbe7hv.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjztbe7hv.scala:14:39 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.charAt(shift)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Found:    (shift : Long)\n\e\
    [31m   |\e[0m                                       Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift).toString.reverse\n\
    \        digits.drop(shift).mkString + shiftDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyfmwcrj4.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m   |\e[0m        \
    \                                   ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpyfmwcrj4.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).mkString + shiftDigits\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift).toString.reverse\n        shiftDigit\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2n_80a40.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2n_80a40.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (shift > digits.length) result.reverse\n        else result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpww6s9e2m.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ digits.size)\n            reversed\n        else\n            result + reversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj3bwrrwx.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpj3bwrrwx.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        val result = shiftDigit\
    \ + shiftDigits\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprlw_c3o8.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprlw_c3o8.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift).toString.reverse\n\
    \        digits.drop(shift).mkString + shiftDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyfmwcrj4.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m   |\e[0m        \
    \                                   ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpyfmwcrj4.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).mkString + shiftDigits\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ x.toString.length) result else reversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphb3dpx8q.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphb3dpx8q.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.reverse.take(shift) ++ digits.reverse.drop(shift)\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4zrnvjqq.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        shiftDigit + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputjwtl7f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmputjwtl7f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.drop(shift).reverse.mkString(\"\"))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpztg0jfua.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpztg0jfua.scala:14:30 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.drop(shift).reverse.mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\
    \e[31m   |\e[0m                              Found:    (shift : Long)\n\e[31m\
    \   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.reverse.mkString\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0kl8vf5k.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0kl8vf5k.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        shiftDigit + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputjwtl7f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmputjwtl7f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        shiftDigit + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputjwtl7f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmputjwtl7f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (shift > digits.length) result.reverse\n        else result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpww6s9e2m.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.substring(shift, digits.length)\n        result += digits.substring(0,\
    \ shift)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps4ae8aan.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmps4ae8aan.scala:15:15 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        result += digits.substring(\e[31m0\e[0m, shift)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is\
    \ not a member of String - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzbu8g4j.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppzbu8g4j.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.reverse.take(shift).reverse.mkString(\"\")\n        if (shift < digits.length)\
    \ result + digits.reverse.take(digits.length - shift).reverse.mkString(\"\")\n\
    \        else result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjqabwpzb.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzbu8g4j.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppzbu8g4j.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val digitCount = digits.length\n        val shiftCount\
    \ = shift.toString.length\n        val result = new StringBuilder(digitCount)\n\
    \        var i = 0\n        while (i < digitCount) {\n            val digit =\
    \ digits.charAt(i)\n            val shift = shift.charAt(i)\n            val digitShift\
    \ = digit.toLong * 10 + shift.toLong\n            result.append(digitShift.toChar)\n\
    \            i += 1\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqpsr0wmp.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mshift\e[0m = shift.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (result.length < shift) result + digits.reverse.mkString(\"\")\n\
    \        else result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnrs4ts83.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnrs4ts83.scala:14:51 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (result.length < shift) result\
    \ + digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse\
    \ is not a member of Iterator[String] - did you mean digits.reversed?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift).toString.reverse\n\
    \        digits.drop(shift).mkString + shiftDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyfmwcrj4.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m   |\e[0m        \
    \                                   ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpyfmwcrj4.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).mkString + shiftDigits\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \         Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.substring(shift, digits.length)\n\
    \        digits.substring(0, shift) + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4k9p4mr_.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length)\n\e[31m\e[31m   |\e[0m          \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp4k9p4mr_.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.reverse.take(shift) ++ digits.reverse.drop(shift)\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4zrnvjqq.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else \"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcuwn7he7.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpcuwn7he7.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \      value length is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (shift > digits.length) result.reverse\n        else result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpww6s9e2m.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = mutable.StringBuilder()\n        var i = 0\n        while (i < digits.length)\
    \ {\n            val digit = digits(i)\n            val shift = shift(i)\n   \
    \         val newDigit = digit + shift\n            if (newDigit > 9) {\n    \
    \            newDigit - 10\n            }\n            result.append(newDigit)\n\
    \            i += 1\n        }\n        return result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4qlkc250.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4qlkc250.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.StringBuilder()\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp4qlkc250.scala:18:24 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m            \e[33mval\e[0m \e[36mshift\e[0m = shift(i)\n\e[31m\e[31m \
    \  |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                     \
    \   Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else x.toString.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb1n86oe_.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpb1n86oe_.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \         value length is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ x.toString.length) result else reversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphb3dpx8q.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphb3dpx8q.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = new StringBuilder\n        var i = 0\n        while (i < digits.length)\
    \ {\n            val digit = digits.charAt(i)\n            val shift = shift.charAt(i)\n\
    \            if (digit == '1') {\n                val digit = digits.charAt(i\
    \ + 1)\n                val shift = shift.charAt(i + 1)\n                if (digit\
    \ == '1') {\n                    result.append(digit)\n                    i +=\
    \ 2\n                } else {\n                    result.append(digit)\n    \
    \                i += 1\n                }\n            } else {\n           \
    \     result.append(digit)\n                i += 1\n            }\n        }\n\
    \        result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2l29btk2.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2l29btk2.scala:18:24 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mshift\e[0m = shift.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2l29btk2.scala:21:28 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mshift\e[0m = shift.charAt(i\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mshift\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift).toString.reverse\n        shiftDigits\
    \ + shiftDigit\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ighegtf.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3ighegtf.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val newDigits\
    \ = digits.dropRight(shift)\n        val newDigitString = newDigits.reverse\n\
    \        val newDigitStringLength = newDigitString.length\n        val newDigitStringLength\
    \ = newDigitStringLength + shift\n        val newDigitStringLength = newDigitStringLength.toString\n\
    \        val newDigitString = newDigitString.take(newDigitStringLength)\n    \
    \    val newDigitString = newDigitString.reverse\n        newDigitString\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphrwkhlb1.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewDigitStringLength\e[0m\
    \ = newDigitStringLength + shift\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewDigitStringLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewDigitStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphrwkhlb1.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewDigitStringLength\e[0m\
    \ = newDigitStringLength.toString\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewDigitStringLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewDigitStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmphrwkhlb1.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewDigitString\e[0m = newDigitString.take(newDigitStringLength)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewDigitString is already defined as \e[33mvalue\e[0m \e[35mnewDigitString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphrwkhlb1.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnewDigitString\e[0m = newDigitString.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnewDigitString is already defined as \e[33mvalue\e[0m \e[35mnewDigitString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmphrwkhlb1.scala:13:20 ---------------------"
  stdout: ''
  timestamp: 1660028842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift).toString.reverse\n        shiftDigit\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2n_80a40.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2n_80a40.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift).toString.reverse\n        val result\
    \ = shiftDigit + shiftDigits\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_c57tn9f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_c57tn9f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.reverse.mkString(\"\
    \")\n        return result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpow6dyk9h.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpow6dyk9h.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzbu8g4j.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppzbu8g4j.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > digits.length) digits(digits.length - shift)\
    \ else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphuo0sbcw.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmphuo0sbcw.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else x.toString.reverse.grouped(shift).mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq027auva.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpq027auva.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value length is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq027auva.scala:14:75 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                                             \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (result.length < shift) result.reverse\n        else result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvs2qw357.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = new StringBuilder\n        var i = 0\n        while (i < digits.length\
    \ && i < shift.length) {\n            val digit = digits(i)\n            val shift\
    \ = shift(i)\n            val digitShift = digit.asInstanceOf[Int] + (shift.asInstanceOf[Int]\
    \ * (digit.asInstanceOf[Int] - digit.asInstanceOf[Int] % shift))\n           \
    \ result.append(digitShift)\n            i += 1\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzge93dkt.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzge93dkt.scala:18:24 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mshift\e[0m = shift(i)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > digits.length) digits(digits.length - shift)\
    \ else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphuo0sbcw.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmphuo0sbcw.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.reverse.mkString\n\
    \        result + digits.reverse.take(shift).mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprj_b95cm.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmprj_b95cm.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.dropRight(shift).reverse.mkString(\"\")\n        result + (if (shift\
    \ > digits.length) digits else digits.drop(shift))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphzt268vq.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.reverse.take(shift)\n \
    \       val result = shiftDigits.reverse.mkString(\"\")\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbbo6hn3e.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift)\n\e[31m\e[31m   |\e[0m                      \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                     Found:    (shift : Long)\n\e[31m   |\e[0m              \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.drop(shift).mkString(\"\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ng7g1lq.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ng7g1lq.scala:14:30 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.drop(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Found:    (shift : Long)\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.map(_.mkString).reverse.mkString\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxeunn_ky.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxeunn_ky.scala:13:44 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.map(_.mkString).reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ Iterator[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028822
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        shiftDigit + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmputjwtl7f.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmputjwtl7f.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) digits else digits.reverse.mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphcrtr3n3.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphcrtr3n3.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) digits\
    \ \e[33melse\e[0m digits.reverse.mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                value length is not a member of Long\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmphcrtr3n3.scala:14:59 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) digits \e[33melse\e\
    [0m digits.reverse.mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                                           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028847
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzbu8g4j.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppzbu8g4j.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val digits_length = digits.length\n        val digits_length_minus_shift\
    \ = digits_length - shift\n        val digits_length_minus_shift_minus_1 = digits_length_minus_shift\
    \ - 1\n        val digits_length_minus_shift_minus_2 = digits_length_minus_shift_minus_1\
    \ - 1\n        val digits_length_minus_shift_minus_3 = digits_length_minus_shift_minus_2\
    \ - 1\n        val digits_length_minus_shift_minus_4 = digits_length_minus_shift_minus_3\
    \ - 1\n        val digits_length_minus_shift_minus_5 = digits_length_minus_shift_minus_4\
    \ - 1\n        val digits_length_minus_shift_minus_6 = digits_length_minus_shift_minus_5\
    \ - 1\n        val digits_length_minus_shift_minus_7 = digits_length_minus_shift_minus_6\
    \ - 1\n        val digits_length_minus_shift_minus_8 = digits_length_minus_shift_minus_7\
    \ - 1\n        val digits_length_minus_shift_minus_9 = digits_length_minus_shift_minus_8\
    \ - 1\n        val digits_length_minus_shift_minus_10 = digits_length_minus_shift_minus_9\
    \ - 1\n        val digits_length_minus_shift_minus_11 = digits_length_minus_shift_minus_10\
    \ - 1\n        val digits_length_minus_shift_minus_12 = digits_length_minus_shift_minus_11\
    \ - 1\n        val digits_length_minus_shift_minus_13 = digits_length_minus_shift_minus_12\
    \ - 1\n        val digits_length_minus_shift_minus_14 = digits_length_minus_shift_minus_13\
    \ - 1\n        val digits_length_minus_shift_minus_15 = digits_length_minus_shift_minus_14\
    \ - 1\n        val digits_length_minus_shift_minus_16 = digits_length_minus_shift_minus_15\
    \ - 1\n        val digits_length_minus_shift_minus_17 = digits_length_minus_shift_minus_16\
    \ - 1\n        val digits_length_minus_shift_minus_18 = digits_length_minus_shift_minus_17\
    \ - 1\n        val digits_length_minus_shift_minus_19 = digits_length_minus_shift_minus_18\
    \ - 1\n        val digits_length_minus_shift_minus_20 = digits_length_minus_shift_minus_19\
    \ - 1\n        val digits_length_minus_shift_minus_21 = digits_length_minus_shift_minus_20\
    \ - 1\n        val digits_length_minus_shift_minus_22 = digits_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv9wzt4du.scala:36:49 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mdigits_length_minus_shift_minus_22\e\
    [0m = digits_\n\e[31m\e[31m   |\e[0m                                         \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \          Not found: digits_\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpv9wzt4du.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift).toString.reverse\n        shiftDigit\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2n_80a40.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2n_80a40.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.substring(shift, digits.length).reverse\n\
    \        digits.substring(0, shift) + shiftDigits\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu12pcb33.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.substring(shift, digits.length).reverse\n\e[31m\e[31m   |\e[0m  \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                           Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu12pcb33.scala:14:28 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.substring(\e[31m0\e[0m, shift) + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Found:    (shift : Long)\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.reverse.take(shift).toString.reverse\n\
    \        digits.drop(shift).take(shift).toString + shiftDigits\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxyl9opmc.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift).toString.reverse\n\e[31m\e[31m   |\e[0m     \
    \                                         ^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                      Found:    (shift : Long)\n\e[31m   |\e\
    [0m                                              Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxyl9opmc.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).take(shift).toString + shiftDigits\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Found:    (shift : Long)\n\e[31m   |\e[0m                    Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxyl9opmc.scala:14:32\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).take(shift).toString\
    \ + shiftDigits\n\e[31m\e[31m   |\e[0m                                ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > digits.length) digits(digits.length - shift)\
    \ else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphuo0sbcw.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmphuo0sbcw.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val digits = digits.reverse.grouped(shift)\n        val result = digits.mkString(\"\
    \")\n        return result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpspj0ip4w.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = digits.reverse.grouped(shift)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdigits is already defined as \e[33mvalue\e[0m \e[35mdigits\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpspj0ip4w.scala:15:12 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.mkString(\e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpspj0ip4w.scala:12:48 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.reverse.grouped(shift)\n\
    \e[31m\e[31m   |\e[0m                                                ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                Found:    (shift\
    \ : Long)\n\e[31m   |\e[0m                                                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift).toString.reverse\n\
    \        val result = digits + shiftDigits\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6xdepn30.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).toString.reverse\n\e[31m\e[31m   |\e[0m        \
    \                                   ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = \"\"\n        var i = 0\n        while (i < digits.length) {\n    \
    \        val digit = digits.charAt(i)\n            val shift = shift.charAt(i)\n\
    \            val digitShift = digit.toLong * 10 + shift.toLong\n            val\
    \ digitShiftDigit = digitShift % 10\n            val digitShiftDigitString = digitShiftDigit.toString\n\
    \            if (digitShiftDigitString == 0) {\n                result += digit\n\
    \            } else {\n                result += digitShiftDigitString\n     \
    \       }\n            i += 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp9ijxwkt.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpp9ijxwkt.scala:18:24 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mshift\e[0m = shift.charAt(i)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp9ijxwkt.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                result += digit\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of String - did you mean result.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpp9ijxwkt.scala:25:23 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                result += digitShiftDigitString\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a\
    \ member of String - did you mean result.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660028852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (shift > digits.length) result.reverse\n        else result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpww6s9e2m.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzbu8g4j.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppzbu8g4j.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.reverse.take(shift).reverse\n\
    \        digits.drop(shift).take(shiftDigits.length).mkString(\"\") + shiftDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj22ckliq.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift).reverse\n\e[31m\e[31m   |\e[0m              \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpj22ckliq.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.drop(shift).take(shiftDigits.length).mkString(\e\
    [31m\"\"\e[0m) + shiftDigits\n\e[31m\e[31m   |\e[0m                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    (shift : Long)\n\e[31m   |\e\
    [0m                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.reverse.take(shift) ++ digits.reverse.drop(shift)\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4zrnvjqq.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ x.toString.length) result else reversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphb3dpx8q.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmphb3dpx8q.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.reverse.take(shift)\n \
    \       val shiftDigit = shiftDigits.reverse.take(1)\n        val result = shiftDigit\
    \ + digits.drop(shift)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjt20vdlz.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift)\n\e[31m\e[31m   |\e[0m                      \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                     Found:    (shift : Long)\n\e[31m   |\e[0m              \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjt20vdlz.scala:15:46 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = shiftDigit\
    \ + digits.drop(shift)\n\e[31m\e[31m   |\e[0m                                \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \           Found:    (shift : Long)\n\e[31m   |\e[0m                        \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        val reversed = digits.reverse.mkString(\"\")\n        if (shift ==\
    \ 0)\n            result\n        else\n            result + reversed\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjc0wo6k0.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpjc0wo6k0.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mreversed\e[0m = digits.reverse.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean\
    \ digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val digitCount = digits.length\n        val shiftCount\
    \ = shift.toString.length\n        val shiftDigitCount = shiftCount + digitCount\n\
    \        val digitShiftCount = digitCount - shiftCount\n        val digitShift\
    \ = (digitCount - shiftCount).toString.reverse\n        val digitShiftDigitCount\
    \ = digitShiftCount + digitCount\n        val digitShiftDigit = (digitCount -\
    \ shiftCount).toString.reverse\n        val digitShiftDigitCount = digitShiftCount\
    \ + digitCount\n        val digitShiftDigit = (digitCount - shiftCount).toString.reverse\n\
    \        val digitShiftDigitCount = digitShiftCount + digitCount\n        val\
    \ digitShiftDigit = (digitCount - shiftCount).toString.reverse\n        val digitShiftDigitCount\
    \ = digitShiftCount + digitCount\n        val digitShiftDigit = (digitCount -\
    \ shiftCount).toString.reverse\n        val digitShiftDigitCount = digitShiftCount\
    \ + digitCount\n        val digitShiftDigit = (digitCount - shiftCount).toString.reverse\n\
    \        val digitShiftDigitCount = digitShiftCount + digitCount\n        val\
    \ digitShiftDigit = (digitCount - shiftCount).toString.reverse\n        val digitShiftDigitCount\
    \ = digitShiftCount + digitCount\n        val digitShiftDigit = (digitCount -\
    \ shiftCount).toString.reverse\n        val digitShiftDigitCount = digitShiftCount\
    \ + digitCount\n        val digitShiftDigit = (digitCount - shiftCount).toString.reverse\n\
    \        val digitShiftDigitCount = digitShiftCount + digitCount\n        val\
    \ digitShiftDigit = (digitCount - shiftCount).toString.reverse\n        val digitShiftDigitCount\
    \ = digitShiftCount + digitCount\n        val digitShiftDigit = (digitCount -\
    \ shiftCount).toString.reverse\n        val digitShiftDigitCount = digitShiftCount\
    \ + digitCount\n        val digitShiftDigit = (digitCount - shiftCount).toString.reverse\n\
    \        val digitShiftDigitCount = digitShiftCount + digitCount\n        val\
    \ digitShiftDigit = (digitCount - shiftCount).toString.reverse\n        val digitShiftDigitCount\
    \ = digitShiftCount + digitCount\n        val digitShiftDigit = (digitCount -\
    \ shiftCount).toString.reverse\n        val digitShiftDigitCount = digitShiftCount\
    \ + digitCount\n        val digitShiftDigit = (digitCount - shiftCount).toString.reverse\n\
    \        val digitShiftDigitCount = digitShiftCount + digitCount\n        val\
    \ digitShiftDigit = (digitCount - shiftCount).toString.reverse\n        val digitShiftDigitCount\
    \ = digitShiftCount + digitCount\n        val digitShiftDigit = (digitCount -\
    \ shiftCount).toString.reverse\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpg0tq9eiu.scala:50:11 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpg0tq9eiu.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdigitShiftDigitCount\e[0m\
    \ = digitShiftCount + digitCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitShiftDigitCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mdigitShiftDigitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg0tq9eiu.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdigitShiftDigit\e[0m = (digitCount\
    \ - shiftCount).toString.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitShiftDigit is already defined as \e[33mvalue\e[0m \e\
    [35mdigitShiftDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg0tq9eiu.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdigitShiftDigitCount\e[0m\
    \ = digitShiftCount + digitCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitShiftDigitCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mdigitShiftDigitCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg0tq9eiu.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdigitShiftDigit\e[0m = (digitCount\
    \ - shiftCount).toString.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660028853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val result = new StringBuilder\n        var i =\
    \ 0\n        while (i < digits.length && i < shift) {\n            result.append(digits(i))\n\
    \            i += 1\n        }\n        if (i < digits.length) {\n           \
    \ result.append(digits(i))\n        }\n        return result.toString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt_6qfbvq.scala:26)\n\tat Problem.main(tmpt_6qfbvq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > digits.length) digits(digits.length - shift.toInt)\
    \ else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_egnj46y.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmp_egnj46y.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift.toInt) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.reverse.take(digits.length - shift)\n        result + digits.reverse.drop(digits.length\
    \ - shift)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpudt7uicg.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift).reverse\n\
    \        digits.takeRight(shift).mkString + shiftDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8pdfc0ho.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).reverse\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                    Found:    (shift : Long)\n\e[31m   |\e[0m               \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp8pdfc0ho.scala:14:25 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        digits.takeRight(shift).mkString + shiftDigits\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   Found:    (shift : Long)\n\e[31m   |\e[0m                \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift).toString.reverse\n        shiftDigit\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2n_80a40.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2n_80a40.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else x.toString.reverse.grouped(shift).mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq027auva.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpq027auva.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value length is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq027auva.scala:14:75 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                                             \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.reverse.take(shift) ++ digits.reverse.drop(shift)\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4zrnvjqq.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        digits.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzbu8g4j.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppzbu8g4j.scala:14:15 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        digits.reverse.mkString(\e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Iterator[String] - did you mean digits.reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else x.toString.reverse.grouped(shift).mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq027auva.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpq027auva.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value length is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq027auva.scala:14:75 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                                             \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.reverse.take(shift) ++ digits.reverse.drop(shift)\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4zrnvjqq.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift)\n        val result = shiftDigit\
    \ + shiftDigits\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7t9_f2la.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7t9_f2la.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = \"\"\n        val shiftDigits = shift.toString.reverse\n        val\
    \ shiftDigitCount = shiftDigits.length\n        val digitCount = digits.length\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount\
    \ = shiftDigits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digitCount\
    \ = digits.length\n        val digitCount = digits.length\n        val digit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6z2q2c47.scala:84:4 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6z2q2c47.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mshiftDigitCount\e[0m = shiftDigits.length\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mshiftDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mshiftDigitCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6z2q2c47.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mshiftDigitCount\e[0m = shiftDigits.length\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mshiftDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mshiftDigitCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6z2q2c47.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigitCount\e[0m = digits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitCount is already defined as \e[33mvalue\e[0m \e[35mdigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6z2q2c47.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mdigitCount\e[0m = digits.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mdigitCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6z2q2c47.scala:22:12\
    \ ------------------"
  stdout: ''
  timestamp: 1660028853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.lastOption.getOrElse(\"\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkc49vjqk.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpkc49vjqk.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.lastOption.getOrElse(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue lastOption is not a member of Iterator[String] - did you mean\
    \ digits.maxOption?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.size < shift ? digits.reverse.mkString(\"\") : \"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr4wgw2jn.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpr4wgw2jn.scala:14:38 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size < shift ? digits.reverse.mkString(\e\
    [31m\"\"\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ ? is not a member of Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr4wgw2jn.scala:14:47\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        result + (digits.size\
    \ < shift ? digits.reverse.mkString(\e[31m\"\"\e[0m) : \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else x.toString.reverse.grouped(shift).mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq027auva.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpq027auva.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                              value length is not a member of Long\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq027auva.scala:14:75 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                                             \
    \                              ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > x.length) \"\" else x.toString.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb1n86oe_.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpb1n86oe_.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \         value length is not a member of Long\n2 errors found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (digits.drop(shift).mkString(\"\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ng7g1lq.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ng7g1lq.scala:14:30 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (digits.drop(shift).mkString(\e[31m\"\
    \"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Found:    (shift : Long)\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val result = shiftDigits.reverse.mkString\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgxs4p7rz.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        result + (if (shift > digits.length) digits(digits.length - shift.toInt)\
    \ else \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_egnj46y.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmp_egnj46y.scala:14:45 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > digits.length)\
    \ digits(digits.length - shift.toInt) \e[33melse\e[0m \e[31m\"\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   \e[33mvalue\e[0m \e[35mdigits\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ digitLength = digits.length\n        val shiftLength = shift.length\n      \
    \  val result = new StringBuilder\n        var i = 0\n        while (i < digitLength)\
    \ {\n            val digit = digits.charAt(i)\n            val shift = shift.charAt(i)\n\
    \            val digitValue = digit.toLong\n            val shiftValue = shift.toLong\n\
    \            val digitShift = digitValue * shiftValue\n            val digitShiftDigit\
    \ = digitShift.toInt\n            val digitShiftDigitString = digitShiftDigit.toString\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigitStringLength = digitShiftDigitString.length\n\
    \            val digitShiftDigit\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpysl6enms.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpysl6enms.scala:67:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpysl6enms.scala:13:20 ---------------------------\e[0m\e[0m\n\e\
    [31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpysl6enms.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mdigitShiftDigitStringLength\e\
    [0m = digitShiftDigitString.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitShiftDigitStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mdigitShiftDigitStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpysl6enms.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mdigitShiftDigitStringLength\e\
    [0m = digitShiftDigitString.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitShiftDigitStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mdigitShiftDigitStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpysl6enms.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mdigitShiftDigitStringLength\e\
    [0m = digitShiftDigitString.length\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1660028854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift).reverse\n\
    \        val result = shiftDigits + digits.takeRight(shift)\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiiheulmn.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift).reverse\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                    Found:    (shift : Long)\n\e[31m   |\e[0m               \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpiiheulmn.scala:14:52 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = shiftDigits + digits.takeRight(shift)\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Found:   \
    \ (shift : Long)\n\e[31m   |\e[0m                                            \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = new StringBuilder\n        val shiftDigits = shift.toString.reverse\n\
    \        val shiftDigitCount = shiftDigits.length\n        val digitCount = digits.length\n\
    \        val shiftDigitCount = shiftDigits.length\n        val digitCount = digits.length\n\
    \        val digit = digits.charAt(0)\n        val digitCount = digits.length\n\
    \        val shiftDigit = shiftDigits.charAt(0)\n        val shiftDigitCount =\
    \ shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n     \
    \   val shiftDigit = shiftDigits.charAt(0)\n        val shiftDigitCount = shiftDigits.length\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigit = shiftDigits.charAt(0)\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount\
    \ = shiftDigits.length\n        val shiftDigit = shiftDigits.charAt(0)\n     \
    \   val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n\
    \        val shiftDigit = shiftDigits.charAt(0)\n        val shiftDigitCount =\
    \ shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n     \
    \   val shiftDigit = shiftDigits.charAt(0)\n        val shiftDigitCount = shiftDigits.length\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigit = shiftDigits.charAt(0)\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount\
    \ = shiftDigits.length\n        val shiftDigit = shiftDigits.charAt(0)\n     \
    \   val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n\
    \        val shiftDigit = shiftDigits.charAt(0)\n        val shiftDigitCount =\
    \ shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n     \
    \   val shiftDigit = shiftDigits.charAt(0)\n        val shiftDigitCount = shiftDigits.length\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigit = shiftDigits.charAt(0)\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount\
    \ = shiftDigits.length\n        val shiftDigit = shiftDigits.charAt(0)\n     \
    \   val shiftDigitCount = shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n\
    \        val shiftDigit = shiftDigits.charAt(0)\n        val shiftDigitCount =\
    \ shiftDigits.length\n        val shiftDigitCount = shiftDigits.length\n     \
    \   val shiftDigit = shiftDigits.charAt(0)\n        val shiftDigitCount = shiftDigits.length\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shiftDigit = shiftDigits.charAt(0)\n\
    \        val shiftDigitCount = shiftDigits.length\n        val shift\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqdd5fyy5.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqdd5fyy5.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mshiftDigitCount\e[0m = shiftDigits.length\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mshiftDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mshiftDigitCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqdd5fyy5.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdigitCount\e[0m = digits.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdigitCount is already defined as \e[33mvalue\e[0m \e[35mdigitCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqdd5fyy5.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mdigitCount\e[0m = digits.length\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mdigitCount\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqdd5fyy5.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mshiftDigitCount\e[0m = shiftDigits.length\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mshiftDigitCount\
    \ is already defined as \e[33mvalue\e[0m \e[35mshiftDigitCount\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqdd5fyy5.scala:24:12\
    \ ------------------"
  stdout: ''
  timestamp: 1660028854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift).toString.reverse\n        shiftDigits\
    \ + shiftDigit\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3ighegtf.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp3ighegtf.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.reverse.take(shift).reverse\n\
    \        val result = shiftDigits.reverse.mkString(\"\")\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3bcdrzca.scala:13:46\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.reverse.take(shift).reverse\n\e[31m\e[31m   |\e[0m              \
    \                                ^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                             Found:    (shift : Long)\n\e[31m   |\e[0m      \
    \                                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val newDigits\
    \ = digits.substring(0,shift)+digits.substring(shift,digits.length)\n        newDigits.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl0t2ksqj.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\"\
    )\n        if (shift > digits.length) result.reverse\n        else result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpww6s9e2m.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift.toString.reverse\n        val\
    \ result = new StringBuilder\n        var i = 0\n        while (i < digits.length)\
    \ {\n            result.append(digits(i)).append(shift(i))\n            i += 1\n\
    \        }\n        return result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkl875u1_.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift.toString.reverse\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shift = shift % digits.length\n        val result\
    \ = digits.substring(shift, digits.length)\n        result += digits.substring(0,\
    \ shift)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmps4ae8aan.scala:13:20 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshift\e[0m = shift % digits.length\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Recursive \e[33mvalue\e[0m \e[35mshift\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmps4ae8aan.scala:15:15 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        result += digits.substring(\e[31m0\e[0m, shift)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value += is\
    \ not a member of String - did you mean result.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.reverse.mkString\n\
    \        result + (if (shift > x.length) \"\" else \"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp79_nlwhu.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp79_nlwhu.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = digits.reverse.mkString\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Iterator[String] - did you mean digits.reversed?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse.grouped(shift)\n        val result = digits.map(_.toString).mkString(\"\
    \")\n        result + (if (shift > x.length) \"\" else x.toString.reverse.grouped(shift).map(_.toString).mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pklj01o.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mdigits\e\
    [0m = x.toString.reverse.grouped(shift)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                                Found:    (shift : Long)\n\e[31m   |\e[0m   \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7pklj01o.scala:14:32 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e[0m (shift > x.length) \e\
    [31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).map(_.toString).mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value length is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pklj01o.scala:14:75\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        result + (\e[33mif\e\
    [0m (shift > x.length) \e[31m\"\"\e[0m \e[33melse\e[0m x.toString.reverse.grouped(shift).map(_.toString).mkString(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                                    ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                   Found:    (shift : Long)\n\e[31m   |\e[0m\
    \                                                Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.takeRight(shift).toString.reverse\n        shiftDigit\
    \ + shiftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2n_80a40.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp2n_80a40.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.takeRight(shift).toString.reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.reverse\n        val shiftDigits = digits.dropRight(shift)\n    \
    \    val shiftDigit = digits.dropRight(shift).reverse\n        val result = shiftDigit\
    \ + shiftDigits\n        result.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc7nzkp2_.scala:13:43\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mshiftDigits\e\
    [0m = digits.dropRight(shift)\n\e[31m\e[31m   |\e[0m                         \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \            Found:    (shift : Long)\n\e[31m   |\e[0m                       \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpc7nzkp2_.scala:14:42 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36mshiftDigit\e[0m = digits.dropRight(shift).reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                                          Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799794
