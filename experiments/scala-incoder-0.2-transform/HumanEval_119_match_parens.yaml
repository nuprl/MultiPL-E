name: HumanEval_119_match_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of two strings, both strings consist of open\n    //\
  \ parentheses '(' or close parentheses ')' only.\n    // Your job is to check if\
  \ it is possible to concatenate the two strings in\n    // some order, that the\
  \ resulting string will be good.\n    // A string S is considered to be good if\
  \ and only if all parentheses in S\n    // are balanced. For example: the string\
  \ '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes'\
  \ if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n\
  \    // >>> matchParens((List[String](\"()(\", \")\")))\n    // (\"Yes\")\n    //\
  \ >>> matchParens((List[String](\")\", \")\")))\n    // (\"No\")\n    def matchParens(lst\
  \ : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"\
  ()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\"\
  , \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\"\
  , \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\"\
  , \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\"\
  , \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\"\
  , \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\",\
  \ \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\"\
  , \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\"\
  , \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \"\
  )(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"\
  Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\"\
  )));\n    }\n\n}\n"
completions: ["        val stack = mutable.Stack[String]()\n        val stack2 = mutable.Stack[String]()\n\
    \        val stack3 = mutable.Stack[String]()\n        val stack4 = mutable.Stack[String]()\n\
    \        val stack5 = mutable.Stack[String]()\n        val stack6 = mutable.Stack[String]()\n\
    \        val stack7 = mutable.Stack[String]()\n        val stack8 = mutable.Stack[String]()\n\
    \        val stack9 = mutable.Stack[String]()\n        val stack10 = mutable.Stack[String]()\n\
    \        val stack11 = mutable.Stack[String]()\n        val stack12 = mutable.Stack[String]()\n\
    \        val stack13 = mutable.Stack[String]()\n        val stack14 = mutable.Stack[String]()\n\
    \        val stack15 = mutable.Stack[String]()\n        val stack16 = mutable.Stack[String]()\n\
    \        val stack17 = mutable.Stack[String]()\n        val stack18 = mutable.Stack[String]()\n\
    \        val stack19 = mutable.Stack[String]()\n        val stack20 = mutable.Stack[String]()\n\
    \        val stack21 = mutable.Stack[String]()\n        val stack22 = mutable.Stack[String]()\n\
    \        val stack23 = mutable.Stack[String]()\n        val stack24 = mutable.Stack[String]()\n\
    \        val stack25 = mutable.Stack[String]()\n        val stack26 = mutable.Stack[String]()\n\
    \        val stack27 = mutable.Stack[String]()\n        val stack28 = mutable.Stack[String]()\n\
    \        val stack29 = mutable.Stack[String]()\n        val stack30 = mutable.Stack[String]()\n\
    \        val stack31 = mutable.Stack[String]()\n        val stack32 = mutable.Stack[String]()\n\
    \        val stack33 = mutable.Stack[String]()\n        val stack34 = mutable.Stack[String]()\n\
    \        val stack35 = mutable.Stack[String]()\n        val stack36 = mutable.Stack[String]()\n\
    \        val stack37 = mutable.Stack[String]()\n        val stack38 = mutable.Stack[String]()\n\
    \        val stack39 = mutable.Stack[String]()\n        val stack40 = mutable.Stack[String]()\n\
    \        val stack4", "        val stack = mutable.Stack[String]()\n        val\
    \ queue = mutable.Queue[String]()\n        val result = mutable.Queue[String]()\n\
    \        val stackSize = lst.size\n        val queueSize = lst.size\n        val\
    \ stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val stackSize = lst.size\n\
    \        val queueSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val result = mutable.Queue[String]()\n\
    \        val stackSize = lst.size\n        val queueSize = lst.size\n        val\
    \ stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val stackSize = lst.size\n\
    \        val queueSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val result = mutable.Queue[String]()\n\
    \        val stackSize = lst.size\n        val queueSize = lst.size\n        val\
    \ stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val stackSize = lst.size\n\
    \        val queueSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val result = mutable.Queue[String]()\n\
    \        val stackSize = lst.size\n        val queueSize = lst.size\n        val\
    \ stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val stackSize = lst.size\n\
    \        val queueSize = lst.size\n        val stack = mutable.Stack[String]()\n\
    \        val queue = mutable.Queue[String]()\n        val result = mutable.Queue[String]()\n\
    \        val stackSize = lst.size\n        val queueSize = lst.size\n        val\
    \ stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val result = mutable.Queue[String]()\n        val stackSize = lst.size\n\
    \        val queueSize = lst.size\n        val stack = mutable.Stack[String]()\n",
  "        val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        val goodString = mutable.Set[String]()\n        val badString = mutable.Set[String]()\n\
    \        val goodParens = mutable.Set[String]()\n        val badParens = mutable.Set[String]()\n\
    \        val goodParensString = mutable.Set[String]()\n        val badParensString\
    \ = mutable.Set[String]()\n        val goodParensParens = mutable.Set[String]()\n\
    \        val badParensParens = mutable.Set[String]()\n        val goodParensParensString\
    \ = mutable.Set[String]()\n        val badParensParensString = mutable.Set[String]()\n\
    \        val goodParensParensParens = mutable.Set[String]()\n        val badParensParensParens\
    \ = mutable.Set[String]()\n        val goodParensParensParensString = mutable.Set[String]()\n\
    \        val badParensParensParensString = mutable.Set[String]()\n        val\
    \ goodParensParensParensParens = mutable.Set[String]()\n        val badParensParensParensParens\
    \ = mutable.Set[String]()\n        val goodParensParensParensParensString = mutable.Set[String]()\n\
    \        val badParensParensParensParensString = mutable.Set[String]()\n     \
    \   val goodParensParensParensParensParens = mutable.Set[String]()\n        val\
    \ badParensParensParensParensParens = mutable.Set[String]()\n        val goodParensParensParensParensParensString\
    \ = mutable.Set[String]()\n        val badParensParensParensParensParensString\
    \ = mutable.Set[String]()\n        val goodParensParensParensParensParensParens\
    \ = mutable.Set[String]()\n        val badParensParensParensParensParensParens\
    \ = mutable.Set[String]()\n        val goodParensParensParensParensParensParensString\
    \ = mutable.Set[String]()\n        val badParensParensParensParensParensParensString\
    \ = mutable.Set[String", "        val stack = mutable.Stack[String]()\n      \
    \  val result = mutable.ListBuffer.empty[String]\n        for(i <- 0 until lst.size)\
    \ {\n            val str = lst(i)\n            val open = str.indexOf(\"(\")\n\
    \            val close = str.indexOf(\")\")\n            val newStack = if (open\
    \ < 0 || close < 0) stack.toList else stack.drop(open).drop(close).reverse\n \
    \           val newStr = if (open < 0 || close < 0) str else str.substring(open\
    \ + 1, close)\n            val newResult = if (newStack.isEmpty) result else result.dropRight(newStack.size)\n\
    \            val newResult2 = if (newStr.isEmpty) newResult else newResult :+\
    \ newStr\n            stack.push(newStr)\n            result += newResult2\n \
    \       }\n        if (result.size == 0) \"No\" else \"Yes\"", "        val stack\
    \ = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    if(str == \"(\") {\n                stack.push(str)\n            } else if(str\
    \ == \")\") {\n                val popped = stack.pop()\n                if(popped\
    \ == \"(\") {\n                    result.append(\"Yes\")\n                } else\
    \ {\n                    result.append(\"No\")\n                }\n          \
    \  } else {\n                result.append(\"No\")\n            }\n        }\n\
    \        return result.toString()", "        val stack = mutable.Stack[String]()\n\
    \        val stack2 = mutable.Stack[String]()\n        val stack3 = mutable.Stack[String]()\n\
    \        val stack4 = mutable.Stack[String]()\n        val stack5 = mutable.Stack[String]()\n\
    \        val stack6 = mutable.Stack[String]()\n        val stack7 = mutable.Stack[String]()\n\
    \        val stack8 = mutable.Stack[String]()\n        val stack9 = mutable.Stack[String]()\n\
    \        val stack10 = mutable.Stack[String]()\n        val stack11 = mutable.Stack[String]()\n\
    \        val stack12 = mutable.Stack[String]()\n        val stack13 = mutable.Stack[String]()\n\
    \        val stack14 = mutable.Stack[String]()\n        val stack15 = mutable.Stack[String]()\n\
    \        val stack16 = mutable.Stack[String]()\n        val stack17 = mutable.Stack[String]()\n\
    \        val stack18 = mutable.Stack[String]()\n        val stack19 = mutable.Stack[String]()\n\
    \        val stack20 = mutable.Stack[String]()\n        val stack21 = mutable.Stack[String]()\n\
    \        val stack22 = mutable.Stack[String]()\n        val stack23 = mutable.Stack[String]()\n\
    \        val stack24 = mutable.Stack[String]()\n        val stack25 = mutable.Stack[String]()\n\
    \        val stack26 = mutable.Stack[String]()\n        val stack27 = mutable.Stack[String]()\n\
    \        val stack28 = mutable.Stack[String]()\n        val stack29 = mutable.Stack[String]()\n\
    \        val stack30 = mutable.Stack[String]()\n        val stack31 = mutable.Stack[String]()\n\
    \        val stack32 = mutable.Stack[String]()\n        val stack33 = mutable.Stack[String]()\n\
    \        val stack34 = mutable.Stack[String]()\n        val stack35 = mutable.Stack[String]()\n\
    \        val stack36 = mutable.Stack[String]()\n        val stack37 = mutable.Stack[String]()\n\
    \        val stack38 = mutable.Stack[String]()\n        val stack39 = mutable.Stack[String]()\n\
    \        val stack40 = mutable.Stack[String]()\n        val stack4", "       \
    \ val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open < 0 || close < 0) {\n                result.append(\"No\"\
    )\n            } else {\n                val openCount = stack.length\n      \
    \          val closeCount = stack.length\n                while(openCount > 0\
    \ && closeCount > 0) {\n                    if(openCount > closeCount) {\n   \
    \                     stack.pop()\n                        openCount -= 1\n  \
    \                  } else {\n                        stack.pop()\n           \
    \             closeCount -= 1\n                    }\n                }\n    \
    \            val openParens = stack.length\n                val closeParens =\
    \ stack.length\n                while(openParens > 0 && closeParens > 0) {\n \
    \                   if(openParens > closeParens) {\n                        stack.pop()\n\
    \                        openParens -= 1\n                    } else {\n     \
    \                   stack.pop()\n                        closeParens -= 1\n  \
    \                  }\n                }\n                val newStack = stack.mkString(\"\
    (\", \")\")\n                if(newStack == str) {\n                    result.append(\"\
    Yes\")\n                } else {\n                    result.append(\"No\")\n\
    \                }\n            }\n        }\n        return result.toString()",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            val openCount = stack.length\n            val closeCount = stack.length\n\
    \            if(openCount > closeCount) {\n                stack += str\n    \
    \            result += \"Yes\"\n            } else if(openCount < closeCount)\
    \ {\n                stack += str\n                result += \"No\"\n        \
    \    } else {\n                result += \"No\"\n            }\n        }\n  \
    \      result.mkString", "        val stack = mutable.Stack[String]()\n      \
    \  val result = mutable.ListBuffer.empty[String]\n        val stackSize = lst.size\n\
    \        val stackMax = stackSize - 1\n        val stackMaxIndex = stackSize -\
    \ 1\n        val stackMaxValue = lst(stackMaxIndex)\n        val stackMin = stackSize\
    \ + 1\n        val stackMinIndex = stackSize + 1\n        val stackMinValue =\
    \ lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n       \
    \ val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMinValue = lst(stackMinIndex)\n\
    \        val stackMinValue = lst(stackMinIndex)\n        val stackMin", "    \
    \    val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until lst.size) {\n            val str = lst(i)\n        \
    \    val open = str.indexOf(\"(\")\n            val close = str.indexOf(\")\"\
    )\n            if(open != -1 && close != -1) {\n                val openCount\
    \ = stack.length\n                val closeCount = stack.length\n            \
    \    val openParen = str.indexOf(\"(\")\n                val closeParen = str.indexOf(\"\
    )\")\n                val openParenCount = stack.length\n                val closeParenCount\
    \ = stack.length\n                stack.push(str)\n                while(openParenCount\
    \ > closeParenCount && openParenCount > openCount && closeParenCount > closeCount)\
    \ {\n                    if(stack.size == openParenCount) {\n                \
    \        val temp = stack.pop()\n                        if(temp.equals(str))\
    \ {\n                            result.append(\"Yes\")\n                    \
    \        result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")\n                            result.append(\"Yes\")\n                 \
    \           result.append(\"Yes\")\n                            result.append(\"\
    Yes\")", "        val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        val goodStr = mutable.Set[String]()\n        val badStr = mutable.Set[String]()\n\
    \        lst.foreach(x => x match {\n            case x if x.startsWith(\"(\"\
    ) => queue.enqueue(x)\n            case x if x.startsWith(\")\") => stack.push(x)\n\
    \            case x => badStr += x\n        })\n        while(!queue.isEmpty)\
    \ {\n            val curr = queue.dequeue()\n            if(!good.contains(curr))\
    \ {\n                good += curr\n                goodStr += curr\n         \
    \   }\n            if(!bad.contains(curr)) {\n                bad += curr\n  \
    \              badStr += curr\n            }\n            if(!stack.isEmpty) {\n\
    \                val top = stack.dequeue()\n                if(!good.contains(top))\
    \ {\n                    good += top\n                    goodStr += top\n   \
    \             }\n                if(!bad.contains(top)) {\n                  \
    \  bad += top\n                    badStr += top\n                }\n        \
    \    }\n        }\n        if(good.size == lst.size) {\n            return \"\
    Yes\"\n        }\n        if(bad.size == lst.size) {\n            return \"No\"\
    \n        }\n        if(goodStr.size == lst.size) {\n            return \"Yes\"\
    \n        }\n        if(badStr.size == lst.size) {\n            return \"No\"\n\
    \        }\n        return \"No\"", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach(x => {\n\
    \            x match {\n                case \")\" => {\n                    close.push(x)\n\
    \                }\n                case \")(\"  => {\n                    open.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.push(x)\n\
    \                }\n                case \")(\" => {\n                    stack.",
  "        val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        lst.foreach(x => if (x == \"\
    (\") stack.push(x) else if (x == \")\") queue.push(x) else if (stack.size == 0\
    \ && queue.size == 0) good.add(x))\n        if (good.size == 0) \"No\" else \"\
    Yes\"", "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n        val stackSize = lst.size\n        val stackSize = lst.size\n\
    \        val stackSize = lst.size\n        val stackSize = lst.size\n        val\
    \ stackSize = lst.size\n        val stackSize = lst.size\n        val stackSize\
    \ = lst.size\n", "        val stack = mutable.Stack[String]()\n        val queue\
    \ = mutable.Queue[String]()\n        val good = mutable.Set[String]()\n      \
    \  val bad = mutable.Set[String]()\n        val goodStr = mutable.Set[String]()\n\
    \        val badStr = mutable.Set[String]()\n        val goodCount = mutable.Map[String,\
    \ Int]()\n        val badCount = mutable.Map[String, Int]()\n        lst.foreach(x\
    \ => {\n            x match {\n                case \")\" => {\n             \
    \       queue.enqueue(x)\n                }\n                case \")()\" => {\n\
    \                    queue.enqueue(x)\n                    stack.push(x)\n   \
    \             }\n                case \")(\" => {\n                    queue.enqueue(x)\n\
    \                    stack.push(x)\n                }\n                case \"\
    )()()\" => {\n                    queue.enqueue(x)\n                    stack.push(x)\n\
    \                    queue.enqueue(x)\n                    stack.push(x)\n   \
    \             }\n                case \")(()\" => {\n                    queue.enqueue(x)\n\
    \                    stack.push(x)\n                    queue.enqueue(x)\n   \
    \                 stack.push(x)\n                    queue.enqueue(x)\n      \
    \              stack.push(x)\n                }\n                case \")()(\"\
    \ => {\n                    queue.enqueue(x)\n                    stack.push(x)\n\
    \                    queue.enqueue(x)\n                    stack.push(x)\n   \
    \                 queue.enqueue(x)\n                    stack.push(x)\n      \
    \              queue.enqueue(x)\n                    stack.push(x)\n         \
    \       }\n                case \")()(()\" => {\n                    queue.enqueue(x)\n\
    \                    stack.push(x)\n                    queue.enqueue(x)\n   \
    \                 stack.push(x)\n                    queue.enqueue(x)\n      \
    \              stack.push(x)\n                    queue.enqueue(x)\n         \
    \           stack.push(x)\n                    queue.enqueue(x)\n            \
    \        stack.push(x)\n                }\n                case \")()(()()\" =>\
    \ {\n                    queue.enqueue(x)\n                    stack.push(x)\n\
    \                    queue.enqueue(x)\n                    stack.push(x)\n   \
    \                 queue.enqueue(x)\n                    stack.push(x)\n      \
    \              queue.enqueue(x)\n                    stack.push(x)\n         \
    \           queue.enqueue(x)\n                    stack.push(x)\n            \
    \        queue.enqueue(x)\n                    stack.push(x)\n               \
    \     queue.enqueue(x)\n                    stack.push(x)\n                  \
    \  queue.enqueue(x)\n                    stack.push(x)\n                    queue.enqueue(x)\n\
    \                    stack.push(x)\n                    queue.enqueue(x)\n   \
    \                 stack.push(x)\n                    queue.enqueue(x)\n      \
    \              stack.push(x)\n                    queue.enqueue(x)\n         \
    \           stack.push(x)\n                    queue.enqueue(x)\n            \
    \        stack.push(x)\n                    queue.enqueue(x)\n               \
    \     stack.push(x)\n                    queue.en", "        val stack = mutable.Stack[String]()\n\
    \        val result = mutable.ListBuffer[String]()\n        val open = mutable.Set[String]()\n\
    \        val close = mutable.Set[String]()\n        lst.foreach(x => {\n     \
    \       x match {\n                case \")\" => close.push(x)\n             \
    \   case \")(\"  => open.push(x)\n                case \")(\"  => stack.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")", "   \
    \     val stack = mutable.Stack[String]()\n        val queue = mutable.Queue[String]()\n\
    \        val good = mutable.Set[String]()\n        val bad = mutable.Set[String]()\n\
    \        val goodStr = mutable.Set[String]()\n        val badStr = mutable.Set[String]()\n\
    \        lst.foreach(x => if (x.contains(\"(\")) stack.push(x) else if (x.contains(\"\
    )\")) queue.push(x) else if (stack.size == 0 && queue.size == 0) good.add(x) else\
    \ if (stack.size > 0 && queue.size == 0) bad.add(x) else if (stack.size > 0 &&\
    \ queue.size > 0) goodStr.add(x) else if (stack.size == 0 && queue.size > 0) badStr.add(x))\n\
    \        if (good.size == 0 && bad.size == 0) \"No\" else \"Yes\"", "        val\
    \ stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        val open = mutable.Set[String]()\n        val close = mutable.Set[String]()\n\
    \        lst.foreach(x => {\n            x match {\n                case \")\"\
    \ => close.push(x)\n                case \")(\"  => stack.push(x)\n          \
    \      case \")(\"  => stack.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")\" => close.push(x)\n                case \")\" => close.push(x)\n\
    \                case \")", "        val stack = mutable.Stack[String]()\n   \
    \     val result = mutable.ListBuffer[String]()\n        val open = mutable.ListBuffer[String]()\n\
    \        val close = mutable.ListBuffer[String]()\n        lst.foreach { s =>\n\
    \            if (s.startsWith(\"(\")) {\n                open += s\n         \
    \   } else if (s.startsWith(\")\")) {\n                close += s\n          \
    \  } else {\n                stack += s\n            }\n        }\n        val\
    \ openCount = open.count\n        val closeCount = close.count\n        if (openCount\
    \ == closeCount) {\n            val openParens = open.mkString(\"(\", \", \",\
    \ \")\")\n            val closeParens = close.mkString(\"(\", \", \", \")\")\n\
    \            val newStack = stack.filterNot(s => openParens.contains(s))\n   \
    \         val newStack2 = stack.filterNot(s => closeParens.contains(s))\n    \
    \        if (newStack.isEmpty && newStack2.isEmpty) {\n                result\
    \ += \"Yes\"\n            } else {\n                result += \"No\"\n       \
    \     }\n        } else {\n            result += \"No\"\n        }\n        result.toString()",
  "        val stack = mutable.Stack[String]()\n        val result = mutable.ListBuffer[String]()\n\
    \        lst.foreach(x => if (x == \"(\") stack += x else stack.pop())\n     \
    \   stack.foreach(x => if (x == \"(\") result += \"Yes\" else result += \"No\"\
    )\n        result.mkString(\"\")"]
stop_tokens:
- "\n    }\n"
