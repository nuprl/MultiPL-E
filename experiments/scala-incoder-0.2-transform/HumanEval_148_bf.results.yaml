language: scala
name: HumanEval_148_bf
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenMercuryAndVenus = List(venus)\n        val planetsBetweenMercuryAndEarth\
    \ = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndMars\
    \ = List(jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenMercuryAndSaturn = List(uranus)\n\
    \        val planetsBetweenMercuryAndUranus = List(uranus)\n        val planetsBetweenMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenVenusAndJupiter = List(saturn, uranus)\n\
    \        val planet\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjo5k37wh.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpj"
  stdout: ''
  timestamp: 1659798206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(\n                    Vector(\n             \
    \           Vector(0,0,0),\n                        Vector(0,0,1)\n          \
    \          ),\n                    Vector(\n                        Vector(0,0,0),\n\
    \                        Vector(0,1,0)\n                    )\n              \
    \  ),\n                Vector(\n                    Vector(0,0,0),\n         \
    \           Vector(0,1,0)\n                )\n            )),\n            Planet(\"\
    Venus\", Orbit(\n                Vector(\n                    Vector(\n      \
    \                  Vector(0,0,0),\n                        Vector(0,0,1)\n   \
    \                 ),\n                    Vector(\n                        Vector(0,0,0),\n\
    \                        Vector(0,1,0)\n                    )\n              \
    \  ),\n                Vector(\n                    Vector(0,0,0),\n         \
    \           Vector(0,1,0)\n                )\n            )),\n            Planet(\"\
    Earth\", Orbit(\n                Vector(\n                    Vector(0,0,0),\n\
    \                    Vector(0,0,1)\n                ),\n                Vector(\n\
    \                    Vector(0,0,0),\n                    Vector(0,1,0)\n     \
    \           )\n            )),\n            Planet(\"Mars\", Orbit(\n        \
    \        Vector(\n                    Vector(0,0,0),\n                    Vector(0,0,1)\n\
    \                ),\n                Vector(\n                    Vector(0,0,0),\n\
    \                    Vector(0,1,0)\n                )\n            )),\n     \
    \       Planet(\"Jupiter\", Orbit(\n                Vector(\n                \
    \    Vector(0,0,0),\n                    Vector(0,0,1)\n                ),\n \
    \               Vector(\n                    Vector(0,0,0),\n                \
    \    Vector(0,1,0)\n                )\n            )),\n            Planet(\"\
    Saturn\", Orbit(\n                Vector(\n                    Vector(0,0,0),\n\
    \                    Vector(0,0,1)\n                ),\n                Vector(\n\
    \                    Vector(0,0,0),\n                    Vector(0,1,0)\n     \
    \           )\n            )),\n            Planet(\"Uranus\", Orbit(\n      \
    \          Vector(\n                    Vector(0,0,0),\n                    Vector(0,0,1)\n\
    \                ),\n                Vector(\n                    Vector(0,0,0),\n\
    \                    Vector(0,1,0)\n                )\n            )),\n     \
    \       Planet(\"Neptune\", Orbit(\n                Vector(\n                \
    \    Vector(0,0,0),\n                    Vector(0,0,1)\n                ),\n \
    \               Vector(\n                    Vector(0,0,0),\n                \
    \    Vector(0,1,0)\n                )\n            ))\n        )\n        val\
    \ sun = Orbit(\n            Vector(\n                Vector(0,0,0),\n        \
    \        Vector(0,0,1)\n            ),\n            Vector(\n                Vector(0,0,0),\n\
    \                Vector(0,1,0)\n            )\n        )\n        val orbits =\
    \ planets.\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp28dj3jcy.scala:126:4 ---------------------------\e\
    [0m\e[0m\n\e[31m126 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp28dj3jcy.scala:22:12 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp28dj3jcy.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                             Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp28dj3jcy.scala:38:12 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp28dj3jcy.scala:38:28\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp28dj3jcy.scala:54:12 ------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp28dj3jcy.scala:54:28\
    \ ------------------------\e[0m\e[0m\n\e[31m54 |\e[0m            Planet(\e[31m"
  stdout: ''
  timestamp: 1659798476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(\n                    Vector(\n             \
    \           Vector(\n                            Vector(\n                   \
    \             Vector(\n                                    Vector(\n         \
    \                               Vector(\n                                    \
    \        Vector(\n                                                Vector(\n  \
    \                                                  Vector(\n                 \
    \                                       Vector(\n                            \
    \                                Vector(\n                                   \
    \                             Vector(\n                                      \
    \                              Vector(\n                                     \
    \                                   Vector(\n                                \
    \                                            Vector(\n                       \
    \                                                         Vector(\n          \
    \                                                                          Vector(\n\
    \                                                                            \
    \            Vector(\n                                                       \
    \                                     Vector(\n                              \
    \                                                                  Vector(\n \
    \                                                                            \
    \                       Vector(\n                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                      Vector(\n\
    \                                                                            \
    \                                        Vector(\n                           \
    \                                                                            \
    \                 Vector(\n                                                  \
    \                                                                          Vector(\n\
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                         Vector(\n                          \
    \                                                                            \
    \                                  Vector(\n                                 \
    \                                                                            \
    \                               Vector(\n                                    \
    \                                                                            \
    \                                Vector(\n                                   \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                              Vector(\n                     \
    \                                                                            \
    \                                                           Vector(\n        \
    \                                                                            \
    \                                                                            Vector(\n\
    \                                                                            \
    \                                                                            \
    \            Vector(\n                                                       \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                  Vector(\n \
    \                                                                            \
    \                                                                            \
    \                       Vector(\n                                            \
    \                                                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                            \
    \                                                                      Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                        Vector(\n                           \
    \                                                                            \
    \                                                                            \
    \                 Vector(\n                                                  \
    \                                                                            \
    \                                                                          Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                         Vector(\n                          \
    \                                                                            \
    \                                                                            \
    \                                  Vector(\n                                 \
    \                                                                            \
    \                                                                            \
    \                               Vector(\n                                    \
    \                                                                            \
    \                                                                            \
    \                                Vector(\n                                   \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                                              Vector(\n                     \
    \                                                                            \
    \                                                                            \
    \                                                           Vector(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            Vector(\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                  Vector(\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       Vector(\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                            \
    \                                                                            \
    \                                                                      Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        Vector(\n                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                 Vector(\n                                                  \
    \                                                                            \
    \                                                                            \
    \                                                                          Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                         Vector(\n                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                  Vector(\n                                 \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                               Vector(\n                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                Vector(\n                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                              Vector(\n                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                           Vector(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            Vector(\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                              Vector(\n     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \           Vector(\n                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                    Vector(\n                               \
    \                                                                            \
    \                     \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2v6c7q2p.scala:102:327 -------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m                                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                         Vector(\n\e[31m\e[31m    |\e[0m    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                   ^\e[0m\n\e[31m    |\e[0m                                 \
    \    expression expected but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m  \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2v6c7q2p.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2v6c7q2p.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                              ^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2v6c7q2p.scala:104:5 --------------------\e\
    [0m\e[0m\n\e[31m104 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m   \
    \ |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required: List[String]\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659798476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo5j13vx8.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpo"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(\n                    Vector(\n             \
    \           Vector(\n                            Vector(\n                   \
    \             Vector(\n                                    Vector(\n         \
    \                               Vector(\n                                    \
    \        Vector(\n                                                Vector(\n  \
    \                                                  Vector(\n                 \
    \                                       Vector(\n                            \
    \                                Vector(\n                                   \
    \                             Vector(\n                                      \
    \                              Vector(\n                                     \
    \                                   Vector(\n                                \
    \                                            Vector(\n                       \
    \                                                         Vector(\n          \
    \                                                                          Vector(\n\
    \                                                                            \
    \            Vector(\n                                                       \
    \                                     Vector(\n                              \
    \                                                                  Vector(\n \
    \                                                                            \
    \                       Vector(\n                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                      Vector(\n\
    \                                                                            \
    \                                        Vector(\n                           \
    \                                                                            \
    \                 Vector(\n                                                  \
    \                                                                          Vector(\n\
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                         Vector(\n                          \
    \                                                                            \
    \                                  Vector(\n                                 \
    \                                                                            \
    \                               Vector(\n                                    \
    \                                                                            \
    \                                Vector(\n                                   \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                              Vector(\n                     \
    \                                                                            \
    \                                                           Vector(\n        \
    \                                                                            \
    \                                                                            Vector(\n\
    \                                                                            \
    \                                                                            \
    \            Vector(\n                                                       \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                  Vector(\n \
    \                                                                            \
    \                                                                            \
    \                       Vector(\n                                            \
    \                                                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                            \
    \                                                                      Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                        Vector(\n                           \
    \                                                                            \
    \                                                                            \
    \                 Vector(\n                                                  \
    \                                                                            \
    \                                                                          Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                    Vector(\n               \
    \                                                                            \
    \                                                                            \
    \                                         Vector(\n                          \
    \                                                                            \
    \                                                                            \
    \                                  Vector(\n                                 \
    \                                                                            \
    \                                                                            \
    \                               Vector(\n                                    \
    \                                                                            \
    \                                                                            \
    \                                Vector(\n                                   \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                                              Vector(\n                     \
    \                                                                            \
    \                                                                            \
    \                                                           Vector(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            Vector(\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                     Vector(\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                  Vector(\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       Vector(\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                                        Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            Vector(\n                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         Vector(\n                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          Vector(\n                                                         \
    \                                                                            \
    \                                                                            \
    \                                                                           Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                            Vector(\n       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                         Vector(\n          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          Vector(\n         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                               Vector(\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                        Vector(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    Vector(\n                                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     Vector(\n                                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                          Vector(\n                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   Vector(\n                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                            Vector(\n                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \             Vector(\n                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                              Vector(\n     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                       Vector(\n                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    Vector(\n                                               \
    \                                                                            \
    \                                                                     \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpouqfizgi.scala:101:359 -------------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m                                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                         Vector(\n\
    \e[31m\e[31m    |\e[0m                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            ^\e\
    [0m\n\e[31m    |\e[0m                                     expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpouqfizgi.scala:22:12 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpouqfizgi.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                             Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpouqfizgi.scala:103:5 --------------------\e\
    [0m\e[0m\n\e[31m103 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m   \
    \ |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required: List[String]\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => orbit(planet))\n        val sun = orbits.map(orbit\
    \ => orbit.map(_.distanceFromSun))\n        val proximity = sun zip sun map {\
    \ case (sun1, sun2) => sun1.distanceFromSun(sun2) }\n        proximity.sortBy(_._2).reverse.filter(_.isDefined).map(_.head).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp903lhlr4.scala:22:43 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planets.map(\e\
    [36mplanet\e[0m => orbit(planet))\n\e[31m\e[31m   |\e[0m                     \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                Not found: orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp903lhlr4.scala:23:44 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = orbits.map(\e[36morbit\e[0m => orbit.map(_.distanceFromSun))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue map is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp903lhlr4.scala:24:68\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mproximity\e[0m = sun zip sun map { \e[33mcase\e[0m (sun1, sun2) => sun1.distanceFromSun(sun2)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \  value distanceFromSun is not a member of "
  stdout: ''
  timestamp: 1659798477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , new Orbit(\n                new Planet(\"Venus\", new Orbit(\n             \
    \       new Planet(\"Earth\", new Orbit(\n                        new Planet(\"\
    Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n\
    \                                new Planet(\"Saturn\", new Orbit(\n         \
    \                           new Planet(\"Uranus\", new Orbit(\n              \
    \                          new Planet(\"Neptune\", new Orbit(\n              \
    \                              new Planet(\"Mercury\", new Orbit(\n          \
    \                                      new Planet(\"Venus\", new Orbit(\n    \
    \                                                new Planet(\"Earth\", new Orbit(\n\
    \                                                        new Planet(\"Mars\",\
    \ new Orbit(\n                                                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                     new Planet(\"Saturn\", new Orbit(\n                    \
    \                                                new Planet(\"Uranus\", new Orbit(\n\
    \                                                                        new Planet(\"\
    Neptune\", new Orbit(\n                                                      \
    \                      new Planet(\"Mercury\", new Orbit(\n                  \
    \                                                              new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                     new Planet(\"Earth\", new Orbit(\n                     \
    \                                                                   new Planet(\"\
    Mars\", new Orbit(\n                                                         \
    \                                   new Planet(\"Jupiter\", new Orbit(\n     \
    \                                                                            \
    \               new Planet(\"Saturn\", new Orbit(\n                          \
    \                                                                          new\
    \ Planet(\"Uranus\", new Orbit(\n                                            \
    \                                                            new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                             new Planet(\"Mercury\", new Orbit(\n\
    \                                                                            \
    \                                    new Planet(\"Venus\", new Orbit(\n      \
    \                                                                            \
    \                                  new Planet(\"Earth\", new Orbit(\n        \
    \                                                                            \
    \                                    new Planet(\"Mars\", new Orbit(\n       \
    \                                                                            \
    \                                         new Planet(\"Jupiter\", new Orbit(\n\
    \                                                                            \
    \                                                    new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                                                                            \
    \     new Planet(\"Neptune\", new Orbit(\n                                   \
    \                                                                            \
    \                             new Planet(\"Mercury\", new Orbit(\n           \
    \                                                                            \
    \                                                         new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \         new Planet(\"Earth\", new Orbit(\n                                 \
    \                                                                            \
    \                                           new Planet(\"Mars\", new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa9m9vyup.scala:57:181 --------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpa9m9vyup.scala\n\
    exception occurred while compiling /tmp/tmpa9m9vyup.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <5097..5107>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [5107..5269..5269]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1659798186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpn"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndVenusAndMar\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsfp2719s.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsfp2719s.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsfp2719s.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsfp2719s.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsfp2719s.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsfp2719s.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmps"
  stdout: ''
  timestamp: 1659798212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun\
    \ = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus\
    \ = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars\
    \ = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn\
    \ = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune\
    \ = Planet(\"Neptune\")\n        val planet1 = planet1.toUpperCase\n        val\
    \ planet2 = planet2.toUpperCase\n        if (planet1 == planet2) {\n         \
    \   List(planet1)\n        } else if (planets.contains(planet1) && planets.contains(planet2))\
    \ {\n            val orbit1 = sun.getOrbit(planet1)\n            val orbit2 =\
    \ sun.getOrbit(planet2)\n            val distance1 = orbit1.distance(sun)\n  \
    \          val distance2 = orbit2.distance(sun)\n            val proximity = distance1.min(distance2)\n\
    \            val planetsBetween = planets.filter(planet => proximity <= sun.getOrbit(planet).getOrbit(planet2).distance(sun))\n\
    \            planetsBetween.sortBy(proximity)\n        } else {\n            List()\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjlz7exox.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjlz7exox.scala:23:22 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjlz7exox.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjlz7exox.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpjlz7exox.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjlz7exox.scala:27:22 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp92as_44v.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp92as_44v.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp9"
  stdout: ''
  timestamp: 1659798192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"\
    ), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"\
    Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"\
    Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) :\
    \ List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798191
