language: scala
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result\
    \ = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_ < _).reverse\n   \
    \     val digits = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).map(_.toString).mkString(\"\
    ,\")\n        val one = \"One\"\n        val two = \"Two\"\n        val three\
    \ = \"Three\"\n        val four = \"Four\"\n        val five = \"Five\"\n    \
    \    val six = \"Six\"\n        val seven = \"Seven\"\n        val eight = \"\
    Eight\"\n        val nine = \"Nine\"\n        val ten = \"Ten\"\n        val hundred\
    \ = \"Hundred\"\n        val thousand = \"Thousand\"\n        val million = \"\
    Million\"\n        val billion = \"Billion\"\n        val trillion = \"Trillion\"\
    \n        val quadrillion = \"Quadrillion\"\n        val quintillion = \"Quintillion\"\
    \n        val sextillion = \"Sextillion\"\n        val septillion = \"Septillion\"\
    \n        val octillion = \"Octillion\"\n        val nonillion = \"Nonillion\"\
    \n        val decillion = \"Decillion\"\n        val undecillion = \"Undecillion\"\
    \n        val duodecillion = \"Duodecillion\"\n        val tredecillion = \"Tredecillion\"\
    \n        val quattuordecillion = \"Quattuordecillion\"\n        val quindecillion\
    \ = \"Quindecillion\"\n        val sexdecillion = \"Sexdecillion\"\n        val\
    \ septendecillion = \"Septendecillion\"\n        val octodecillion = \"Octodecillion\"\
    \n        val novemdecillion = \"Novemdecillion\"\n        val vigintillion =\
    \ \"Vigintillion\"\n        val unvigintillion = \"Unvigintillion\"\n        val\
    \ duovigintillion = \"Duovigintillion\"\n        val trevigintillion = \"Trevigintillion\"\
    \n        val quattuorvigintillion = \"Quattuorvigintillion\"\n        val quinvigintillion\
    \ = \"Qu\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdcuc6enf.scala:55:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mquinvigintillion\e[0m =\
    \ \"Qu\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e\
    [0m                               unclosed string literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpdcuc6enf.scala:57:34 -----------------------------------------\e[0m\e\
    [0m\n\e[31m57 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                           \
    \       ^\e[0m\n\e[31m   |\e[0m                                 end of statement\
    \ expected but '=' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpdcuc6enf.scala:17:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mresult\e[0m = arr.filter(_ >= \e[31m1l\e[0m.toLong && _ <= \e[31m9l\e\
    [0m.toLong).sortWith(_ < _).reverse\n\e[31m\e[31m   |\e[0m                   \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                       Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpdcuc6enf.scala:18:32 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = arr.filter(_\
    \ >= \e[31m1l\e[0m.toLong && _ <= \e[31m9l\e[0m.toLong).map(_.toString).mkString(\e\
    [31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdcuc6enf.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdcuc6enf.scala:57:4\
    \ -------------------------\e[0m\e[0m\n\e[31m57 |\e[0m    \e[33mdef\e[0m \e[36mmain\e\
    [0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m  \
    \ |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    Not found: Qudef\n\e[31m   |\e[0m\n\e\
    [31"
  stdout: ''
  timestamp: 1659804182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones\
    \ = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n\
    \        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_\
    \ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n\
    \        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_\
    \ <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(_\
    \ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds =\
    \ arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp06hp9uou.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp06hp9uou.scala:24:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneThousandHundreds\e[0m = arr.filter(_ <= \e[31m99999999999\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m                                           \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \              number too large\n\e[31m\e[31m-- Error: /tmp/tmp06hp9uou.scala:25:58\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneThousandThousandHundreds\e[0m = arr.filter(_ <= \e[31m9999999999999\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m                                           \
    \               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                              number too large\n\e[31m\e[31m-- Error: /tmp/tmp06hp9uou.scala:26:66\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneThousandThousandThousandHundreds\e[0m = arr.filter(_\
    \ <= \e[31m999999999999999\e[0m).toList\n\e[31m\e[31m   |\e[0m               \
    \                                                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        number too large\n\
    \e[31m\e[31m-- Error: /tmp/tmp06hp9uou.scala:27:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36moneThousandThousandThousandThousandHundreds\e\
    [0m = arr.filter(_ <= \e[31m9999999999999999999\e[0m).toList\n\e[31m\e[31m   |\e\
    [0m                                                                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmp06hp9uou.scala:28:82 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36moneThousandThousandThousandThousandThousandHundreds\e\
    [0m = arr.filter(_ <= \e"
  stdout: ''
  timestamp: 1659804183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result\
    \ = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortWith(_ < _).reverse\n   \
    \     val map = Map(\"One\" -> 1l.toLong, \"Two\" -> 2l.toLong, \"Three\" -> 3l.toLong,\
    \ \"Four\" -> 4l.toLong, \"Five\" -> 5l.toLong, \"Six\" -> 6l.toLong, \"Seven\"\
    \ -> 7l.toLong, \"Eight\" -> 8l.toLong, \"Nine\" -> 9l.toLong)\n        result.map(x\
    \ => map.getOrElse(x.toString, x.toString))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpri712l6d.scala:17:32 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = arr.filter(_\
    \ >= \e[31m1l\e[0m.toLong && _ <= \e[31m9l\e[0m.toLong).sortWith(_ < _).reverse\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpri712l6d.scala:19:37\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        result.map(\e[36mx\e\
    [0m => map.getOrElse(x.toString, x.toString))\n\e[31m\e[31m   |\e[0m         \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                      Found:    Matchable\n\e[31m   |\e[0m                  \
    \      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones\
    \ = arr.filter(x => x >= 1l.toLong && x <= 9l.toLong).map(x => s\"One\")\n   \
    \     val tens = arr.filter(x => x >= 10l.toLong && x <= 99l.toLong).map(x =>\
    \ s\"Ten\")\n        val hundreds = arr.filter(x => x >= 100l.toLong && x <= 999l.toLong).map(x\
    \ => s\"Hundred\")\n        val thousands = arr.filter(x => x >= 1000l.toLong\
    \ && x <= 9999l.toLong).map(x => s\"Thousand\")\n        val millions = arr.filter(x\
    \ => x >= 100000l.toLong && x <= 999999l.toLong).map(x => s\"Million\")\n    \
    \    val billions = arr.filter(x => x >= 1000000l.toLong && x <= 9999999l.toLong).map(x\
    \ => s\"Billion\")\n        val trillions = arr.filter(x => x >= 1000000000l.toLong\
    \ && x <= 99999999999l.toLong).map(x => s\"Trillion\")\n        val quadrillions\
    \ = arr.filter(x => x >= 1000000000000l.toLong && x <= 999999999999999l.toLong).map(x\
    \ => s\"Quadrillion\")\n        val quintillions = arr.filter(x => x >= 1000000000000000l.toLong\
    \ && x <= 9999999999999999999l.toLong).map(x => s\"Quintillion\")\n        val\
    \ sextillions = arr.filter(x => x >= 1000000000000000000l.toLong && x <= 99999999999999999999999l.toLong).map(x\
    \ => s\"Sextillion\")\n        val septillions = arr.filter(x => x >= 1000000000000000000000l.toLong\
    \ && x <= 999999999999999999999999999l.toLong).map(x => s\"Septillion\")\n   \
    \     val octillions = arr.filter(x => x >= 1000000000000000000000000l.toLong\
    \ && x <= 9999999999999999999999999999999l.toLong).map(x => s\"Octillion\")\n\
    \        val nonillions = arr.filter(x => x >= 100000000000000000000000000l.toLong\
    \ && x <= 99999999999999999999999999999999999l.toLong).map(x => s\"Nonillion\"\
    )\n        val onesAndTens = arr.filter(x => x >= 1000000000000000000000000000l.toLong\
    \ && x <= 999999999999999999999999999999999999999l.toLong).map(x => s\"OnesAndTen\"\
    )\n        val onesAndHundreds = arr.filter(x => x >= 100000000000000000000000000000\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpd1mmoieq.scala:25:81 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mquintillions\e[0m = arr.filter(\e\
    [36mx\e[0m => x >= \e[31m1000000000000000l\e[0m.toLong && x <= \e[31m9999999999999999999l\e\
    [0m.toLong).map(\e[36mx\e[0m => \e[31ms\"Quintillion\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \       ^\e[0m\n\e[31m   |\e[0m                                              \
    \          number too large\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd1mmoieq.scala:26:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36msextillions\e[0m = arr.filter(\e[36mx\e[0m => x >= \e[31m1000000000000000000l\e\
    [0m.toLong && x <= \e[31m99999999999999999999999l\e[0m.toLong).map(\e[36mx\e[0m\
    \ => \e[31ms\"Sextillion\"\e[0m)\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m   |\e\
    [0m')' expected, but 'end of statement' found\n\e[31m\e[31m-- Error: /tmp/tmpd1mmoieq.scala:26:83\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mval\e[0m \e[36msextillions\e[0m = arr.filter(\e[36mx\e[0m => x >= \e[31m1000000000000000000l\e\
    [0m.toLong && x <= \e[31m99999999999999999999999l\e[0m.toLong).map(\e[36mx\e[0m\
    \ => \e[31ms\"Sextillion\"\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                                                             ^\e[0m\n\e[31m \
    \  |\e[0m                                                        number too large\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd1mmoieq.scala:27:0 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mseptillions\e[0m = arr.filter(\e\
    [36mx\e[0m => x >= \e[31m1000000000000000000000l\e[0m.toLong && x <= \e[31m999999999999999999999999999l\e\
    [0m.toLong).map(\e[36mx\e[0m => \e[31ms\"Septillion\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m^^^\e[0m\n\e[31m   |\e[0m')' expected, but 'end of statement' found\n\e[31m\e\
    [31m-- Error: /tmp/tmpd1mmoieq.scala:27:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mseptillions\e[0m = arr.filter(\e\
    [36mx\e[0m => x >= \e[31m1000000000000000000000l\e[0m.toLong && x <= \e[31"
  stdout: ''
  timestamp: 1659804182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones\
    \ = arr.filter(x => x < 10).toList\n        val tens = arr.filter(x => x >= 10\
    \ && x < 100).toList\n        val hundreds = arr.filter(x => x >= 100).toList\n\
    \        val hundredsReversed = hundreds.reverse\n        val tensReversed = tens.reverse\n\
    \        val onesReversed = ones.reverse\n        val onesReversedString = onesReversed.map(x\
    \ => One(x))\n        val tensReversedString = tensReversed.map(x => Two(x))\n\
    \        val hundredsReversedString = hundredsReversed.map(x => Three(x))\n  \
    \      hundredsReversedString.toList ++ tensReversedString.toList ++ onesReversedString.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkyrn9nzo.scala:23:55 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36monesReversedString\e[0m\
    \ = onesReversed.map(\e[36mx\e[0m => One(x))\n\e[31m\e[31m   |\e[0m          \
    \                                             ^^^\e[0m\n\e[31m   |\e[0m      \
    \                                                 Not found: One\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkyrn9nzo.scala:24:55 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mtensReversedString\e[0m\
    \ = tensReversed.map(\e[36mx\e[0m => Two(x))\n\e[31m\e[31m   |\e[0m          \
    \                                             ^^^\e[0m\n\e[31m   |\e[0m      \
    \                                                 Not found: Two\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkyrn9nzo.scala:25:63 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mhundredsReversedString\e\
    [0m = hundredsReversed.map(\e[36mx\e[0m => Three(x))\n\e[31m\e[31m   |\e[0m  \
    \                                                             ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        Not found: Three\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones\
    \ = arr.filter(x => x < 9).toList\n        val tens = arr.filter(x => x < 99).toList\n\
    \        val hundreds = arr.filter(x => x < 999).toList\n        val thousands\
    \ = arr.filter(x => x < 9999).toList\n        val tenThousands = arr.filter(x\
    \ => x < 999999).toList\n        val oneThousands = arr.filter(x => x < 9999999).toList\n\
    \        val oneHundreds = arr.filter(x => x < 999999999).toList\n        val\
    \ oneThousandThousands = arr.filter(x => x < 99999999999).toList\n        val\
    \ oneHundredThousands = arr.filter(x => x < 999999999999).toList\n        val\
    \ oneHundredThousandThousands = arr.filter(x => x < 9999999999999).toList\n  \
    \      val oneHundredThousandThousands = arr.filter(x => x < 99999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 9999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(x => x < 99999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(x => x <\
    \ 99999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(x => x < 999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousands\
    \ = arr.filter(x => x < 999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x < 9999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(x => x < 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxy_epw8t.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxy_epw8t.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36moneHundredThousandThousands\e[0m = arr.filter(\e\
    [36mx\e[0m => x < \e[31m99999999999999\e[0m).toList\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moneHundredThousandThousands is already defined as \e[33mvalue\e\
    [0m \e[35moneHundredThousandThousands\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxy_epw8t.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36moneHundredThousandThousandThousands\e\
    [0m = arr.filter(\e[36mx\e[0m => x < \e[31m999999999999999999\e[0m).toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moneHundredThousandThousandThousands is already defined as\
    \ \e[33mvalue\e[0m \e[35moneHundredThousandThousandThousands\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxy_epw8t.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36moneHundredThousandThousandThousands\e[0m = arr.filter(\e[36mx\e[0m =>\
    \ x < \e[31m9999999999999999999\e[0m).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moneHundredThousandThousandThousands is already defined as\
    \ \e[33mvalue\e[0m \e[35moneHundredThousandThousandThousands\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxy_e"
  stdout: ''
  timestamp: 1659804182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums\
    \ = arr.toList\n        val numsLength = nums.length\n        val numsSorted =\
    \ nums.sortBy(_ < 9)\n        val numsReversed = numsSorted.reverse\n        val\
    \ numsReversedLength = numsReversed.length\n        val numsReversedSorted = numsReversed.sortBy(_\
    \ < 9)\n        val numsReversedReversed = numsReversedSorted.reverse\n      \
    \  val numsReversedReversedLength = numsReversedReversed.length\n        val numsReversedReversedSorted\
    \ = numsReversedReversed.sortBy(_ < 9)\n        val numsReversedReversedReversedLength\
    \ = numsReversedReversedSorted.reverse\n        val numsReversedReversedReversedSorted\
    \ = numsReversedReversedSorted.sortBy(_ < 9)\n        val numsReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedSorted.reverse\n        val numsReversedReversedReversedReversedSorted\
    \ = numsReversedReversedReversedSorted.sortBy(_ < 9)\n        val numsReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedSorted.reverse\n        val numsReversedReversedReversedReversedReversedSorted\
    \ = numsReversedReversedReversedReversedSorted.sortBy(_ < 9)\n        val numsReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedSorted.reverse\n        val numsReversedReversedReversedReversedReversedSorted\
    \ = numsReversedReversedReversedReversedSorted.sortBy(_ < 9)\n        val numsReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedSorted.reverse\n        val numsReversedReversedReversedReversedReversedReversedSorted\
    \ = numsReversedReversedReversedReversedReversedReversedSorted.sortBy(_ < 9)\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedLength\
    \ = numsReversedReversedReversedReversedReversedReversedReversedSorted.reverse\n\
    \        val numsReversedReversedReversedReversedReversedReversedReversedSorted\
    \ = numsReversedReversedReversedReversedReversedReversedReversedSorted.sortBy(_\
    \ < 9)\n\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp54ebski8.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnumsReversedReversedReversedReversedReversedLength\e\
    [0m = numsReversedReversedReversedReversedSorted.reverse\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsReversedReversedReversedReversedReversedLength is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsReversedReversedReversedReversedReversedLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp54ebski8.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mnumsReversedReversedReversedReversedReversedSorted\e\
    [0m = numsReversedReversedReversedReversedSorted.sortBy(_ < \e[31m9\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsReversedReversedReversedReversedReversedSorted is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsReversedReversedReversedReversedReversedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp54ebski8.scala:35:73 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mnumsReversedReversedReversedReversedReversedReversedSorted\e\
    [0m = numsReversedReversedReversedReversedReversedReversedSorted.sortBy(_ < \e\
    [31m9\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mnumsReversedReversedReversedReversedReversedReversedSorted\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp54ebski8.scala:37:81\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m  "
  stdout: ''
  timestamp: 1659804182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones\
    \ = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n\
    \        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_\
    \ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n\
    \        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_\
    \ <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(_\
    \ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds =\
    \ arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp80yflntp.scala:24:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moneThousandHundreds\e[0m\
    \ = arr.filter(_ <= \e[31m99999999999\e[0m).toList\n\e[31m\e[31m   |\e[0m    \
    \                                              ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                  number too large\n\e[31m\e\
    [31m-- Error: /tmp/tmp80yflntp.scala:25:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moneThousandThousandHundreds\e\
    [0m = arr.filter(_ <= \e[31m9999999999999\e[0m).toList\n\e[31m\e[31m   |\e[0m\
    \                                                          ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                        number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmp80yflntp.scala:26:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36moneThousandThousandThousandHundreds\e\
    [0m = arr.filter(_ <= \e[31m999999999999999\e[0m).toList\n\e[31m\e[31m   |\e[0m\
    \                                                                  ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmp80yflntp.scala:27:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36moneThousandThousandThousandThousandHundreds\e\
    [0m = arr.filter(_ <= \e[31m9999999999999999999\e[0m).toList\n\e[31m\e[31m   |\e\
    [0m                                                                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmp80yflntp.scala:28:82 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36moneThousandThousandThousandThousandThousandHundreds\e\
    [0m = arr.filter(_ <= \e[31m99999999999999999999999\e[0m).toList\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \               ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    "
  stdout: ''
  timestamp: 1659804180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones\
    \ = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n\
    \        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_\
    \ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n\
    \        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands = arr.filter(_\
    \ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 999999999999999).toList\n\
    \        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_\
    \ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999999999999999).to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo_pbduu7.scala:24:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moneThousandThousands\e[0m\
    \ = arr.filter(_ <= \e[31m99999999999\e[0m).toList\n\e[31m\e[31m   |\e[0m    \
    \                                               ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                   number too large\n\e[31m\e\
    [31m-- Error: /tmp/tmpo_pbduu7.scala:25:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moneHundredThousands\e[0m\
    \ = arr.filter(_ <= \e[31m999999999999999\e[0m).toList\n\e[31m\e[31m   |\e[0m\
    \                                                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                  number too large\n\
    \e[31m\e[31m-- Error: /tmp/tmpo_pbduu7.scala:26:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36moneHundredThousandThousands\e\
    [0m = arr.filter(_ <= \e[31m9999999999999999999\e[0m).toList\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmpo_pbduu7.scala:27:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36moneHundredThousandThousandThousands\e\
    [0m = arr.filter(_ <= \e[31m99999999999999999999999\e[0m).toList\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmpo_pbduu7.scala:28:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36moneHundredThousandThousandThousandThousands\e\
    [0m = arr.filter(_ <= \e[31m999999999999999999999999999\e[0m).toList\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                                       num"
  stdout: ''
  timestamp: 1659804182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones\
    \ = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n\
    \        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_\
    \ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n\
    \        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 999999999).toList\n        val oneThousandThousands = arr.filter(_\
    \ <= 99999999999).toList\n        val oneHundredThousands = arr.filter(_ <= 999999999999999).toList\n\
    \        val oneHundredThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_\
    \ <= 9999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999999999999999999999999999999999999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999999999999999).toList\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps6jhcdao.scala:24:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36moneThousandThousands\e[0m\
    \ = arr.filter(_ <= \e[31m99999999999\e[0m).toList\n\e[31m\e[31m   |\e[0m    \
    \                                               ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                   number too large\n\e[31m\e\
    [31m-- Error: /tmp/tmps6jhcdao.scala:25:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moneHundredThousands\e[0m\
    \ = arr.filter(_ <= \e[31m999999999999999\e[0m).toList\n\e[31m\e[31m   |\e[0m\
    \                                                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                  number too large\n\
    \e[31m\e[31m-- Error: /tmp/tmps6jhcdao.scala:26:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36moneHundredThousandThousands\e\
    [0m = arr.filter(_ <= \e[31m9999999999999999999\e[0m).toList\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmps6jhcdao.scala:27:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36moneHundredThousandThousandThousands\e\
    [0m = arr.filter(_ <= \e[31m99999999999999999999999\e[0m).toList\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmps6jhcdao.scala:28:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36moneHundredThousandThousandThousandThousands\e\
    [0m = arr.filter(_ <= \e[31m999999999999999999999999999\e[0m).toList\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                                       num"
  stdout: ''
  timestamp: 1659804182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result\
    \ = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).sortBy(_ - 1).reverse\n     \
    \   val result2 = arr.filter(_ >= 1l.toLong && _ <= 9l.toLong).map(x => if (x\
    \ < 10l.toLong) s\"$x\" else s\"$x${'One'}\")\n        result2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpabkolymz.scala:18:113 ----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult2\e[0m = arr.filter(_\
    \ >= \e[31m1l\e[0m.toLong && _ <= \e[31m9l\e[0m.toLong).map(\e[36mx\e[0m => \e\
    [33mif\e[0m (x < \e[31m10l\e[0m.toLong) \e[31ms\"\e[0m$x\e[31m\"\e[0m \e[33melse\e\
    [0m \e[31ms\"\e[0m$x${\e[31m'One\e[0m'}\")\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \                         ^\e[0m\n\e[31m   |\e[0msymbol literal 'One is no longer\
    \ supported,\n\e[31m   |\e[0muse a string literal \"One\" or an application Symbol(\"\
    One\") instead,\n\e[31m   |\e[0mor enclose in braces '{One} if you want a quoted\
    \ expression.\n\e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- Error: /tmp/tmpabkolymz.scala:18:117\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e\
    [33mval\e[0m \e[36mresult2\e[0m = arr.filter(_ >= \e[31m1l\e[0m.toLong && _ <=\
    \ \e[31m9l\e[0m.toLong).map(\e[36mx\e[0m => \e[33mif\e[0m (x < \e[31m10l\e[0m.toLong)\
    \ \e[31ms\"\e[0m$x\e[31m\"\e[0m \e[33melse\e[0m \e[31ms\"\e[0m$x${\e[31m'One\e\
    [0m'}\")\n\e[31m\e[31m   |\e[0m                                              \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                              unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpabkolymz.scala:18:119 ----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult2\e[0m = arr.filter(_\
    \ >= \e[31m1l\e[0m.toLong && _ <= \e[31m9l\e[0m.toLong).map(\e[36mx\e[0m => \e\
    [33mif\e[0m (x < \e[31m10l\e[0m.toLong) \e[31ms\"\e[0m$x\e[31m\"\e[0m \e[33melse\e\
    [0m \e[31ms\"\e[0m$x${\e[31m'One\e[0m'}\")\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                           unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpabkolymz.sc"
  stdout: ''
  timestamp: 1659804182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones\
    \ = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n\
    \        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_\
    \ <= 9999).toList\n        val tenThousands = arr.filter(_ <= 999999).toList\n\
    \        val oneThousands = arr.filter(_ <= 9999999).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 999999999).toList\n        val oneThousandHundreds = arr.filter(_\
    \ <= 99999999999).toList\n        val oneThousandThousandHundreds = arr.filter(_\
    \ <= 9999999999999).toList\n        val oneThousandThousandThousandHundreds =\
    \ arr.filter(_ <= 999999999999999).toList\n        val oneThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 99999999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 9999999999999999999999999999999999999999999).toList\n    \
    \    val oneThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999999999999999).toList\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6f3vm3s7.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36moneThousandThousandThousandThousandThousandHundreds\e\
    [0m = arr.filter(_ <= \e[31m999999999999999999999999999\e[0m).toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moneThousandThousandThousandThousandThousandHundreds is already\
    \ defined as \e[33mvalue\e[0m \e[35moneThousandThousandThousandThousandThousandHundreds\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmp6f3vm3s7.scala:24:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneThousandHundreds\e[0m = arr.filter(_ <= \e[31m99999999999\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m                                           \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \              number too large\n\e[31m\e[31m-- Error: /tmp/tmp6f3vm3s7.scala:25:58\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneThousandThousandHundreds\e[0m = arr.filter(_ <= \e[31m9999999999999\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m                                           \
    \               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                              number too large\n\e[31m\e[31m-- Error: /tmp/tmp6f3vm3s7.scala:26:66\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneThousandThousandThousandHundreds\e[0m = arr.filter(_\
    \ <= \e[31m999999999999999\e[0m).toList\n\e[31m\e[31m   |\e[0m               \
    \                                                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        number too large\n\
    \e[31m\e[31m-- Error: /tmp/tmp6f3vm3s7.scala:27:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36moneThousandThousandThousandThousandHundre"
  stdout: ''
  timestamp: 1659804181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result\
    \ = arr.filter(_ > 0l).sortWith(_ < _).reverse\n        val digits = arr.filter(_\
    \ > 0l).map(_.toString.toInt)\n        val ones = digits.filter(_ == 1)\n    \
    \    val tens = digits.filter(_ == 10)\n        val hundreds = digits.filter(_\
    \ == 100)\n        val thousands = digits.filter(_ == 1000)\n        val tenThousands\
    \ = digits.filter(_ == 10000)\n        val hundredThousands = digits.filter(_\
    \ == 100000)\n        val oneThousands = digits.filter(_ == 1000000)\n       \
    \ val tenThousandThousands = digits.filter(_ == 10000000)\n        val hundredThousandThousands\
    \ = digits.filter(_ == 100000000)\n        val oneThousandThousands = digits.filter(_\
    \ == 1000000000)\n        val tenThousandThousandThousands = digits.filter(_ ==\
    \ 10000000000)\n        val hundredThousandThousandThousands = digits.filter(_\
    \ == 100000000000)\n        val oneThousandThousandThousands = digits.filter(_\
    \ == 1000000000000)\n        val tenThousandThousandThousandThousands = digits.filter(_\
    \ == 10000000000000)\n        val hundredThousandThousandThousandThousands = digits.filter(_\
    \ == 100000000000000)\n        val oneThousandThousandThousandThousands = digits.filter(_\
    \ == 1000000000000000)\n        val tenThousandThousandThousandThousandThousands\
    \ = digits.filter(_ == 10000000000000000)\n        val hundredThousandThousandThousandThousandThousands\
    \ = digits.filter(_ == 100000000000000000)\n        val oneThousandThousandThousandThousandThousands\
    \ = digits.filter(_ == 100000000000000000L)\n        val tenThousandThousandThousandThousandThousandThousands\
    \ = digits.filter(_ == 1000000000000000000L)\n        val hundredThousandThousandThousandThousandThousandThousands\
    \ = digits.filter(_ == 10000000000000000000L)\n        val oneThousandThousandThousandThousandThousandThousandThousands\
    \ = digits.filter(_ == 100000000000000000000L)\n        val tenThousandThousandThousandThousandTh\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpe_kxpz19.scala:39:90 -----------------------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mhundredThousandThousandThousandThousandThousandThousands\e\
    [0m = digits.filter(_ == \e[31m10000000000000000000L\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \                   number too large\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe_kxpz19.scala:40:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36moneThousandThousandThousandThousandThousandThousandThousands\e[0m = digits.filter(_\
    \ == \e[31m100000000000000000000L\e[0m)\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m\
    \   |\e[0m')' expected, but 'end of statement' found\n\e[31m\e[31m-- Error: /tmp/tmpe_kxpz19.scala:40:94\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m40 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneThousandThousandThousandThousandThousandThousandThousands\e\
    [0m = digits.filter(_ == \e[31m100000000000000000000L\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                       number too large\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpe_kxpz19.scala:41:0 ----------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mtenThousandThousandThousandThousandTh\e[0m\n\
    \e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m   |\e[0m')' expected, but 'end of statement'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe_kxpz19.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpe_kxpz19.scala:29:62\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \ \e[33mval\e[0m \e[36mtenThousandThousandThousands\e[0m = digits.filter(_ ==\
    \ \e[31m10000000000\e[0m)\n\e[31m\e[31m   |\e[0m                             \
    \                                 ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \          "
  stdout: ''
  timestamp: 1659804183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones\
    \ = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ <= 99).toList\n\
    \        val hundreds = arr.filter(_ <= 999).toList\n        val thousands = arr.filter(_\
    \ <= 9999).toList\n        val hundredThousands = arr.filter(_ <= 999999).toList\n\
    \        val tenThousands = arr.filter(_ <= 9999999).toList\n        val oneThousands\
    \ = arr.filter(_ <= 999999999).toList\n        val oneHundredThousands = arr.filter(_\
    \ <= 99999999999).toList\n        val oneThousandThousands = arr.filter(_ <= 9999999999999).toList\n\
    \        val oneHundredThousandThousands = arr.filter(_ <= 999999999999999999).toList\n\
    \        val oneThousandThousandThousands = arr.filter(_ <= 9999999999999899).toList\n\
    \        val oneHundredThousandThousandThousands = arr.filter(_ <= 9999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousands = arr.filter(_ <= 999999999999989999).toList\n\
    \        val oneHundredThousandThousandThousandThousands = arr.filter(_ <= 99999999999999999999999).toList\n\
    \        val oneThousandThousandThousandThousandThousands = arr.filter(_ <= 9999999999999899999999).toList\n\
    \        val oneHundredThousandThousandThousandThousandThousands = arr.filter(_\
    \ <= 999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 99999999999998999999999999999).toList\n        val oneHundredThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999999999999999999999).toList\n        val oneThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 9999999999999899999999999999999999999).toList\n        val\
    \ oneHundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 999999999999999999999999999999999999999).toList\n        val\
    \ oneThousandThousand\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpthq139cb.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpthq139cb.scala:24:50\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneHundredThousands\e[0m = arr.filter(_ <= \e[31m99999999999\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m                                           \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \              number too large\n\e[31m\e[31m-- Error: /tmp/tmpthq139cb.scala:25:51\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneThousandThousands\e[0m = arr.filter(_ <= \e[31m9999999999999\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m                                           \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                  number too large\n\e[31m\e[31m-- Error: /tmp/tmpthq139cb.scala:26:58\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneHundredThousandThousands\e[0m = arr.filter(_ <= \e[31m999999999999999999\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m                                           \
    \               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                                   number too large\n\e[31m\e[31m-- Error: /tmp/tmpthq139cb.scala:27:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneThousandThousandThousands\e[0m = arr.filter(_ <= \e\
    [31m9999999999999899\e[0m).toList\n\e[31m\e[31m   |\e[0m                     \
    \                                      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                        number too large\n\e\
    [31m\e[31m-- Error: /tmp/tmpthq139cb.scala:28:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36moneHundredThousandThousandThousands\e\
    [0m = arr.filter(_ <= \e[31m9999999999999999999\e[0m).toList\n\e[31m\e[31m   |\e\
    [0m                                     "
  stdout: ''
  timestamp: 1659804182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones\
    \ = arr.filter(_ <= 1).toList\n        val tens = arr.filter(_ <= 10).toList\n\
    \        val hundreds = arr.filter(_ <= 100).toList\n        val thousands = arr.filter(_\
    \ <= 1000).toList\n        val tenThousands = arr.filter(_ <= 10000).toList\n\
    \        val oneThousands = arr.filter(_ <= 100000).toList\n        val oneHundreds\
    \ = arr.filter(_ <= 100000).toList\n        val oneThousandHundreds = arr.filter(_\
    \ <= 1000000).toList\n        val oneThousandThousands = arr.filter(_ <= 1000000).toList\n\
    \        val oneThousandThousandHundreds = arr.filter(_ <= 10000000).toList\n\
    \        val oneThousandThousandThousands = arr.filter(_ <= 10000000).toList\n\
    \        val oneThousandThousandThousandHundreds = arr.filter(_ <= 100000000).toList\n\
    \        val oneThousandThousandThousandThousands = arr.filter(_ <= 100000000).toList\n\
    \        val oneThousandThousandThousandThousandHundreds = arr.filter(_ <= 1000000000).toList\n\
    \        val oneThousandThousandThousandThousandThousands = arr.filter(_ <= 1000000000).toList\n\
    \        val oneThousandThousandThousandThousandThousandHundreds = arr.filter(_\
    \ <= 10000000000).toList\n        val oneThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 10000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 100000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 100000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.filter(_ <= 1000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.filter(_ <= 1000000000000).toList\n        val oneThousandThousandThousandThousandThousandThousandThous\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyxq8kn2j.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpyxq8kn2j.scala:32:82\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m32 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneThousandThousandThousandThousandThousandHundreds\e[0m\
    \ = arr.filter(_ <= \e[31m10000000000\e[0m).toList\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \               number too large\n\e[31m\e[31m-- Error: /tmp/tmpyxq8kn2j.scala:33:83\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m33 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneThousandThousandThousandThousandThousandThousands\e\
    [0m = arr.filter(_ <= \e[31m10000000000\e[0m).toList\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \                  number too large\n\e[31m\e[31m-- Error: /tmp/tmpyxq8kn2j.scala:34:90\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneThousandThousandThousandThousandThousandThousandHundreds\e\
    [0m = arr.filter(_ <= \e[31m100000000000\e[0m).toList\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                           number too large\n\e[31m\e[31m-- Error: /tmp/tmpyxq8kn2j.scala:35:91\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m35 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneThousandThousandThousandThousandThousandThousandThousands\e\
    [0m = arr.filter(_ <= \e[31m100000000000\e[0m).toList\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \                            number too large\n\e[31m\e[31m-- Error: /tmp/tmpyxq8kn2j.scala:36"
  stdout: ''
  timestamp: 1659804181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val len\
    \ = arr.size\n        val ones = arr.filter(x => x < 10).toList\n        val tens\
    \ = arr.filter(x => x >= 10 && x < 100).toList\n        val hundreds = arr.filter(x\
    \ => x >= 100 && x < 1000).toList\n        val thousands = arr.filter(x => x >=\
    \ 1000 && x < 10000).toList\n        val tenThousands = arr.filter(x => x >= 10000\
    \ && x < 100000).toList\n        val oneThousands = arr.filter(x => x >= 100000\
    \ && x < 1000000).toList\n        val oneMillions = arr.filter(x => x >= 1000000\
    \ && x < 10000000).toList\n        val oneBillions = arr.filter(x => x >= 10000000\
    \ && x < 100000000).toList\n        val oneTrillions = arr.filter(x => x >= 100000000\
    \ && x < 1000000000).toList\n        val oneQuadrillions = arr.filter(x => x >=\
    \ 1000000000 && x < 10000000000).toList\n        val oneQuintillions = arr.filter(x\
    \ => x >= 10000000000 && x < 100000000000).toList\n        val oneBillionThousands\
    \ = arr.filter(x => x >= 100000000000 && x < 1000000000000).toList\n        val\
    \ oneTrillionThousands = arr.filter(x => x >= 1000000000000 && x < 10000000000000).toList\n\
    \        val oneQuadrillionThousands = arr.filter(x => x >= 10000000000000 &&\
    \ x < 100000000000000).toList\n        val oneQuintillionThousands = arr.filter(x\
    \ => x >= 100000000000000 && x < 1000000000000000).toList\n        val oneBillionThousandThousands\
    \ = arr.filter(x => x >= 1000000000000000 && x < 10000000000000000).toList\n \
    \       val oneTrillionThousandThousands = arr.filter(x => x >= 10000000000000000\
    \ && x < 100000000000000000).toList\n        val oneQuadrillionThousandThousands\
    \ = arr.filter(x => x >= 100000000000000000 && x < 1000000000000000000).toList\n\
    \        val oneQuintillionThousandThousands = arr.filter(x => x >= 1000000000000000000\
    \ && x < 10000000000000000000).toList\n        val oneBillionThousandThousandThousands\
    \ = arr.filter(x => x >= 10000000000000000000 && x < 100000000000000000000).toList\n\
    \        val oneTrillionThousandThousandThousands = arr.filter(x => x >= 100000000000000000000\
    \ && x < 1000000000000000000000).toList\n        val oneQuadrilli\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfj63xupv.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpfj63xupv.scala:27:69\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneQuadrillions\e[0m = arr.filter(\e[36mx\e[0m => x >=\
    \ \e[31m1000000000\e[0m && x < \e[31m10000000000\e[0m).toList\n\e[31m\e[31m  \
    \ |\e[0m                                                                     ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmpfj63xupv.scala:28:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36moneQuintillions\e[0m = arr.filter(\e\
    [36mx\e[0m => x >= \e[31m10000000000\e[0m && x < \e[31m100000000000\e[0m).toList\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmpfj63xupv.scala:28:70 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36moneQuintillions\e[0m = arr.filter(\e\
    [36mx\e[0m => x >= \e[31m10000000000\e[0m && x < \e[31m100000000000\e[0m).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \                            number too large\n\e[31m\e[31m-- Error: /tmp/tmpfj63xupv.scala:29:55\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \ \e[33mval\e[0m \e[36moneBillionThousands\e[0m = arr.filter(\e[36mx\e[0m => x\
    \ >= \e[31m100000000000\e[0m && x < \e[31m1000000000000\e[0m).toList\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       number\
    \ too large\n\e[31m\e[31m-- Error: /tmp/tmpfj63xupv.scala:29:75 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mon"
  stdout: ''
  timestamp: 1659804182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums\
    \ = arr.toList\n        val numsLength = nums.size\n        val numsDigits = nums.map(_.toString).size\n\
    \        val numsDigitSum = numsDigits.toLong\n        val numsDigitSum2 = numsDigitSum\
    \ * numsDigitSum\n        val numsDigitSum3 = numsDigitSum2 * numsDigitSum\n \
    \       val numsDigitSum4 = numsDigitSum3 * numsDigitSum\n        val numsDigitSum5\
    \ = numsDigitSum4 * numsDigitSum\n        val numsDigitSum6 = numsDigitSum5 *\
    \ numsDigitSum\n        val numsDigitSum7 = numsDigitSum6 * numsDigitSum\n   \
    \     val numsDigitSum8 = numsDigitSum7 * numsDigitSum\n        val numsDigitSum9\
    \ = numsDigitSum8 * numsDigitSum\n        val numsDigitSum10 = numsDigitSum9 *\
    \ numsDigitSum\n        val numsDigitSum11 = numsDigitSum10 * numsDigitSum\n \
    \       val numsDigitSum12 = numsDigitSum11 * numsDigitSum\n        val numsDigitSum13\
    \ = numsDigitSum12 * numsDigitSum\n        val numsDigitSum14 = numsDigitSum13\
    \ * numsDigitSum\n        val numsDigitSum15 = numsDigitSum14 * numsDigitSum\n\
    \        val numsDigitSum16 = numsDigitSum15 * numsDigitSum\n        val numsDigitSum17\
    \ = numsDigitSum16 * numsDigitSum\n        val numsDigitSum18 = numsDigitSum17\
    \ * numsDigitSum\n        val numsDigitSum19 = numsDigitSum18 * numsDigitSum\n\
    \        val numsDigitSum20 = numsDigitSum19 * numsDigitSum\n        val numsDigitSum21\
    \ = numsDigitSum20 * numsDigitSum\n        val numsDigitSum22 = numsDigitSum21\
    \ * numsDigitSum\n        val numsDigitSum23 = numsDigitSum22 * numsDigitSum\n\
    \        val numsDigitSum24 = numsDigitSum23 * numsDigitSum\n        val numsDigitSum25\
    \ = numsDigitSum24 * numsDigitSum\n        val numsDigitSum26 = numsDigitSum25\
    \ * numsDigitSum\n        val numsDigitSum27 = numsDigit\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0lmdmcrw.scala:46:29 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mnumsDigitSum27\e[0m = numsDigit\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             Not found: numsDigit\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp0lmdmcrw.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659804182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result\
    \ = arr.filter(_ >= 1l && _ <= 9l).sortWith(_ < _).reverse\n        arr.filter(_\
    \ >= 1l && _ <= 9l).sortWith(_ < _).reverse.map(i => byDigit(i.toString.toInt))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp7mtqdojj.scala:17:32 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = arr.filter(_\
    \ >= \e[31m1l\e[0m && _ <= \e[31m9l\e[0m).sortWith(_ < _).reverse\n\e[31m\e[31m\
    \   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Wrong number of parameters, expected: 1\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmp7mtqdojj.scala:18:19 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        arr.filter(_ >= \e[31m1l\e[0m && _ <= \e[31m9l\e\
    [0m).sortWith(_ < _).reverse.map(\e[36mi\e[0m => byDigit(i.toString.toInt))\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7mtqdojj.scala:18:72 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        arr.filter(_ >= \e[31m1l\e[0m && _ <= \e[31m9l\e[0m).sortWith(_\
    \ < _).reverse.map(\e[36mi\e[0m => byDigit(i.toString.toInt))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                                            \
    \          Not found: byDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659804179
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result\
    \ = arr.filter(_ > 0l).sortWith(_ < _).reverse\n        val map = new mutable.HashMap[Long,\
    \ String]()\n        map.put(0l, \"One\")\n        map.put(1l, \"Two\")\n    \
    \    map.put(2l, \"Three\")\n        map.put(3l, \"Four\")\n        map.put(4l,\
    \ \"Five\")\n        map.put(5l, \"Six\")\n        map.put(6l, \"Seven\")\n  \
    \      map.put(7l, \"Eight\")\n        map.put(8l, \"Nine\")\n        map.put(9l,\
    \ \"Ten\")\n        map.put(10l, \"Eleven\")\n        map.put(11l, \"Twelve\"\
    )\n        map.put(12l, \"Thirteen\")\n        map.put(13l, \"Fourteen\")\n  \
    \      map.put(14l, \"Fifteen\")\n        map.put(15l, \"Sixteen\")\n        map.put(16l,\
    \ \"Seventeen\")\n        map.put(17l, \"Eighteen\")\n        map.put(18l, \"\
    Nineteen\")\n        map.put(19l, \"Twenty\")\n        map.put(20l, \"Twenty One\"\
    )\n        map.put(21l, \"Twenty Two\")\n        map.put(22l, \"Twenty Three\"\
    )\n        map.put(23l, \"Twenty Four\")\n        map.put(24l, \"Twenty Five\"\
    )\n        map.put(25l, \"Twenty Six\")\n        map.put(26l, \"Twenty Seven\"\
    )\n        map.put(27l, \"Twenty Eight\")\n        map.put(28l, \"Twenty Nine\"\
    )\n        map.put(29l, \"Thirty\")\n        map.put(30l, \"Thirty One\")\n  \
    \      map.put(31l, \"Thirty Two\")\n        map.put(32l, \"Thirty Three\")\n\
    \        map.put(33l, \"Thirty Four\")\n        map.put(34l, \"Thirty Five\")\n\
    \        map.put(35l, \"Thirty Six\")\n        map.put(36l, \"Thirty Seven\")\n\
    \        map.put(37l, \"Thirty Eight\")\n        map.put(38l, \"Thirty Nine\"\
    )\n        map.put(39l, \"Forty\")\n        map.put(40l, \"Forty One\")\n    \
    \    map.put(41l, \"Forty Two\")\n        map.put(42l, \"Forty Three\")\n    \
    \    map.put(43l, \"Forty Four\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpgtvlxf6i.scala:62:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        map.put(\e[31m43l\e[0m, \"Forty Four\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpgtvlxf6i.scala:64:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m64 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtvlxf6i.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mLong\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgtvlxf6i.scala:64:4\
    \ -------------------------\e[0m\e[0m\n\e[31m64 |\e[0m    \e[33mdef\e[0m \e[36mmain\e\
    [0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m  \
    \ |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    Not found: Forty Fourdef\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659804178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given an array of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the array\
    \ is empty, return an empty array:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the array has any strange number ignore it:\n  \
    \  // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val ones\
    \ = arr.filter(_ <= 9).toList\n        val tens = arr.filter(_ >= 10 && _ <=99).toList\n\
    \        val hundreds = arr.filter(_ >= 100 && _ <= 999).toList\n        val thousands\
    \ = arr.filter(_ >= 1000)\n        val hundredsNames = hundreds.map(x => s\"Hundred$x\"\
    )\n        val thousandsNames = thousands.map(x => s\"Thousand$x\")\n        val\
    \ tensNames = tens.map(x => s\"Ten$x\")\n        val onesNames = ones.map(x =>\
    \ s\"One$x\")\n        val result = onesNames.reverse.concat(tensNames).concat(hundredsNames).concat(thousandsNames)\n\
    \        if (result.isEmpty) Nil\n        else result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpkzs_tt7k.scala:18:30 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mtens\e[0m = arr.filter(_\
    \ >= \e[31m10\e[0m && _ <=\e[31m99\e[0m).toList\n\e[31m\e[31m   |\e[0m       \
    \                       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmpkzs_tt7k.scala:19:34 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mhundreds\e[0m = arr.filter(_\
    \ >= \e[31m100\e[0m && _ <= \e[31m999\e[0m).toList\n\e[31m\e[31m   |\e[0m    \
    \                              ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                             Wrong number of parameters, expected: 1\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804179
