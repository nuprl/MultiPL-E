name: HumanEval_88_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n    // you will sort the given array in ascending order if the\
  \ sum( first index value, last index value) is odd,\n    // or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n    // Note:\n\
  \    // * don't change the given array.\n    // Examples:\n    // >>> sortArray((List[Long]()))\n\
  \    // (List[Long]())\n    // >>> sortArray((List[Long](5l.toLong)))\n    // (List[Long](5l.toLong))\n\
  \    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong,\
  \ 5l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong))\n    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong,\
  \ 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong)))\n    // (List[Long](6l.toLong, 5l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))\n    def sortArray(array\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
  \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong,\
  \ 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong,\
  \ 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
  \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
  \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
  \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
completions: ["        val sumArray = array.foldLeft(0l) { (sum, value) => sum + value\
    \ }\n        val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray\
    \ - sumArrayOdd\n        val sortedArray = array.sortWith(x => x > 0)\n      \
    \  if (sumArrayOdd > 0) sortedArray else sortedArray.sortWith(x => x < 0)", " \
    \       val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n  \
    \      val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n\
    \        val sortedArray = array.sortWith(x => x < x) // sort ascending\n    \
    \    if (sumArrayOdd > 0) sortedArray else sortedArray.sortWith(x => x > x) //\
    \ sort descending", "        val sumArray = array.sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 == 1)\n        val evenSumArray = evenSum.map(_ * 2).toList\n\
    \        val oddSumArray = oddSum.map(_ * 2).toList\n        val evenArraySorted\
    \ = evenArray.sortWith(_ < _)\n        val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n        val evenSumArraySorted = evenSumArray.sortWith(_ < _)\n      \
    \  val oddSumArraySorted = oddSumArray.sortWith(_ > _)\n        val evenArraySorted2\
    \ = evenArraySorted.sortWith(_ < _)\n        val oddArraySorted2 = oddArraySorted.sortWith(_\
    \ > _)\n        val evenSumArraySorted2 = evenSumArraySorted.sortWith(_ < _)\n\
    \        val oddSumArraySorted2 = oddSumArraySorted.sortWith(_ > _)\n        val\
    \ evenArraySorted3 = evenArraySorted2.sortWith(_ < _)\n        val oddArraySorted3\
    \ = oddArraySorted2.sortWith(_ > _)\n        val evenSumArraySorted3 = evenSumArraySorted2.sortWith(_\
    \ < _)\n        val oddSumArraySorted3 = oddSumArraySorted2.sortWith(_ > _)\n\
    \        val evenArraySorted4 = evenArraySorted3.sortWith(_ < _)\n        val\
    \ oddArraySorted4 = oddArraySorted3.sortWith(_ > _)\n        val evenSumArraySorted4\
    \ = evenSumArraySorted3.sortWith(_ < _)\n        val oddSumArraySorted4 = oddSumArraySorted3.sortWith(_\
    \ > _)\n        val evenArraySorted5 = evenArraySorted4.sortWith(_ < _)\n    \
    \    val oddArraySorted5 = oddArraySorted4.sortWith(_ > _)\n        val evenSumArraySorted5\
    \ = evenSumArraySorted4.sortWith(_ < _)\n        val oddSumArraySorted5 = oddSumArraySorted4.sortWith(_\
    \ > _)\n        val evenArraySorted6 = evenArraySorted5.sortWith(_ < _)\n    \
    \    val oddArraySorted6 = oddArraySorted5.sortWith(_ > _)\n        val evenSumArraySorted6\
    \ = evenSumArraySorted5.sortWith(_ < _)\n        val oddSumArraySorted6 = oddSumArraySorted5.sortWith(_\
    \ > _)\n        val evenArraySorted7 = evenArraySorted6.sortWith(_", "       \
    \ val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n        val\
    \ isOdd = sumArray % 2 != 0\n        val isEven = sumArray % 2 == 0\n        val\
    \ newArray = array.sortWith(isOdd _)\n        if(isEven) newArray.sortWith(isOdd\
    \ _)\n        else newArray.sortWith(isEven _)", "        val sumArray = array.foldLeft(0L){\
    \ (sum, element) => sum + element }\n        val evenSum = sumArray % 2 == 0\n\
    \        val oddSum = sumArray % 2 != 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if(evenSum)\
    \ evenArray.sortBy(_)\n        if(oddSum) oddArray.sortBy(_.reverse)", "     \
    \   val sumArray = array.foldLeft(0L) { (sum, elem) => sum + elem}\n        val\
    \ isOdd = sumArray % 2L == 0L\n        val isEven = sumArray % 2L == 1L\n    \
    \    if(isOdd) array.sortBy(_._1)\n        else array.sortBy(_._2).reverse", " \
    \       val newArray = array.sortWith((a, b) => a > b)\n        if (newArray.sum\
    \ % 2 == 1) {\n            newArray.reverse\n        }\n        newArray", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val sum = 0\n   \
    \     array.foreach(x => sum += x)\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n\
    \        }\n        result.toList", "        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n           \
    \ array.sortWith(_ > _)\n        }\n        result.toList", "        val sumArray\
    \ = array.foldLeft(0L) { (sum, elem) => sum + elem}\n        val sumArrayOdd =\
    \ sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n        val\
    \ sortedArray = array.sortWith(_.compare(_.toLong) < 0)\n        if (sumArrayOdd\
    \ > sumArrayEven) {\n            sortedArray.reverse\n        } else {\n     \
    \       sortedArray\n        }", "        val sumArray = array.foldLeft(0l) {\
    \ (sum, value) => sum + value }\n        val sumEven = sumArray % 2 == 0\n   \
    \     val sumOdd = sumArray % 2 != 0\n        val evenArray = array.filter(_ %\
    \ 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (sumEven)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else if (sumOdd) {\n   \
    \         oddArray.sortWith(_ > _)\n        } else {\n            evenArray.sortWith(_\
    \ < _)\n            oddArray.sortWith(_ > _)\n        }", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i = 0\n \
    \       var j = 0\n        while (i < array.size) {\n            sum = sum + array(i)\n\
    \            i = i + 1\n        }\n        if (sum % 2 == 0) {\n            while\
    \ (j < array.size) {\n                sum = sum + array(j)\n                j\
    \ = j + 1\n            }\n            while (i < array.size) {\n             \
    \   sum = sum - array(i)\n                i = i + 1\n            }\n         \
    \   while (j < array.size) {\n                sum = sum + array(j)\n         \
    \       j = j + 1\n            }\n            while (i < array.size) {\n     \
    \           sum = sum - array(i)\n                i = i + 1\n            }\n \
    \           while (j < array.size) {\n                sum = sum + array(j)\n \
    \               j = j + 1\n            }\n            while (i < array.size) {\n\
    \                sum = sum - array(i)\n                i = i + 1\n           \
    \ }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = ", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val sum = 0\n        for (i\
    \ <- 0 until array.size) {\n            sum += array(i)\n        }\n        if\
    \ (sum % 2 == 0) {\n            val tempArray = array.sortBy(x => x)\n       \
    \     result.addAll(tempArray)\n        } else {\n            val tempArray =\
    \ array.sortBy(x => -x)\n            result.addAll(tempArray)\n        }\n   \
    \     result.iterator", "        val sumArray = array.foldLeft(0l) { (sum, value)\
    \ => sum + value }\n        val odd = sumArray % 2\n        val even = sumArray\
    \ - odd\n        val sortedArray = array.sortWith( (a, b) => if (odd) a < b else\
    \ a > b )\n        if (even) sortedArray.sortWith( (a, b) => a < b ) else sortedArray.sortWith(\
    \ (a, b) => a > b )", "        val sumArray = array.sum\n        val evenSum =\
    \ sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        val evenArraySorted = evenArray.sortWith((x, y) => x - y)\n        val\
    \ oddArraySorted = oddArray.sortWith((x, y) => y - x)\n        if (evenSum) {\n\
    \            evenArraySorted\n        } else {\n            oddArraySorted\n \
    \       }", "        val newArray = array.sortWith(x => x.sum % 2 == 1)\n    \
    \    newArray", "        val sumArray = array.foldLeft(0l.toLong){ (sum, value)\
    \ => sum + value }\n        val sumArrayOdd = sumArray % 2l.toLong\n        val\
    \ sumArrayEven = sumArray - sumArrayOdd\n        val arrayCopy = array.map(x =>\
    \ x.toLong)\n        val sortedArray = arrayCopy.sortWith((x, y) => x > y)\n \
    \       if (sumArrayOdd > sumArrayEven) sortedArray.reverse\n        else sortedArray",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n    \
    \    var i = 0\n        var j = 0\n        var k = 0\n        while(i < array.length)\
    \ {\n            sum = sum + array(i)\n            i = i + 1\n        }\n    \
    \    while(j < array.length) {\n            sum = sum + array(j)\n           \
    \ j = j + 1\n        }\n        while(k < (array.length)) {\n            if(sum\
    \ % 2 == 0) {\n                result.add(array(k))\n                k = k + 1\n\
    \            } else {\n                result.add(array(k).reverse)\n        \
    \        k = k + 1\n            }\n        }\n        result.toList", "      \
    \  val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var\
    \ i = 0\n        var j = 0\n        while (i < array.size) {\n            sum\
    \ = sum + array(i)\n            i = i + 1\n        }\n        while (j < array.size)\
    \ {\n            sum = sum - array(i)\n            j = j + 1\n        }\n    \
    \    if (sum % 2 == 0) {\n            while (i < array.size) {\n             \
    \   result.add(array(i))\n                i = i + 1\n            }\n        }\
    \ else {\n            while (j < array.size) {\n                result.add(array(j))\n\
    \                j = j + 1\n            }\n        }\n        result.toList",
  "        val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n   \
    \     val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n \
    \       val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if (evenSum) {\n    \
    \        evenArraySorted\n        } else {\n            oddArraySorted\n     \
    \   }", "        val sumArray = array.sum\n        val evenSum = sumArray % 2\
    \ == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 == 1)\n        val evenSumArray = evenSum.map(_ * 2).toLong\n\
    \        val oddSumArray = oddSum.map(_ * 2).toLong\n        val evenArraySorted\
    \ = evenArray.sortWith(evenSumArray.compare(_))\n        val oddArraySorted =\
    \ oddArray.sortWith(oddSumArray.compare(_))\n        evenArraySorted.reverse ++\
    \ oddArraySorted", "        val sumArray = array.foldLeft(0l) { (sum, value) =>\
    \ sum + value }\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n\
    \        if (evenSum) {\n            evenArray.sortWith(_ < _)\n        } else\
    \ {\n            oddArray.sortWith(_ > _)\n        }", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        var sum = 0\n        var i = 0\n       \
    \ while (i < array.length) {\n            sum += array(i)\n            i += 1\n\
    \        }\n        if (sum % 2 == 0) {\n            array.sortWith((a, b) =>\
    \ a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n    \
    \    }\n        result.toList", "        val sumArray = array.sum\n        val\
    \ evenSum = sumArray % 2 == 0\n        val oddSum = sumArray % 2 != 0\n      \
    \  val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if (evenSum) {\n    \
    \        evenArraySorted\n        } else {\n            oddArraySorted\n     \
    \   }", "        val result = array.sortWith((x, y) => if (x + y == 0) x else\
    \ y)\n        val sum = (result(0) + result(result.length - 1)).toLong\n     \
    \   if (sum % 2 == 0) result.reverse else result", "        val sumArray = array.sum\n\
    \        val sumArray2 = sumArray.toLong\n        val sumArray3 = sumArray2.toLong\n\
    \        val sumArray4 = sumArray3.toLong\n        val sumArray5 = sumArray4.toLong\n\
    \        val sumArray6 = sumArray5.toLong\n        val sumArray7 = sumArray6.toLong\n\
    \        val sumArray8 = sumArray7.toLong\n        val sumArray9 = sumArray8.toLong\n\
    \        val sumArray10 = sumArray9.toLong\n        val sumArray11 = sumArray10.toLong\n\
    \        val sumArray12 = sumArray11.toLong\n        val sumArray13 = sumArray12.toLong\n\
    \        val sumArray14 = sumArray13.toLong\n        val sumArray15 = sumArray14.toLong\n\
    \        val sumArray16 = sumArray15.toLong\n        val sumArray17 = sumArray16.toLong\n\
    \        val sumArray18 = sumArray17.toLong\n        val sumArray19 = sumArray18.toLong\n\
    \        val sumArray20 = sumArray19.toLong\n        val sumArray21 = sumArray20.toLong\n\
    \        val sumArray22 = sumArray21.toLong\n        val sumArray23 = sumArray22.toLong\n\
    \        val sumArray24 = sumArray23.toLong\n        val sumArray25 = sumArray24.toLong\n\
    \        val sumArray26 = sumArray25.toLong\n        val sumArray27 = sumArray26.toLong\n\
    \        val sumArray28 = sumArray27.toLong\n        val sumArray29 = sumArray28.toLong\n\
    \        val sumArray30 = sumArray29.toLong\n        val sumArray31 = sumArray30.toLong\n\
    \        val sumArray32 = sumArray31.toLong\n        val sumArray33 = sumArray32.toLong\n\
    \        val sumArray34 = sumArray33.toLong\n        val sumArray35 = sumArray34.toLong\n\
    \        val sumArray36 = sumArray35.toLong\n        val sumArray37 = sumArray36.toLong\n\
    \        val sumArray38 = sumArray37.toLong\n        val sumArray39 = sumArray38.toLong\n\
    \        val sumArray40 = sumArray39.toLong\n        val sumArray41 = sumArray40.toLong\n\
    \        val sumArray42 = sumArray41.toLong\n        val sumArray43 = sumArray42.toLong\n\
    \        val sumArray44 = sumArray43.", "        val sumArray = array.sum\n  \
    \      val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sumArray = array.foldLeft(0l) { (sum, element)\
    \ => sum + element }\n        val sumArrayOdd = sumArray % 2\n        val sumArrayEven\
    \ = sumArray - sumArrayOdd\n        val sortedArray = array.sortWith((a, b) =>\
    \ a < b || (a == b && sumArrayOdd > sumArrayEven))\n        sortedArray", "  \
    \      val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n   \
    \     val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sumArray = array.foldLeft(0l) { (sum, value)\
    \ => sum + value }\n        val evenSum = sumArray % 2 == 0\n        val odd =\
    \ sumArray % 2 != 0\n        if (evenSum) {\n            array.sortBy(_.toLong)\n\
    \        } else {\n            array.sortBy(_.toLong.reverse)\n        }", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n   \
    \     var i = 0\n        while (i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_.compare(array(i),\
    \ array(i + 1)) > 0)\n        } else {\n            array.sortWith(_.compare(array(i),\
    \ array(i + 1)) < 0)\n        }\n        result.addAll(array)\n        return\
    \ result.toList", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   val sum = 0\n        val sumOfFirstIndex = 0\n        val sumOfLastIndex =\
    \ 0\n        val sumOfFirstIndexLastIndex = 0\n        val sumOfFirstIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndex = 0\n        val\
    \ sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndexLastIndex",
  "        val sumArray = array.sum\n        val sumArray2 = sumArray.toLong\n   \
    \     val sumArray3 = sumArray2.toLong\n        val sumArray4 = sumArray3.toLong\n\
    \        val sumArray5 = sumArray4.toLong\n        val sumArray6 = sumArray5.toLong\n\
    \        val sumArray7 = sumArray6.toLong\n        val sumArray8 = sumArray7.toLong\n\
    \        val sumArray9 = sumArray8.toLong\n        val sumArray10 = sumArray9.toLong\n\
    \        val sumArray11 = sumArray10.toLong\n        val sumArray12 = sumArray11.toLong\n\
    \        val sumArray13 = sumArray12.toLong\n        val sumArray14 = sumArray13.toLong\n\
    \        val sumArray15 = sumArray14.toLong\n        val sumArray16 = sumArray15.toLong\n\
    \        val sumArray17 = sumArray16.toLong\n        val sumArray18 = sumArray17.toLong\n\
    \        val sumArray19 = sumArray18.toLong\n        val sumArray20 = sumArray19.toLong\n\
    \        val sumArray21 = sumArray20.toLong\n        val sumArray22 = sumArray21.toLong\n\
    \        val sumArray23 = sumArray22.toLong\n        val sumArray24 = sumArray23.toLong\n\
    \        val sumArray25 = sumArray24.toLong\n        val sumArray26 = sumArray25.toLong\n\
    \        val sumArray27 = sumArray26.toLong\n        val sumArray28 = sumArray27.toLong\n\
    \        val sumArray29 = sumArray28.toLong\n        val sumArray30 = sumArray29.toLong\n\
    \        val sumArray31 = sumArray30.toLong\n        val sumArray32 = sumArray31.toLong\n\
    \        val sumArray33 = sumArray32.toLong\n        val sumArray34 = sumArray33.toLong\n\
    \        val sumArray35 = sumArray34.toLong\n        val sumArray36 = sumArray35.toLong\n\
    \        val sumArray37 = sumArray36.toLong\n        val sumArray38 = sumArray37.toLong\n\
    \        val sumArray39 = sumArray38.toLong\n        val sumArray40 = sumArray39.toLong\n\
    \        val sumArray41 = sumArray40.toLong\n        val sumArray42 = sumArray41.toLong\n\
    \        val sumArray43 = sumArray42.toLong\n        val sumArray44 = sumArray43.",
  "        val sumArray = array.foldLeft(0L) { (sum, value) => sum + value }\n   \
    \     val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n\
    \        val sortedArray = array.sortWith(compare(sumArrayOdd, sumArrayEven))\n\
    \        if (sumArrayOdd > sumArrayEven) {\n            sortedArray.reverse\n\
    \        }\n        sortedArray", "        val sumArray = array.sum\n        val\
    \ evenSum = sumArray % 2 == 0\n        val oddSum = sumArray % 2 != 0\n      \
    \  val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        if (evenSum) {\n            evenArray.sortWith(_ < _)\n \
    \       } else if (oddSum) {\n            oddArray.sortWith(_ > _)\n        }\
    \ else {\n            array.sortWith(_ < _)\n        }", "        val sumArray\
    \ = array.foldLeft(0L) { (sum, value) => sum + value }\n        val evenSum =\
    \ sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        val evenArrayLength = evenArray.length\n        val oddArrayLength =\
    \ oddArray.length\n        val evenArraySum = evenArray.foldLeft(0L) { (sum, value)\
    \ => sum + value }\n        val oddArraySum = oddArray.foldLeft(0L) { (sum, value)\
    \ => sum + value }\n        val evenArraySumLength = evenArraySum.length\n   \
    \     val oddArraySumLength = oddArraySum.length\n        val evenArraySumSum\
    \ = evenArraySum.foldLeft(0L) { (sum, value) => sum + value }\n        val oddArraySumSum\
    \ = oddArraySum.foldLeft(0L) { (sum, value) => sum + value }\n        val evenArraySumSumLength\
    \ = evenArraySumSum.length\n        val oddArraySumSumLength = oddArraySumSum.length\n\
    \        val evenArraySumSumSum = evenArraySumSum.foldLeft(0L) { (sum, value)\
    \ => sum + value }\n        val oddArraySumSum = oddArraySumSum.foldLeft(0L) {\
    \ (sum, value) => sum + value }\n        val evenArraySumSumLength = evenArraySumSum.length\n\
    \        val oddArraySumSumLength = oddArraySumSum.length\n        val evenArraySumSumSum\
    \ = evenArraySumSum.foldLeft(0L) { (sum, value) => sum + value }\n        val\
    \ oddArraySumSum = oddArraySumSum.foldLeft(0L) { (sum, value) => sum + value }\n\
    \        val evenArraySumSumLength = evenArraySumSum.length\n        val oddArraySumSumLength\
    \ = oddArraySumSum.length\n        val evenArraySumSumSum = evenArraySumSum.foldLeft(0L)\
    \ { (sum, value) => sum + value }\n        val oddArraySumSum = oddArraySumSum.foldLeft(0L)\
    \ { (sum, value) => sum + value }\n        val evenArraySumSumLength = evenArraySumSum.length\n\
    \        val oddArraySumSumLength = oddArraySumSum.length\n        val evenArraySumSumSum\
    \ = evenArraySumSum.foldLe", "        val sum : Long = array.sum\n        val\
    \ evenSum = sum % 2 == 0\n        val oddSum = sum % 2 != 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        val evenArraySum = evenArray.sum\n        val oddArraySum = oddArray.sum\n\
    \        val evenArraySumOdd = evenArraySum - oddArraySum\n        val evenArraySumEven\
    \ = evenArraySum + evenArraySumOdd\n        val oddArraySumEven = oddArraySum\
    \ - evenArraySumEven\n        val oddArraySumOdd = oddArraySum + oddArraySumEven\n\
    \        val evenArraySumEvenOdd = evenArraySumEven + evenArraySumOdd\n      \
    \  val evenArraySumEvenOddOdd = evenArraySumEvenOdd + evenArraySumOdd\n      \
    \  val oddArraySumEvenOddOdd = oddArraySumEvenOdd + oddArraySumOdd\n        val\
    \ evenArraySumEvenOddOddOdd = evenArraySumEvenOddOdd + evenArraySumOddOdd\n  \
    \      val oddArraySumEvenOddOddOdd = oddArraySumEvenOddOdd + oddArraySumOddOdd\n\
    \        val evenArraySumEvenOddOddOddOdd = evenArraySumEvenOddOddOdd + evenArraySumOddOddOdd\n\
    \        val oddArraySumEvenOddOddOddOdd = oddArraySumEvenOddOddOdd + oddArraySumOddOddOdd\n\
    \        val evenArraySumEvenOddOddOddOddOdd = evenArraySumEvenOddOddOddOdd +\
    \ evenArraySumOddOddOddOdd\n        val oddArraySumEvenOddOddOddOddOdd = oddArraySumEvenOddOddOddOdd\
    \ + oddArraySumOddOddOddOdd\n        val evenArraySumEvenOddOddOddOddOddOdd =\
    \ evenArraySumEvenOddOddOddOddOdd + evenArraySumOddOddOddOddOdd\n        val oddArraySumEvenOddOddOddOddOddOdd\
    \ = oddArraySumEvenOddOddOddOddOddOdd + oddArraySum", "        val result = new\
    \ mutable.ArrayList[Long]()\n        val sum = 0\n        array.foreach(x => sum\
    \ += x)\n        if (sum % 2 == 0) {\n            array.sortWith(_ < _)\n    \
    \    } else {\n            array.sortWith(_ > _)\n        }\n        result.toList",
  "        val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n   \
    \     val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n\
    \        val arrayCopy = array.map(x => x + sumArrayEven)\n        val arrayCopyOdd\
    \ = arrayCopy.filter(x => x % 2 == 0)\n        val arrayCopyEven = arrayCopy.filter(x\
    \ => x % 2 == 1)\n        if (sumArrayOdd > 0)\n            arrayCopyOdd.sortWith(_\
    \ < _)\n        else\n            arrayCopyEven.sortWith(_ > _)", "        val\
    \ sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        if (evenSum) {\n            evenArray.sortWith(_ < _)\n        } else\
    \ {\n            oddArray.sortWith(_ > _)\n        }", "        val sumArray =\
    \ array.foldLeft(0l) { (sum, value) => sum + value }\n        val sumEven = sumArray\
    \ % 2 == 0\n        val sumOdd = sumArray % 2 != 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySorted\
    \ = evenArray.sortWith((a, b) => a < b)\n        val oddArraySorted = oddArray.sortWith((a,\
    \ b) => a > b)\n        if (sumEven) {\n            evenArraySorted\n        }\
    \ else {\n            oddArraySorted\n        }", "        val newArray = array.sortWith(compare)\n\
    \        newArray", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     val sum = 0\n        for(i <- 0 until array.size) {\n            sum +=\
    \ array(i)\n        }\n        if(sum % 2 == 1) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList", "        val sumArray = array.foldLeft(0L)\
    \ { (sum, element) => sum + element }\n        val sumArrayOdd = sumArray % 2L\
    \ == 0L\n        val sumArrayEven = sumArray % 2L == 1L\n        val sortedArray\
    \ = array.sortWith(compare(sumArrayOdd, sumArrayEven))\n        if (sumArrayOdd)\
    \ sortedArray else sortedArray.reverse", "        val result = new mutable.ArrayList[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while (i < array.size) {\n  \
    \          sum += array(i)\n            i += 1\n        }\n        if (sum % 2\
    \ == 0) {\n            array.sortWith((a, b) => a < b)\n        } else {\n   \
    \         array.sortWith((a, b) => a > b)\n        }\n        result.toList",
  "        val sumArray = array.sum\n        val sumArray2 = sumArray / 2\n      \
    \  val sumArray3 = sumArray2 / 2\n        val sumArray4 = sumArray3 / 2\n    \
    \    val sumArray5 = sumArray4 / 2\n        val sumArray6 = sumArray5 / 2\n  \
    \      val sumArray7 = sumArray6 / 2\n        val sumArray8 = sumArray7 / 2\n\
    \        val sumArray9 = sumArray8 / 2\n        val sumArray10 = sumArray9 / 2\n\
    \        val sumArray11 = sumArray10 / 2\n        val sumArray12 = sumArray11\
    \ / 2\n        val sumArray13 = sumArray12 / 2\n        val sumArray14 = sumArray13\
    \ / 2\n        val sumArray15 = sumArray14 / 2\n        val sumArray16 = sumArray15\
    \ / 2\n        val sumArray17 = sumArray16 / 2\n        val sumArray18 = sumArray17\
    \ / 2\n        val sumArray19 = sumArray18 / 2\n        val sumArray20 = sumArray19\
    \ / 2\n        val sumArray21 = sumArray20 / 2\n        val sumArray22 = sumArray21\
    \ / 2\n        val sumArray23 = sumArray22 / 2\n        val sumArray24 = sumArray23\
    \ / 2\n        val sumArray25 = sumArray24 / 2\n        val sumArray26 = sumArray25\
    \ / 2\n        val sumArray27 = sumArray26 / 2\n        val sumArray28 = sumArray27\
    \ / 2\n        val sumArray29 = sumArray28 / 2\n        val sumArray30 = sumArray29\
    \ / 2\n        val sumArray31 = sumArray30 / 2\n        val sumArray32 = sumArray31\
    \ / 2\n        val sumArray33 = sumArray32 / 2\n        val sumArray34 = sumArray33\
    \ / 2\n        val sumArray35 = sumArray34 / 2\n        val sumArray36 = sumArray35\
    \ / 2\n        val sumArray37 = sumArray36 / 2\n        val sumArray38 = sumArray37\
    \ / 2\n        val sumArray39 = sumArray38 / 2\n        val sumArray40 = sumArray39\
    \ / 2\n        val sumArray41 = sumArray40 / 2\n        val sumArray42 = sumArray41\
    \ / 2\n        val sumArray43 = sumArray42 / 2\n        val sumArray44 = sumArray43\
    \ / 2\n", "        val result = new mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        val sumOfFirstIndex = 0\n        val sumOfLastIndex = 0\n     \
    \   val sumOfFirstIndexAndLastIndex = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndex\
    \ = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndex = 0\n \
    \       val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndex =\
    \ 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndex\
    \ = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndex\
    \ = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndex\
    \ = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndex\
    \ = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndex\
    \ = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndex\
    \ = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndex\
    \ = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndex\
    \ = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndex\
    \ = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndex\
    \ = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndex\
    \ = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndex\
    \ = 0\n        val sumOfFirstIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLastIndexAndLast",
  "        val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n   \
    \     val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n \
    \       val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenArraySum = evenArray.foldLeft(0l) { (sum, value)\
    \ => sum + value }\n        val oddArraySum = oddArray.foldLeft(0l) { (sum, value)\
    \ => sum + value }\n        val evenArraySumOdd = evenArraySum + oddArraySum\n\
    \        val oddArraySumEven = evenArraySum - evenArraySum\n        val evenArraySumEvenOdd\
    \ = evenArraySum + oddArraySumEven\n        val oddArraySumEvenOddArray = evenArraySum\
    \ - evenArraySumEven\n        val evenArraySumEvenOddArrayOdd = evenArraySum +\
    \ oddArraySumEvenOdd\n        val oddArraySumEvenOddArrayEven = evenArraySum -\
    \ evenArraySumEvenOdd\n        val evenArraySumEvenOddArrayEvenOdd = evenArraySum\
    \ + oddArraySumEvenOddArrayEven\n        val oddArraySumEvenOddArrayEvenOddArray\
    \ = evenArraySum - evenArraySumEvenOddArrayEven\n        val evenArraySumEvenOddArrayEvenOddArrayOdd\
    \ = evenArraySum + oddArraySumEvenOddArrayEvenOddArray\n        val oddArraySumEvenOddArrayEvenOddArrayEven\
    \ = evenArraySum - evenArraySumEvenOddArrayEvenOdd\n        val evenArraySumEvenOddArrayEvenOddArrayEvenOdd\
    \ = evenArraySum + oddArraySumEvenOddArrayEvenOddArrayEven\n        val oddArraySumEvenOddArrayEvenOddArrayEvenOddArray\
    \ = evenArraySum - evenArraySumEvenOddArrayEvenOddArrayEvenOdd\n        val evenArraySumEvenOddArrayEvenOddArrayEvenOddArrayOdd\
    \ = evenArraySum + oddArraySumEvenOddArrayEvenOddArrayEvenOddArray\n        val\
    \ oddArraySumEvenOddArrayEvenOddArrayEvenOddArrayEven = evenArraySum - evenArraySumEvenOddArrayEvenOddArrayEvenOddArrayEven\n\
    \        val evenArraySumEvenOddArrayEvenOddArrayEvenOdd", "        val sumArray\
    \ = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n\
    \        val evenArraySum = evenArray.sum\n        val oddArraySum = oddArray.sum\n\
    \        if (evenArraySum > oddArraySum) {\n            evenArray.sortWith(_ <\
    \ _)\n        } else {\n            oddArray.sortWith(_ > _)\n        }", "  \
    \      val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n    \
    \    var i = 0\n        while (i < array.size) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_.compare(array(i),\
    \ array(i + 1)) == 1)\n        } else {\n            array.sortWith(_.compare(array(i),\
    \ array(i + 1)) == -1)\n        }\n        result.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i = 0\n \
    \       while (i < array.length) {\n            sum += array(i)\n            i\
    \ += 1\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.toList", "        val sumArray = array.foldLeft(0L) {\
    \ (sum, elem) => sum + elem }\n        val evenSum = sumArray % 2 == 0\n     \
    \   val odd = sumArray % 2 != 0\n        val evenArray = array.filter(_ % 2 ==\
    \ 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum) {\n\
    \            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     val sum = 0\n        for(i <- 0 until array.size) {\n            sum +=\
    \ array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sumArray = array.foldLeft(0L){ (sum, value) =>\n\
    \            sum + value\n        }\n        val odd = sumArray % 2\n        val\
    \ even = sumArray - odd\n        val sortedArray = array.sortWith( (a, b) => if\
    \ (odd == 0) a < b else a > b )\n        if (even == 0) sortedArray else sortedArray.sortWith(\
    \ (a, b) => a < b )", "        val sum : Long = array.sum\n        val evenSum\
    \ = if (sum % 2 == 0) sum else sum - 1\n        val oddSum = if (sum % 2 == 1)\
    \ sum else sum + 1\n        val evenArray = array.filter(_ % 2 == 0).sortBy(_\
    \ * -1)\n        val oddArray = array.filter(_ % 2 == 1).sortBy(_ * -1)\n    \
    \    evenArray.zip(oddArray).filter(_._1 == _._2).map(_._2).reverse", "      \
    \  val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n       \
    \ val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n     \
    \   val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        if (evenSum) evenArray.sortBy(_)\n        else if (odd) oddArray.sortBy(_.reverse)\n\
    \        else array", "        val sumArray = array.foldLeft(0l) { (sum, value)\
    \ => sum + value }\n        val evenSum = sumArray % 2 == 0\n        val odd =\
    \ sumArray % 2 != 0\n        val evenArray = array.filter(_ % 2 == 0)\n      \
    \  val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum) {\n         \
    \   evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     var sum = 0\n        var index = 0\n        for(i <- 0 until array.size)\
    \ {\n            sum += array(i)\n            if(sum % 2 == 0) {\n           \
    \     result.add(array(i))\n            } else {\n                result.add(array(i)).reverse\n\
    \            }\n        }\n        result.toList", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenSumOddArray\
    \ = evenArray.zip(oddArray).sortBy(_._1).reverse\n        val evenSumEvenArray\
    \ = evenArray.zip(evenArray).sortBy(_._1).reverse\n        val evenSumEvenSumOddArray\
    \ = evenSumEvenArray.zip(evenSumOddArray).sortBy(_._1).reverse\n        val evenSumEvenSumEvenOddArray\
    \ = evenSumEvenSumOddArray.zip(evenSumEvenArray).sortBy(_._1).reverse\n      \
    \  val evenSumEvenSumEvenEvenOddArray = evenSumEvenSumEvenOddArray.zip(evenSumOddArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenOddArray = evenSumEvenSumEvenEvenOddArray.zip(oddArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenOddArray.zip(evenArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenEvenEvenOddArray.zip(oddArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenEvenEvenEvenOddArray.zip(evenArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenEvenEvenOddArray.zip(oddArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddArray.zip(evenArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddArray.zip(oddArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddArray.zip(evenArray).sortBy(_._1).reverse\n\
    \        val ", "        val result = new mutable.ListBuffer[Long]()\n       \
    \ val sum = 0\n        array.foreach { x =>\n            sum += x\n        }\n\
    \        if (sum % 2 == 0) {\n            array.foreach { x =>\n             \
    \   result.add(x)\n            }\n        } else {\n            array.foreach\
    \ { x =>\n                result.add(-x)\n            }\n        }\n        result.sort",
  "        val sumArray = array.foldLeft(0l) { (sum, element) => sum + element }\n\
    \        val isEven = sumArray % 2 == 0\n        val isOdd = sumArray % 2 != 0\n\
    \        val sortedArray = if (isEven) array.sortBy(-_) else array.sortBy(-_)\n\
    \        sortedArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        while(i < array.length) {\n \
    \           sum = sum + array(i)\n            i += 1\n        }\n        while(i\
    \ < array.length) {\n            sum = sum - array(i)\n            i += 1\n  \
    \      }\n        if(sum % 2 == 0) {\n            array.sortWith((a, b) => a <\
    \ b)\n        } else {\n            array.sortWith((a, b) => a > b)\n        }\n\
    \        result.toList", "        val sumArray = array.foldLeft(0l) { (sum, value)\
    \ => sum + value }\n        val isOdd = sumArray % 2\n        val isEven = sumArray\
    \ % 2 != 0\n        if (isOdd) {\n            array.sortWith(_.compareTo(_) <\
    \ 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n     \
    \   }", "        val sumArray = array.sum\n        val evenSum = sumArray % 2\
    \ == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 != 0)\n        val evenSumArray = evenSum.map(_ * 2).toLong\n\
    \        val oddSumArray = oddSum.map(_ * 2).toLong\n        val evenArraySorted\
    \ = evenArray.sortWith(_ < _)\n        val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n        val evenArraySortedSum = evenArraySorted.map(x => x + sumArray).toList\n\
    \        val oddArraySortedSum = oddArraySorted.map(x => x + sumArray).toList\n\
    \        val evenArraySortedSumArray = evenArraySortedSum.map(x => x + sumArray).toList\n\
    \        val oddArraySortedSumArray = oddArraySortedSum.map(x => x + sumArray).toList\n\
    \        val evenArraySortedSumArraySorted = evenArraySortedSumArray.sortWith(_\
    \ < _)\n        val oddArraySortedSumArraySorted = oddArraySortedSumArray.sortWith(_\
    \ > _)\n        val evenArraySortedSumArraySortedSum = evenArraySortedSumArraySorted.map(x\
    \ => x + sumArray).toList\n        val oddArraySortedSumArraySortedSum = oddArraySortedSumArraySorted.map(x\
    \ => x + sumArray).toList\n        val evenArraySortedSumArraySortedSumArray =\
    \ evenArraySortedSumArraySortedSum.map(x => x + sumArray).toList\n        val\
    \ oddArraySortedSumArraySortedSumArray = oddArraySortedSumArraySortedSum.map(x\
    \ => x + sumArray).toList\n        val evenArraySortedSumArraySortedSumArraySorted\
    \ = evenArraySortedSumArraySortedSumArraySorted.map(x => x + sumArray).toList\n\
    \        val oddArraySortedSumArraySortedSumArraySorted = oddArraySortedSumArraySortedSumArraySorted.map(x\
    \ => x + sumArray).toList\n        val evenArraySortedSumArraySortedSumArraySortedSum\
    \ = evenArraySortedSumArraySortedSumArraySortedSum.map(x => x + sumArray).toList\n\
    \        val oddArraySortedSumArraySortedSumArraySortedSum = oddArraySortedSumArraySortedSumArraySortedSum.map(x\
    \ => x + sumArray).toList\n        val evenArraySortedSumArraySortedSumArraySortedSumArray\
    \ = evenArraySortedSumArraySortedSumArraySortedSumArray.map(x => x + sumArray).toList\n\
    \        val oddArraySortedSumArraySortedSumArray", "        val sumArray = array.foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val evenSum = sumArray % 2 == 0\n\
    \        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        if (evenSum) {\n            evenArray.sortWith(_ < _)\n \
    \       } else {\n            oddArray.sortWith(_ > _)\n        }", "        val\
    \ sum : Long = array.sum\n        val odd = sum % 2 == 1\n        val even = sum\
    \ % 2 == 0\n        if(odd) array.sortBy(_ > 0)\n        else array.sortBy(-_)",
  "        val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenSumArray = evenSum.map(_ * 2).toList\n        val\
    \ oddSumArray = oddSum.map(_ * 2).toList\n        val evenArraySorted = evenArray.sortWith(_\
    \ < _)\n        val oddArraySorted = oddArray.sortWith(_ > _)\n        val evenSumArraySorted\
    \ = evenSumArray.sortWith(_ < _)\n        val oddSumArraySorted = oddSumArray.sortWith(_\
    \ > _)\n        val evenArraySorted2 = evenArraySorted.zipWithIndex.sortWith(_._1\
    \ < _._2)\n        val oddArraySorted2 = oddArraySorted.zipWithIndex.sortWith(_._1\
    \ > _._2)\n        val evenSumArraySorted2 = evenSumArraySorted.zipWithIndex.sortWith(_._1\
    \ < _._2)\n        val oddSumArraySorted2 = oddSumArraySorted.zipWithIndex.sortWith(_._1\
    \ > _._2)\n        val evenArraySorted3 = evenArraySorted2.zipWithIndex.sortWith(_._1\
    \ < _._2)\n        val oddArraySorted3 = oddArraySorted2.zipWithIndex.sortWith(_._1\
    \ > _._2)\n        val evenSumArraySorted3 = evenSumArraySorted2.zipWithIndex.sortWith(_._1\
    \ < _._2)\n        val oddSumArraySorted3 = oddSumArraySorted2.zipWithIndex.sortWith(_._1\
    \ > _._2)\n        val evenArraySorted4 = evenArraySorted3.zipWithIndex.sortWith(_._1\
    \ < _._2)\n        val oddArraySorted4 = oddArraySorted3.zipWithIndex.sortWith(_._1\
    \ > _._2)\n        val evenSumArraySorted4 = evenSumArraySorted3.zipWithIndex.sortWith(_._1\
    \ < _._2)\n        val oddSumArraySorted4 = oddSumArraySorted3.zipWithIndex.sortWith(_._1\
    \ > _._2)\n        val evenArraySorted5 = evenArraySorted4.zipWithIndex.sortWith(_._1\
    \ < _._2)\n        val oddArraySorted5 = oddArraySorted4.zipWithIndex.sortWith(_._1\
    \ > _._2)\n        val evenSumArraySorted5 = evenSumArraySorted4.zipWithIndex.sortWith(_._1\
    \ < _._2)\n        val oddSumArraySorted5 = oddSumArraySorted4.zipWith", "   \
    \     val result = new mutable.ListBuffer[Long]()\n        val sum = 0\n     \
    \   val len = array.length\n        for(i <- 0 until len){\n            sum +=\
    \ array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ len){\n                result.add(array(i))\n            }\n        }else{\n\
    \            for(i <- 0 until len){\n                result.add(array(i))\n  \
    \          }\n        }\n        result.sortWith((a, b) => a < b)\n        result.toList",
  "        val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n   \
    \     val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n\
    \        val sortedArray = array.sortWith( (a, b) => a < b ? a < b : a > b ? a\
    \ > b : sumArrayOdd ? a < b : a > b ? a > b : sumArrayEven ? a < b : a > b ? a\
    \ > b : 0)\n        sortedArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_.compareTo(_) < 0)\n        } else {\n\
    \            array.sortWith(_.compareTo(_) > 0)\n        }\n        result.addAll(array)\n\
    \        result.result()", "        val sumArray = array.foldLeft(0L) { (sum,\
    \ value) => sum + value }\n        val sumArrayOdd = sumArray % 2 == 1\n     \
    \   val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = if (sumArrayOdd)\
    \ {\n            array.sortBy(x => x)\n        } else {\n            array.sortBy(x\
    \ => -x)\n        }\n        sortedArray", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenSumArray\
    \ = evenSum.map(_ * 2).toLong\n        val oddSumArray = oddSum.map(_ * 2).toLong\n\
    \        val evenArraySorted = evenArray.sortWith(_ < _)\n        val oddArraySorted\
    \ = oddArray.sortWith(_ > _)\n        val evenSumArraySorted = evenSumArray.sortWith(_\
    \ < _)\n        val oddSumArraySorted = oddSumArray.sortWith(_ > _)\n        val\
    \ evenArraySorted2 = evenArraySorted.map(_ + sumArray).toList\n        val oddArraySorted2\
    \ = oddArraySorted.map(_ - sumArray).toList\n        val evenSumArraySorted2 =\
    \ evenSumArraySorted.map(_ + sumArray).toList\n        val oddSumArraySorted2\
    \ = oddSumArraySorted.map(_ - sumArray).toList\n        val evenArraySorted3 =\
    \ evenArraySorted2.filter(_ < sumArray).toList\n        val oddArraySorted3 =\
    \ oddArraySorted2.filter(_ > sumArray).toList\n        val evenSumArraySorted3\
    \ = evenSumArraySorted2.filter(_ < sumArray).toList\n        val oddSumArraySorted3\
    \ = oddSumArraySorted2.filter(_ > sumArray).toList\n        val evenArraySorted4\
    \ = evenArraySorted3.filter(_ < sumArray).toList\n        val oddArraySorted4\
    \ = oddArraySorted3.filter(_ > sumArray).toList\n        val evenSumArraySorted4\
    \ = evenSumArraySorted3.filter(_ < sumArray).toList\n        val oddSumArraySorted4\
    \ = oddSumArraySorted3.filter(_ > sumArray).toList\n        val evenArraySorted5\
    \ = evenArraySorted4.filter(_ < sumArray).toList\n        val oddArraySorted5\
    \ = oddArraySorted4.filter(_ > sumArray).toList\n        val evenSumArraySorted5\
    \ = evenSumArraySorted4.filter(_ < sumArray).toList\n        val oddSumArraySorted5\
    \ = oddSumArraySorted4.filter(_ > sumArray).toList\n        val evenArraySorted6\
    \ = evenArraySorted5.filter(_ < sumArray).toList\n        val oddArraySorted6\
    \ = oddArraySorted5.filter(_ > sumArray).toList\n        val evenSumArraySorted6\
    \ = evenSumArraySorted5.filter(_ < sumArray).toList\n        val oddSumArraySorted6\
    \ = oddSumArraySorted5.", "        val sumArray = array.foldLeft(0L){ (sum, element)\
    \ => sum + element }\n        val isEven = sumArray % 2 == 0\n        val isOdd\
    \ = sumArray % 2 != 0\n        val newArray = array.sortWith(compare(isEven, isOdd))\n\
    \        if (isEven) newArray.sortWith(compare(isOdd, isEven))\n        else newArray.sortWith(compare(isEven,\
    \ isOdd))", "        val result = new mutable.ListBuffer[Long]()\n        val\
    \ sum = 0\n        val evenSum = 0\n        val oddSum = 0\n        array.foreach(x\
    \ => {\n            sum += x\n            if (sum % 2 == 0) {\n              \
    \  evenSum += x\n            } else {\n                oddSum += x\n         \
    \   }\n        })\n        if (evenSum > oddSum) {\n            array.sortWith(x\
    \ => x.compare(array(0)))\n        } else {\n            array.sortWith(x => x.compare(array(array.size\
    \ - 1)))\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        var j = 0\n        while (i <\
    \ array.size) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        while (j < array.size) {\n            sum += array(i)\n            i\
    \ += 1\n            j += 1\n        }\n        if (sum % 2 == 0) {\n         \
    \   while (i < array.size) {\n                result += array(i)\n           \
    \     i += 1\n            }\n        } else {\n            while (j < array.size)\
    \ {\n                result += array(i)\n                i += 1\n            \
    \    j += 1\n            }\n        }\n        result.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i <- 0 until\
    \ array.size) {\n            sum += array(i)\n        }\n        if(sum % 2 ==\
    \ 0) {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        } else {\n            for(i <- 0 until array.size) {\n\
    \                result.add(array(i))\n            }\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ }\n        result.toList", "        val sumArray = array.foldLeft(0l) { (sum,\
    \ element) => sum + element }\n        val sumArrayOdd = sumArray % 2\n      \
    \  val sumArrayEven = sumArray - sumArrayOdd\n        val sortedArray = array.sortWith(\
    \ (a, b) => sumArrayOdd - sumArrayEven < sumArrayOdd - sumArrayEven && a.toLong\
    \ < b.toLong)\n        if (sumArrayOdd > sumArrayEven) sortedArray else sortedArray.reverse",
  "        val sumArray = array.foldLeft(0L){ (sum, value) => sum + value }\n    \
    \    val sumArrayOdd = sumArray % 2L == 0L\n        val sumArrayEven = sumArray\
    \ % 2L == 1L\n        if(sumArrayOdd) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }", "        val result = new mutable.ListBuffer[Long]()\n        var sum\
    \ = 0\n        for(i <- 0 until array.size) {\n            sum += array(i)\n \
    \       }\n        if(sum % 2 == 0) {\n            for(i <- 0 until array.size)\
    \ {\n                result.add(array(i))\n            }\n        } else {\n \
    \           for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList", "        val newArray = array.sortWith(compare)\n\
    \        newArray", "        val result = array.sortWith((x, y) => if (x + y ==\
    \ 0) 0 else (x + y) % 2 == 1)\n        result", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenSumArray\
    \ = evenSum.map(_ * _)\n        val oddSumArray = oddSum.map(_ * _)\n        val\
    \ evenSumArrayList = evenSumArray.map(_.toLong)\n        val oddSumArrayList =\
    \ oddSumArray.map(_.toLong)\n        val evenArrayList = evenArray.map(_.toLong)\n\
    \        val oddArrayList = oddArray.map(_.toLong)\n        val evenArrayListList\
    \ = evenArrayList.map(_.toLong)\n        val oddArrayListList = oddArrayList.map(_.toLong)\n\
    \        val evenSumArrayListList = evenSumArrayList.map(_.toLong)\n        val\
    \ oddSumArrayListList = oddSumArrayList.map(_.toLong)\n        val evenArrayListListList\
    \ = evenArrayListList.map(_.toLong)\n        val oddArrayListListList = oddArrayListListList.map(_.toLong)\n\
    \        val evenSumArrayListListList = evenSumArrayListList.map(_.toLong)\n \
    \       val oddSumArrayListListList = oddSumArrayListListList.map(_.toLong)\n\
    \        val evenArrayListListListList = evenArrayListListListList.map(_.toLong)\n\
    \        val oddArrayListListListList = oddArrayListListListList.map(_.toLong)\n\
    \        val evenSumArrayListListListList = evenSumArrayListListListList.map(_.toLong)\n\
    \        val oddSumArrayListListListList = oddSumArrayListListListList.map(_.toLong)\n\
    \        val evenArrayListListListListList = evenArrayListListListListList.map(_.toLong)\n\
    \        val oddArrayListListListListList = oddArrayListListListListList.map(_.toLong)\n\
    \        val evenSumArrayListListListListList = evenSumArrayListListListListList.map(_.toLong)\n\
    \        val oddSumArrayListListListListList = oddSumArrayListListListListList.map(_.toLong)\n\
    \        val evenArrayListListListListListList = evenArrayListListListListListList.map(_.toLong)\n\
    \        val oddArrayListListListListListList = oddArrayListListListListListList.map(_.toLong)\n\
    \        val evenSumArrayListListListListListList = evenSumArrayListListListListListList.",
  "        val sumArray = array.foldLeft(0l) { (sum, element) => sum + element }\n\
    \        val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray -\
    \ sumArrayOdd\n        val sortedArray = array.sortWith( (a, b) => a < b )\n \
    \       if (sumArrayOdd > 0) sortedArray else sortedArray.sortWith( (a, b) =>\
    \ a > b )", "        val sumArray = array.sum\n        val sumArray2 = sumArray.toLong\n\
    \        val sumArray3 = sumArray2.toInt\n        val sumArray4 = sumArray3.toInt\n\
    \        val sumArray5 = sumArray4.toInt\n        val sumArray6 = sumArray5.toInt\n\
    \        val sumArray7 = sumArray6.toInt\n        val sumArray8 = sumArray7.toInt\n\
    \        val sumArray9 = sumArray8.toInt\n        val sumArray10 = sumArray9.toInt\n\
    \        val sumArray11 = sumArray10.toInt\n        val sumArray12 = sumArray11.toInt\n\
    \        val sumArray13 = sumArray12.toInt\n        val sumArray14 = sumArray13.toInt\n\
    \        val sumArray15 = sumArray14.toInt\n        val sumArray16 = sumArray15.toInt\n\
    \        val sumArray17 = sumArray16.toInt\n        val sumArray18 = sumArray17.toInt\n\
    \        val sumArray19 = sumArray18.toInt\n        val sumArray20 = sumArray19.toInt\n\
    \        val sumArray21 = sumArray20.toInt\n        val sumArray22 = sumArray21.toInt\n\
    \        val sumArray23 = sumArray22.toInt\n        val sumArray24 = sumArray23.toInt\n\
    \        val sumArray25 = sumArray24.toInt\n        val sumArray26 = sumArray25.toInt\n\
    \        val sumArray27 = sumArray26.toInt\n        val sumArray28 = sumArray27.toInt\n\
    \        val sumArray29 = sumArray28.toInt\n        val sumArray30 = sumArray29.toInt\n\
    \        val sumArray31 = sumArray30.toInt\n        val sumArray32 = sumArray31.toInt\n\
    \        val sumArray33 = sumArray32.toInt\n        val sumArray34 = sumArray33.toInt\n\
    \        val sumArray35 = sumArray34.toInt\n        val sumArray36 = sumArray35.toInt\n\
    \        val sumArray37 = sumArray36.toInt\n        val sumArray38 = sumArray37.toInt\n\
    \        val sumArray39 = sumArray38.toInt\n        val sumArray40 = sumArray39.toInt\n\
    \        val sumArray41 = sumArray40.toInt\n        val sumArray42 = sumArray41.toInt\n\
    \        val sumArray43 = sumArray42.toInt\n        val sumArray44 = sumArray43.",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0\n    \
    \    array.foreach(x => sum += x)\n        val even = sum % 2 == 0\n        val\
    \ odd = !even\n        array.sortWith((x, y) => if (even) x < y else x > y)\n\
    \        if (odd) result.addAll(array.reverse)\n        else result", "      \
    \  val sumArray = array.foldLeft(0L) { (sum, value) => sum + value }\n       \
    \ val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2\
    \ == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sumArray = array.sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 == 1)\n        val evenSumOddArray = evenArray.zip(oddArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenArray = evenArray.zip(evenArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenArrayOddArray = evenSumEvenArray.zip(evenSumOddArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenArrayOddArrayOddArray = evenSumEvenArrayOddArray.zip(evenSumEvenArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenArrayOddArrayOddArrayOddArray = evenSumEvenArrayOddArrayOddArray.zip(evenSumEvenArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenArrayOddArrayOddArrayOddArrayOddArray = evenSumEvenArrayOddArrayOddArrayOddArray.zip(evenSumEvenArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenArrayOddArrayOddArrayOddArrayOddArrayOddArray\
    \ = evenSumEvenArrayOddArrayOddArrayOddArrayOddArray.zip(evenSumEvenArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenArrayOddArrayOddArrayOddArrayOddArrayOddArrayOddArray\
    \ = evenSumEvenArrayOddArrayOddArrayOddArrayOddArrayOddArray.zip(evenSumEvenArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenArrayOddArrayOddArrayOddArrayOddArrayOddArrayOddArrayOddArray\
    \ = evenSumEvenArrayOddArrayOddArrayOddArrayOddArrayOddArrayOddArray.zip(evenSumEvenArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenArrayOddArrayOddArrayOddArrayOddArrayOddArrayOddArrayOddArrayOddArray\
    \ = evenSumEvenArrayOddArrayOddArrayOddArrayOddArrayOddArrayOddArrayOddArray.zip(evenSumEvenArray).filter(_._1\
    \ == _._2)\n        val evenSumEvenArrayOddArrayOddArrayOddArrayOddArrayOddArrayOddArrayOddArrayOddArrayOddArray",
  "        val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenSumArray = evenSum.map(_ * 2).toList\n        val\
    \ oddSumArray = oddSum.map(_ * 2).toList\n        val evenArraySorted = evenArray.sortWith(_\
    \ < _)\n        val oddArraySorted = oddArray.sortWith(_ > _)\n        val evenSumArraySorted\
    \ = evenSumArray.sortWith(_ < _)\n        val oddSumArraySorted = oddSumArray.sortWith(_\
    \ > _)\n        val evenArraySorted2 = evenArraySorted.sortWith(_ < _)\n     \
    \   val oddArraySorted2 = oddArraySorted.sortWith(_ > _)\n        val evenSumArraySorted2\
    \ = evenSumArraySorted.sortWith(_ < _)\n        val oddSumArraySorted2 = oddSumArraySorted.sortWith(_\
    \ > _)\n        val evenArraySorted3 = evenArraySorted2.sortWith(_ < _)\n    \
    \    val oddArraySorted3 = oddArraySorted2.sortWith(_ > _)\n        val evenSumArraySorted3\
    \ = evenSumArraySorted2.sortWith(_ < _)\n        val oddSumArraySorted3 = oddSumArraySorted2.sortWith(_\
    \ > _)\n        val evenArraySorted4 = evenArraySorted3.sortWith(_ < _)\n    \
    \    val oddArraySorted4 = oddArraySorted3.sortWith(_ > _)\n        val evenSumArraySorted4\
    \ = evenSumArraySorted3.sortWith(_ < _)\n        val oddSumArraySorted4 = oddSumArraySorted3.sortWith(_\
    \ > _)\n        val evenArraySorted5 = evenArraySorted4.sortWith(_ < _)\n    \
    \    val oddArraySorted5 = oddArraySorted4.sortWith(_ > _)\n        val evenSumArraySorted5\
    \ = evenSumArraySorted4.sortWith(_ < _)\n        val oddSumArraySorted5 = oddSumArraySorted4.sortWith(_\
    \ > _)\n        val evenArraySorted6 = evenArraySorted5.sortWith(_ < _)\n    \
    \    val oddArraySorted6 = oddArraySorted5.sortWith(_ > _)\n        val evenSumArraySorted6\
    \ = evenSumArraySorted5.sortWith(_ < _)\n        val oddSumArraySorted6 = oddSumArraySorted5.sortWith(_\
    \ > _)\n        val evenArraySorted7 = evenArraySorted6.sortWith(_", "       \
    \ val sumArray = array.foldLeft(0l) { (sum, elem) => sum + elem }\n        val\
    \ sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n\
    \        val sortedArray = array.sortWith(compare(sumArrayOdd, sumArrayEven))\n\
    \        if (sumArrayOdd > sumArrayEven) sortedArray else sortedArray.reverse",
  "        val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenSumArray = evenSum.map(_ * 2).toList\n        val\
    \ oddSumArray = oddSum.map(_ * 2).toList\n        val evenArraySorted = evenArray.sortWith(_\
    \ < _)\n        val oddArraySorted = oddArray.sortWith(_ > _)\n        val evenSumArraySorted\
    \ = evenSumArray.sortWith(_ < _)\n        val oddSumArraySorted = oddSumArray.sortWith(_\
    \ > _)\n        val evenArraySortedList = evenArraySorted.toList\n        val\
    \ oddArraySortedList = oddArraySorted.toList\n        val evenSumArraySortedList\
    \ = evenSumArraySorted.toList\n        val oddSumArraySortedList = oddSumArraySorted.toList\n\
    \        val evenArraySortedList2 = evenArraySortedList.toList\n        val oddArraySortedList2\
    \ = oddArraySortedList.toList\n        val evenSumArraySortedList2 = evenSumArraySortedList.toList\n\
    \        val oddSumArraySortedList2 = oddSumArraySortedList.toList\n        val\
    \ evenArraySortedList3 = evenArraySortedList2.toList\n        val oddArraySortedList3\
    \ = oddArraySortedList2.toList\n        val evenSumArraySortedList3 = evenSumArraySortedList2.toList\n\
    \        val oddSumArraySortedList3 = oddSumArraySortedList2.toList\n        val\
    \ evenArraySortedList4 = evenArraySortedList3.toList\n        val oddArraySortedList4\
    \ = oddArraySortedList3.toList\n        val evenSumArraySortedList4 = evenSumArraySortedList3.toList\n\
    \        val oddSumArraySortedList4 = oddSumArraySortedList3.toList\n        val\
    \ evenArraySortedList5 = evenArraySortedList4.toList\n        val oddArraySortedList5\
    \ = oddArraySortedList4.toList\n        val evenSumArraySortedList5 = evenSumArraySortedList4.toList\n\
    \        val oddSumArraySortedList5 = oddSumArraySortedList4.toList\n        val\
    \ evenArraySortedList6 = evenArraySortedList5.toList\n        val oddArraySortedList6\
    \ = oddArraySortedList5.toList\n        val evenSumArraySortedList6 = evenSumArraySortedList5.toList\n\
    \        val oddSumArraySortedList6 = oddSumArraySortedList5.toList\n", "    \
    \    val sumArray = array.foldLeft(0L){ (sum, element) => sum + element }\n  \
    \      val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n\
    \        val sortedArray = array.sortWith( (a, b) => sumArrayOdd - sumArrayEven)\n\
    \        if (sumArrayOdd > sumArrayEven) sortedArray.reverse\n        else sortedArray",
  "        val sumArray = array.foldLeft(0l) { (sum, elem) => sum + elem }\n     \
    \   val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_ %\
    \ 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     var sum = 0\n        for (i <- 0 until array.size) {\n            sum +=\
    \ array(i)\n            if (sum % 2 == 0) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList", "        val sumArray = array.foldLeft(0L)\
    \ { (sum, elem) => sum + elem}\n        val evenSum = sumArray % 2 == 0\n    \
    \    val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        if (evenSum) {\n            evenArray.sortWith(_ < _)\n \
    \       } else {\n            oddArray.sortWith(_ > _)\n        }", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i\
    \ = 0\n        while(i < array.length) {\n            sum += array(i)\n      \
    \      i += 1\n        }\n        while(i < array.length) {\n            val value\
    \ = array(i)\n            val index = sum - value\n            if(index % 2 ==\
    \ 0) {\n                result.add(i)\n                i += 1\n            } else\
    \ {\n                result.add(i)\n                i += 1\n            }\n  \
    \      }\n        result.toList", "        val sumArray = array.foldLeft(0l) {\
    \ (sum, value) => sum + value }\n        val isOdd = sumArray % 2\n        val\
    \ isEven = sumArray % 2 != 0\n        val isEvenOrOdd = isEven || isOdd\n    \
    \    val isEvenOrOddOrEven = if (isEvenOrOdd) 1 else -1\n        val isEvenOrOddOrEvenOrOdd\
    \ = if (isEvenOrOddOrEven) 1 else -1\n        val isEvenOrOddOrEvenOrOddOrEven\
    \ = if (isEvenOrOddOrEven) 1 else -1\n        val isEvenOrOddOrEvenOrOddOrEvenOrOdd\
    \ = if (isEvenOrOddOrEvenOrOdd) 1 else -1\n        val isEvenOrOddOrEvenOrOddOrEvenOrOddOrEven\
    \ = if (isEvenOrOddOrEvenOrOddOrEven) 1 else -1\n        val isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd\
    \ = if (isEvenOrOddOrEvenOrOddOrEvenOrOdd) 1 else -1\n        val isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEven\
    \ = if (isEvenOrOddOrEvenOrOddOrEvenOrOddOrEven) 1 else -1\n        val isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd\
    \ = if (isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd) 1 else -1\n        val isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEven\
    \ = if (isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd) 1 else -1\n \
    \       val isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd\
    \ = if (isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEven) 1 else\
    \ -1\n        val isEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEven\
    \ = if (isEvenOrOddOr", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result += array(i)\n            }\n        }else{\n\
    \            for(i <- 0 until array.length){\n                result -= array(i)\n\
    \            }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for(i <- 0 until array.length){\n            sum\
    \ = sum + i\n            if(sum % 2 == 0){\n                result.add(i)\n  \
    \          }\n        }\n        val reverse = result.reverse\n        val result\
    \ = reverse.sortWith((a, b) => a < b)\n        result", "        val sumArray\
    \ = array.foldLeft(0l) { (sum, value) => sum + value }\n        val evenSum =\
    \ sumArray % 2 == 0\n        val oddSum = sumArray % 2 != 0\n        if (evenSum)\
    \ array.sortBy(_.toLong)\n        else array.sortBy(-_.toLong)", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val sum = 0\n        for (i\
    \ <- 0 until array.size) {\n            sum += array(i)\n        }\n        if\
    \ (sum % 2 == 0) {\n            val temp = new mutable.ListBuffer[Long]()\n  \
    \          for (i <- 0 until array.size) {\n                temp += array(i)\n\
    \            }\n            temp.sortWith((a, b) => a < b)\n            result.addAll(temp)\n\
    \        } else {\n            val temp = new mutable.ListBuffer[Long]()\n   \
    \         for (i <- 0 until array.size) {\n                temp += array(i)\n\
    \            }\n            temp.sortWith((a, b) => a > b)\n            result.addAll(temp)\n\
    \        }\n        result.toList", "        val sumArray = array.sum\n      \
    \  val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2\
    \ == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sumArray = array.sum\n        val sumArrayOdd\
    \ = sumArray % 2 != 0\n        val sumArrayEven = sumArray % 2 == 0\n        val\
    \ arrayCopy = array.clone()\n        val arrayCopySorted = arrayCopy.sortWith((a,\
    \ b) => a < b)\n        val arrayCopySortedOdd = arrayCopySorted.filter((a, b)\
    \ => a % 2 != 0)\n        val arrayCopySortedEven = arrayCopySorted.filter((a,\
    \ b) => a % 2 == 0)\n        if (sumArrayOdd) {\n            arrayCopySortedOdd\n\
    \        } else {\n            arrayCopySortedEven\n        }", "        val sumArray\
    \ = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n\
    \        val evenSumArray = evenSum.map(_ * _).toList\n        val oddSumArray\
    \ = oddSum.map(_ * _).toList\n        val evenArraySorted = evenArray.sortWith(_\
    \ < _)\n        val oddArraySorted = oddArray.sortWith(_ > _)\n        val evenSumArraySorted\
    \ = evenSumArray.sortWith(_ < _)\n        val oddSumArraySorted = oddSumArray.sortWith(_\
    \ > _)\n        val evenArraySorted2 = evenArraySorted.sortWith(_ < _)\n     \
    \   val oddArraySorted2 = oddArraySorted.sortWith(_ > _)\n        val evenSumArraySorted2\
    \ = evenSumArraySorted.sortWith(_ < _)\n        val oddSumArraySorted2 = oddSumArraySorted.sortWith(_\
    \ > _)\n        val evenArraySorted3 = evenArraySorted2.sortWith(_ < _)\n    \
    \    val oddArraySorted3 = oddArraySorted2.sortWith(_ > _)\n        val evenSumArraySorted3\
    \ = evenSumArraySorted2.sortWith(_ < _)\n        val oddSumArraySorted3 = oddSumArraySorted2.sortWith(_\
    \ > _)\n        val evenArraySorted4 = evenArraySorted3.sortWith(_ < _)\n    \
    \    val oddArraySorted4 = oddArraySorted3.sortWith(_ > _)\n        val evenSumArraySorted4\
    \ = evenSumArraySorted3.sortWith(_ < _)\n        val oddSumArraySorted4 = oddSumArraySorted3.sortWith(_\
    \ > _)\n        val evenArraySorted5 = evenArraySorted4.sortWith(_ < _)\n    \
    \    val oddArraySorted5 = oddArraySorted4.sortWith(_ > _)\n        val evenSumArraySorted5\
    \ = evenSumArraySorted4.sortWith(_ < _)\n        val oddSumArraySorted5 = oddSumArraySorted4.sortWith(_\
    \ > _)\n        val evenArraySorted6 = evenArraySorted5.sortWith(_ < _)\n    \
    \    val oddArraySorted6 = oddArraySorted5.sortWith(_ > _)\n        val evenSumArraySorted6\
    \ = evenSumArraySorted5.sortWith(_ < _)\n        val oddSumArraySorted6 = oddSumArraySorted5.sortWith(_\
    \ > _)\n        val evenArraySorted7 = evenArraySorted6.sortWith(_", "       \
    \ val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        for\
    \ (i <- 0 until array.size) {\n            sum += array(i)\n        }\n      \
    \  if (sum % 2 == 0) {\n            val tempArray = array.sortBy(x => x)\n   \
    \         result.addAll(tempArray)\n        } else {\n            val tempArray\
    \ = array.sortBy(x => -x)\n            result.addAll(tempArray)\n        }\n \
    \       result.toList", "        val sumArray = array.foldLeft(0l) { (sum, elem)\
    \ => sum + elem }\n        val evenSum = sumArray % 2 == 0\n        val odd =\
    \ sumArray % 2 != 0\n        if (evenSum) {\n            array.sortBy(_.toLong)\n\
    \        } else {\n            array.sortBy(_.toLong.reverse)\n        }", " \
    \       val sumArray = array.foldLeft(0l) { (sum, elem) => sum + elem }\n    \
    \    val isEven = sumArray % 2 == 0\n        val isOdd = sumArray % 2 != 0\n \
    \       val newArray = if (isEven) array.sortBy(x => x) else if (isOdd) array.sortBy(x\
    \ => -x)\n        else array\n        newArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if (sum % 2 == 1) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList", "        val sumArray = array.foldLeft(0l)\
    \ { (sum, value) => sum + value }\n        val evenSum = sumArray % 2 == 0\n \
    \       val oddSum = sumArray % 2 != 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sum : Long = array.sum\n        val evenSum =\
    \ sum % 2 == 0\n        val oddSum = sum % 2 != 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySum\
    \ = evenArray.sum\n        val oddArraySum = oddArray.sum\n        val evenArraySumOdd\
    \ = evenArraySum + oddArraySum\n        val oddArraySumEven = evenArraySum - evenArraySum\n\
    \        val evenArraySumEvenOdd = evenArraySumEven + oddArraySumEven\n      \
    \  val oddArraySumEvenEven = evenArraySumEven - evenArraySumEven\n        val\
    \ evenArraySumEvenEvenOdd = evenArraySumEvenEven + oddArraySumEvenEven\n     \
    \   val oddArraySumEvenEvenEven = evenArraySumEvenEven - evenArraySumEvenEven\n\
    \        val evenArraySumEvenEvenEvenOdd = evenArraySumEvenEvenEven + oddArraySumEvenEvenEven\n\
    \        val oddArraySumEvenEvenEvenEven = evenArraySumEvenEvenEven - evenArraySumEvenEvenEven\n\
    \        val evenArraySumEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEven +\
    \ oddArraySumEvenEvenEvenEven\n        val oddArraySumEvenEvenEvenEvenEvenEven\
    \ = evenArraySumEvenEvenEvenEvenEven - evenArraySumEvenEvenEvenEvenEven\n    \
    \    val evenArraySumEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEvenEven\
    \ + oddArraySumEvenEvenEvenEvenEvenEven\n        val oddArraySumEvenEvenEvenEvenEvenEvenEven\
    \ = evenArraySumEvenEvenEvenEvenEvenEvenEvenOdd + evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenOdd\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ - evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\n        val oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd + evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ - evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\n", "        val sumArray\
    \ = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n\
    \        val evenSumArray = evenSum.map(_ * 2).toList\n        val oddSumArray\
    \ = oddSum.map(_ * 2).toList\n        val evenArraySorted = evenArray.sortWith(_\
    \ < _)\n        val oddArraySorted = oddArray.sortWith(_ > _)\n        val evenSumArraySorted\
    \ = evenSumArray.sortWith(_ < _)\n        val oddSumArraySorted = oddSumArray.sortWith(_\
    \ > _)\n        val evenArraySortedSorted: Array[Long] = evenArraySorted.toArray\n\
    \        val oddArraySortedSorted: Array[Long] = oddArraySorted.toArray\n    \
    \    val evenSumArraySortedSorted: Array[Long] = evenSumArraySorted.toArray\n\
    \        val oddSumArraySortedSorted: Array[Long] = oddSumArraySorted.toArray\n\
    \        val evenArraySortedSortedSorted: Array[Long] = evenArraySortedSorted.toArray\n\
    \        val oddArraySortedSortedSorted: Array[Long] = oddArraySortedSorted.toArray\n\
    \        val evenSumArraySortedSorted: Array[Long] = evenSumArraySorted.toArray\n\
    \        val oddSumArraySortedSorted: Array[Long] = oddSumArraySorted.toArray\n\
    \        val evenArraySortedSortedSortedSorted: Array[Long] = evenArraySortedSortedSorted.toArray\n\
    \        val oddArraySortedSortedSortedSorted: Array[Long] = oddArraySortedSortedSorted.toArray\n\
    \        val evenSumArraySortedSortedSorted: Array[Long] = evenSumArraySortedSorted.toArray\n\
    \        val oddSumArraySortedSortedSorted: Array[Long] = oddSumArraySortedSorted.toArray\n\
    \        val evenArraySortedSortedSortedSortedSorted: Array[Long] = evenArraySortedSortedSortedSorted.toArray\n\
    \        val oddArraySortedSortedSortedSortedSorted: Array[Long] = oddArraySortedSortedSorted.toArray\n\
    \        val evenSumArraySortedSortedSortedSorted: Array[Long] = evenSumArraySortedSorted.toArray\n\
    \        val oddSumArraySortedSortedSortedSorted: Array[Long] = oddSumArraySortedSorted.toArray\n\
    \        val evenArraySortedSortedSortedSortedSortedSorted: Array[Long] = evenArraySortedSortedSortedSorted.toArray\n\
    \        val oddArraySortedSortedSortedSortedSortedSorted: ", "        val sumArray\
    \ = array.foldLeft(0L){ (sum, element) =>\n            sum + element\n       \
    \ }\n        val isOdd = sumArray % 2L == 0L\n        val isEven = sumArray %\
    \ 2L == 1L\n        if(isOdd) array.sortBy(_._1)\n        else array.sortBy(_._2).reverse",
  "        val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        if(evenSum) evenArray.sortBy(_._1)\n        else oddArray.sortBy(_._1).reverse",
  "        val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n   \
    \     val isOdd = sumArray % 2 != 0\n        val isEven = sumArray % 2 == 0\n\
    \        if(isOdd) array.sortBy(-_) else array.sortBy(-_.reverse)", "        val\
    \ sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        val evenArraySum = evenArray.sum\n        val oddArraySum = oddArray.sum\n\
    \        val evenArraySumOdd = evenArraySum - oddArraySum\n        val evenArraySumEven\
    \ = evenArraySum + evenArraySumOdd\n        val evenArraySumEvenOdd = evenArraySumEven\
    \ - oddArraySumEven\n        val evenArraySumEvenOddArray = evenArraySumEvenOdd\
    \ + evenArraySumEvenOdd\n        val evenArraySumEvenOddArrayOdd = evenArraySumEvenOddArray\
    \ + evenArraySumEvenOddArray\n        val evenArraySumEvenOddArrayOddArray = evenArraySumEvenOddArrayOdd\
    \ + evenArraySumEvenOddArrayOdd\n        val evenArraySumEvenOddArrayOddArrayOdd\
    \ = evenArraySumEvenOddArrayOddArray + evenArraySumEvenOddArrayOddArrayOdd\n \
    \       val evenArraySumEvenOddArrayOddArrayOddArray = evenArraySumEvenOddArrayOddArrayOdd\
    \ + evenArraySumEvenOddArrayOddArrayOdd\n        val evenArraySumEvenOddArrayOddArrayOddArrayOdd\
    \ = evenArraySumEvenOddArrayOddArrayOddArray + evenArraySumEvenOddArrayOddArrayOddArrayOdd\n\
    \        val evenArraySumEvenOddArrayOddArrayOddArrayOddArray = evenArraySumEvenOddArrayOddArrayOddArrayOddArray\
    \ + evenArraySumEvenOddArrayOddArrayOddArrayOddArrayOdd\n        val evenArraySumEvenOddArrayOddArrayOddArrayOddArrayOdd\
    \ = evenArraySumEvenOddArrayOddArrayOddArrayOddArrayOdd + evenArraySumEvenOddArrayOddArrayOddArrayOddArrayOdd\n\
    \        val evenArraySumEvenOddArrayOddArrayOddArrayOddArrayOdd = evenArraySumEvenOddArrayOddArrayOddArrayOddArrayOddArray\
    \ + evenArraySumEvenOddArrayOddArrayOddArrayOddArrayOddArrayOdd\n        val evenArraySum",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0\n    \
    \    for(i <- 0 until array.size) {\n            sum += array(i)\n        }\n\
    \        if(sum % 2 == 0) {\n            for(i <- 0 until array.size) {\n    \
    \            result.add(array(i))\n            }\n        } else {\n         \
    \   for(i <- 0 until array.size) {\n                result.add(array(i))\n   \
    \         }\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList", "        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) => sum + value }\n        val isOdd = sumArray % 2L == 0L\n \
    \       val isEven = sumArray % 2L == 1L\n        if(isOdd) array.sortBy(_.toLong)\n\
    \        else array.sortBy(-_.toLong)", "        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0\n        val sumOfFirstIndex = 0\n        val sumOfLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndex = 0\n        val sumOfLastIndexFirstIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndex = 0\n        val sumOfLastIndexFirstIndexLastIndex\
    \ = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndex = 0\n        val\
    \ sumOfLastIndexFirstIndexLastIndexLastIndex = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfLastIndexFirstIndexLastIndexLastIndexLastIndex = 0\n \
    \       val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex = 0\n        val\
    \ sumOfLastIndexFirstIndexLastIndexLastIndexLastIndex = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfLastIndexFirstIndexLastIndexLastIndexLastIndex = 0\n \
    \       val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex = 0\n        val\
    \ sumOfLastIndexFirstIndexLastIndexLastIndexLastIndex = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfLastIndexFirstIndexLastIndexLastIndexLastIndex = 0\n \
    \       val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex = 0\n        val\
    \ sumOfLastIndexFirstIndexLastIndexLastIndexLastIndex = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfLastIndexFirstIndexLastIndexLastIndexLastIndex = 0\n \
    \       val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex = 0\n        val\
    \ sumOfLastIndexFirstIndexLastIndexLastIndexLastIndex = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfLastIndexFirstIndexLastIndexLastIndexLastIndex = 0\n \
    \       val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex = 0\n        val\
    \ sumOfLastIndexFirstIndexLastIndexLastIndexLastIndex = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfLastIndexFirstIndexLastIndexLastIndexLastIndex = 0\n \
    \       val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex = 0\n        val\
    \ sumOfLastIndexFirstIndexLastIndexLastIndexLastIndex = 0\n        val sumOfFirstIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        val sumOfLastIndexFirst", "        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2L == 0L\n\
    \        val sumArrayEven = sumArray % 2L == 1L\n        val sortedArray = array.sortWith(compare(sumArrayOdd,\
    \ sumArrayEven))\n        if(sumArrayOdd) sortedArray else sortedArray.reverse",
  "        val sumArray = array.foldLeft(0l) { (sum, element) => sum + element }\n\
    \        val isEven = sumArray % 2 == 0\n        val isOdd = sumArray % 2 != 0\n\
    \        if (isEven) {\n            array.sortWith((a, b) => a < b)\n        }\
    \ else {\n            array.sortWith((a, b) => a > b)\n        }", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i\
    \ <- 0 until array.size) {\n            sum += array(i)\n        }\n        if(sum\
    \ % 2 == 0) {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        } else {\n            for(i <- 0 until array.size) {\n\
    \                result.add(array(i))\n            }\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a.toLong > b.toLong)",
  "        val sumArray = array.foldLeft(0L){ (sum, value) =>\n            sum + value\n\
    \        }\n        val sumArrayOdd = sumArray % 2\n        val sumArrayEven =\
    \ sumArray - sumArrayOdd\n        val arrayCopy = array.sortWith(_.compareTo(_)\
    \ < 0)\n        if (sumArrayOdd > sumArrayEven) {\n            arrayCopy.reverse\n\
    \        } else {\n            arrayCopy\n        }", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        var sum = 0\n        var i = 0\n       \
    \ while (i < array.size) {\n            sum += array(i)\n            i += 1\n\
    \        }\n        val evenSum = sum % 2 == 0\n        val odd = sum % 2 == 1\n\
    \        if (evenSum) {\n            while (i < array.size) {\n              \
    \  val value = array(i)\n                val temp = value\n                result\
    \ += temp\n                i += 1\n            }\n        } else {\n         \
    \   while (i < array.size) {\n                val value = array(i)\n         \
    \       val temp = value\n                result += temp\n                i +=\
    \ 1\n            }\n        }\n        if (odd) {\n            val temp = result.toList\n\
    \            val result = new mutable.ListBuffer[Long]()\n            while (i\
    \ < temp.size) {\n                val value = temp(i)\n                result\
    \ += value\n                i += 1\n            }\n        }\n        result.toList",
  "        val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n   \
    \     val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n \
    \       val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if (evenSum) {\n    \
    \        evenArraySorted\n        } else {\n            oddArraySorted\n     \
    \   }", "        val sumArray = array.foldLeft(0l) { (sum, element) => sum + element\
    \ }\n        val isEven = sumArray % 2 == 0\n        val isOdd = sumArray % 2\
    \ != 0\n        if (isEven) {\n            array.sortBy(x => x)\n        } else\
    \ {\n            array.sortBy(x => -x)\n        }", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n\
    \        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if (evenSum) {\n    \
    \        evenArraySorted\n        } else {\n            oddArraySorted\n     \
    \   }", "        val sumArray = array.foldLeft(0L) { (sum, value) => sum + value\
    \ }\n        val sumArrayOdd = sumArray % 2L == 0L\n        val sumArrayEven =\
    \ sumArray % 2L == 1L\n        val sortedArray = array.sortWith(_.compareTo(_)\
    \ < 0)\n        if (sumArrayOdd) {\n            sortedArray.reverse\n        }\
    \ else {\n            sortedArray\n        }", "        val sumArray = array.foldLeft(0L){\
    \ (sum, value) =>\n            val newSum = sum + value\n            if (newSum\
    \ % 2 == 1) newSum else sum\n        }\n        val sortedArray = array.sortWith(x\
    \ => sumArray - x)\n        if (sumArray % 2 == 1) sortedArray else sortedArray.sortWith(x\
    \ => sumArray - x)", "        val result = new mutable.ListBuffer[Long]()\n  \
    \      val sum = 0\n        for(i <- 0 until array.size) {\n            sum +=\
    \ array(i)\n        }\n        if(sum % 2 == 0) {\n            val tempArray =\
    \ array.sortBy(x => x)\n            for(i <- 0 until tempArray.size) {\n     \
    \           result += tempArray(i)\n            }\n        } else {\n        \
    \    val tempArray = array.sortBy(x => -x).reverse\n            for(i <- 0 until\
    \ tempArray.size) {\n                result += tempArray(i)\n            }\n \
    \       }\n        result.toList", "        val sumArray = array.foldLeft(0L)\
    \ { (sum, element) =>\n            sum + element\n        }\n        val evenSum\
    \ = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n        if (evenSum)\
    \ {\n            array.sortBy(x => x)\n        } else {\n            array.sortBy(x\
    \ => -x)\n        }", "        val sumArray = array.foldLeft(0l) { (sum, value)\
    \ => sum + value }\n        val sumArrayOdd = sumArray % 2\n        val sumArrayEven\
    \ = sumArray - sumArrayOdd\n        val evenArray = array.filter(_ % 2 == 0)\n\
    \        val oddArray = array.filter(_ % 2 == 1)\n        val evenArraySum = evenArray.foldLeft(0l)\
    \ { (sum, value) => sum + value }\n        val oddArraySum = oddArray.foldLeft(0l)\
    \ { (sum, value) => sum + value }\n        val evenArraySumOdd = evenArraySum\
    \ % 2\n        val evenArraySumEven = evenArraySum - evenArraySumOdd\n       \
    \ val oddArraySumOdd = oddArraySum % 2\n        val oddArraySumEven = oddArraySum\
    \ - oddArraySumOdd\n        val evenArraySumEvenOdd = evenArraySumEven % 2\n \
    \       val evenArraySumEvenOddEven = evenArraySumEvenOdd - evenArraySumEvenOdd\n\
    \        val oddArraySumEvenOdd = oddArraySumEvenOdd % 2\n        val oddArraySumEvenOddEven\
    \ = oddArraySumEvenOdd - oddArraySumEvenOddEven\n        val evenArraySumEvenOddEvenOdd\
    \ = evenArraySumEvenOddEven % 2\n        val evenArraySumEvenOddEvenOddEven =\
    \ evenArraySumEvenOddEvenOdd - evenArraySumEvenOddEvenOdd\n        val oddArraySumEvenOddEvenOdd\
    \ = oddArraySumEvenOddEvenOdd % 2\n        val oddArraySumEvenOddEvenOddEven =\
    \ oddArraySumEvenOddEvenOdd - oddArraySumEvenOddEvenOddEven\n        val evenArraySumEvenOddEvenOddEvenOdd\
    \ = evenArraySumEvenOddEvenOddEven % 2\n        val evenArraySumEvenOddEvenOddEvenOddEven\
    \ = evenArraySumEvenOddEvenOddEvenOdd - evenArraySumEvenOddEvenOddEvenOddEven\n\
    \        val oddArraySumEvenOddEvenOddEvenOdd = oddArraySumEvenOddEvenOddEvenOdd\
    \ % 2\n        val oddArraySumEvenOddEvenOddEvenOddEven = oddArraySumEvenOddEvenOddEvenOdd\
    \ - oddArraySumEven", "        val sumArray = array.sum\n        val evenSum =\
    \ sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n      \
    \  val oddArray = array.filter(_ % 2 == 1)\n        val evenSumOddArray = evenArray.zip(oddArray).filter(_._1\
    \ == _._2).map(_._1)\n        val evenSumEvenArray = evenArray.zip(evenArray).filter(_._1\
    \ == _._2).map(_._1)\n        val evenSumEvenOddArray = evenArray.zip(oddArray).filter(_._1\
    \ == _._2).map(_._1)\n        val evenSumOddEvenArray = evenArray.zip(evenArray).filter(_._1\
    \ == _._2).map(_._1)\n        val evenSumOddEvenOddArray = evenArray.zip(oddArray).filter(_._1\
    \ == _._2).map(_._1)\n        val evenSumOddEvenOddEvenArray = evenArray.zip(evenArray).filter(_._1\
    \ == _._2).map(_._1)\n        val evenSumOddEvenOddEvenOddArray = evenArray.zip(oddArray).filter(_._1\
    \ == _._2).map(_._1)\n        val evenSumOddEvenOddEvenOddEvenArray = evenArray.zip(evenArray).filter(_._1\
    \ == _._2).map(_._1)\n        val evenSumOddEvenOddEvenOddEvenOddArray = evenArray.zip(oddArray).filter(_._1\
    \ == _._2).map(_._1)\n        val evenSumOddEvenOddEvenOddEvenOddEvenArray = evenArray.zip(evenArray).filter(_._1\
    \ == _._2).map(_._1)\n        val evenSumOddEvenOddEvenOddEvenOddEvenOddArray\
    \ = evenArray.zip(oddArray).filter(_._1 == _._2).map(_._1)\n        val evenSumOddEvenOddEvenOddEvenOddEvenOddEvenArray\
    \ = evenArray.zip(evenArray).filter(_._1 == _._2).map(_._1)\n        val evenSumOddEvenOddEvenOddEvenOddEvenOddEvenOddArray\
    \ = evenArray.zip(oddArray).filter(_._1 == _._2).map(_._1)\n        val evenSumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenArray\
    \ = evenArray.zip(evenArray).filter(_._1 == _._2).map(_._1)\n        val evenSumOddEvenOdd",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0\n    \
    \    for (i <- 0 until array.size) {\n            sum += array(i)\n        }\n\
    \        if (sum % 2 == 0) {\n            val tempList = array.sortBy(x => x)\n\
    \            result.addAll(tempList)\n        } else {\n            val tempList\
    \ = array.sortBy(x => -x)\n            result.addAll(tempList)\n        }\n  \
    \      result.toList", "        val sumArray = array.sum\n        val evenSum\
    \ = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n    \
    \    val oddArray = array.filter(_ % 2 != 0)\n        val evenSumArray = evenSum.map(_\
    \ * 2).toList\n        val oddSumArray = oddSum.map(_ * 2).toList\n        val\
    \ evenArraySorted: Array[Long] = evenArray.sortWith(_ < _)\n        val oddArraySorted:\
    \ Array[Long] = oddArray.sortWith(_ > _)\n        val evenSumArraySorted: Array[Long]\
    \ = evenSumArray.sortWith(_ < _)\n        val oddSumArraySorted: Array[Long] =\
    \ oddSumArray.sortWith(_ > _)\n        val evenArraySortedList: mutable.Buffer[Long]\
    \ = mutable.Buffer()\n        val oddArraySortedList: mutable.Buffer[Long] = mutable.Buffer()\n\
    \        val evenSumArraySortedList: mutable.Buffer[Long] = mutable.Buffer()\n\
    \        val oddSumArraySortedList: mutable.Buffer[Long] = mutable.Buffer()\n\
    \        evenArraySorted.foreach(evenArraySortedList += _)\n        oddArraySorted.foreach(oddArraySortedList\
    \ += _)\n        evenSumArraySorted.foreach(evenSumArraySortedList += _)\n   \
    \     oddSumArraySorted.foreach(oddSumArraySortedList += _)\n        val evenArraySortedListArray\
    \ = evenArraySortedList.toArray\n        val oddArraySortedListArray = oddArraySortedList.toArray\n\
    \        val evenSumArraySortedListArray = evenSumArraySortedList.toArray\n  \
    \      val oddSumArraySortedListArray = oddSumArraySortedList.toArray\n      \
    \  val evenArraySortedListArrayLength = evenArraySortedListArray.length\n    \
    \    val oddArraySortedListArrayLength = oddArraySortedListArray.length\n    \
    \    val evenSumArraySortedListArrayLength = evenSumArraySortedListArray.length\n\
    \        val oddSumArraySortedListArrayLength = oddSumArraySortedListArray.length\n\
    \        val evenArraySortedListArrayLength = evenArraySortedListArrayLength\n\
    \        val oddArraySortedListArrayLength = oddArraySortedListArrayLength\n \
    \       val evenSumArraySortedListArrayLength = evenSumArraySortedListArrayLength\n\
    \        val oddSumArraySortedListArrayLength = oddSumArraySortedListArrayLength\n\
    \        val evenArraySortedListArrayLength = evenArraySortedListArrayLength\n\
    \        val oddArraySortedListArrayLength = oddArraySorted", "        val sumArray\
    \ = array.foldLeft(0l) { (sum, element) => sum + element }\n        val isOdd\
    \ = sumArray % 2l\n        val isEven = sumArray % 2l == 0l\n        if(isOdd)\
    \ array.sortBy(_.toLong)\n        else array.sortBy(_.toLong.reverse)", "    \
    \    val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n     \
    \   val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        if (evenSum) {\n            evenArray.sortBy(x => x)\n  \
    \      } else {\n            oddArray.sortBy(x => -x)\n        }", "        val\
    \ sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n        val evenSum\
    \ = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n    \
    \    val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySum = evenArray.foldLeft(0l)\
    \ { (sum, value) => sum + value }\n        val oddArraySum = oddArray.foldLeft(0l)\
    \ { (sum, value) => sum + value }\n        if (evenSum) {\n            evenArray.sortWith(compare(evenArraySum))\n\
    \        } else {\n            oddArray.sortWith(compare(oddArraySum))\n     \
    \   }", "        val sumArray = array.foldLeft(0L){ (sum, element) => sum + element\
    \ }\n        val isOdd = sumArray % 2 != 0\n        val isEven = sumArray % 2\
    \ == 0\n        if(isOdd) array.sortBy(x => x)\n        else array.sortBy(x =>\
    \ -x)", "        val result = new mutable.ListBuffer[Long]()\n        var sum\
    \ = 0\n        for (i <- 0 until array.size) {\n            sum += array(i)\n\
    \        }\n        if (sum % 2 == 0) {\n            array.sortWith((x, y) =>\
    \ x < y)\n        } else {\n            array.sortWith((x, y) => x > y)\n    \
    \    }\n        result.clear()\n        for (i <- 0 until array.size) {\n    \
    \        result.append(array(i))\n        }\n        return result.toList", " \
    \       val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n  \
    \      val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n\
    \        val arrayCopy = array.sortWith((a, b) => a < b ? a > b ? sumArrayOdd\
    \ : sumArrayEven : a > b ? sumArrayEven : a < b ? a : b)\n        arrayCopy",
  "        val sumArray = array.sum\n        val sumArrayOdd = sumArray % 2\n    \
    \    val sumArrayEven = sumArray - sumArrayOdd\n        val sortedArray = array.sortWith(compare(sumArrayOdd,\
    \ sumArrayEven))\n        if (sumArrayOdd > sumArrayEven) {\n            sortedArray.reverse\n\
    \        }\n        sortedArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n           \
    \ array.sortWith(_ > _)\n        }\n        result.toList", "        val sumArray\
    \ = array.sum\n        val sumArrayOdd = sumArray.toLong % 2 == 1\n        val\
    \ sumArrayEven = sumArray.toLong % 2 == 0\n        val sortedArray = array.sortWith(_.toLong\
    \ > _.toLong)\n        if (sumArrayOdd) {\n            sortedArray.reverse\n \
    \       }\n        if (sumArrayEven) {\n            sortedArray\n        }", " \
    \       val sumArray = array.foldLeft(0l) { (sum, element) => sum + element }\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum)\
    \ {\n            evenArray.sortBy(_)\n        } else {\n            oddArray.sortBy(_.reverse)\n\
    \        }", "        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0\n        var i = 0\n        var j = 0\n        while(i < array.size)\
    \ {\n            sum = sum + array(i)\n            i = i + 1\n        }\n    \
    \    while(j < array.size) {\n            sum = sum + array(j)\n            j\
    \ = j + 1\n        }\n        if(sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a > b)\n        } else {\n            array.sortWith((a, b) => a < b)\n\
    \        }\n        result.toList", "        val sumArray = array.foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val isEven = sumArray % 2 == 0\n\
    \        val isOdd = sumArray % 2 != 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySum\
    \ = evenArray.foldLeft(0l) { (sum, element) => sum + element }\n        val oddArraySum\
    \ = oddArray.foldLeft(0l) { (sum, element) => sum + element }\n        val sortedArray\
    \ = if (isEven) evenArray else oddArray\n        val sortedArraySum = if (isEven)\
    \ evenArraySum else oddArraySum\n        val sortedArraySumOdd = if (isOdd) sortedArraySum\
    \ - 1 else sortedArraySum\n        val sortedArraySumEven = if (isEven) sortedArraySum\
    \ + 1 else sortedArraySum\n        val sortedArraySumEvenOdd = if (isOdd) sortedArraySumEvenOdd\
    \ - 1 else sortedArraySumEvenOdd\n        val sortedArraySumEvenOddEven = if (isEven)\
    \ sortedArraySumEvenOdd + 1 else sortedArraySumEvenOdd\n        val sortedArraySumEvenOddEvenOdd\
    \ = if (isOdd) sortedArraySumEvenOddEven - 1 else sortedArraySumEvenOddEven\n\
    \        val sortedArraySumEvenOddEvenOddEven = if (isEven) sortedArraySumEvenOddEvenOdd\
    \ + 1 else sortedArraySumEvenOddEvenOdd\n        val sortedArraySumEvenOddEvenOddEvenOdd\
    \ = if (isOdd) sortedArraySumEvenOddEvenOddEven - 1 else sortedArraySumEvenOddEvenOddEven\n\
    \        val sortedArraySumEvenOddEvenOddEvenOddEven = if (isEven) sortedArraySumEvenOddEvenOddEvenOdd\
    \ + 1 else sortedArraySumEvenOddEvenOddEvenOdd\n        val sortedArraySumEvenOddEvenOddEvenOddEvenOdd\
    \ = if (isOdd) sortedArraySumEvenOddEvenOddEvenOddEven - 1 else sortedArraySumEvenOddEvenOddEvenOddEven\n\
    \        val sortedArraySumEvenOddEvenOddEvenOddEvenOddEven = if (isEven) sortedArraySumEvenOddEvenOddEvenOddEvenOdd\
    \ + 1 else sortedArraySumEvenO", "        val sumArray = array.sum\n        val\
    \ evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n\
    \        val oddArray = array.filter(_ % 2 != 0)\n        val evenSumOddArray\
    \ = evenArray.zip(oddArray).sortBy(_._1).reverse\n        val evenSumEvenArray\
    \ = evenArray.zip(evenArray).sortBy(_._1).reverse\n        val evenSumEvenSumOddArray\
    \ = evenSumEvenArray.zip(evenSumOddArray).sortBy(_._1).reverse\n        val evenSumEvenSumEvenOddArray\
    \ = evenSumEvenSumOddArray.zip(evenSumEvenArray).sortBy(_._1).reverse\n      \
    \  val evenSumEvenSumEvenEvenOddArray = evenSumEvenSumEvenOddArray.zip(evenSumOddArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenOddArray = evenSumEvenSumEvenEvenOddArray.zip(oddArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenOddArray.zip(evenArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenEvenEvenOddArray.zip(evenSumOddArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenEvenEvenEvenOddArray.zip(oddArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenEvenOddArray.zip(evenArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddArray.zip(evenSumOddArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddArray.zip(oddArray).sortBy(_._1).reverse\n\
    \        val evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenEvenEvenOddArray = evenSumEvenSumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOddArray.zip(evenArray).sortBy(_._",
  "        val result = array.sortWith(_ > _)\n        if (result.sum % 2 == 0) {\n\
    \            result.sortWith(_ < _)\n        } else {\n            result.sortWith(_\
    \ > _)\n        }\n        result", "        val sumArray = array.foldLeft(0L){\
    \ (sum, elem) => sum + elem}\n        val isOdd = sumArray % 2 != 0\n        val\
    \ isEven = sumArray % 2 == 0\n        if(isOdd) array.sortBy(x => x)\n       \
    \ else array.sortBy(x => -x)", "        val sumArray = array.foldLeft(0l.toLong)(_\
    \ + _)\n        val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray\
    \ - sumArrayOdd\n        val sortedArray = array.sortWith(_ < _)\n        if (sumArrayOdd\
    \ > sumArrayEven) sortedArray.reverse\n        else sortedArray", "        val\
    \ sumArray = array.foldLeft(0l.toLong)(_ + _)\n        val sumArrayOdd = sumArray\
    \ % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n        val sortedArray\
    \ = array.sortWith(_.compareTo(_) < 0)\n        if (sumArrayOdd > sumArrayEven)\
    \ sortedArray.reverse\n        else sortedArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n\
    \        }\n        result.toList", "        val sumArray = array.foldLeft(0l)\
    \ { (sum, value) => sum + value }\n        val isEven = sumArray % 2 == 0\n  \
    \      val isOdd = sumArray % 2 != 0\n        if (isEven) {\n            array.sortBy(x\
    \ => x)\n        } else {\n            array.sortBy(x => -x)\n        }", "  \
    \      val sumArray = array.foldLeft(0l) { (sum, element) => sum + element }\n\
    \        val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray -\
    \ sumArrayOdd\n        val sortedArray = array.sortWith( (a, b) => sumArrayOdd\
    \ - sumArrayEven)\n        sortedArray", "        val sumArray = array.foldLeft(0L)\
    \ { (sum, element) => sum + element }\n        val evenSum = sumArray % 2 == 0\n\
    \        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        if (evenSum) {\n            evenArray.sortWith(_.compareTo(_)\
    \ > 0)\n        } else {\n            oddArray.sortWith(_.compareTo(_) < 0)\n\
    \        }", "        val result = array.sortWith((x, y) => math.abs(x - y) <\
    \ math.abs(x - y))\n        if (math.abs(result.head - result.last) % 2 == 1)\
    \ {\n            result.reverse\n        } else {\n            result\n      \
    \  }", "        val sumArray = array.sum\n        val evenSum = sumArray % 2 ==\
    \ 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray =\
    \ array.filter(_ % 2 != 0)\n        val evenSumArray = evenArray.sum\n       \
    \ val oddSumArray = oddArray.sum\n        if (evenSumArray == oddSumArray) {\n\
    \            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sum : Long = array.sum\n        val odd = sum\
    \ % 2 == 1\n        val even = sum % 2 == 0\n        val result = array.sortWith(x\
    \ => odd.toLong match {\n            case true => x.toLong\n            case false\
    \ => x.toLong.reverse\n        })\n        if (even) result.reverse else result",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n    \
    \    var index = 0\n        while (index < array.length) {\n            sum =\
    \ sum + array[index]\n            index += 1\n        }\n        if (sum % 2 ==\
    \ 0) {\n            array.sortWith(_.compareTo(_) < 0)\n        } else {\n   \
    \         array.sortWith(_.compareTo(_) > 0)\n        }\n        result.toList",
  "        val sumArray = array.foldLeft(0l.toLong)(_ + _)\n        val evenSum =\
    \ sumArray % 2\n        val oddSum = sumArray - evenSum\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n\
    \        if (evenSum == oddSum) {\n            evenArray.sortWith(_ < _)\n   \
    \     } else {\n            oddArray.sortWith(_ > _)\n        }", "        val\
    \ sumArray = array.foldLeft(0l) { (sum, element) => sum + element }\n        val\
    \ evenSum = sumArray % 2 == 0\n        val oddSum = sumArray % 2 != 0\n      \
    \  val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        if (evenSum) {\n            evenArray.sortWith(_ < _)\n \
    \       } else {\n            oddArray.sortWith(_ > _)\n        }", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val sum = 0\n        for(i\
    \ <- 0 until array.size) {\n            sum += array(i)\n        }\n        if(sum\
    \ % 2 == 1) {\n            val reversed = array.sortBy(x => x)\n            for(i\
    \ <- 0 until reversed.size) {\n                result += reversed(i)\n       \
    \     }\n        } else {\n            val reversed = array.sortBy(x => -x)\n\
    \            for(i <- 0 until reversed.size) {\n                result += reversed(i)\n\
    \            }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        val maxSum = array.last\n        val minSum = array.head\n\
    \        val maxSumIndex = array.lastIndexWhere(x => x == maxSum)\n        val\
    \ minSumIndex = array.lastIndexWhere(x => x == minSum)\n        val maxSumIndexInt\
    \ = maxSumIndex.toInt\n        val minSumIndexInt = minSumIndex.toInt\n      \
    \  val maxSumInt = maxSum.toInt\n        val minSumInt = minSum.toInt\n      \
    \  val maxSumIndexInt = maxSumIndex.toInt\n        val minSumIndexInt = minSumIndex.toInt\n\
    \        val maxSumInt = maxSum.toInt\n        val minSumInt = minSum.toInt\n\
    \        val maxSumIndexInt = maxSumIndex.toInt\n        val minSumIndexInt =\
    \ minSumIndex.toInt\n        val maxSumInt = maxSum.toInt\n        val minSumInt\
    \ = minSum.toInt\n        val maxSumIndexInt = maxSumIndex.toInt\n        val\
    \ minSumIndexInt = minSumIndex.toInt\n        val maxSumInt = maxSum.toInt\n \
    \       val minSumInt = minSum.toInt\n        val maxSumIndexInt = maxSumIndex.toInt\n\
    \        val minSumIndexInt = minSumIndex.toInt\n        val maxSumInt = maxSum.toInt\n\
    \        val minSumInt = minSum.toInt\n        val maxSumIndexInt = maxSumIndex.toInt\n\
    \        val minSumIndexInt = minSumIndex.toInt\n        val maxSumInt = maxSum.toInt\n\
    \        val minSumInt = minSum.toInt\n        val maxSumIndexInt = maxSumIndex.toInt\n\
    \        val minSumIndexInt = minSumIndex.toInt\n        val maxSumInt = maxSum.toInt\n\
    \        val minSumInt = minSum.toInt\n        val maxSumIndexInt = maxSumIndex.toInt\n\
    \        val minSumIndexInt = minSumIndex.toInt\n        val maxSumInt = maxSum.toInt\n\
    \        val minSumInt = minSum.toInt\n        val maxSumIndexInt = maxSumIndex.toInt\n\
    \        val minSumIndexInt = minSumIndex.toInt\n        val maxSumInt = maxSum.toInt\n\
    \        val minSumInt = minSum.toInt\n        val maxSumIndexInt = maxSumIndex.toInt\n\
    \        ", "        val sumArray = array.sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 != 0)\n        val evenArraySum = evenArray.sum\n     \
    \   val oddArraySum = oddArray.sum\n        val evenArraySumOdd = evenArraySum\
    \ - oddArraySum\n        val evenArraySumEven = evenArraySum + evenArraySumOdd\n\
    \        val oddArraySumEven = oddArraySum - evenArraySumEven\n        val evenArraySumEvenOdd\
    \ = evenArraySumEven + oddArraySumEven\n        val oddArraySumEvenOdd = oddArraySumEven\
    \ - evenArraySumEvenOdd\n        val evenArraySumEvenOddOdd = evenArraySumEvenOdd\
    \ + oddArraySumEvenOdd\n        val oddArraySumEvenOddOdd = oddArraySumEvenOdd\
    \ - evenArraySumEvenOddOdd\n        val evenArraySumEvenOddOddOdd = evenArraySumEvenOddOdd\
    \ + oddArraySumEvenOddOdd\n        val oddArraySumEvenOddOddOdd = oddArraySumEvenOddOdd\
    \ - evenArraySumEvenOddOddOdd\n        val evenArraySumEvenOddOddOddOdd = evenArraySumEvenOddOddOdd\
    \ + oddArraySumEvenOddOddOdd\n        val oddArraySumEvenOddOddOddOdd = oddArraySumEvenOddOddOdd\
    \ - evenArraySumEvenOddOddOddOdd\n        val evenArraySumEvenOddOddOddOddOdd\
    \ = evenArraySumEvenOddOddOddOdd + oddArraySumEvenOddOddOddOdd\n        val oddArraySumEvenOddOddOddOddOdd\
    \ = oddArraySumEvenOddOddOddOdd - evenArraySumEvenOddOddOddOdd\n        val evenArraySumEvenOddOddOddOddOdd\
    \ = evenArraySumEvenOddOddOddOdd + oddArraySumEvenOddOddOddOdd\n        val oddArraySumEvenOddOddOddOddOdd\
    \ = oddArraySumEvenOddOddOddOdd - evenArraySumEvenOddOdd", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i = 0\n \
    \       while (i < array.length) {\n            sum = sum + array(i)\n       \
    \     i += 1\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n\
    \        }\n        result.addAll(array)\n        result.toList", "        val\
    \ sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n\
    \        val evenSumArray = evenSum.map(_ * _)\n        val oddSumArray = oddSum.map(_\
    \ * _)\n        val evenSumArrayLength = evenSumArray.length\n        val oddSumArrayLength\
    \ = oddSumArray.length\n        val evenArrayLength = evenArray.length\n     \
    \   val oddArrayLength = oddArray.length\n        val evenSumArrayLength = evenSumArray.length\n\
    \        val oddSumArrayLength = oddSumArray.length\n        val evenArrayLength\
    \ = evenArray.length\n        val oddArrayLength = oddArray.length\n        val\
    \ evenSumArrayLength = evenSumArray.length\n        val oddSumArrayLength = oddSumArray.length\n\
    \        val evenArrayLength = evenArray.length\n        val oddArrayLength =\
    \ oddArray.length\n        val evenSumArrayLength = evenSumArray.length\n    \
    \    val oddSumArrayLength = oddSumArray.length\n        val evenArrayLength =\
    \ evenArray.length\n        val oddArrayLength = oddArray.length\n        val\
    \ evenSumArrayLength = evenSumArray.length\n        val oddSumArrayLength = oddSumArray.length\n\
    \        val evenArrayLength = evenArray.length\n        val oddArrayLength =\
    \ oddArray.length\n        val evenSumArrayLength = evenSumArray.length\n    \
    \    val oddSumArrayLength = oddSumArray.length\n        val evenArrayLength =\
    \ evenArray.length\n        val oddArrayLength = oddArray.length\n        val\
    \ evenSumArrayLength = evenSumArray.length\n        val oddSumArrayLength = oddSumArray.length\n\
    \        val evenArrayLength = evenArray.length\n        val oddArrayLength =\
    \ oddArray.length\n        val evenSumArrayLength = evenSumArray.length\n    \
    \    val oddSumArrayLength = oddSumArray.length\n        val evenArrayLength =\
    \ evenArray.length\n        val oddArrayLength = oddArray.length\n        val\
    \ evenSumArrayLength = evenSumArray.length\n        val oddSumArrayLength = oddSumArray.length\n\
    \        val evenArrayLength = evenArray.length\n        val oddArrayLength =\
    \ oddArray.length\n        val evenSumArrayLength = evenSumArray.length\n    \
    \    val oddSumArrayLength = oddSumArray.length\n        val evenArrayLength =\
    \ evenArray.length\n        val oddArrayLength = oddArray.length\n        val\
    \ evenSumArrayLength = evenSumArray.length\n        val oddSumArrayLength = oddSumArray.length\n\
    \        val evenArrayLength = evenArray.length\n        val oddArrayLength =\
    \ oddArray.length", "        val sumArray = array.foldLeft(0l) { (sum, value)\
    \ => sum + value }\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        if (evenSum) {\n            evenArray.sortWith(_ < _)\n        } else\
    \ {\n            oddArray.sortWith(_ > _)\n        }", "        val sumArray =\
    \ array.foldLeft(0L) { (sum, value) => sum + value }\n        val isOdd = sumArray\
    \ % 2L == 0L\n        val isEven = sumArray % 2L != 0L\n        if (isOdd) {\n\
    \            array.sortWith(_ < _)\n        } else {\n            array.sortWith(_\
    \ > _)\n        }", "        val sumArray = array.sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 != 0)\n        val evenArraySum = evenArray.sum\n     \
    \   val oddArraySum = oddArray.sum\n        if (evenArraySum == oddArraySum) {\n\
    \            if (evenSum) {\n                evenArray.sortWith(_ < _)\n     \
    \       } else {\n                oddArray.sortWith(_ > _)\n            }\n  \
    \      } else {\n            if (evenSum) {\n                evenArray.sortWith(_\
    \ < _)\n            } else {\n                oddArray.sortWith(_ > _)\n     \
    \       }\n        }", "        val sumArray = array.foldLeft(0l) { (sum, value)\
    \ => sum + value }\n        val evenSum = sumArray % 2\n        val oddSum = sumArray\
    \ - evenSum\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 == 1)\n        if (evenSum == 1) {\n            evenArray.sortWith(_\
    \ < _)\n        } else if (oddSum == 1) {\n            oddArray.sortWith(_ > _)\n\
    \        } else {\n            evenArray.sortWith(_ < _).reverse\n           \
    \ oddArray.sortWith(_ > _).reverse\n        }", "        val sumArray = array.foldLeft(0l)\
    \ { (sum, value) => sum + value }\n        val evenSum = sumArray % 2 == 0\n \
    \       val odd = sumArray % 2 != 0\n        val evenArray = array.filter(_ %\
    \ 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     var sum = 0\n        var index = 0\n        while(index < array.length)\
    \ {\n            sum += array.getOrElse(index, 0)\n            index += 1\n  \
    \      }\n        if(sum % 2 == 0) {\n            array.sortWith((a, b) => a >\
    \ b)\n        } else {\n            array.sortWith((a, b) => a < b)\n        }\n\
    \        result.toList", "        val sumArray = array.foldLeft(0L) { (sum, element)\
    \ =>\n            sum += element\n        }\n        val odd = sumArray % 2 ==\
    \ 1\n        val even = sumArray % 2 == 0\n        if (odd) {\n            array.sortWith(compare(even))\n\
    \        } else {\n            array.sortWith(compare(odd))\n        }", "   \
    \     val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n    \
    \    val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n\
    \        val sortedArray = array.sortWith(x => x > 0)\n        if (sumArrayOdd\
    \ > 0) sortedArray else sortedArray.sortWith(x => x < 0)", "        val sumArray\
    \ = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        val evenArraySum = evenArray.sum\n        val oddArraySum = oddArray.sum\n\
    \        val evenArraySumOdd = evenArraySum + oddArraySum\n        val evenArraySumEven\
    \ = evenArraySum - evenArraySumOdd\n        val oddArraySumEven = oddArraySum\
    \ - evenArraySumEven\n        val evenArraySumEvenOdd = evenArraySumEven + oddArraySumEven\n\
    \        val evenArraySumEvenEven = evenArraySumEven - evenArraySumEvenOdd\n \
    \       val oddArraySumEvenEven = oddArraySumEven - evenArraySumEvenEven\n   \
    \     val evenArraySumEvenEvenOdd = evenArraySumEvenEven + oddArraySumEvenEven\n\
    \        val evenArraySumEvenEvenEven = evenArraySumEvenEven - evenArraySumEvenEvenOdd\n\
    \        val oddArraySumEvenEvenEven = oddArraySumEvenEven - evenArraySumEvenEvenEven\n\
    \        val evenArraySumEvenEvenEvenOdd = evenArraySumEvenEvenEven + oddArraySumEvenEvenEven\n\
    \        val evenArraySumEvenEvenEvenEven = evenArraySumEvenEvenEven - evenArraySumEvenEvenEvenOdd\n\
    \        val oddArraySumEvenEvenEvenEven = oddArraySumEvenEvenEven - evenArraySumEvenEvenEvenEven\n\
    \        val evenArraySumEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEven +\
    \ oddArraySumEvenEvenEvenEven\n        val evenArraySumEvenEvenEvenEvenEven =\
    \ evenArraySumEvenEvenEvenEven - evenArraySumEvenEvenEvenEvenOdd\n        val\
    \ oddArraySumEvenEvenEvenEvenEvenOdd = oddArraySumEvenEvenEvenEven - evenArraySumEvenEvenEvenEvenEvenEvenOdd\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenEvenOdd = evenArraySumEvenEvenEvenEvenEvenEvenEvenOdd\
    \ + oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenOdd\n        val evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd - evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\n\
    \        val oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = oddArray", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val sum = 0\n   \
    \     val sumOfFirst = 0\n        val sumOfLast = 0\n        val first = 0\n \
    \       val last = 0\n        val evenSum = 0\n        val oddSum = 0\n      \
    \  val evenSumOfFirst = 0\n        val oddSumOfFirst = 0\n        val evenSumOfLast\
    \ = 0\n        val oddSumOfLast = 0\n        val evenSumOfFirstLast = 0\n    \
    \    val oddSumOfFirstLast = 0\n        val evenSumOfLastFirst = 0\n        val\
    \ oddSumOfLastFirst = 0\n        val evenSumOfFirstLastLast = 0\n        val oddSumOfFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLast = 0\n        val oddSumOfLastFirstLast\
    \ = 0\n        val evenSumOfFirstLastLastLast = 0\n        val oddSumOfFirstLastLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfFirstLastLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast\
    \ = 0\n        val evenSumOfLastFirstLastLast = 0\n        val oddSumOfLastFirstLastLast",
  "        val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenSumArray = evenSum.map(_ => evenArray.sum)\n    \
    \    val oddSumArray = oddSum.map(_ => oddArray.sum)\n        val evenSumArrayOdd\
    \ = evenSumArray.zip(oddSumArray).filter(_._1 == _._2)\n        val evenSumArrayEven\
    \ = evenSumArray.zip(evenSumArray).filter(_._1 == _._2)\n        val oddSumArrayEven\
    \ = oddSumArray.zip(evenSumArray).filter(_._1 == _._2)\n        val evenSumArrayEvenOdd\
    \ = evenSumArrayEven.zip(oddSumArrayEven).filter(_._1 == _._2)\n        val evenSumArrayOddEven\
    \ = evenSumArrayOdd.zip(evenSumArrayEven).filter(_._1 == _._2)\n        val oddSumArrayOddEven\
    \ = oddSumArrayOdd.zip(evenSumArrayEven).filter(_._1 == _._2)\n        val evenSumArrayEvenOddOdd\
    \ = evenSumArrayEvenOdd.zip(oddSumArrayOddEven).filter(_._1 == _._2)\n       \
    \ val oddSumArrayEvenOddOdd = oddSumArrayOddEven.zip(evenSumArrayEvenOdd).filter(_._1\
    \ == _._2)\n        val evenSumArrayEvenOddEvenOdd = evenSumArrayEvenOddOdd.zip(oddSumArrayEvenOddOdd).filter(_._1\
    \ == _._2)\n        val oddSumArrayEvenOddEvenOdd = oddSumArrayEvenOddOdd.zip(evenSumArrayEvenOddEvenOdd).filter(_._1\
    \ == _._2)\n        val evenSumArrayEvenOddEvenOddOdd = evenSumArrayEvenOddEvenOddOdd.zip(oddSumArrayEvenOddEvenOddOdd).filter(_._1\
    \ == _._2)\n        val oddSumArrayEvenOddEvenOddOdd = oddSumArrayEvenOddEvenOddOdd.zip(evenSumArrayEvenOddEvenOddOdd).filter(_._1\
    \ == _._2)\n        val evenSumArrayEvenOddEvenOddEvenOdd = evenSumArrayEvenOddEvenOddOddOdd.zip(oddSumArrayEvenO",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0\n    \
    \    for (i <- 0 until array.size) {\n            sum += array(i)\n        }\n\
    \        if (sum % 2 == 0) {\n            val tempArray = array.sortBy(x => x)\n\
    \            result.addAll(tempArray)\n        } else {\n            val tempArray\
    \ = array.sortBy(x => -x)\n            result.addAll(tempArray)\n        }\n \
    \       result.toList", "        val sumArray = array.foldLeft(0l) { (sum, value)\
    \ => sum + value }\n        val isEven = sumArray % 2 == 0\n        val isOdd\
    \ = sumArray % 2 != 0\n        if (isEven) {\n            array.sortBy(x => x)\n\
    \        } else {\n            array.sortBy(x => -x)\n        }", "        val\
    \ sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n        val odd\
    \ = sumArray % 2 != 0\n        val evenArray = array.filter(_ % 2 == 0)\n    \
    \    val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum) {\n       \
    \     evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     val sum = 0\n        for(i <- 0 until array.size) {\n            sum +=\
    \ array(i)\n            if(sum % 2 == 1) {\n                result.add(array(i))\n\
    \            } else {\n                result.add(array(i)).reverse\n        \
    \    }\n        }\n        result.toList", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sum : Long = array.sum\n        val odd = sum\
    \ % 2 == 1\n        val even = sum % 2 == 0\n        val array2 = array.sortWith(_.compareTo(_)\
    \ < 0)\n        if (odd) array2 else array2.reverse", "        val sumArray =\
    \ array.foldLeft(0l) { (sum, value) => sum + value }\n        val isOdd = sumArray\
    \ % 2\n        val isEven = !isOdd\n        val isEvenOrOdd = isEven || isOdd\n\
    \        val isEvenOrOddOrNotOdd = isEvenOrOdd || !isOdd\n        val isEvenOrOddOrNotOddOrNotEven\
    \ = isEvenOrOdd || !isEven\n        val isEvenOrOddOrNotOddOrNotEvenOrNotOdd =\
    \ isEvenOrOdd || !isEven || !isOdd\n        val isEvenOrOddOrNotOddOrNotEvenOrNotOddOrNotEven\
    \ = isEvenOrOdd || !isEven || !isOdd || !isEven\n        val isEvenOrOddOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = isEvenOrOdd || !isEven || !isOdd || !isEven || !isOdd || !isEven\n       \
    \ val isEvenOrOddOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEven = isEvenOrOdd\
    \ || !isEven || !isOdd || !isEven || !isOdd || !isEven || !isOdd\n        val\
    \ isEvenOrOddOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd = isEvenOrOdd\
    \ || !isEven || !isOdd || !isEven || !isOdd || !isEven || !isOdd || !isEven\n\
    \        val isEvenOrOddOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEven\
    \ = isEvenOrOdd || !isEven || !isOdd || !isEven || !isOdd || !isEven || !isOdd\
    \ || !isEven\n        val isEvenOrOddOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOdd\
    \ = isEvenOrOdd || !isEven || !isOdd || !isEven || !isOdd || !isEven || !isOdd\
    \ || !isEven || !isOdd\n        val isEvenOrOddOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEvenOrNotOddOrNotEven",
  "        val sumArray = array.sum\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sumArrayEvenOdd = sumArrayEven\
    \ || sumArrayOdd\n        val sumArrayEvenOddArray = sumArrayEvenOdd ? array.sortBy(x\
    \ => x) : array.sortBy(x => -x).reverse\n        sumArrayEvenOddArray", "    \
    \    val sumArray = array.foldLeft(0l) { (sum, element) => sum + element }\n \
    \       val isEven = sumArray % 2 == 0\n        val isOdd = sumArray % 2 != 0\n\
    \        if (isEven) {\n            array.sortWith(_ < _)\n        } else {\n\
    \            array.sortWith(_ > _)\n        }", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val oddSum = sumArray % 2 !=\
    \ 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray =\
    \ array.filter(_ % 2 != 0)\n        val evenArraySum = evenArray.sum\n       \
    \ val oddArraySum = oddArray.sum\n        if (evenArraySum > oddArraySum) {\n\
    \            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val result = array.sortWith((a, b) => a > b)\n  \
    \      if (result.sum % 2 == 0) {\n            result.reverse\n        } else\
    \ {\n            result\n        }", "        val sumArray = array.sum\n     \
    \   val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_ %\
    \ 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        val evenArraySum\
    \ = evenArray.sum\n        val oddArraySum = oddArray.sum\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else if (oddArraySum) {\n\
    \            oddArray.sortWith(_ > _)\n        } else {\n            oddArray.sortWith(_\
    \ < _)\n        }", "        val sumArray = array.foldLeft(0L){ (sum, value) =>\n\
    \            sum + value\n        }\n        val evenSum = sumArray % 2 == 0\n\
    \        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenSumArray = evenArray.foldLeft(0L){ (sum, value) =>\n\
    \            sum + value\n        }\n        val oddSumArray = oddArray.foldLeft(0L){\
    \ (sum, value) =>\n            sum + value\n        }\n        val evenSumArray\
    \ = evenArray.foldLeft(0L){ (sum, value) =>\n            sum + value\n       \
    \ }\n        val oddSumArray = oddArray.foldLeft(0L){ (sum, value) =>\n      \
    \      sum + value\n        }\n        val evenSumArray = evenArray.foldLeft(0L){\
    \ (sum, value) =>\n            sum + value\n        }\n        val oddSumArray\
    \ = oddArray.foldLeft(0L){ (sum, value) =>\n            sum + value\n        }\n\
    \        val evenSumArray = evenArray.foldLeft(0L){ (sum, value) =>\n        \
    \    sum + value\n        }\n        val oddSumArray = oddArray.foldLeft(0L){\
    \ (sum, value) =>\n            sum + value\n        }\n        val evenSumArray\
    \ = evenArray.foldLeft(0L){ (sum, value) =>\n            sum + value\n       \
    \ }\n        val oddSumArray = oddArray.foldLeft(0L){ (sum, value) =>\n      \
    \      sum + value\n        }\n        val evenSumArray = evenArray.foldLeft(0L){\
    \ (sum, value) =>\n            sum + value\n        }\n        val oddSumArray\
    \ = oddArray.foldLeft(0L){ (sum, value) =>\n            sum + value\n        }\n\
    \        val evenSumArray = evenArray.foldLeft(0L){ (sum, value) =>\n        \
    \    sum + value\n        }\n        val oddSumArray = oddArray.foldLeft(0L){\
    \ (sum, value) =>\n            sum + value\n        }\n        val evenSumArray\
    \ = evenArray.foldLeft(0L){ (sum, value) =>\n            sum + value\n       \
    \ }\n        val oddSumArray = oddArray.foldLeft(0L){", "        val newArray\
    \ = array.sortWith(compare)\n        newArray", "        val sumArray = array.foldLeft(0l.toLong)(_\
    \ + _)\n        val evenSum = sumArray % 2\n        val oddSum = sumArray - evenSum\n\
    \        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        if (evenSum == 1) {\n            evenArray.sortWith(_ < _)\n\
    \        } else if (oddSum == 1) {\n            oddArray.sortWith(_ > _)\n   \
    \     } else {\n            evenArray.sortWith(_ < _).reverse\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sumArray = array.foldLeft(0l) { (sum, value)\
    \ => sum + value }\n        val isOdd = sumArray % 2\n        val isEven = sumArray\
    \ % 2 != 0\n        if(isOdd) array.sortBy(_.toLong)\n        else array.sortBy(_.toLong.reverse)",
  "        val sumArray = array.foldLeft(0l) { (sum, element) => sum + element }\n\
    \        val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n\
    \        if (evenSum) {\n            array.sortWith((a, b) => a < b)\n       \
    \ } else {\n            array.sortWith((a, b) => a > b)\n        }", "       \
    \ val sumArray = array.foldLeft(0L) { (sum, value) => sum + value }\n        val\
    \ evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n\
    \        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum) {\n   \
    \         evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val newArray = array.sortWith(compare)\n        newArray",
  "        val sumArray = array.foldLeft(0L) { (sum, elem) => sum + elem }\n     \
    \   val sumArrayOdd = sumArray % 2L == 0L\n        val sumArrayEven = sumArray\
    \ % 2L == 1L\n        val sortedArray = array.sortWith(_.compareTo(_) == 0)\n\
    \        if (sumArrayOdd) sortedArray else sortedArray.reverse"]
stop_tokens:
- "\n    }\n"
