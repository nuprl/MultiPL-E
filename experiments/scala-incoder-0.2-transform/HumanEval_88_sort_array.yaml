name: HumanEval_88_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n    // you will sort the given array in ascending order if the\
  \ sum( first index value, last index value) is odd,\n    // or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n    // Note:\n\
  \    // * don't change the given array.\n    // Examples:\n    // >>> sortArray((List[Long]()))\n\
  \    // (List[Long]())\n    // >>> sortArray((List[Long](5l.toLong)))\n    // (List[Long](5l.toLong))\n\
  \    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong,\
  \ 5l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong))\n    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong,\
  \ 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong)))\n    // (List[Long](6l.toLong, 5l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))\n    def sortArray(array\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
  \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong,\
  \ 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong,\
  \ 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
  \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
  \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
  \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
completions: ["        val sumArray = array.foldLeft(0l) { (sum, value) => sum + value\
    \ }\n        val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray\
    \ - sumArrayOdd\n        val sortedArray = array.sortWith(x => x > 0)\n      \
    \  if (sumArrayOdd > 0) sortedArray else sortedArray.sortWith(x => x < 0)", " \
    \       val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n  \
    \      val sumArrayOdd = sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n\
    \        val sortedArray = array.sortWith(x => x < x) // sort ascending\n    \
    \    if (sumArrayOdd > 0) sortedArray else sortedArray.sortWith(x => x > x) //\
    \ sort descending", "        val sumArray = array.sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 == 1)\n        val evenSumArray = evenSum.map(_ * 2).toList\n\
    \        val oddSumArray = oddSum.map(_ * 2).toList\n        val evenArraySorted\
    \ = evenArray.sortWith(_ < _)\n        val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n        val evenSumArraySorted = evenSumArray.sortWith(_ < _)\n      \
    \  val oddSumArraySorted = oddSumArray.sortWith(_ > _)\n        val evenArraySorted2\
    \ = evenArraySorted.sortWith(_ < _)\n        val oddArraySorted2 = oddArraySorted.sortWith(_\
    \ > _)\n        val evenSumArraySorted2 = evenSumArraySorted.sortWith(_ < _)\n\
    \        val oddSumArraySorted2 = oddSumArraySorted.sortWith(_ > _)\n        val\
    \ evenArraySorted3 = evenArraySorted2.sortWith(_ < _)\n        val oddArraySorted3\
    \ = oddArraySorted2.sortWith(_ > _)\n        val evenSumArraySorted3 = evenSumArraySorted2.sortWith(_\
    \ < _)\n        val oddSumArraySorted3 = oddSumArraySorted2.sortWith(_ > _)\n\
    \        val evenArraySorted4 = evenArraySorted3.sortWith(_ < _)\n        val\
    \ oddArraySorted4 = oddArraySorted3.sortWith(_ > _)\n        val evenSumArraySorted4\
    \ = evenSumArraySorted3.sortWith(_ < _)\n        val oddSumArraySorted4 = oddSumArraySorted3.sortWith(_\
    \ > _)\n        val evenArraySorted5 = evenArraySorted4.sortWith(_ < _)\n    \
    \    val oddArraySorted5 = oddArraySorted4.sortWith(_ > _)\n        val evenSumArraySorted5\
    \ = evenSumArraySorted4.sortWith(_ < _)\n        val oddSumArraySorted5 = oddSumArraySorted4.sortWith(_\
    \ > _)\n        val evenArraySorted6 = evenArraySorted5.sortWith(_ < _)\n    \
    \    val oddArraySorted6 = oddArraySorted5.sortWith(_ > _)\n        val evenSumArraySorted6\
    \ = evenSumArraySorted5.sortWith(_ < _)\n        val oddSumArraySorted6 = oddSumArraySorted5.sortWith(_\
    \ > _)\n        val evenArraySorted7 = evenArraySorted6.sortWith(_", "       \
    \ val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n        val\
    \ isOdd = sumArray % 2 != 0\n        val isEven = sumArray % 2 == 0\n        val\
    \ newArray = array.sortWith(isOdd _)\n        if(isEven) newArray.sortWith(isOdd\
    \ _)\n        else newArray.sortWith(isEven _)", "        val sumArray = array.foldLeft(0L){\
    \ (sum, element) => sum + element }\n        val evenSum = sumArray % 2 == 0\n\
    \        val oddSum = sumArray % 2 != 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if(evenSum)\
    \ evenArray.sortBy(_)\n        if(oddSum) oddArray.sortBy(_.reverse)", "     \
    \   val sumArray = array.foldLeft(0L) { (sum, elem) => sum + elem}\n        val\
    \ isOdd = sumArray % 2L == 0L\n        val isEven = sumArray % 2L == 1L\n    \
    \    if(isOdd) array.sortBy(_._1)\n        else array.sortBy(_._2).reverse", " \
    \       val newArray = array.sortWith((a, b) => a > b)\n        if (newArray.sum\
    \ % 2 == 1) {\n            newArray.reverse\n        }\n        newArray", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val sum = 0\n   \
    \     array.foreach(x => sum += x)\n        if (sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n\
    \        }\n        result.toList", "        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n           \
    \ array.sortWith(_ > _)\n        }\n        result.toList", "        val sumArray\
    \ = array.foldLeft(0L) { (sum, elem) => sum + elem}\n        val sumArrayOdd =\
    \ sumArray % 2\n        val sumArrayEven = sumArray - sumArrayOdd\n        val\
    \ sortedArray = array.sortWith(_.compare(_.toLong) < 0)\n        if (sumArrayOdd\
    \ > sumArrayEven) {\n            sortedArray.reverse\n        } else {\n     \
    \       sortedArray\n        }", "        val sumArray = array.foldLeft(0l) {\
    \ (sum, value) => sum + value }\n        val sumEven = sumArray % 2 == 0\n   \
    \     val sumOdd = sumArray % 2 != 0\n        val evenArray = array.filter(_ %\
    \ 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (sumEven)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else if (sumOdd) {\n   \
    \         oddArray.sortWith(_ > _)\n        } else {\n            evenArray.sortWith(_\
    \ < _)\n            oddArray.sortWith(_ > _)\n        }", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i = 0\n \
    \       var j = 0\n        while (i < array.size) {\n            sum = sum + array(i)\n\
    \            i = i + 1\n        }\n        if (sum % 2 == 0) {\n            while\
    \ (j < array.size) {\n                sum = sum + array(j)\n                j\
    \ = j + 1\n            }\n            while (i < array.size) {\n             \
    \   sum = sum - array(i)\n                i = i + 1\n            }\n         \
    \   while (j < array.size) {\n                sum = sum + array(j)\n         \
    \       j = j + 1\n            }\n            while (i < array.size) {\n     \
    \           sum = sum - array(i)\n                i = i + 1\n            }\n \
    \           while (j < array.size) {\n                sum = sum + array(j)\n \
    \               j = j + 1\n            }\n            while (i < array.size) {\n\
    \                sum = sum - array(i)\n                i = i + 1\n           \
    \ }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.size) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while (i < array.size)\
    \ {\n                sum = sum - array(i)\n                i = ", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val sum = 0\n        for (i\
    \ <- 0 until array.size) {\n            sum += array(i)\n        }\n        if\
    \ (sum % 2 == 0) {\n            val tempArray = array.sortBy(x => x)\n       \
    \     result.addAll(tempArray)\n        } else {\n            val tempArray =\
    \ array.sortBy(x => -x)\n            result.addAll(tempArray)\n        }\n   \
    \     result.iterator", "        val sumArray = array.foldLeft(0l) { (sum, value)\
    \ => sum + value }\n        val odd = sumArray % 2\n        val even = sumArray\
    \ - odd\n        val sortedArray = array.sortWith( (a, b) => if (odd) a < b else\
    \ a > b )\n        if (even) sortedArray.sortWith( (a, b) => a < b ) else sortedArray.sortWith(\
    \ (a, b) => a > b )", "        val sumArray = array.sum\n        val evenSum =\
    \ sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        val evenArraySorted = evenArray.sortWith((x, y) => x - y)\n        val\
    \ oddArraySorted = oddArray.sortWith((x, y) => y - x)\n        if (evenSum) {\n\
    \            evenArraySorted\n        } else {\n            oddArraySorted\n \
    \       }", "        val newArray = array.sortWith(x => x.sum % 2 == 1)\n    \
    \    newArray", "        val sumArray = array.foldLeft(0l.toLong){ (sum, value)\
    \ => sum + value }\n        val sumArrayOdd = sumArray % 2l.toLong\n        val\
    \ sumArrayEven = sumArray - sumArrayOdd\n        val arrayCopy = array.map(x =>\
    \ x.toLong)\n        val sortedArray = arrayCopy.sortWith((x, y) => x > y)\n \
    \       if (sumArrayOdd > sumArrayEven) sortedArray.reverse\n        else sortedArray",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n    \
    \    var i = 0\n        var j = 0\n        var k = 0\n        while(i < array.length)\
    \ {\n            sum = sum + array(i)\n            i = i + 1\n        }\n    \
    \    while(j < array.length) {\n            sum = sum + array(j)\n           \
    \ j = j + 1\n        }\n        while(k < (array.length)) {\n            if(sum\
    \ % 2 == 0) {\n                result.add(array(k))\n                k = k + 1\n\
    \            } else {\n                result.add(array(k).reverse)\n        \
    \        k = k + 1\n            }\n        }\n        result.toList", "      \
    \  val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var\
    \ i = 0\n        var j = 0\n        while (i < array.size) {\n            sum\
    \ = sum + array(i)\n            i = i + 1\n        }\n        while (j < array.size)\
    \ {\n            sum = sum - array(i)\n            j = j + 1\n        }\n    \
    \    if (sum % 2 == 0) {\n            while (i < array.size) {\n             \
    \   result.add(array(i))\n                i = i + 1\n            }\n        }\
    \ else {\n            while (j < array.size) {\n                result.add(array(j))\n\
    \                j = j + 1\n            }\n        }\n        result.toList",
  "        val sumArray = array.foldLeft(0l) { (sum, value) => sum + value }\n   \
    \     val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n \
    \       val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if (evenSum) {\n    \
    \        evenArraySorted\n        } else {\n            oddArraySorted\n     \
    \   }"]
stop_tokens:
- "\n    }\n"
