language: scala
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toInt)\n     \
    \   val gradesMapSorted = gradesMap.sortBy(x => x)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedLength = gradesMapSortedReversed.length\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqvp3uu8o.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedLength\e\
    [0m = gradesMapSortedReversedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesMapSortedReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqvp3uu8o.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedLength\e\
    [0m = gradesMapSortedReversedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesMapSortedReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqvp3uu8o.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedLength\e\
    [0m = gradesMapSortedReversedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesMapSortedReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqvp3uu8o.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedLength\e\
    [0m = gradesMapSortedReversedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesMapSortedReversedLength is already defined as \e[33"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grade\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekhyn9nk.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekhyn9nk.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSet\e[0m = grades.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSet is already defined as \e[33mvalue\e[0m \e[35mgradesSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpekhyn9nk.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSeq\e[0m = grades.toSeq\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesSeq\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSeq\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekhyn9nk.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesIter\e[0m = grades.iterator\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesIter is already defined as \e[33mvalue\e[0m \e[35mgradesIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpekhyn9nk.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that over"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByKey = grades.sortBy(x => x)\n        val gradesSortedByValue\
    \ = grades.sortBy(x => x)\n        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n\
    \        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n     \
    \   val gradesSortedByKeyReversedReversed = gradesSortedByKeyReversed.reverse\n\
    \        val gradesSortedByValueReversedReversed = gradesSortedByValueReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversed = gradesSortedByKeyReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbarfbro2.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpbarfbro2.scala:40:104 --------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbarfbro2.scala:43:128 -----------------------\e[0m\e[0m\n\e[31m43 |\e\
    [0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = grade\n\e[31m\e[31m   |\e[0m                                           \
    \      "
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum)\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val\
    \ gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedMap\
    \ = gradesMapSortedReversed.toMap\n        val gradesMapSortedReversedMapKeys\
    \ = gradesMapSortedReversedMap.keys\n        val gradesMapSortedReversedMapValues\
    \ = gradesMapSortedReversedMap.values.toList\n        val gradesMapSortedReversedMapValuesSorted\
    \ = gradesMapSortedReversedMapValues.sortBy(_._1)\n        val gradesMapSortedReversedMapValuesSortedReversed\
    \ = gradesMapSortedReversedMapValuesSortedReversed.reverse\n        val gradesMapSortedReversedMapValuesSortedReversedMap\
    \ = gradesMapSortedReversedMapValuesSortedReversed.toMap\n        val gradesMapSortedReversedMapValuesSortedReversedMapKeys\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapKeys.toList\n        val\
    \ gradesMapSortedReversedMapValuesSortedReversedMapValuesSorted = gradesMapSortedReversedMapValuesSortedReversedMapValuesSorted.sortBy(_._1)\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversed\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversed.reverse\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMap\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMap.toMap\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapKeys\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapKeys.toList\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedSorted\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedSorted.sortBy(_._1)\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedSortedReversed\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedSortedReversed.reverse\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValues\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw_eacq7z.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw_eacq7z.scala:28:40\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value sortBy\
    \ is not a member of scala.collection.MapView[Float, Float]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpw_eacq7z.scala:34:61 ---------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedMapValuesSortedReversed\e\
    [0m = gradesMapSortedReversedMapValuesSortedReversed.reverse\n\e[31m\e[31m   |\e\
    [0m                                                             ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesMapSortedReversedMapValuesSortedReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw_eacq7z.scala:36:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedMapValuesSortedReversedMapKeys\e[0m = gradesMapSortedReversedMapValuesSortedReversedMapKeys.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesMapSortedReversedMapValuesSortedReversedMapKeys\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw_eacq7z.scala:37:76\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedMapValuesSortedReversedMapValuesSorted\e[0m = gradesMapSortedReversedMapValuesSortedReversedMapValuesSorted.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesMapSortedRever"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n\
    \        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPA = gradesSortedByGPAReversedValues.sortBy(_._1)\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversed = gradesSortedByGPAReversedValuesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedMap = gradesSortedByGPAReversedValuesSortedByGPAReversed.toMap\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedKeys = gradesSortedByGPAReversedValuesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValues = gradesSortedByGPAReversedValuesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPA\
    \ = gradesSortedByGPAReversedValuesSortedByGPAReversedValues.sortBy(_._1)\n  \
    \      val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversed\
    \ = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedMap\
    \ = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversed.toMap\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedKeys\
    \ = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedValues\
    \ = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpiu1gjcl1.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiu1gjcl1.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum)\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val\
    \ gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysSorted\
    \ = gradesMapSortedReversedKeys.sortBy(_)\n        val gradesMapSortedReversedValuesSorted\
    \ = gradesMapSortedReversedValues.sortBy(_)\n        val gradesMapSortedReversedKeysSortedReversed\
    \ = gradesMapSortedReversedKeysSorted.reverse\n        val gradesMapSortedReversedValuesSortedReversed\
    \ = gradesMapSortedReversedValuesSorted.reverse\n        val gradesMapSortedReversedKeysSortedReversedSorted\
    \ = gradesMapSortedReversedKeysSortedReversed.sortBy(_)\n        val gradesMapSortedReversedValuesSortedReversedSorted\
    \ = gradesMapSortedReversedValuesSortedReversed.sortBy(_)\n        val gradesMapSortedReversedKeysSortedReversedSortedSorted\
    \ = gradesMapSortedReversedKeysSortedReversedSorted.reverse\n        val gradesMapSortedReversedValuesSortedReversedSortedSorted\
    \ = gradesMapSortedReversedValuesSortedReversedSorted.reverse\n        val gradesMapSortedReversedKeysSortedReversedSortedSortedSorted\
    \ = gradesMapSortedReversedKeysSortedReversedSortedSorted.sortBy(_)\n        val\
    \ gradesMapSortedReversedValuesSortedReversedSortedSortedSorted = gradesMapSortedReversedValuesSortedReversedSortedSorted.sortBy(_)\n\
    \        val gradesMapSortedReversedKeysSortedReversedSortedSortedSortedSorted\
    \ = gradesMapSortedReversedKeysSortedReversedSortedSortedSorted.reverse\n    \
    \    val gradesMapSortedReversedValuesSortedReversedSortedSortedSortedSorted =\
    \ gradesMapSortedReversedValuesSortedReversedSortedSortedSorted.reverse\n    \
    \    val gradesMapSortedReversedKeysSortedReversedSortedSortedSortedSortedSorted\
    \ = gradesMapSortedReversedKeysSortedReversedSortedSortedSortedSorted.sortBy(_)\n\
    \        val gradesMapSortedReversedValuesSortedReversedSortedSortedSortedSortedSorted\
    \ = gradesMapSortedReversedValuesSortedReverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjwttfh4d.scala:28:40 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m  value sortBy is not a member of scala.collection.MapView[Float, Float]\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpjwttfh4d.scala:32:83 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedKeysSorted\e\
    [0m = gradesMapSortedReversedKeys.sortBy(_)\n\e[31m\e[31m   |\e[0m           \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$5 of expanded function:\n\e[31m\
    \   |\e[0m   _$5 => gradesMapSortedReversedKeys.sortBy(_$5).\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpjwttfh4d.scala:33:87 -----------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesSorted\e\
    [0m = gradesMapSortedReversedValues.sortBy(_)\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m   I could not infer the type of the parameter _$6 of expanded function:\n\
    \e[31m   |\e[0m   _$6 => gradesMapSortedReversedValues.sortBy(_$6).\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpjwttfh4d.scala:36:111 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedKeysSortedReversedSorted\e\
    [0m = gradesMapSortedReversedKeysSortedReversed.sortBy(_)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$7 of expanded function:\n\e[31m   |\e[0m   _$7 => gradesMapSortedReversedKeysSortedReversed.sortBy(_$7).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpjwttfh4d.sca"
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesCount = gradesValues.size\n\
    \        val gradesAvg = (gradesSum / gradesCount).toFloat\n        val gradesSumOfSquares\
    \ = gradesValues.map(x => x * x).sum\n        val gradesSumOfSquaresAvg = gradesSumOfSquares\
    \ / gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvg\
    \ * gradesSumOfSquaresAvg\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOf\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp42yy4z9x.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAvgSqr\e\
    [0m = gradesSumOfSquaresAvgSqr * gradesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAvgSqr is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSumOfSquaresAvgSqr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp42yy4z9x.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAvgSqr\e\
    [0m = gradesSumOfSquaresAvgSqr * gradesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAvgSqr is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSumOfSquaresAvgSqr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp42yy4z9x.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAvgSqr\e\
    [0m = gradesSumOfSquaresAvgSqr * gradesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAvgSqr is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSumOfSquaresAvgSqr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp42yy4z9x.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAvgSqr\e\
    [0m = gradesSumOfSquaresAvgSqr * gradesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAvgSqr is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSumOfSquaresAvgSqr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toInt).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesAvg = gradesSum /\
    \ gradesKeys.size\n        val gradesDiff = gradesAvg - gradesValues.head\n  \
    \      val gradesDiffs = gradesValues.tail.zip(gradesDiff)\n        val gradesDiffsMap\
    \ = gradesDiffs.map(x => x._1 -> x._2)\n        val gradesDiffsKeys = gradesDiffsMap.keys\n\
    \        val gradesDiffsValues = gradesDiffsMap.values.toList\n        val gradesDiffsSum\
    \ = gradesDiffsValues.sum\n        val gradesDiffsAvg = gradesDiffsSum / gradesDiffsKeys.size\n\
    \        val gradesDiffsDiff = gradesDiffsAvg - gradesDiffsValues.head\n     \
    \   val gradesDiffsDiffs = gradesDiffsValues.tail.zip(gradesDiffsDiff)\n     \
    \   val gradesDiffsDiffsMap = gradesDiffsDiffs.map(x => x._1 -> x._2)\n      \
    \  val gradesDiffsDiffsKeys = gradesDiffsDiffsMap.keys\n        val gradesDiffsDiffsValues\
    \ = gradesDiffsDiffsMap.values.toList\n        val gradesDiffsDiffsSum = gradesDiffsDiffsValues.sum\n\
    \        val gradesDiffsDiffsAvg = gradesDiffsDiffsSum / gradesDiffsDiffsKeys.size\n\
    \        val gradesDiffsDiffsDiff = gradesDiffsDiffsAvg - gradesDiffsDiffsValues.head\n\
    \        val gradesDiffsDiffsDiffs = gradesDiffsDiffsValues.tail.zip(gradesDiffsDiffsDiff)\n\
    \        val gradesDiffsDiffsDiffsMap = gradesDiffsDiffsDiffs.map(x => x._1 ->\
    \ x._2)\n        val gradesDiffsDiffsDiffsKeys = gradesDiffsDiffsDiffsMap.keys\n\
    \        val gradesDiffsDiffsDiffsValues = gradesDiffsDiffsDiffsMap.values.toList\n\
    \        val gradesDiffsDiffsDiffsSum = gradesDiffsDiffsDiffsValue\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp3kfm0pe.scala:27:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.map(\e\
    [36mx\e[0m => x.toInt).toMap\n\e[31m\e[31m   |\e[0m                          \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \               Cannot prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                                        where:    K is a type variable\n\e\
    [31m   |\e[0m                                                  V is a type variable\n\
    \e[31m   |\e[0m                                        .\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp3kfm0pe.scala:51:39 ------------------------\e[0m\e\
    [0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mgradesDiffsDiffsDiffsSum\e[0m\
    \ = gradesDiffsDiffsDiffsValue\n\e[31m\e[31m   |\e[0m                        \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                      Not found: gradesDiffsDiffsDiffsValue\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp3kfm0pe.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedKeys\
    \ = gradesSortedByKeyReversedMap.keys\n        val gradesSortedByValueReversedValues\
    \ = gradesSortedByValueReversedMap.values\n        val gradesSortedByKeyReversedValuesMap\
    \ = gradesSortedByValueReversedValues.toMap\n        val gradesSortedByKeyReversedValuesKeys\
    \ = gradesSortedByKeyReversedValuesMap.keys\n        val gradesSortedByKeyReversedValuesValues\
    \ = gradesSortedByKeyReversedValuesMap.values.toList\n        val gradesSortedByKeyReversedValuesValuesMap\
    \ = gradesSortedByKeyReversedValuesValues.toMap\n        val gradesSortedByKeyReversedValuesValuesKeys\
    \ = gradesSortedByKeyReversedValuesValuesMap.keys\n        val gradesSortedByKeyReversedValuesValuesValues\
    \ = gradesSortedByKeyReversedValuesValuesMap.values.toList\n        val gradesSortedByKeyReversedValuesValuesValuesMap\
    \ = gradesSortedByKeyReversedValuesValuesValues.toMap\n        val gradesSortedByKeyReversedValuesValuesValuesKeys\
    \ = gradesSortedByKeyReversedValuesValuesValuesMap.keys\n        val gradesSortedByKeyReversedValuesValuesValuesValues\
    \ = gradesSortedByKeyReversedValuesValuesValuesMap.values.toList\n        val\
    \ gradesSortedByKeyReversedValuesValuesValuesValuesMap = gradesSortedByKeyReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByKeyReversedValuesValuesValuesValuesKeys = gradesSortedByKeyReversedValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedByKeyReversedValuesValuesValuesValuesValues = gradesSortedByKeyReversedValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByKeyReversedValuesValuesValuesValuesValuesMap = gradesSortedByKeyReversedValuesValuesValuesValuesValues.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprzife9to.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprzife9to.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n    \
    \    val gradesSum = gradesSorted.sum\n        val gradesAverage = gradesSum /\
    \ gradesSorted.length\n        val gradesSumOfSquares = gradesSorted.map(x =>\
    \ x * x).sum\n        val gradesAverageOfSquares = gradesSumOfSquares / gradesSorted.length\n\
    \        val gradesSumOfSquaresOfDifferences = gradesSorted.map(x => x - gradesAverage).sum\n\
    \        val gradesAverageOfSquaresOfDifferences = gradesSumOfSquaresOfDifferences\
    \ / gradesSorted.length\n        val gradesSumOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x - gradesAverageOfSquares).sum\n        val gradesAverageOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfDifferences / gradesSorted.length\n        val\
    \ gradesSumOfSquaresOfSquaresOfSquaresOfDifferences = gradesSorted.map(x => x\
    \ * x * x - gradesAverageOfSquaresOfSquares).sum\n        val gradesAverageOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfDifferences / gradesSorted.length\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences = gradesSorted.map(x\
    \ => x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquares).sum\n        val\
    \ gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ / gradesSorted.length\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquaresOfSquares).sum\n\
    \        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesSorted.length\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x * x * x * x - gradesAverageOfSquares\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmzmwkm9w.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmzmwkm9w.scala:36:98\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSumOfSquaresOfSquaresOfSquaresOfDifferences\e[0m = gradesSorted.map(\e\
    [36mx\e[0m => x * x * x - gradesAverageOfSquaresOfSquares).sum\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                              Not found: gradesAverageOfSquaresOfSquares\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpmzmwkm9w.scala:36:134 ----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresOfSquaresOfSquaresOfDifferences\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => x * x * x - gradesAverageOfSquaresOfSquares).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e\
    [35mFloatIsFractional\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e\
    [0m \e[35mByteIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type\
    \ Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e\
    [0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmzmwkm9w.scala:38:111\
    \ -----------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\e[0m = gradesSorted.map(\e\
    [36mx\e[0m => x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquares).sum\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not"
  stdout: ''
  timestamp: 1659805386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => {\n            val gpa = grade\n\
    \            val letterGrade = if (gpa > 3.0) \"B+\" else if (gpa > 2.7) \"B\"\
    \ else if (gpa > 2.3) \"B-\" else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"\
    C\" else if (gpa > 1.3) \"C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7)\
    \ \"D\" else if (gpa > 0.0) \"D-\" else \"E\"\n            (gpa, letterGrade)\n\
    \        }).sortBy(_._1).map(_._2).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkmrtzb9i.scala:34)\n\tat Problem.main(tmpkmrtzb9i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedKeys = gradesMapSorted.keys\n\
    \        val gradesMapSortedValues = gradesMapSorted.values\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4eo7l3e.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4eo7l3e.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedKeysLength\e[0m = gradesMapSortedKeys.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4eo7l3e.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4eo7l3e.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeys.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4eo7l3e.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap"
  stdout: ''
  timestamp: 1659805092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapKeysSortedByValue = gradesMapKeys.sortBy(_._2)\n        val\
    \ gradesMapValuesSortedByKey = gradesMapValues.sortBy(_._1)\n        val gradesMapKeysSortedByValueReversed\
    \ = gradesMapKeysSortedByValue.reverse\n        val gradesMapValuesSortedByKeyReversed\
    \ = gradesMapValuesSortedByKey.reverse\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversed.length\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversed.length\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKey\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7ezhw23e.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedByValueReversedLength\e\
    [0m = gradesMapKeysSortedByValueReversedLength - \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedByValueReversedLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesMapKeysSortedByValueReversedLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7ezhw23e.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedByKeyReversedLength\e\
    [0m = gradesMapValuesSortedByKeyReversedLength - \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedByKeyReversedLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesMapValuesSortedByKeyReversedLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7ezhw23e.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedByValueReversedLength\e\
    [0m = gradesMapKeysSortedByValueReversedLength - \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedByValueReversedLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesMapKeysSortedByValueReversedLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7ezhw23e.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedByKeyReversedLength\e\
    [0m = gra"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSet = grades.toSet\n        val gradesSortedSet\
    \ = grades.toSeq.sortBy(_.toFloat)\n        val gradesSortedSetIterator = gradesSortedSet.iterator\n\
    \        val gradesSortedSetIteratorNext = gradesSortedSetIterator.next\n    \
    \    val gradesSortedSetIteratorNextNext = gradesSortedSetIteratorNext.next\n\
    \        val gradesSortedSetIteratorNextNextNext = gradesSortedSetIteratorNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNext = gradesSortedSetIteratorNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext =\
    \ gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n     \
    \   val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext =\
    \ gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7idul7pf.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp7idul7pf.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp7idul7pf.scala:31:74 ------------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedSetIteratorNextNext\e\
    [0m = gradesSortedSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                     value next is not a member of Float\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7idul7pf.scala:39:78 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compilin"
  stdout: ''
  timestamp: 1659805387
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4.0f).mapValues(_.map(_\
    \ % 4.0f)).toMap\n        grades.map(grade => gradesMap(grade).map(letter => letter\
    \ + \"\").mkString(\"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: 4.0\n\tat scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)\n\
    \tat scala.collection.immutable.HashMap.apply(HashMap.scala:132)\n\tat Problem$.numericalLetterGrade$$anonfun$1(tmpt5fg4vpd.scala:28)\n\
    \tat Problem$.numericalLetterGrade$$anonfun$adapted$1(tmpt5fg4vpd.scala:28)\n\t\
    at scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.numericalLetterGrade(tmpt5fg4vpd.scala:28)\n\
    \tat Problem$.main(tmpt5fg4vpd.scala:31)\n\tat Problem.main(tmpt5fg4vpd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = grades.sortBy(_._1)\n        val gradesSortedByValue = grades.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMap2\
    \ = gradesSortedByKeyReversedMap.toList\n        val gradesSortedByValueReversedMap2\
    \ = gradesSortedByValueReversedMap.toList\n        val gradesSortedByKeyReversedMap3\
    \ = gradesSortedByKeyReversedMap2.toList\n        val gradesSortedByValueReversedMap3\
    \ = gradesSortedByValueReversedMap2.toList\n        val gradesSortedByKeyReversedMap4\
    \ = gradesSortedByKeyReversedMap3.toList\n        val gradesSortedByValueReversedMap4\
    \ = gradesSortedByValueReversedMap3.toList\n        val gradesSortedByKeyReversedMap5\
    \ = gradesSortedByKeyReversedMap4.toList\n        val gradesSortedByValueReversedMap5\
    \ = gradesSortedByValueReversedMap4.toList\n        val gradesSortedByKeyReversedMap6\
    \ = gradesSortedByKeyReversedMap5.toList\n        val gradesSortedByValueReversedMap6\
    \ = gradesSortedByValueReversedMap5.toList\n        val gradesSortedByKeyReversedMap7\
    \ = gradesSortedByKeyReversedMap6.toList\n        val gradesSortedByValueReversedMap7\
    \ = gradesSortedByValueReversedMap6.toList\n        val gradesSortedByKeyReversedMap8\
    \ = gradesSortedByKeyReversedMap7.toList\n        val gradesSortedByValueReversedMap8\
    \ = gradesSortedByValueReversedMap7.toList\n        val gradesSortedByKeyReversedMap9\
    \ = gradesSortedByKeyReversedMap8.toList\n        val gradesSortedByValueReversedMap9\
    \ = gradesSortedByValueReversedMap8.toList\n        val gradesSortedByKeyReversedMap10\
    \ = gradesSortedByKeyReversedMap9.toList\n        val gradesSortedByValueReversedMap10\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd0q00vn4.scala:51:46 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValueReversedMap10\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpd0q00vn4.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpd0q00vn4.scala:28:48 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m = grades.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                       value _1 is not a member\
    \ of Float\n\e[31m\e[31m-- Error: /tmp/tmpd0q00vn4.scala:28:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m =\
    \ grades.sortBy(_._1)\n\e[31m\e[31m   |\e[0m                                 \
    \                  ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mBigInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd0q00vn4.scala:29:50\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByValue\e[0m = grades.sortBy(_._2)\n\e[31m"
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa6vonc2e.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesL"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapKeysSorted = gradesMapKeys.sorted\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sorted\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4zukvm4z.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4zukvm4z.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapKeysSortedLength\e[0m = gradesMapKeysSorted.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4zukvm4z.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4zukvm4z.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4zukvm4z.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ % 4).map(letter => letter + \"+\"))\n        val gradesMap2\
    \ = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_\
    \ % 4).map(letter => letter + \"-\"))\n        val gradesMap3 = grades.groupBy(_\
    \ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_ % 4).map(letter =>\
    \ letter + \"+\"))\n        val gradesMap4 = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ % 4).map(letter => letter + \"-\"))\n        val gradesMap5\
    \ = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_\
    \ % 4).map(letter => letter + \"+\"))\n        val gradesMap6 = grades.groupBy(_\
    \ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_ % 4).map(letter =>\
    \ letter + \"-\"))\n        val gradesMap7 = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ % 4).map(letter => letter + \"+\"))\n        val gradesMap8\
    \ = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_\
    \ % 4).map(letter => letter + \"-\"))\n        val gradesMap9 = grades.groupBy(_\
    \ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_ % 4).map(letter =>\
    \ letter + \"+\"))\n        val gradesMap10 = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ % 4).map(letter => letter + \"-\"))\n        val gradesMap11\
    \ = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_\
    \ % 4).map(letter => letter + \"+\"))\n        val gradesMap12 = grades.groupBy(_\
    \ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_ % 4).map(letter =>\
    \ letter + \"-\"))\n        val gradesMap13 = grades.groupBy(_ / 4).mapValues(_.toList.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps83g6n0b.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps83g6n0b.scala:39:67\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap13\e[0m = grades.groupBy(_ / \e[31m4\e[0m).mapValues(_.toList.sort\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is not a member of List[Float]\
    \ - did you mean List[Float].sortBy?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmps83g6n0b.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSor\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:38:"
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4).mapValues(_.map(_\
    \ % 4).map(_.toString))\n        gradesMap.mapValues(_.map(_ + \"\")).mapValues(_.mkString(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpejtntlev.scala:28:52\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        gradesMap.mapValues(_.map(_\
    \ + \e[31m\"\"\e[0m)).mapValues(_.mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    scala.collection.MapView[Float, String]\n\e[31m\
    \   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010200
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapKeysSorted = gradesMapKeys.sortBy(_)\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sortBy(_)\n        val gradesMapKeysSortedWithValues = gradesMapKeysSorted.zip(gradesMapValuesSorted)\n\
    \        val gradesMapKeysSortedWithValuesSorted = gradesMapKeysSortedWithValues.sortBy(_._1)\n\
    \        val gradesMapKeysSortedWithValuesSortedWithValues = gradesMapKeysSortedWithValuesSorted.map(x\
    \ => x._2)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSorted =\
    \ gradesMapKeysSortedWithValuesSortedWithValues.sortBy(_._1)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSorted.map(x => x._2)\n     \
    \   val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSorted =\
    \ gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValues.sortBy(_._1)\n\
    \        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSorted.map(x\
    \ => x._2)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues.sortBy(_._1)\n\
    \        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSorted\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSorted.map(x\
    \ => x._2)\n        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues.sortBy(_._1)\n\
    \        val gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues.map(x\
    \ => x._2)\n        val gradesMapKeysSortedWithValuesSorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_akotgcr.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_akotgcr.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\e\
    [0m = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp_akotgcr.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\e\
    [0m = gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues.map(\e\
    [36mx\e[0m => x._2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapKeysSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValuesSortedWithValues\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of topleve"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesArrayLength = gradesArray.length\n     \
    \   val gradesMapLength = gradesMap.length\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp6cv52vgk.scala:67:11 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp6cv52vgk.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6cv52vgk.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6cv52vgk.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6cv52vgk.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap2 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap3\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap4 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap5 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap6 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap7\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap8 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap9 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap10 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap11\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap12 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap13 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap14 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap15 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap16\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap17 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap18 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap19 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap20 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap21\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap22 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap23 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap24 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap25 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap26\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps3nc372o.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmps3nc372o.scala:54:5 ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByKey = grades.sortBy(x => x)\n        val gradesSortedByValue\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversed = grades.sortBy(x\
    \ => x)\n        val gradesSortedByValueReversed = grades.sortBy(x => -x)\n  \
    \      val gradesSortedByKeyReversedReversed = grades.sortBy(x => -x)\n      \
    \  val gradesSortedByValueReversedReversed = grades.sortBy(x => -x)\n        val\
    \ gradesSortedByKeyReversedReversedReversed = grades.sortBy(x => -x)\n       \
    \ val gradesSortedByValueReversedReversedReversed = grades.sortBy(x => -x)\n \
    \       val gradesSortedByKeyReversedReversedReversedReversed = grades.sortBy(x\
    \ => -x)\n        val gradesSortedByValueReversedReversedReversedReversed = grades.sortBy(x\
    \ => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x)\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grades.sort\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzw_hl9zp.scala:47:121 -----------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValueReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = grades.sort\n\e[31m\e[31m   |\e[0m                                     \
    \                                                                            \
    \ ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m value sort is not a member of List[Float]\
    \ - did you mean grades.sortBy?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzw_hl9zp.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys\
    \ = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysSum\
    \ = gradesMapSortedKeys.sum\n        val gradesMapSortedValuesSum = gradesMapSortedValues.sum\n\
    \        val gradesMapSortedKeysProduct = gradesMapSortedKeys.product\n      \
    \  val gradesMapSortedValuesProduct = gradesMapSortedValues.product\n        val\
    \ gradesMapSortedKeysProductLength = gradesMapSortedKeysProduct.size\n       \
    \ val gradesMapSortedValuesProductLength = gradesMapSortedValuesProduct.size\n\
    \        val gradesMapSortedKeysProductSum = gradesMapSortedKeysProduct.sum\n\
    \        val gradesMapSortedValuesProductSum = gradesMapSortedValuesProduct.sum\n\
    \        val gradesMapSortedKeysProductProduct = gradesMapSortedKeysProduct.product\n\
    \        val gradesMapSortedValuesProductProduct = gradesMapSortedValuesProduct.product\n\
    \        val gradesMapSortedKeysProductProductLength = gradesMapSortedKeysProductProduct.size\n\
    \        val gradesMapSortedValuesProductProductLength = gradesMapSortedValuesProductProduct.size\n\
    \        val gradesMapSortedKeysProductProductSum = gradesMapSortedKeysProductProduct.sum\n\
    \        val gradesMapSortedValuesProductProductSum = gradesMapSortedValuesProductProduct.sum\n\
    \        val gradesMapSortedKeysProductProductProduct = gradesMapSortedKeysProductProduct.product\n\
    \        val gradesMapSortedValuesProductProductProduct = gradesMapSortedValuesProductProduct.product\n\
    \        val gradesMapSortedKeysProductProductProductLength = gradesMapSortedKeysProductProductProduct.size\n\
    \        val gradesMapSortedValuesProductProductProductLength = gradesMapSortedValuesProductProductProduct.size\n\
    \        val gradesMapSortedKeysProductProductProductSum = gradesMapSortedKeysProductProductProduct.sum\n\
    \        val gradesMapSortedValuesProductProductProductProductSum = gradesMapSortedValuesProductProductProduct.sum\n\
    \        val gradesMapSortedKeysProductProductProductProduct = gradesMapSortedKeysProductProduct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvysjp4tq.scala:28:40 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         value sortBy is not a member of Map[Int, Float]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvysjp4tq.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapKeysSorted = gradesMapKeys.sortBy(_)\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sortBy(_)\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSor\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpom5d7uf0.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpom5d7uf0.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpom5d7uf0.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpom5d7uf0.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted.filter(_._2\
    \ > 0).map(_._2)\n        val gradesMapSorted4 = gradesMapSorted.filter(_._2 >\
    \ 0).map(_._1)\n        val gradesMapSorted5 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n\
    \        val gradesMapSorted6 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n \
    \       val gradesMapSorted7 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n  \
    \      val gradesMapSorted8 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n   \
    \     val gradesMapSorted9 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n    \
    \    val gradesMapSorted10 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n    \
    \    val gradesMapSorted11 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n    \
    \    val gradesMapSorted12 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n    \
    \    val gradesMapSorted13 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n    \
    \    val gradesMapSorted14 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n    \
    \    val gradesMapSorted15 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n    \
    \    val gradesMapSorted16 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n    \
    \    val gradesMapSorted17 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n    \
    \    val gradesMapSorted18 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n    \
    \    val gradesMapSorted19 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n    \
    \    val gradesMapSorted20 = gradesMapSorted.filter(_._2 > 0).map(_._1)\n    \
    \    val gradesMapSorted21 = gradesMapSorted.filter(_._2 > 0).map(_._2)\n    \
    \    val gradesMapSorted22 = grade\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph8sdjmtr.scala:28:40 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue sortBy is not a member of scala.collection.MapView[Int, List[Float]]\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph8sdjmtr.scala:49:32 ------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted22\e[0m =\
    \ grade\n\e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Not found: grade\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph8sdjmtr.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => x -> \"D-\").toMap\n        val gradesList : List[Float] = grades.toList\n\
    \        val gradesSum = gradesList.sum\n        val gradesAvg = gradesList.sum\
    \ / gradesList.size\n        val gradesDiff = gradesSum - gradesAvg\n        val\
    \ gradesDiffMap = gradesDiff.toList.map(x => x -> \"D-\").toMap\n        val gradesDiffList\
    \ : List[Float] = gradesDiff.toList\n        val gradesDiffSum = gradesDiffList.sum\n\
    \        val gradesDiffAvg = gradesDiffList.sum / gradesDiffList.size\n      \
    \  val gradesDiffDiff = gradesDiffSum - gradesDiffAvg\n        val gradesDiffDiffMap\
    \ = gradesDiffDiff.toList.map(x => x -> \"D-\").toMap\n        val gradesDiffDiffList\
    \ : List[Float] = gradesDiffDiff.toList\n        val gradesDiffDiffSum = gradesDiffDiffList.sum\n\
    \        val gradesDiffDiffAvg = gradesDiffDiffList.sum / gradesDiffDiffList.size\n\
    \        val gradesDiffDiffDiff = gradesDiffDiffSum - gradesDiffDiffAvg\n    \
    \    val gradesDiffDiffDiffMap = gradesDiffDiffDiff.toList.map(x => x -> \"D-\"\
    ).toMap\n        val gradesDiffDiffDiffList : List[Float] = gradesDiffDiffDiff.toList\n\
    \        val gradesDiffDiffDiffSum = gradesDiffDiffDiffList.sum\n        val gradesDiffDiffDiffAvg\
    \ = gradesDiffDiffDiffList.sum / gradesDiffDiffDiffList.size\n        val gradesDiffDiffDiffDiff\
    \ = gradesDiffDiffDiffSum - gradesDiffDiffDiffAvg\n        val gradesDiffDiffDiffDiffMap\
    \ = gradesDiffDiffDiffDiff.toList.map(x => x -> \"D-\").toMap\n        val gradesDiffDiffDiffDiffList\
    \ : List[Float] = gradesDiffDiffDiffDiff.toList\n        val gradesDiffDiffDiffDiffSum\
    \ = gradesDiffDiffDiffDiffList.sum\n        val gradesDiffDiffDiffDiffAvg = gradesDiffDiffDiffDiffList.sum\
    \ / gradesDiffDiffDiffDiffList.size\n        val gradesDiffDiffDiffDiffDiff =\
    \ gradesDiffDiffDiffDiffSum - gradesDiffDiffDiffDiffAvg\n        val gradesDiffDiffDiffDiffDiffMap\
    \ = gradesDiff\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeh0h6sh5.scala:27:45\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"D-\"\e[0m).toMap\n\e[31m\e[31m   |\e[0m                  \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m    \
    \                     Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpeh0h6sh5.scala:32:39 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesDiffMap\e[0m = gradesDiff.toList.map(\e\
    [36mx\e[0m => x -> \e[31m\"D-\"\e[0m).toMap\n\e[31m\e[31m   |\e[0m           \
    \                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value toList is not\
    \ a member of Float - did you mean gradesDiff.toInt?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpeh0h6sh5.scala:33:54 ------------------------\e[0m\e[0m\n\
    \e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesDiffList\e[0m : \e[35mList\e\
    [0m[\e[35mFloat\e[0m] = gradesDiff.toList\n\e[31m\e[31m   |\e[0m             \
    \                              ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value\
    \ toList is not a member of Float - did you mean gradesDiff.toInt?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpeh0h6sh5.scala:37:47 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesDiffDiffMap\e[0m =\
    \ gradesDiffDiff.toList.map(\e[36mx\e[0m => x -> \e[31m\"D-\"\e[0m).toMap\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue toList is not a member of Float - did you mean gradesDiffDiff.toInt?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeh0h6sh5.scala:38:62 ------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesDiffDiffList\e[0m\
    \ : \e[35mList\e[0m[\e[35mFloat\e[0m] = gradesDiffDiff.toList\n\e[31m\e[31m  \
    \ |\e[0m                       "
  stdout: ''
  timestamp: 1660010203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesValuesWithZero = gradesValues.map(_ + 0).toList\n        val gradesValuesWithOne\
    \ = gradesValues.map(_ + 1).toList\n        val gradesValuesWithTwo = gradesValues.map(_\
    \ + 2).toList\n        val gradesValuesWithThree = gradesValues.map(_ + 3).toList\n\
    \        val gradesValuesWithFour = gradesValues.map(_ + 4).toList\n        val\
    \ gradesValuesWithFive = gradesValues.map(_ + 5).toList\n        val gradesValuesWithSix\
    \ = gradesValues.map(_ + 6).toList\n        val gradesValuesWithSeven = gradesValues.map(_\
    \ + 7).toList\n        val gradesValuesWithEight = gradesValues.map(_ + 8).toList\n\
    \        val gradesValuesWithNine = gradesValues.map(_ + 9).toList\n        val\
    \ gradesValuesWithTen = gradesValues.map(_ + 10).toList\n        val gradesValuesWithEleven\
    \ = gradesValues.map(_ + 11).toList\n        val gradesValuesWithTwelve = gradesValues.map(_\
    \ + 12).toList\n        val gradesValuesWithThirteen = gradesValues.map(_ + 13).toList\n\
    \        val gradesValuesWithFourteen = gradesValues.map(_ + 14).toList\n    \
    \    val gradesValuesWithFifteen = gradesValues.map(_ + 15).toList\n        val\
    \ gradesValuesWithSixteen = gradesValues.map(_ + 16).toList\n        val gradesValuesWithSeventeen\
    \ = gradesValues.map(_ + 17).toList\n        val gradesValuesWithEighteen = gradesValues.map(_\
    \ + 18).toList\n        val gradesValuesWithNineteen = gradesValues.map(_ + 19).toList\n\
    \        val gradesValuesWithTwenty = gradesValues.map(_ + 20).toList\n      \
    \  val gradesValuesWithTwentyOne = gradesValues.map(_ + 21).toList\n        val\
    \ gradesValuesWithTwentyTwo = gradesValues.map(_ + 22).toList\n        val gradesValuesWithTwentyThree\
    \ = gradesValues.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpud216vzj.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpud216vzj.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpud216vzj.scala:54:5 ---------------------\e[0m\e[0m\n\
    \e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map{grade => \n            val gpa = grade.toInt\n\
    \            val letterGrade = if (gpa > 0) \"A+\" else if (gpa > 3.7) \"A\" else\
    \ if (gpa > 3.3) \"A-\" else if (gpa > 3.0) \"B+\" else if (gpa > 2.7) \"B\" else\
    \ if (gpa > 2.3) \"B-\" else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"C\" else\
    \ if (gpa > 1.3) \"C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else\
    \ \"E\"\n            letterGrade\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6cdehy6q.scala:34)\n\tat Problem.main(tmp6cdehy6q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0).sortBy(_._1).reverse\n        val gradesMapSorted3\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted4\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted5\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted6\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted7\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted8\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted9\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted10\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted11\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted12\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted13\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted14\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted15\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted16\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted17\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted18\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted19\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted20\
    \ = gradesMapSorted.filter(_._2 < 0).sortBy(_._1).reverse\n        val gradesMapSorted21\
    \ = gradesMapSor\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp802bl3op.scala:28:40 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         value sortBy is not a member of Map[Int, Float]\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp802bl3op.scala:48:32 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted21\e[0m =\
    \ gradesMapSor\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: gradesMapSor\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp802bl3op.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toChar).mapValues(x => x.toString.toUpperCase)\n        val gradesMap2\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toChar).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap3 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toChar).mapValues(x => x.toString.toUpperCase)\n        val gradesMap4\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toChar).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap5 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toChar).mapValues(x => x.toString.toUpperCase)\n        val gradesMap6\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toChar).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap7 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toChar).mapValues(x => x.toString.toUpperCase)\n        val gradesMap8\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toChar).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap9 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toChar).mapValues(x => x.toString.toUpperCase)\n        val gradesMap10\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toChar).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap11 = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toChar).mapValues(x => x.toString.toUpperCase)\n        val gradesMap12\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toChar).mapValues(x\
    \ => x.toString.toUpperCase)\n        val gradesMap13 = grades.groupBy(x => x.toInt).mapValues(_.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpprxvpqxe.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpprxvpqxe.scala:27:65\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(\e[36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e\
    [36mx\e[0m => x.toChar).mapValues(\e[36mx\e[0m => x.toString.toUpperCase)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpprxvpqxe.scala:27:89 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => x.toChar).mapValues(\e\
    [36mx\e[0m => x.toString.toUpperCase)\n\e[31m\e[31m   |\e[0m                 \
    \                                                                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toChar is not a member of Nothing, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e\
    [0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e\
    [0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\e[31m\
    \   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\e\
    [31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- "
  stdout: ''
  timestamp: 1660010206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sort\n        val gradesValuesSorted = gradesValues.sort\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzzl45ao.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzzl45ao.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzzl45ao.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzzl45ao.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /t"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n    \
    \    val gradesSum = gradesSorted.sum\n        val gradesCount = gradesSorted.size\n\
    \        val gradesAverage = gradesSum / gradesCount\n        val gradesSumOfSquares\
    \ = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresAverage =\
    \ gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquared\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverage\n        val gradesSumOfSquaresAverageSquaredSum\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverage\n        val gradesSumOfSquaresAverageSquaredSumSquared\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverageSquared\n        val gradesSumOfSquaresAverageSquaredSumSquaredSum\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverageSquaredSumSquared\n        val\
    \ gradesSumOfSquaresAverageSquaredSumSquaredSumSquared = gradesSumOfSquares *\
    \ gradesSumOfSquaresAverageSquaredSumSquaredSum\n        val gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSum\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverageSquaredSumSquaredSumSquared\n\
    \        val gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquared =\
    \ gradesSumOfSquares * gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSum\n\
    \        val gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquared =\
    \ gradesSumOfSquares * gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSum\n\
    \        val gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquaredSum\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquared\n\
    \        val gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquaredSumSquared\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquaredSum\n\
    \        val gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquaredSumSquaredSum\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpldjxkjb9.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquared\e\
    [0m = gradesSumOfSquares * gradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquared\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSumOfSquaresAverageSquaredSumSquaredSumSquaredSumSquared\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpldjxkjb9.scala:44:5 ---------------------\e[0m\e[0m\n\
    \e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010200
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum).toMap\n        val gradesKeys = gradesMap.keys.toList\n        val\
    \ gradesValues = gradesMap.values.toList\n        gradesKeys.zip(gradesValues).map\
    \ { case (k, v) => s\"${k}${v}\" }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuzmtz18n.scala:33)\n\tat Problem.main(tmpuzmtz18n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesAvg = gradesSum /\
    \ gradesKeys.size\n        val gradesGrades = gradesKeys.map(x => if (gradesMap(x)\
    \ == gradesAvg) gradesMap(x) else \"D-\").sorted\n        gradesGrades.reverse.map(x\
    \ => if (x == gradesAvg) x else x.toChar).mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjk6dwuh9.scala:32:102 -----------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesGrades\e[0m = gradesKeys.map(\e\
    [36mx\e[0m => \e[33mif\e[0m (gradesMap(x) == gradesAvg) gradesMap(x) \e[33melse\e\
    [0m \e[31m\"D-\"\e[0m).sorted\n\e[31m\e[31m   |\e[0m                         \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value sorted is not a member of Iterable[Matchable]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesIterReverse\
    \ = grades.reverseIterator\n        val gradesIterReversed = grades.reversed\n\
    \        val gradesIterReversedIter = grades.reversedIterator\n        val gradesIterReversedIterReversed\
    \ = grades.reversedIterator.reversed\n        val gradesIterReversedIterReversedIter\
    \ = grades.reversedIterator.reversedIterator.reversed\n        val gradesIterReversedIterReversedIterReversed\
    \ = grades.reversedIterator.reversedIterator.reversedIterator.reversed\n     \
    \   val gradesIterReversedIterReversedIterReversedIter = grades.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversed\n\
    \        val gradesIterReversedIterReversedIterReversedIterReversedIter = grades.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator.reversedIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpn3dnb19f.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- Error: /tmp/tmpn3dnb19f.scala:33:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesIterReversed\e[0m\
    \ = grades.reversed\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m\e[33mmethod\e[0m \e[35mreversed\e[0m in \e[33mtrait\e[0m\
    \ \e[35mIterableOnceOps\e[0m cannot be accessed as a member of (grades : List[Float])\
    \ from module class Problem$.\n\e[31m   |\e[0m Access to protected \e[33mmethod\e\
    [0m \e[35mreversed\e[0m not permitted because enclosing \e[33mobject\e[0m \e[35mProblem\e\
    [0m\n\e[31m   |\e[0m is not a subclass of \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m in \e[33mpackage\e[0m \e[35mscala.collection\e[0m where target is defined\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn3dnb19f.scala:34:44 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesIterReversedIter\e\
    [0m = grades.reversedIterator\n\e[31m\e[31m   |\e[0m                         \
    \            ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reversedIterator\
    \ is not a member of List[Float] - did you mean grades.reverseIterator?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpn3dnb19f.scala:35:52 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesIterReversedIterReversed\e\
    [0m = grades.reversedIterator.reversed\n\e[31m\e[31m   |\e[0m                \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reversedIterator is not a member of List[Float] - did you mean grades.reverseIterator?\n\
    \e[31m\e[31m-- [E008] Not "
  stdout: ''
  timestamp: 1660010203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapValuesSorted = gradesMapValues.sortBy(x => x)\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength =\
    \ gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength\
    \ - 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength -\
    \ 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n \
    \       val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n  \
    \      val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n   \
    \     val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n     \
    \   val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n      \
    \  val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n       \
    \ val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength =\
    \ gradesMapValuesSortedLength - 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength\
    \ - 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength -\
    \ 1\n        val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n \
    \       val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n  \
    \      val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n   \
    \     val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n     \
    \   val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n      \
    \  val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n       \
    \ val gradesMapValuesSortedLength = gradesMapValuesSortedLength - 1\n        val\
    \ gradesMapValuesSortedLength = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpa1tqnqmv.scala:59:41 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa1tqnqmv.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapValuesSortedLength\e[0m = gradesMapValuesSortedLength - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa1tqnqmv.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa1tqnqmv.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e"
  stdout: ''
  timestamp: 1660010201
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => {\n            val gpa = grade\n\
    \            val letterGrade = if (gpa > 3.0) \"A+\" else if (gpa > 2.7) \"B\"\
    \ else if (gpa > 2.3) \"B\" else if (gpa > 2.0) \"C\" else if (gpa > 1.7) \"C\"\
    \ else if (gpa > 1.3) \"C\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7) \"\
    D\" else if (gpa > 0.0) \"D\" else \"E\"\n            letterGrade\n        }).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyt5hrjfi.scala:34)\n\tat Problem.main(tmpyt5hrjfi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGrade\
    \ = grades.sortBy(_.toFloat)\n        val gradesSortedByGradeReversed = gradesSortedByGrade.sortBy(-_.toFloat)\n\
    \        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.toMap\n\
    \        val gradesSortedByGradeReversedKeys = gradesSortedByGradeReversedMap.keys\n\
    \        val gradesSortedByGradeReversedValues = gradesSortedByGradeReversedMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesMap = gradesSortedByGradeReversedValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesKeys = gradesSortedByGradeReversedValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValues = gradesSortedByGradeReversedValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesMap = gradesSortedByGradeReversedValuesValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesValuesKeys = gradesSortedByGradeReversedValuesValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValuesValues = gradesSortedByGradeReversedValuesValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesMap = gradesSortedByGradeReversedValuesValuesValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesKeys = gradesSortedByGradeReversedValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValues = gradesSortedByGradeReversedValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesMap = gradesSortedByGradeReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesKeys = gradesSortedByGradeReversedValuesValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesValuesValues =\
    \ gradesSortedByGradeReversedValuesValuesValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGradeReversedValuesValuesValuesValuesValuesValuesMap\
    \ = gradesSortedByGradeReversedValuesValuesValuesValuesValuesValuesValuesValuesMap.keys.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfg7uap51.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- Error: /tmp/tmpfg7uap51.scala:30:78 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeReversedMap\e\
    [0m = gradesSortedByGradeReversed.toMap\n\e[31m\e[31m   |\e[0m               \
    \                                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                      Cannot prove that Float <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                      where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \             V is a type variable\n\e[31m   |\e[0m                          \
    \            .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpfg7uap51.scala:42:69\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByGradeReversedValuesValuesValuesValuesMap\e[0m = gradesSortedByGradeReversedValuesValuesValuesValues.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByGradeReversedValuesValuesValuesValues\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfg7uap51.scala:43:70\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByGradeReversedValuesValuesValuesValuesKeys\e[0m = gradesSortedByGradeReversedValuesValuesValuesValuesValuesMap.keys\n\
    \e[31m\e[31m   |\e[0m                                                    "
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByKey = grades.sortBy(_._1)\n        val gradesSortedByValue\
    \ = grades.sortBy(_._2)\n        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n\
    \        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n     \
    \   val gradesSortedByKeyReversedMap = gradesSortedByKeyReversed.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedByValueReversedMap = gradesSortedByValueReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMap2 = gradesSortedByKeyReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap2 = gradesSortedByValueReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMap3 = gradesSortedByKeyReversedMap2.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap3 = gradesSortedByValueReversedMap2.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMap4 = gradesSortedByKeyReversedMap3.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap4 = gradesSortedByValueReversedMap3.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMap5 = gradesSortedByKeyReversedMap4.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap5 = gradesSortedByValueReversedMap4.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMap6 = gradesSortedByKeyReversedMap5.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap6 = gradesSortedByValueReversedMap5.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMap7 = gradesSortedByKeyReversedMap6.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap7 = gradesSortedByValueReversedMap6.map(x\
    \ => (x.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpejpzzevs.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpejpzzevs.scala:28:48 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m = grades.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                       value _1 is not a member\
    \ of Float\n\e[31m\e[31m-- Error: /tmp/tmpejpzzevs.scala:28:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m =\
    \ grades.sortBy(_._1)\n\e[31m\e[31m   |\e[0m                                 \
    \                  ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpejpzzevs.scala:29:50\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByValue\e[0m = grades.sortBy(_._2)\n\e[31m\e[31m   |\e[0m    \
    \                                            ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                 value _2 is not a member of Float\n\e[31m\e\
    [31m-- Error: /tmp/tmpejpzzevs.scala:29:53 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValue\e[0m\
    \ = grades.sortBy(_._2)\n\e[31m\e[31m   |\e[0m                               \
    \                      ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and\
    \ \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match\
    \ type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in\
    \ \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpejpzzevs.s"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float,\
    \ String]()){\n            case (acc, grade) => acc + (grade -> (acc.getOrElse(grade,\
    \ \"\") + s\"${grade}\"))\n        }\n        val gradesList : List[String] =\
    \ gradesMap.filter(_._2 != \"0.0\").map(_._2).sorted\n        gradesList.take(gradesList.size\
    \ - 1).map(_ + \"+\").mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpedu44an3.scala:30:82 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesList\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m] = gradesMap.filter(_._2 != \e[31m\"0.0\"\e[0m).map(_._2).sorted\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sorted is not a member of scala.collection.mutable.Iterable[String]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpedu44an3.scala:31:66 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        gradesList.take(gradesList.size - \e[31m1\e[0m).map(_\
    \ + \e[31m\"+\"\e[0m).mkString(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n    \
    \    val gradesLength = gradesSorted.length\n        val gradesSum = gradesSorted.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesSumOfSquares\
    \ = gradesSorted.map(x => x * x).sum\n        val gradesAverageOfSquares = gradesSumOfSquares\
    \ / gradesLength\n        val gradesSumOfSquaresOfDifferences = gradesSorted.map(x\
    \ => x - gradesAverage).sum\n        val gradesAverageOfSquaresOfDifferences =\
    \ gradesSumOfSquaresOfDifferences / gradesLength\n        val gradesSumOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x - gradesAverageOfSquares).sum\n        val gradesAverageOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfDifferences / gradesLength\n        val gradesSumOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x - gradesAverageOfSquaresOfSquares).sum\n \
    \       val gradesAverageOfSquaresOfSquaresOfSquaresOfDifferences = gradesSumOfSquaresOfSquaresOfSquaresOfDifferences\
    \ / gradesLength\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquares).sum\n\
    \        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences =\
    \ gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesLength\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquaresOfSquares).sum\n\
    \        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesLength\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x * x * x * x - gradesAverageOfSquaresOfSquares\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7i9s2eov.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7i9s2eov.scala:37:98\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSumOfSquaresOfSquaresOfSquaresOfDifferences\e[0m = gradesSorted.map(\e\
    [36mx\e[0m => x * x * x - gradesAverageOfSquaresOfSquares).sum\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                              Not found: gradesAverageOfSquaresOfSquares\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp7i9s2eov.scala:37:134 ----------------------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresOfSquaresOfSquaresOfDifferences\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => x * x * x - gradesAverageOfSquaresOfSquares).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e\
    [35mIntIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e\
    [0m \e[35mByteIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type\
    \ Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e\
    [0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7i9s2eov.scala:39:111\
    \ -----------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\e[0m = gradesSorted.map(\e\
    [36mx\e[0m => x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquares).sum\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not fou"
  stdout: ''
  timestamp: 1660010212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSet = grades.toSet\n        val gradesSetIterator\
    \ = grades.iterator\n        val gradesSetIteratorNext = gradesSetIterator.next\n\
    \        val gradesSetIteratorNextAsFloat = gradesSetIteratorNext.toFloat\n  \
    \      val gradesSetIteratorNextAsInt = gradesSetIteratorNext.toInt\n        val\
    \ gradesSetIteratorNextAsLong = gradesSetIteratorNext.toLong\n        val gradesSetIteratorNextAsDouble\
    \ = gradesSetIteratorNext.toDouble\n        val gradesSetIteratorNextAsFloat =\
    \ gradesSetIteratorNext.toFloat\n        val gradesSetIteratorNextAsInt = gradesSetIteratorNext.toInt\n\
    \        val gradesSetIteratorNextAsLong = gradesSetIteratorNext.toLong\n    \
    \    val gradesSetIteratorNextAsDouble = gradesSetIteratorNext.toDouble\n    \
    \    val gradesSetIteratorNextAsFloat = gradesSetIteratorNext.toFloat\n      \
    \  val gradesSetIteratorNextAsInt = gradesSetIteratorNext.toInt\n        val gradesSetIteratorNextAsLong\
    \ = gradesSetIteratorNext.toLong\n        val gradesSetIteratorNextAsDouble =\
    \ gradesSetIteratorNext.toDouble\n        val gradesSetIteratorNextAsFloat = gradesSetIteratorNext.toFloat\n\
    \        val gradesSetIteratorNextAsInt = gradesSetIteratorNext.toInt\n      \
    \  val gradesSetIteratorNextAsLong = gradesSetIteratorNext.toLong\n        val\
    \ gradesSetIteratorNextAsDouble = gradesSetIteratorNext.toDouble\n        val\
    \ gradesSetIteratorNextAsFloat = gradesSetIteratorNext.toFloat\n        val gradesSetIteratorNextAsInt\
    \ = gradesSetIteratorNext.toInt\n        val gradesSetIteratorNextAsLong = gradesSetIteratorNext.toLong\n\
    \        val gradesSetIteratorNextAsDouble = gradesSetIteratorNext.toDouble\n\
    \        val gradesSetIteratorNextAsFloat = gradesSetIteratorNext.toFloat\n  \
    \      val gradesSetIteratorNextAsInt = gradesSetIteratorNext.toInt\n        val\
    \ gradesSetIteratorNextAsLong = gradesSetIteratorNext.toLong\n        val gradesSetIteratorNextAsDouble\
    \ = gradesSetIteratorNext.toDouble\n        val gradesSetIteratorNextAsFloat =\
    \ gradesSetIteratorNext.toFloat\n\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo7v9drv_.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSetIteratorNextAsFloat\e\
    [0m = gradesSetIteratorNext.toFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSetIteratorNextAsFloat is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSetIteratorNextAsFloat\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo7v9drv_.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesSetIteratorNextAsInt\e\
    [0m = gradesSetIteratorNext.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSetIteratorNextAsInt is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSetIteratorNextAsInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo7v9drv_.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesSetIteratorNextAsLong\e\
    [0m = gradesSetIteratorNext.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSetIteratorNextAsLong is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSetIteratorNextAsLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo7v9drv_.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSetIteratorNextAsDouble\e\
    [0m = gradesSetIteratorNext.toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSetIteratorNextAsDouble is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSetIteratorNextAsDouble\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloade"
  stdout: ''
  timestamp: 1660010210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = Map(\n    \
    \        4.0 -> \"A+\",\n            3.7 -> \"A\",\n            3.3 -> \"A-\"\
    ,\n            3.0 -> \"B+\",\n            2.7 -> \"B\",\n            2.3 -> \"\
    B-\",\n            2.0 -> \"C+\",\n            1.7 -> \"C\",\n            1.3\
    \ -> \"C-\",\n            1.0 -> \"D+\",\n            0.7 -> \"D\",\n        \
    \    0.0 -> \"D-\"\n        )\n        grades.map(grade => gradesMap(grade))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbb8katoo.scala:28:12\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[31m4.0\e[0m ->\
    \ \e[31m\"A+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbb8katoo.scala:29:12 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[31m3.7\e[0m -> \e[31m\"A\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbb8katoo.scala:30:12 --------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m            \e[31m3.3\e[0m -> \e[31m\"A-\"\e[0m,\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (\e[1m\e[31mDouble\e\
    [0m, String)\n\e[31m   |\e[0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbb8katoo.scala:31:12\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[31m3.0\e[0m ->\
    \ \e[31m\"B+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbb8katoo.scala:32:12 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[31m2.7\e[0m -> \e[31m\"B\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ ava"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum).toMap\n        val gradesReversed = grades.reverse\n        val gradesSum\
    \ = gradesReversed.foldLeft(0f) { (sum, grade) => sum + grade }\n        val gradesAverage\
    \ = gradesSum / grades.size\n        val gradesMapReversed = gradesMap.mapValues(_.toString.toUpperCase)\n\
    \        val gradesMapReversedReversed = gradesMapReversed.toSeq.reverse.map(_._2)\n\
    \        val gradesMapReversedReversedReversed = gradesMapReversedReversed.toSeq.reverse.map(_._1)\n\
    \        val gradesMapReversedReversedReversedReversed = gradesMapReversedReversedReversed.toSeq.reverse.map(_._0)\n\
    \        val gradesMapReversedReversedReversedReversedReversed = gradesMapReversedReversedReversedReversed.toSeq.reverse.map(_._1)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversed = gradesMapReversedReversedReversedReversedReversed.toSeq.reverse.map(_._2)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversed.toSeq.reverse.map(_._3)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversed.toSeq.reverse.map(_._4)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversed.toSeq.reverse.map(_._5)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversed.toSeq.reverse.map(_._6)\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.toSeq.reverse.map(_._7)\n\
    \        val gradesMapReversedReversedReversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi376jils.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi376jils.scala:33:94\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapReversedReversedReversed\e[0m = gradesMapReversedReversed.toSeq.reverse.map(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                    ^^^^\e[0m\n\e[31m   |\e[0m              \
    \                        value _1 is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpi376jils.scala:34:110 -----------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedReversedReversedReversed\e\
    [0m = gradesMapReversedReversedReversed.toSeq.reverse.map(_._0)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                         ^^^^\e[0m\n\e[31m   |\e[0m         \
    \                            value _0 is not a member of Nothing\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpi376jils.scala:35:126 -----------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedReversedReversedReversedReversed\e\
    [0m = gradesMapReversedReversedReversedReversed.toSeq.reverse.map(_._1)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                            ^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue _1 is not a member of Nothing, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import concurrent.duration.durationToPair\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi376jils.scala:36:142\
    \ -----------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapReversedReversedReversedReversedReversedReversed\e[0m = gradesMapReversedReversedReversedReversedReversed.toSeq.reverse.map(_._2)\n\
    \e[31m\e[31m   |"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesMap.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedReversed\
    \ = gradesSortedByKeyReversed.reverse\n        val gradesSortedByValueReversedReversed\
    \ = gradesSortedByValueReversed.reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp74a06_b1.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmp74a06_b1.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp74a06_b1.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010215
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => x -> \"A+\")\n        val gradesMap2 : Map[Float, String] = grades.map(x\
    \ => x -> \"B\")\n        val gradesMap3 : Map[Float, String] = grades.map(x =>\
    \ x -> \"C+\")\n        val gradesMap4 : Map[Float, String] = grades.map(x =>\
    \ x -> \"C\")\n        val gradesMap5 : Map[Float, String] = grades.map(x => x\
    \ -> \"A-\")\n        val gradesMap6 : Map[Float, String] = grades.map(x => x\
    \ -> \"B+\")\n        val gradesMap7 : Map[Float, String] = grades.map(x => x\
    \ -> \"B\")\n        val gradesMap8 : Map[Float, String] = grades.map(x => x ->\
    \ \"B-\")\n        val gradesMap9 : Map[Float, String] = grades.map(x => x ->\
    \ \"C+\")\n        val gradesMap10 : Map[Float, String] = grades.map(x => x ->\
    \ \"C\")\n        val gradesMap11 : Map[Float, String] = grades.map(x => x ->\
    \ \"C-\")\n        val gradesMap12 : Map[Float, String] = grades.map(x => x ->\
    \ \"D+\")\n        val gradesMap13 : Map[Float, String] = grades.map(x => x ->\
    \ \"D\")\n        val gradesMap14 : Map[Float, String] = grades.map(x => x ->\
    \ \"D-\")\n        val gradesMap15 : Map[Float, String] = grades.map(x => x ->\
    \ \"E\")\n        val gradesMap16 : Map[Float, String] = grades.map(x => x ->\
    \ \"F\")\n        val gradesMap17 : Map[Float, String] = grades.map(x => x ->\
    \ \"G\")\n        val gradesMap18 : Map[Float, String] = grades.map(x => x ->\
    \ \"H\")\n        val gradesMap19 : Map[Float, String] = grades.map(x => x ->\
    \ \"I\")\n        val gradesMap20 : Map[Float, String] = grades.map(x => x ->\
    \ \"J\")\n        val gradesMap21 : Map[Float, String] = grades.map(x => x ->\
    \ \"K\")\n        val gradesMap22 : Map[Float, String] = grades.map(x => x ->\
    \ \"L\")\n        val gradesMap23 : Map[Float\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf1v1w0z0.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpf1v1w0z0.scala:27:55 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m,\
    \ \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => x -> \e[31m\"A+\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[(Float, String)]\n\
    \e[31m   |\e[0m                         Required: collection.mutable.Map[Float,\
    \ String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf1v1w0z0.scala:28:56\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"B\"\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    List[(Float, String)]\n\e[31m   |\e[0m           \
    \              Required: collection.mutable.Map[Float, String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf1v1w0z0.scala:29:56 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => x -> \e\
    [31m\"C+\"\e[0m)\n\e[31m\e[31m   |\e[0m                                      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Found:    List[(Float, String)]\n\e[31m   |\e[0m                       \
    \  Required: collection.mutable.Map[Float, String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpf1v1w0z0.scala:30:56 --------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1660010218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar)\n\
    \        val gradesMap2 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap3 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap4 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap5 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap6 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap7 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap8 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \        val gradesMap9 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.toChar).mapValues(_.toString.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnpapmbzv.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpnpapmbzv.scala:27:59 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_ / \e[31m10\e\
    [0m).mapValues(_.toInt).mapValues(_.toString.toChar)\n\e[31m\e[31m   |\e[0m  \
    \                                                       ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue toInt is not a member of List[Float], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpnpapmbzv.scala:27:87 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toString.toChar)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \      value toChar is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpnpapmbzv.scala:28:60 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m = grades.groupBy(_ / \e[31m10\e\
    [0m).mapValues(_.toInt).mapValues(_.toString.toChar).mapValues(_.toString.toChar)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0"
  stdout: ''
  timestamp: 1660010219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => (x, \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(x\
    \ => (x, \"A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(x\
    \ => (x, \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(x\
    \ => (x, \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(x\
    \ => (x, \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(x\
    \ => (x, \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(x\
    \ => (x, \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(x\
    \ => (x, \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(x\
    \ => (x, \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(x\
    \ => (x, \"D+\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(x\
    \ => (x, \"D\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(x\
    \ => (x, \"D-\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(x\
    \ => (x, \"E\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap20 : Map[Float, String] = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap21 : Map[Float, String] = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap22\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpddjbl76_.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpddjbl76_.scala:27:45 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m,\
    \ \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"A+\"\e[0m)).toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpddjbl76_.scala:28:46 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"\
    A\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                                      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \          Found:    Map[Float, String]\n\e[31m   |\e[0m                     \
    \    Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpddjbl76_.scala:29:46 --------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"\
    A-\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                                     \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Found:    Map[Float, String]\n\e[31m   |\e[0m                   \
    \      Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m"
  stdout: ''
  timestamp: 1660010218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys\
    \ = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = grades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzg28xi_j.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeys.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzg28xi_j.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzg28xi_j.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeys.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzg28xi_j.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of t"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedWithKeys\
    \ = gradesSortedByKeyReversed.map(_._1)\n        val gradesSortedByValueReversedWithKeys\
    \ = gradesSortedByValueReversed.map(_._2)\n        val gradesSortedByKeyReversedWithValues\
    \ = gradesSortedByKeyReversed.map(_._2)\n        val gradesSortedByKeyReversedWithValuesReversed\
    \ = gradesSortedByKeyReversed.map(_._1)\n        val gradesSortedByKeyReversedWithValuesReversedWithKeys\
    \ = gradesSortedByKeyReversed.map(_._1)\n        val gradesSortedByValueReversedWithValuesReversedWithKeys\
    \ = gradesSortedByValueReversed.map(_._1)\n        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversed\
    \ = gradesSortedByKeyReversed.map(_._1)\n        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByKeyReversed.map(_._1)\n        val gradesSortedByValueReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByValueReversed.map(_._1)\n        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByKeyReversed.map(_._1)\n        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByValueReversed.map(_._1)\n        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByKeyReversed.map(_._1)\n        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByValueReversed.map(_._1)\n        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedByKeyReversed.map(_._1)\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp2kziaj5_.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp2kziaj5_.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\e\
    [0m = gradesSortedByValueReversed.map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp2kziaj5_.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\e\
    [0m = gradesSortedByKeyReversed.map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithValuesReversedWithKeys\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp2kziaj5_.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1660010214
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa6vonc2e.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesL"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toString -> x)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedReversed\
    \ = gradesMapSorted.reverse.groupBy(_._1)\n        val gradesMapSortedGroupedReversedSorted\
    \ = gradesMapSortedGroupedReversed.sortBy(_._1)\n        val gradesMapSortedGroupedReversedSortedGrouped\
    \ = gradesMapSortedGroupedReversedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedReversedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedSortedGrouped.sortBy(_._1)\n        val gradesMapSortedGroupedReversedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedSortedGroupedSorted.groupBy(_._1)\n        val\
    \ gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedReversedSortedGroupedSortedGrouped.sortBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGroupe\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu9vcvy9m.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu9vcvy9m.scala:31:82\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSortedGroupedReversedSorted\e[0m = gradesMapSortedGroupedReversed.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      value sortBy is not a member of Map[String, List[(String,\
    \ Float)]]\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu9vcvy9m.scala:36:84 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m = gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35mgradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpu9vcvy9m.scala:38:97\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m = gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                         ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapSortedGroupedReversedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpu9vcvy9m.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41\
    \ |\e"
  stdout: ''
  timestamp: 1660010215
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap2 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap3\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap4 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap5 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap6 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap7\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap8 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap9 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap10 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap11\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap12 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap13 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap14 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap15 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap16\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap17 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap18 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap19 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap20 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap21\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap22 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap23 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap24 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap25 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap26\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps3nc372o.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmps3nc372o.scala:54:5 ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesSum = gradesValues.sum\n        val gradesAvg = gradesSum / gradesKeys.size\n\
    \        val gradesDiff = gradesAvg - gradesMap.head._1\n        val gradesDiffInt\
    \ = gradesDiff.toInt\n        val gradesDiffString = gradesDiff.toString.toUpperCase\n\
    \        val gradesDiffStringList = gradesDiffString.split(\"\\\\+\")\n      \
    \  val gradesDiffStringListLength = gradesDiffStringList.length\n        val gradesDiffStringListLength\
    \ = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength\
    \ - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength - 1\n\
    \        val gradesDiffStringListLength = gradesDiffStringListLength - 1\n   \
    \     val gradesDiffStringListLength = gradesDiffStringListLength - 1\n      \
    \  val gradesDiffStringListLength = gradesDiffStringListLength - 1\n        val\
    \ gradesDiffStringListLength = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength\
    \ = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength\
    \ - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength - 1\n\
    \        val gradesDiffStringListLength = gradesDiffStringListLength - 1\n   \
    \     val gradesDiffStringListLength = gradesDiffStringListLength - 1\n      \
    \  val gradesDiffStringListLength = gradesDiffStringListLength - 1\n        val\
    \ gradesDiffStringListLength = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength\
    \ = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength\
    \ - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength - 1\n\
    \        val gradesDiffStringListLength = gradesDiffStringListLength - 1\n   \
    \     val gradesDiffStringListLength = gradesDiffStringListLength - 1\n      \
    \  val gradesDiffStringListLength = gradesDiffStringListLength - 1\n        val\
    \ gradesDiffStringListLength = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength\
    \ = gradesDiffStringListLength - 1\n        val gradesDiffStringListLength = gradesDiffStringListLength\
    \ - 1\n        val gradesDiffStringListLength = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyvuagadf.scala:60:40 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mgradesDiffStringListLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyvuagadf.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesDiffStringListLength\e[0m = gradesDiffStringListLength - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesDiffStringListLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesDiffStringListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyvuagadf.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesDiffStringListLength\e\
    [0m = gradesDiffStringListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgradesDiffStringListLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesDiffStringListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyvuagadf.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesDiffStringListLength\e\
    [0m = gradesDiffStringListLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgradesDiffStringListLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesDiffStringListLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] N"
  stdout: ''
  timestamp: 1660010216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp84h3hrak.scala:61:38 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e\
    [31m   |\e[0m                                      expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp84h3hrak.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesKeysSortedLength\e[0m = gradesKeysSorted.length\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp84h3hrak.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp84h3hrak.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp84h3hrak.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0"
  stdout: ''
  timestamp: 1660010216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedReversed\
    \ = gradesSortedByKeyReversed.reverse\n        val gradesSortedByValueReversedReversed\
    \ = gradesSortedByValueReversed.reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqo5xye8d.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpqo5xye8d.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpqo5xye8d.scala:40:104 --------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpqo5xye8d.scala:41:112 --------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedRev"
  stdout: ''
  timestamp: 1660010215
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grade\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekhyn9nk.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekhyn9nk.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSet\e[0m = grades.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSet is already defined as \e[33mvalue\e[0m \e[35mgradesSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpekhyn9nk.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSeq\e[0m = grades.toSeq\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesSeq\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSeq\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekhyn9nk.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesIter\e[0m = grades.iterator\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesIter is already defined as \e[33mvalue\e[0m \e[35mgradesIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpekhyn9nk.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that over"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesLength = gradesMap.values.toList.size\n        val gradesMin = gradesMap.values.min\n\
    \        val gradesMax = gradesMap.values.max\n        val gradesSum = gradesMap.values.sum\n\
    \        val gradesMean = gradesMap.values.mean\n        val gradesMedian = gradesMap.values.median\n\
    \        val gradesVariance = gradesMap.values.variance\n        val gradesStandardDeviation\
    \ = gradesMap.values.standardDeviation\n        val gradesStandardError = gradesMap.values.standardError\n\
    \        val gradesSkew = gradesMap.values.skewness\n        val gradesKurtosis\
    \ = gradesMap.values.kurtosis\n        val gradesMedianAbsoluteDeviation = gradesMap.values.medianAbsoluteDeviation\n\
    \        val gradesMedianAbsoluteError = gradesMap.values.medianAbsoluteError\n\
    \        val gradesMedianSquaredDeviation = gradesMap.values.medianSquaredDeviation\n\
    \        val gradesMedianQuantile = gradesMap.values.medianQuantile\n        val\
    \ gradesMedianKurtosis = gradesMap.values.medianKurtosis\n        val gradesMedianRelativeDeviation\
    \ = gradesMap.values.medianRelativeDeviation\n        val gradesMedianRelativeError\
    \ = gradesMap.values.medianRelativeError\n        val gradesMedianTendency = gradesMap.values.medianTendency\n\
    \        val gradesMedianAbsoluteTendency = gradesMap.values.medianAbsoluteTendency\n\
    \        val gradesMedianRelativeTendency = gradesMap.values.medianRelativeTendency\n\
    \        val gradesMedianKurtosisTendency = gradesMap.values.medianKurtosisTendency\n\
    \        val gradesMedianAbsoluteKurtosisTendency = gradesMap.values.medianAbsoluteKurtosisTendency\n\
    \        val gradesMedianRelativeKurtosisTendency = gradesMap.values.medianRelativeKurtosisTendency\n\
    \        val gradesMedianTendencySkew = gradesMap.values.medianTend\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpalb_3eg3.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpalb_3eg3.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedReversed\
    \ = gradesSortedByKeyReversed.reverse\n        val gradesSortedByValueReversedReversed\
    \ = gradesSortedByValueReversed.reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmptrdb7bv0.scala:44:11 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmptrdb7bv0.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptrdb7bv0.scala:42:12 ---------------------------\e[0m\e[0m\n\e\
    [31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e"
  stdout: ''
  timestamp: 1660010216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedKeys = gradesMapSorted.keys.toList\n\
    \        val gradesMapSortedValues = gradesMapSorted.values.toList\n        val\
    \ gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9_uaw2l9.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp9_uaw2l9.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeys.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9_uaw2l9.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9_uaw2l9.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeys.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9_uaw2l9.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapValuesSorted = gradesMapValues.sortBy(x => x)\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptkaxz00v.scala:59:41 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptkaxz00v.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapValuesSortedLength\e[0m = gradesMapValuesSorted.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptkaxz00v.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptkaxz00v.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmptkax"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n    \
    \    val gradesSum = gradesSorted.sum\n        val gradesCount = gradesSorted.size\n\
    \        val gradesAverage = gradesSum / gradesCount\n        val gradesSumOfSquares\
    \ = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresAverage =\
    \ gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares\
    \ / gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares /\
    \ gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n\
    \        val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n  \
    \      val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n    \
    \    val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n      \
    \  val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n        val\
    \ gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage\
    \ = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage =\
    \ gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares\
    \ / gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares /\
    \ gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n\
    \        val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n  \
    \      val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n    \
    \    val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n      \
    \  val gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n        val\
    \ gradesSumOfSquaresAverage = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage\
    \ = gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage =\
    \ gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverage = gradesSumOfSquares\
    \ / gradesCount\n        \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt4vinvkb.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAverage\e\
    [0m = gradesSumOfSquares / gradesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAverage is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSumOfSquaresAverage\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt4vinvkb.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAverage\e\
    [0m = gradesSumOfSquares / gradesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAverage is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSumOfSquaresAverage\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt4vinvkb.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAverage\e\
    [0m = gradesSumOfSquares / gradesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAverage is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSumOfSquaresAverage\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt4vinvkb.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAverage\e\
    [0m = gradesSumOfSquares / gradesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAverage is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSumOfSquaresAverage\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods mu"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesValuesWithZero = gradesValues.map(_+0.0).toList\n        val gradesValuesWithOne\
    \ = gradesValues.map(_+1.0).toList\n        val gradesValuesWithTwo = gradesValues.map(_+2.0).toList\n\
    \        val gradesValuesWithThree = gradesValues.map(_+3.0).toList\n        val\
    \ gradesValuesWithFour = gradesValues.map(_+4.0).toList\n        val gradesValuesWithFive\
    \ = gradesValues.map(_+5.0).toList\n        val gradesValuesWithSix = gradesValues.map(_+6.0).toList\n\
    \        val gradesValuesWithSeven = gradesValues.map(_+7.0).toList\n        val\
    \ gradesValuesWithEight = gradesValues.map(_+8.0).toList\n        val gradesValuesWithNine\
    \ = gradesValues.map(_+9.0).toList\n        val gradesValuesWithTen = gradesValues.map(_+10.0).toList\n\
    \        val gradesValuesWithEleven = gradesValues.map(_+11.0).toList\n      \
    \  val gradesValuesWithTwelve = gradesValues.map(_+12.0).toList\n        val gradesValuesWithOneHundred\
    \ = gradesValues.map(_+100.0).toList\n        val gradesValuesWithOneThousand\
    \ = gradesValues.map(_+100000.0).toList\n        val gradesValuesWithOneMillion\
    \ = gradesValues.map(_+10000000.0).toList\n        val gradesValuesWithOneBillion\
    \ = gradesValues.map(_+1000000000.0).toList\n        val gradesValuesWithOneTrillion\
    \ = gradesValues.map(_+10000000000000.0).toList\n        val gradesValuesWithOneQuadrillion\
    \ = gradesValues.map(_+1000000000000000.0).toList\n        val gradesValuesWithOneQuintillion\
    \ = gradesValues.map(_+100000000000000000.0).toList\n        val gradesValuesWithOneBillion\
    \ = gradesValues.map(_+10000000000000000000.0).toList\n        val gradesValuesWithOneTrillion\
    \ = gradesValues.map(_+1000000000000000000000.0).toList\n        val gradesValuesWithOneQuadri\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpax3xxi3o.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpax3xxi3o.scala:50:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesValuesWithOneBillion\e[0m = gradesValues.map(_+\e[31m10000000000000000000.0\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesWithOneBillion is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesWithOneBillion\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpax3xxi3o.scala:51:12 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesWithOneTrillion\e\
    [0m = gradesValues.map(_+\e[31m1000000000000000000000.0\e[0m).toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesWithOneTrillion is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesWithOneTrillion\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- Error: /tmp/tmpax3xxi3o.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpax3xxi3o.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     "
  stdout: ''
  timestamp: 1660010216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapKeysLength = gradesMapKeysLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValues\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9s1g167u.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9s1g167u.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysLength\e[0m\
    \ = gradesMapKeysLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgradesMapKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp9s1g167u.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9s1g167u.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9s1g167u.scala"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesValues.length\n        val gradesSum = gradesValues.foldLeft(0.0f)\
    \ { (sum, grade) => sum + grade }\n        val gradesAverage = gradesSum / gradesLength\n\
    \        val gradesDiff = gradesAverage - grades\n        val gradesDiffLength\
    \ = gradesDiff.length\n        val gradesDiffSum = gradesDiff.foldLeft(0.0f) {\
    \ (sum, grade) => sum + grade }\n        val gradesDiffAverage = gradesDiffSum\
    \ / gradesDiffLength\n        val gradesDiffDiff = gradesDiffAverage - gradesAverage\n\
    \        val gradesDiffDiffLength = gradesDiffDiff.length\n        val gradesDiffDiffSum\
    \ = gradesDiffDiff.foldLeft(0.0f) { (sum, grade) => sum + grade }\n        val\
    \ gradesDiffDiffAverage = gradesDiffDiffSum / gradesDiffDiffLength\n        val\
    \ gradesDiffDiffDiff = gradesDiffDiffAverage - gradesAverage\n        val gradesDiffDiffDiffLength\
    \ = gradesDiffDiffDiff.length\n        val gradesDiffDiffDiffSum = gradesDiffDiffDiff.foldLeft(0.0f)\
    \ { (sum, grade) => sum + grade }\n        val gradesDiffDiffDiffAverage = gradesDiffDiffDiffSum\
    \ / gradesDiffDiffDiffLength\n        val gradesDiffDiffDiffDiff = gradesDiffDiffDiffAverage\
    \ - gradesAverage\n        val gradesDiffDiffDiffDiffLength = gradesDiffDiffDiffDiff.length\n\
    \        val gradesDiffDiffDiffDiffSum = gradesDiffDiffDiffDiff.foldLeft(0.0f)\
    \ { (sum, grade) => sum + grade }\n        val gradesDiffDiffDiffDiffAverage =\
    \ gradesDiffDiffDiffDiffSum / gradesDiffDiffDiffDiffLength\n        val gradesDiffDiffDiffDiffDiff\
    \ = gradesDiffDiffDiffDiffAverage - gradesAverage\n        val gradesDiffDiffDiffDiffDiffLength\
    \ = gradesDiffDiffDiffDiffDiff.length\n        val gradesDiffDiffDiffDiffDiffSum\
    \ = gradesDiffDiffDiffDiffDiff.foldLeft(0.0f) { (sum, grade) => sum + grade }\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpj0h_wjbj.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E134] Type Error: /tmp/tmpj0h_wjbj.scala:33:39 -----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesDiff\e[0m = gradesAverage\
    \ - grades\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e\
    [0m in \e[33mclass\e[0m \e[35mFloat\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Float\n\
    \e[31m   |\e[0m (x: Int): Float\n\e[31m   |\e[0m (x: Char): Float\n\e[31m   |\e\
    [0m (x: Short): Float\n\e[31m   |\e[0m (x: Byte): Float\n\e[31m   |\e[0mmatch\
    \ arguments ((grades : List[Float]))\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpj0h_wjbj.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => x -> \"A+\".toUpperCase).\n            foldLeft(Map[Float, String]())((map,\
    \ x) => map.updated(x, map.getOrElse(x, \"\") + \"A\"))\n        val gradesMap2\
    \ = grades.map(x => x -> \"B\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"B\"))\n   \
    \     val gradesMap3 = grades.map(x => x -> \"C\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"C\"))\n   \
    \     val gradesMap4 = grades.map(x => x -> \"D\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"D\"))\n   \
    \     val gradesMap5 = grades.map(x => x -> \"E\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"E\"))\n   \
    \     val gradesMap6 = grades.map(x => x -> \"F\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"F\"))\n   \
    \     val gradesMap7 = grades.map(x => x -> \"G\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"G\"))\n   \
    \     val gradesMap8 = grades.map(x => x -> \"H\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"H\"))\n   \
    \     val gradesMap9 = grades.map(x => x -> \"I\".toUpperCase).\n            foldLeft(Map[Float,\
    \ String]())((map, x) => map.updated(x, map.getOrElse(x, \"\") + \"I\"))\n   \
    \     val gradesMap10 = grades.map(x => x -> \"J\".toUpperCase).\n           \
    \ foldLeft(Map[Float, String]())((map, x) => map.updated(x, map.getOrElse(x, \"\
    \") + \"J\"))\n        val gradesMap11 = grades.map(x => x -> \"K\".\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfoz5c0t0.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpfoz5c0t0.scala:28:67 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m            foldLeft(Map[\e[35mFloat\e[0m, \e[35mString\e[0m]())((\e[36mmap\e\
    [0m, \e[36mx\e[0m) => map.updated(x, map.getOrElse(x, \e[31m\"\"\e[0m) + \e[31m\"\
    A\"\e[0m))\n\e[31m\e[31m   |\e[0m                                            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \           Found:    (x : (Float, String))\n\e[31m   |\e[0m                 \
    \                        Required: Float\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpfoz5c0t0.scala:28:84 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            foldLeft(Map[\e[35mFloat\e[0m, \e[35mString\e\
    [0m]())((\e[36mmap\e[0m, \e[36mx\e[0m) => map.updated(x, map.getOrElse(x, \e[31m\"\
    \"\e[0m) + \e[31m\"A\"\e[0m))\n\e[31m\e[31m   |\e[0m                         \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                         Found:    (x : (Float, String))\n\e\
    [31m   |\e[0m                                         Required: Float\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfoz5c0t0.scala:30:67 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            foldLeft(Map[\e[35mFloat\e[0m, \e[35mString\e\
    [0m]())((\e[36mmap\e[0m, \e[36mx\e[0m) => map.updated(x, map.getOrElse(x, \e[31m\"\
    \"\e[0m) + \e[31m\"B\"\e[0m))\n\e[31m\e[31m   |\e[0m                         \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                              Found:    (x : (Float, String))\n\e[31m   |\e[0m\
    \                                         Required: Float\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Misma"
  stdout: ''
  timestamp: 1660010225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysIterator = gradesMapSortedReversedKeys.iterator\n\
    \        val gradesMapSortedReversedValuesIterator = gradesMapSortedReversedValues.iterator\n\
    \        val gradesMapSortedReversedKeysIteratorNext = gradesMapSortedReversedKeysIterator.next\n\
    \        val gradesMapSortedReversedValuesIteratorNext = gradesMapSortedReversedValuesIterator.next\n\
    \        val gradesMapSortedReversedKeysIteratorNextValue = gradesMapSortedReversedKeysIteratorNext._1\n\
    \        val gradesMapSortedReversedValuesIteratorNextValue = gradesMapSortedReversedValuesIteratorNext._1\n\
    \        val gradesMapSortedReversedKeysIteratorNextKeyValue = gradesMapSortedReversedKeysIteratorNext._2\n\
    \        val gradesMapSortedReversedValuesIteratorNextKeyValue = gradesMapSortedReversedValuesIteratorNext._2\n\
    \        val gradesMapSortedReversedKeysIteratorNextKeyValueValue = gradesMapSortedReversedKeysIteratorNext._3\n\
    \        val gradesMapSortedReversedValuesIteratorNextKeyValueValue = gradesMapSortedReversedValuesIteratorNext._3\n\
    \        val gradesMapSortedReversedKeysIteratorNextKeyValueValueValue = gradesMapSortedReversedKeysIteratorNext._4\n\
    \        val gradesMapSortedReversedValuesIteratorNextKeyValueValueValue = gradesMapSortedReversedValuesIteratorNext._4\n\
    \        val gradesMapSortedReversedKeysIteratorNextKeyValueValueValueValue =\
    \ gradesMapSortedReversedKeysIteratorNext._5\n        val gradesMapSortedReversedValuesIteratorNextKeyValueValueValueValue\
    \ = gradesMapSortedReversedValuesIteratorNext._5\n        val gradesMapSortedReversedKeysIteratorNextKeyValueValueValueValueValue\
    \ = gradesMapSortedReversedKeysIteratorNext._6\n        val gradesMapSortedReversedValuesIteratorNextKeyValueValueValueValueValue\
    \ = gradesMapSortedReversedValuesIteratorNext._6\n        val gradesMapSortedReversedKeysIteratorNextKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiazzxzd6.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpiazzxzd6.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpiazzxzd6.scala:49:5 ---------------------\e[0m\e[0m\n\
    \e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMap = grades.sortBy(x => x)\n        val gradesSortedMapReversed\
    \ = gradesSortedMap.reverse\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeys = gradesSortedMapReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValues\
    \ = gradesSortedMapReversedMapWithKeys.map(x => (x._1, x._2)).toMap\n        val\
    \ gradesSortedMapReversedMapWithKeysAndValuesReversed = gradesSortedMapReversedMapWithKeysAndValues.reverse\n\
    \        val gradesSortedMapReversedMapWithKeysAndValuesReversedMap = gradesSortedMapReversedMapWithKeysAndValuesReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeys\
    \ = gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeys.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValues\
    \ = gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValues.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversed\
    \ = gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMap\
    \ = gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMapWithKeys.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMapWithKeysAndValues\
    \ = gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMapWithKeysAndValues.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMapWithKeysAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6f1a648u.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6f1a648u.scala:30:77\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReversedMap\e[0m = gradesSortedMapReversed.map(\e[36mx\e[0m\
    \ => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m                              \
    \                                             ^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                  value _1 is not a member of Float\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp6f1a648u.scala:30:83 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedMap\e\
    [0m = gradesSortedMapReversed.map(\e[36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \      value _2 is not a member of Float\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6f1a648u.scala:33:110 -----------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedMapWithKeysAndValuesReversed\e\
    [0m = gradesSortedMapReversedMapWithKeysAndValues.reverse\n\e[31m\e[31m   |\e\
    [0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Nothing, Nothing], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordering.ordered\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp6f1a648u.scala:35:77 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeys\e\
    [0m = gradesSortedMapReversedMapWithKeysAndValuesReversedMapWithKeys.map(\e[36mx\e\
    [0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m                            \
    \   "
  stdout: ''
  timestamp: 1660010229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGrade\
    \ = grades.sortBy(_)\n        val gradesSortedByGradeWithKeys = gradesSortedByGrade.zipWithIndex\n\
    \        val gradesSortedByGradeWithKeysReversed = gradesSortedByGradeWithKeys.reverse\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeys = gradesSortedByGradeWithKeysReversed.zipWithIndex\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversed = gradesSortedByGradeWithKeysReversedWithKeys.reverse\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeys = gradesSortedByGradeWithKeysReversedWithKeysReversed.zipWithIndex\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversed\
    \ = gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeys.reverse\n    \
    \    val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeys\
    \ = gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversed.zipWithIndex\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed\
    \ = gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeys.reverse\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeys\
    \ = gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed.zipWithIndex\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed\
    \ = gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeys.reverse\n\
    \        val gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed\
    \ = gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3dd9295v.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- Error: /tmp/tmp3dd9295v.scala:28:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGrade\e[0m\
    \ = grades.sortBy(_)\n\e[31m\e[31m   |\e[0m                                  \
    \                ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for Any..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[Any].\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3dd9295v.scala:39:130 -----------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed\e\
    [0m = gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKey\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesSortedByGradeWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKey\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3dd9295v.scala:40:5\
    \ ---------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1660010231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toString -> x)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26 = grades\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi934_aab.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"D\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"E\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"G\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"H\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"I\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"J\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"K\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"L\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"M\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"N\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"O\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"P\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"Q\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"R\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"S\")).toMap\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8m5wvid.scala:27:45\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => (grade -> \e[31m\"A+\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8m5wvid.scala:28:46 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"B\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8m5wvid.scala:29:46 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"C\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByGrade = grades.sortBy(x => x)\n        val gradesSortedByGradeReversed\
    \ = gradesSortedByGrade.sortBy(x => -x)\n        val gradesSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedByGradeReversedMapReversed\
    \ = gradesSortedByGradeReversedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedKeys\
    \ = gradesSortedByGradeReversedMapReversed.keys\n        val gradesSortedByGradeReversedMapReversedValues\
    \ = gradesSortedByGradeReversedMapReversed.values\n        val gradesSortedByGradeReversedMapReversedValuesMap\
    \ = gradesSortedByGradeReversedMapReversedValues.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByGradeReversedMapReversedValuesMapReversed = gradesSortedByGradeReversedMapReversedValuesMap.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedValuesMapReversedKeys\
    \ = gradesSortedByGradeReversedMapReversedValuesMapReversed.keys\n        val\
    \ gradesSortedByGradeReversedMapReversedValuesMapReversedValues = gradesSortedByGradeReversedMapReversedValuesMapReversed.values\n\
    \        val gradesSortedByGradeReversedMapReversedValuesMapReversedValuesMap\
    \ = gradesSortedByGradeReversedMapReversedValuesMapReversedValues.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedByGradeReversedMapReversedValuesMapReversedValuesMapReversed\
    \ = gradesSortedByGradeReversedMapReversedValuesMapReversedValuesMap.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedValuesMapReversedValuesMapReversedKeys\
    \ = gradesSortedByGradeReversedMapReversedValuesMapReversedValuesMapReversed.keys\n\
    \        val gradesSortedByGradeReversedMapReversedValuesMapReversedValuesMapReversedValues\
    \ = gradesSortedByGradeReversedMapReversedValuesMapReverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3o8hturz.scala:30:85 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeReversedMap\e\
    [0m = gradesSortedByGradeReversed.map(\e[36mx\e[0m => (x._1, x._2)).toMap\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                         ^^^^\e[0m\n\e[31m   |\e[0m                         \
    \              value _1 is not a member of Float\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp3o8hturz.scala:30:91 ------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeReversedMap\e[0m = gradesSortedByGradeReversed.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                                                    ^^^^\e[0m\n\
    \e[31m   |\e[0m                                       value _2 is not a member\
    \ of Float\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3o8hturz.scala:34:119\
    \ -----------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByGradeReversedMapReversedValuesMap\e[0m = gradesSortedByGradeReversedMapReversedValues.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                    ^^^^\e[0m\n\e[31m   |\e[0mvalue _1 is not a member of Nothing,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import concurrent.duration.durationToPair\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3o8hturz.scala:34:125 -----------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeReversedMapReversedValuesMap\e\
    [0m = gradesSortedByGradeReversedMapReversedValues.map(\e[36mx\e[0m => (x._1,\
    \ x._2)).toMap\n\e[31m\e[31m   |\e[0m                                        \
    \                                                                            \
    \       ^^^^\e[0m\n\e[31m   |\e[0mvalue _2 is not a member of Nothing, but could\
    \ be mad"
  stdout: ''
  timestamp: 1660010231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toInt).zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByIndex = grades.sortWith(_.toFloat\
    \ < _.toFloat)\n        val gradesSortedByValue = grades.sortWith(_.toFloat >\
    \ _.toFloat)\n        val gradesSortedByGrade = grades.sortWith(x => x.toFloat\
    \ < x.toFloat)\n        val gradesSortedByGradeValue = grades.sortWith(x => x.toFloat\
    \ > x.toFloat)\n        val gradesSortedByGradeIndex = grades.sortWith(x => x.toFloat\
    \ < x.toFloat)\n        val gradesSortedByGradeValueIndex = grades.sortWith(x\
    \ => x.toFloat > x.toFloat)\n        val gradesSortedByGradeIndexValue = grades.sortWith(x\
    \ => x.toFloat < x.toFloat)\n        val gradesSortedByGradeIndexIndexValue =\
    \ grades.sortWith(x => x.toFloat > x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat < x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat > x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat < x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat > x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat < x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat > x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat < x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = grades.sortWith(x => x.toFloat > x.toFloat)\n        val gradesSortedByGradeIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkzz41hcb.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpkzz41hcb.scala:30:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByGrade\e[0m = grades.sortWith(\e[36mx\e[0m => x.toFloat <\
    \ x.toFloat)\n\e[31m\e[31m   |\e[0m                                          \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \             Wrong number of parameters, expected: 2\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmpkzz41hcb.scala:31:57 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeValue\e[0m = grades.sortWith(\e\
    [36mx\e[0m => x.toFloat > x.toFloat)\n\e[31m\e[31m   |\e[0m                  \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 2\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpkzz41hcb.scala:32:57 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeIndex\e\
    [0m = grades.sortWith(\e[36mx\e[0m => x.toFloat < x.toFloat)\n\e[31m\e[31m   |\e\
    [0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpkzz41hcb.scala:33:62\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByGradeValueIndex\e[0m = grades.sortWith(\e[36mx\e[0m => x.toFloat\
    \ > x.toFloat)\n\e[31m\e[31m   |\e[0m                                        \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                         Wrong number of parameters, expected: 2\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpkzz41hcb.scala:34:62 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeIndexValue\e\
    [0m = grades.sortWith(\e[36mx\e[0m => x.toF"
  stdout: ''
  timestamp: 1660010229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float,\
    \ String]()){\n            (acc, grade) =>\n                acc + (grade -> (acc.getOrElse(grade,\
    \ \"\") + \"+\"))\n        }\n        val gradesList : List[String] = gradesMap.filter(_._2\
    \ != \"E\").map(_._1).sorted\n        gradesList.reverse.takeWhile(grade => grade\
    \ != \"E\").mkString(\",\")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3wf120jw.scala:31:80 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesList\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m] = gradesMap.filter(_._2 != \e[31m\"E\"\e[0m).map(_._1).sorted\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue sorted is not a member of scala.collection.mutable.Iterable[Float]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3wf120jw.scala:32:68 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        gradesList.reverse.takeWhile(\e[36mgrade\e[0m\
    \ => grade != \e[31m\"E\"\e[0m).mkString(\e[31m\",\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesMap.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedReversed\
    \ = gradesSortedByKeyReversed.reverse\n        val gradesSortedByValueReversedReversed\
    \ = gradesSortedByValueReversed.reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp74a06_b1.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmp74a06_b1.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp74a06_b1.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010215
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedReversed\
    \ = gradesSortedByKeyReversed.reverse\n        val gradesSortedByValueReversedReversed\
    \ = gradesSortedByValueReversed.reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzlmpik62.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmpzlmpik62.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzlmpik62.scala:37:80 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mgradesSortedByKeyReversedReversedReversedReversedReversedReversed\e[0m needs\
    \ type\n\e[31m   |"
  stdout: ''
  timestamp: 1660010228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedWithIndexAndGradeAndLetter = gradesKeysSortedWithIndexAndGrade.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexAndGradeAndLetter = gradesValuesSortedWithIndexAndGrade.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGrade\
    \ = gradesKeysSortedWithIndexAndGradeAndLetter.zipWithIndex.sortBy(x => x._2)\n\
    \        val gradesValuesSortedWithIndexAndGradeAndLetterAndLetterGrade = gradesValuesSortedWithIndexAndGradeAndLetter.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetterGrade\
    \ = gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGrade.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetterGrade\
    \ = gradesValuesSortedWithIndexAndGradeAndLetterAndLetterGrade.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetterGradeAndLetterGrade\
    \ = gradesKeysSortedWithIndexAndGradeAndLetterAndLetterGradeAndLetterGrade.zipWithIndex.sortBy(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexAndGradeAndLetterAnd\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzbgfm9x7.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpzbgfm9x7.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpzbgfm9x7.scala:44:5 ---------------------\e[0m\e[0m\n\
    \e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesMap.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMapKeys\
    \ = gradesSortedByKeyReversedMap.keys\n        val gradesSortedByValueReversedMapValues\
    \ = gradesSortedByValueReversedMap.values\n        val gradesSortedByKeyReversedMapValuesSum\
    \ = gradesSortedByKeyReversedMapValues.sum\n        val gradesSortedByValueReversedMapKeysSum\
    \ = gradesSortedByValueReversedMapKeys.sum\n        val gradesSortedByKeyReversedMapKeysSum\
    \ = gradesSortedByKeyReversedMapKeys.sum\n        val gradesSortedByKeyReversedMapValuesSum\
    \ = gradesSortedByKeyReversedMapValues.sum\n        val gradesSortedByKeyReversedMapValuesSum\
    \ = gradesSortedByKeyReversedMapValues.sum\n        val gradesSortedByKeyReversedMapValuesSum\
    \ = gradesSortedByKeyReversedMapValues.sum\n        val gradesSortedByKeyReversedMapValuesSum\
    \ = gradesSortedByKeyReversedMapValues.sum\n        val gradesSortedByKeyReversedMapValuesSum\
    \ = gradesSortedByKeyReversedMapValues.sum\n        val gradesSortedByKeyReversedMapValuesSum\
    \ = gradesSortedByKeyReversedMapValues.sum\n        val gradesSortedByKeyReversedMapValuesSum\
    \ = gradesSortedByKeyReversedMapValues.sum\n        val gradesSortedByKeyReversedMapValuesSum\
    \ = gradesSortedByKeyReversedMapValues.sum\n        val gradesSortedByKeyReversedMapValuesSum\
    \ = gradesSortedByKeyReversedMapValues.sum\n        val gradesSortedByKeyReversedMapValuesSum\
    \ = gradesSortedByKeyReversedMapValues.sum\n        val gradesSortedByKeyReversedMapValuesSum\
    \ = gradesSortedByKeyReversedMapValues.sum\n        val grades\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt7d1wl4f.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt7d1wl4f.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByKeyReversedMapValuesSum\e[0m = gradesSortedByKeyReversedMapValues.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedMapValuesSum is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedByKeyReversedMapValuesSum\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt7d1wl4f.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByKeyReversedMapValuesSum\e[0m = gradesSortedByKeyReversedMapValues.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedMapValuesSum is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedByKeyReversedMapValuesSum\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt7d1wl4f.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByKeyReversedMapValuesSum\e[0m = gradesSortedByKeyReversedMapValues.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedMapValuesSum is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedByKeyReversedMapValuesSum\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt7d1wl4f.scala:42:12\
    \ ---------------------------\e[0m\e["
  stdout: ''
  timestamp: 1660010231
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.foldLeft(List[String]()){\n            (acc,\
    \ grade) =>\n                val gpa = grade\n                val letterGrade\
    \ = if(gpa > 3.0) \"A+\" else if (gpa > 2.7) \"B\" else if (gpa > 2.3) \"B-\"\
    \ else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"C\" else if (gpa > 1.3) \"\
    C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7) \"D\" else if (gpa > 0.0)\
    \ \"D-\" else \"E\"\n                acc :+ letterGrade\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3cb5l5jw.scala:35)\n\tat Problem.main(tmp3cb5l5jw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString)\n\
    \        val gradesMap2 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap3 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap4 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap5 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap6 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap7 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap8 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap9 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap10 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap11 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap12 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap13 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap14 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap15 = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgkw6lu6o.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpgkw6lu6o.scala:27:59 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_ / \e[31m10\e\
    [0m).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString)\n\e[31m\e[31m\
    \   |\e[0m                                                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue toInt is not a member of List[Float], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpgkw6lu6o.scala:27:78 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toChar).mapValues(_.toString)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toChar is not a member\
    \ of Nothing, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpgkw6lu6o.scala:28:60 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m"
  stdout: ''
  timestamp: 1660010236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toUpperCase)\n\
    \        gradesMap.map(_._2).reverse.map(_ + \"+\").filter(_ != \"-\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxxz6cee0.scala:27:59 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toString.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                                                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxxz6cee0.scala:28:28 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        gradesMap.map(_._2).reverse.map(_ + \e[31m\"\
    +\"\e[0m).filter(_ != \e[31m\"-\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of scala.collection.View[String]\
    \ - did you mean scala.collection.View[String].reversed?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010232
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n\
    \        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesValues\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7lk8k73r.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp7lk8k73r.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp7lk8k73r.scala:45:73 ------------------------\e[0m\e[0m\n\
    \e[31m45 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAReversedValuesValuesValuesValuesValuesMap\e\
    [0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValues.toMap\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesValues\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7lk8k73r.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt)\n\
    \        val gradesMap = gradesMap.toSeq.sortBy(_._1).reverse\n        val gradesMap\
    \ = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n      \
    \  val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val gradesMap = gradesMap.map{case (grade, index) => grade -> gradesMap(index-1)}\n\
    \        val grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeblm9o9b.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeblm9o9b.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMap\e[0m = gradesMap.toSeq.sortBy(_._1).reverse\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesMap is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeblm9o9b.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = gradesMap.map{\e[33mcase\e\
    [0m (grade, index) => grade -> gradesMap(index-\e[31m1\e[0m)}\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeblm9o9b.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = gradesMap.map{\e[33mcase\e\
    [0m (grade, index) => grade -> gradesMap(index-\e[31m1\e[0m)}\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpeblm9o9b.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = gradesMap.map{\e[33mcase\e\
    [0m (grade, index) => grade -> gradesMap(index-\e[31m1\e[0m)}\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => (x, x.toString match {\n            case \"4.0\" => \"A+\"\n            case\
    \ \"3.7\" => \"A\"\n            case \"3.3\" => \"A-\"\n            case \"3.0\"\
    \ => \"B+\"\n            case \"2.7\" => \"B\"\n            case \"2.3\" => \"\
    B-\"\n            case \"2.0\" => \"C+\"\n            case \"1.7\" => \"C\"\n\
    \            case \"1.3\" => \"C-\"\n            case \"1.0\" => \"D+\"\n    \
    \        case \"0.7\" => \"D\"\n            case \"0.0\" => \"D-\"\n         \
    \   case \"0.0\" => \"E\"\n            case _ => \"Error\"\n        })).toMap\n\
    \        val gradesList : List[String] = gradesMap.keys.toList.sortWith(_ < _)\n\
    \        val gradesMapList : List[(String, String)] = gradesList.map(x => (x,\
    \ gradesMap(x)))\n        val gradesMapListSorted : List[(String, String)] = gradesMapList.sortWith(_._1\
    \ < _._1)\n        val gradesMapListSortedWithGrade : List[(String, String)] =\
    \ gradesMapListSorted.map(x => (x._2, x._1))\n        val gradesMapListSortedWithGradeWithGrade\
    \ : List[(String, String)] = gradesMapListSortedWithGrade.map(x => (x._1, x._2))\n\
    \        val gradesMapListSortedWithGradeWithGradeWithGrade : List[(String, String)]\
    \ = gradesMapListSortedWithGradeWithGrade.map(x => (x._1, x._2))\n        val\
    \ gradesMapListSortedWithGradeWithGradeWithGradeWithGrade : List[(String, String)]\
    \ = gradesMapListSortedWithGradeWithGradeWithGrade.map(x => (x._1, x._2))\n  \
    \      val gradesMapListSortedWithGradeWithGradeWithGradeWithGradeWithGrade :\
    \ List[(String, String)] = gradesMapListSortedWithGradeWithGradeWithGradeWithGrade.map(x\
    \ => (x._1, x._2))\n        val gradesMapListSortedWithGradeWithGradeWithGradeWithGradeWithGradeWithGrade\
    \ : List[(String, String)] = gradesMapListSortedWithGradeWithGradeWithGradeWithGradeWithGrade.map(x\
    \ => (x._1, x._2))\n        val gradesMapListSortedWithGradeWithGradeWithGradeWithGradeWithGradeWithGradeWithGrade\
    \ : List[\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9lt3taex.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9lt3taex.scala:27:45 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e\
    [0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, x.toString \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                                             ^\e[0m\n\
    \e[31m   |\e[0m                         Found:    Map[Float, String]\n\e[31m \
    \  |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m28\
    \ |\e[0m            \e[33mcase\e[0m \e[31m\"4.0\"\e[0m => \e[31m\"A+\"\e[0m\n\e\
    [31m29 |\e[0m            \e[33mcase\e[0m \e[31m\"3.7\"\e[0m => \e[31m\"A\"\e[0m\n\
    \e[31m30 |\e[0m            \e[33mcase\e[0m \e[31m\"3.3\"\e[0m => \e[31m\"A-\"\e\
    [0m\n\e[31m31 |\e[0m            \e[33mcase\e[0m \e[31m\"3.0\"\e[0m => \e[31m\"\
    B+\"\e[0m\n\e[31m32 |\e[0m            \e[33mcase\e[0m \e[31m\"2.7\"\e[0m => \e\
    [31m\"B\"\e[0m\n\e[31m33 |\e[0m            \e[33mcase\e[0m \e[31m\"2.3\"\e[0m\
    \ => \e[31m\"B-\"\e[0m\n\e[31m34 |\e[0m            \e[33mcase\e[0m \e[31m\"2.0\"\
    \e[0m => \e[31m\"C+\"\e[0m\n\e[31m35 |\e[0m            \e[33mcase\e[0m \e[31m\"\
    1.7\"\e[0m => \e[31m\"C\"\e[0m\n\e[31m36 |\e[0m            \e[33mcase\e[0m \e\
    [31m\"1.3\"\e[0m => \e[31m\"C-\"\e[0m\n\e[31m37 |\e[0m            \e[33mcase\e\
    [0m \e[31m\"1.0\"\e[0m => \e[31m\"D+\"\e[0m\n\e[31m38 |\e[0m            \e[33mcase\e\
    [0m \e[31m\"0.7\"\e[0m => \e[31m\"D\"\e[0m\n\e[31m39 |\e[0m            \e[33mcase\e\
    [0m \e[31m\"0.0\"\e[0m => \e[31m\"D-\"\e[0m\n\e[31m40 |\e[0m            \e[33mcase\e\
    [0m \e[31m\"0.0\"\e[0m => \e[31m\"E\"\e[0m\n\e[31m41 |\e[0m            \e[33mcase\e\
    [0m _ => \e[31m\"Error\"\e[0m\n\e[31m42 |\e[0m        })).toMap\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9lt3taex.scala:43:70 --------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mgradesList\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m] = gradesMap.keys.toList.sortWi"
  stdout: ''
  timestamp: 1660010232
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSet = grades.toSet\n        val gradesArray\
    \ = grades.toArray\n        val gradesArraySet = grades.toSet.toArray\n      \
    \  val gradesArrayArray = grades.toArray.toArray\n        val gradesArrayArraySet\
    \ = grades.toArray.toSet.toArray\n        val gradesArrayArrayArray = grades.toArray.toArray.toArray\n\
    \        val gradesArrayArrayArraySet = grades.toArray.toArray.toSet.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.toArray.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1370)\n\
    \tat dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:142)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1382)\n\
    \tat dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:142)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1390)\n\
    \tat dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:142)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1388)\n\
    \tat dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:142)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform$$anonfun$1(Trees.scala:1494)\n\
    \tat scala.collection.immutable.List.mapConserve(List.scala:472)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1494)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1388)\n\
    \tat dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:142)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1382)\n\
    \tat dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:142)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1390)\n\
    \tat dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:142)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1388)\n\
    \tat dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:142)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform$$anonfun$1(Trees.scala:1494)\n\
    \tat scala.collection.immutable.List.mapConserve(List.scala:472)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1494)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1388)\n\
    \tat dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:142)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1382)\n\
    \tat dotty.tools.dotc.ast.TreeTypeMap.transform(TreeTypeMap.scala:142)\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeMap.transform(Trees.scala:1390)\n\
    \ta"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpz61q5q74.scala

    '
  timestamp: 1660010230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesValuesWithZero = gradesValues.filter(_ > 0)\n        val gradesValuesWithZeroLength\
    \ = gradesValuesWithZero.length\n        val gradesValuesWithZeroSum = gradesValuesWithZero.sum\n\
    \        val gradesValuesWithZeroAverage = gradesValuesWithZeroSum / gradesValuesWithZeroLength\n\
    \        val gradesValuesWithZeroAverageLength = gradesValuesWithZeroAverage.length\n\
    \        val gradesValuesWithZeroAverageSum = gradesValuesWithZeroAverage.sum\n\
    \        val gradesValuesWithZeroAverageAverage = gradesValuesWithZeroAverageSum\
    \ / gradesValuesWithZeroAverageLength\n        val gradesValuesWithZeroAverageAverageLength\
    \ = gradesValuesWithZeroAverageAverage.length\n        val gradesValuesWithZeroAverageAverageSum\
    \ = gradesValuesWithZeroAverageAverage.sum\n        val gradesValuesWithZeroAverageAverageAverage\
    \ = gradesValuesWithZeroAverageAverageSum / gradesValuesWithZeroAverageAverageLength\n\
    \        val gradesValuesWithZeroAverageAverageAverageLength = gradesValuesWithZeroAverageAverageAverage.length\n\
    \        val gradesValuesWithZeroAverageAverageAverage = gradesValuesWithZeroAverageAverageAverage.sum\n\
    \        val gradesValuesWithZeroAverageAverageAverageLength = gradesValuesWithZeroAverageAverageAverage.length\n\
    \        val gradesValuesWithZeroAverageAverageAverageSum = gradesValuesWithZeroAverageAverageAverage.sum\n\
    \        val gradesValuesWithZeroAverageAverageAverageAverage = gradesValuesWithZeroAverageAverageAverageSum\
    \ / gradesValuesWithZeroAverageAverageAverageLength\n        val gradesValuesWithZeroAverageAverageAverageAverageLength\
    \ = gradesValuesWithZeroAverageAverageAverageAverage.length\n        val gradesValuesWithZeroAverageAverageAverageAverageSum\
    \ = gradesValuesWithZeroAverageAverageAverageAverage.sum\n        val gradesValuesWithZeroAverageAverageAverageAverage\
    \ = gradesValuesWithZeroAverageAverageAverageSum / gradesValuesWithZeroAverageAverageAverageLength\n\
    \        val gradesValuesWithZeroAverageAverageAverageAverageLength = gradesValuesWithZeroAverageAverageAverageAverage.length\n\
    \        val gradesValuesWithZeroAverageAverageAverageAverageSum = gradesValuesWithZeroAverageAverageAverageAverage.sum\n\
    \        val gradesValuesWithZeroAverageAverageAverageAverageAverage = gradesValuesWithZeroAverageAverageAverageAverageSum\
    \ / \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe0c06nlc.scala:50:123 --------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesWithZeroAverageAverageAverageAverageAverage\e\
    [0m = gradesValuesWithZeroAverageAverageAverageAverageSum / \n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                   expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe0c06nlc.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesValuesWithZeroAverageAverageAverage\e[0m = gradesValuesWithZeroAverageAverageAverage.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesWithZeroAverageAverageAverage is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesValuesWithZeroAverageAverageAverage\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpe0c06nlc.scala:42:12 ---------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesValuesWithZeroAverageAverageAverageLength\e\
    [0m = gradesValuesWithZeroAverageAverageAverage.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesWithZeroAverageAverageAverageLength is already\
    \ defined as \e[33mvalue\e[0m \e[35mgradesValuesWithZeroAverageAverageAverageLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe0c06nlc.scala:47:12 ---------------------------\e[0m\e[0m\n\e\
    [31m47 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesWithZeroAverageAverageAverageAverage\e\
    [0m = grades"
  stdout: ''
  timestamp: 1660010231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat)\n        val gradesMap2 = gradesMap.mapValues(x => x.toFloat)\n\
    \        val gradesMap3 = gradesMap2.mapValues(x => x.toInt)\n        val gradesMap4\
    \ = gradesMap3.mapValues(x => x.toInt)\n        val gradesMap5 = gradesMap4.mapValues(x\
    \ => x.toInt)\n        val gradesMap6 = gradesMap5.mapValues(x => x.toInt)\n \
    \       val gradesMap7 = gradesMap6.mapValues(x => x.toInt)\n        val gradesMap8\
    \ = gradesMap7.mapValues(x => x.toInt)\n        val gradesMap9 = gradesMap8.mapValues(x\
    \ => x.toInt)\n        val gradesMap10 = gradesMap9.mapValues(x => x.toInt)\n\
    \        val gradesMap11 = gradesMap10.mapValues(x => x.toInt)\n        val gradesMap12\
    \ = gradesMap11.mapValues(x => x.toInt)\n        val gradesMap13 = gradesMap12.mapValues(x\
    \ => x.toInt)\n        val gradesMap14 = gradesMap13.mapValues(x => x.toInt)\n\
    \        val gradesMap15 = gradesMap14.mapValues(x => x.toInt)\n        val gradesMap16\
    \ = gradesMap15.mapValues(x => x.toInt)\n        val gradesMap17 = gradesMap16.mapValues(x\
    \ => x.toInt)\n        val gradesMap18 = gradesMap17.mapValues(x => x.toInt)\n\
    \        val gradesMap19 = gradesMap18.mapValues(x => x.toInt)\n        val gradesMap20\
    \ = gradesMap19.mapValues(x => x.toInt)\n        val gradesMap21 = gradesMap20.mapValues(x\
    \ => x.toInt)\n        val gradesMap22 = gradesMap21.mapValues(x => x.toInt)\n\
    \        val gradesMap23 = gradesMap22.mapValues(x => x.toInt)\n        val gradesMap24\
    \ = gradesMap23.mapValues(x => x.toInt)\n        val gradesMap25 = gradesMap24.mapValues(x\
    \ => x.toInt)\n        val gradesMap26 = gradesMap25.mapValues(x \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg82guopt.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg82guopt.scala:27:65\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(\e[36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e\
    [36mx\e[0m => x.toFloat)\n\e[31m\e[31m   |\e[0m                              \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is\
    \ not a member of List[Float], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpg82guopt.scala:27:89 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => x.toFloat)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toFloat is\
    \ not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpg82guopt.scala:28:52 ------------------------\e\
    [0m\e[0m\n\e[31m2"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"D\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"E\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"G\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"H\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"I\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"J\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"K\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"L\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"M\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"N\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"O\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"P\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"Q\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"R\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"S\")).toMap\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8m5wvid.scala:27:45\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => (grade -> \e[31m\"A+\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8m5wvid.scala:28:46 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"B\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8m5wvid.scala:29:46 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"C\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat)\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n      \
    \  val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversed\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0j7bjcoj.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0j7bjcoj.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0j7bjcoj.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0j7bjcoj.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1660010235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByGrade = grades.sortBy(x => x)\n        val gradesSortedByGradeReversed\
    \ = gradesSortedByGrade.map(x => (x._2, x._1))\n        val gradesSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedByGradeReversedMapReversed\
    \ = gradesSortedByGradeReversedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversed.map(x => (x._1, x._2)).toMap\n    \
    \    val gradesSortedByGradeReversedMapReversedMapReversed = gradesSortedByGradeReversedMapReversedMap.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByGradeReversedMapReversedMapReversedMapReversed = gradesSortedByGradeReversedMapReversedMapReversedMap.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversed.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMap.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMap.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedBy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm1lz5rcl.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm1lz5rcl.scala:29:74\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByGradeReversed\e[0m = gradesSortedByGrade.map(\e[36mx\e[0m =>\
    \ (x._2, x._1))\n\e[31m\e[31m   |\e[0m                                       \
    \                                 ^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                      value _2 is not a member of Float\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpm1lz5rcl.scala:29:80 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeReversed\e\
    [0m = gradesSortedByGrade.map(\e[36mx\e[0m => (x._2, x._1))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                                       value _1\
    \ is not a member of Float\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm1lz5rcl.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength.toInt\n        val\
    \ gradesMapValuesLength = gradesMapValuesLength.toInt\n        val gradesMapValuesLength\
    \ = gradesMapValuesLength.toInt\n        val gradesMapValuesLength = gradesMapValuesLength.toInt\n\
    \        val gradesMapValuesLength = gradesMapValuesLength\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjrt5_2y.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjrt5_2y.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjrt5_2y.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjrt5_2y.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValuesLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkj"
  stdout: ''
  timestamp: 1660010240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesLength = gradesKeys.size\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesSumOfSquares\
    \ = gradesValues.map(x => x * x).sum\n        val gradesAverageOfSquares = gradesSumOfSquares\
    \ / gradesLength\n        val gradesSumOfProducts = gradesValues.map(x => x *\
    \ x).map(x => x * x).sum\n        val gradesAverageOfProducts = gradesSumOfProducts\
    \ / gradesLength\n        val gradesSumOfRoots = gradesValues.map(x => Math.sqrt(x)).sum\n\
    \        val gradesAverageOfRoots = gradesSumOfRoots / gradesLength\n        val\
    \ gradesSumOfPowers = gradesValues.map(x => Math.pow(x, 2)).sum\n        val gradesAverageOfPowers\
    \ = gradesSumOfPowers / gradesLength\n        val gradesSumOfLogs = gradesValues.map(x\
    \ => Math.log(x)).sum\n        val gradesAverageOfLogs = gradesSumOfLogs / gradesLength\n\
    \        val gradesSumOfLogsOfPowers = gradesValues.map(x => Math.log(x) * Math.pow(x,\
    \ 2)).sum\n        val gradesAverageOfLogsOfPowers = gradesSumOfLogsOfPowers /\
    \ gradesLength\n        val gradesSumOfLogsOfSquaredPowers = gradesValues.map(x\
    \ => Math.log(x) * Math.pow(x, 2)).map(x => Math.pow(x, 2)).sum\n        val gradesAverageOfLogsOfSquaredPowers\
    \ = gradesSumOfLogsOfSquaredPowers / gradesLength\n        val gradesSumOfLogsOfCubes\
    \ = gradesValues.map(x => Math.log(x) * Math.pow(x, 3)).sum\n        val gradesAverageOfLogsOfCubes\
    \ = gradesSumOfLogsOfCubes / gradesLength\n        val gradesSumOfLogsOfCubesOfPowers\
    \ = gradesValues.map(x => Math.log(x) * Math.pow(x, 3) * Math.pow(x, 2)).sum\n\
    \        val gradesAverageOfLogsOfCubesOfPowers = gradesSumOfLogsOfCubesOfPowers\
    \ / gradesLength\n        val grades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvs5pncwj.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvs5pncwj.scala:27:31\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toMap is not a member of Null, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvs5pncwj.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapKeysSorted = gradesMapKeys.sortBy(_)\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sortBy(_)\n        val gradesMapKeysSortedReversed = gradesMapKeys.reverse\n\
    \        val gradesMapValuesSortedReversed = gradesMapValues.reverse\n       \
    \ val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeysSortedReversedLength = gradesMapKeysSortedReversed.length\n\
    \        val gradesMapValuesSortedReversedLength = gradesMapValuesSortedReversed.length\n\
    \        val gradesMapKeys\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqtdqripd.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqtdqripd.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapKeysSortedReversedLength\e[0m = gradesMapKeysSortedReversed.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedReversedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapKeysSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqtdqripd.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapValuesSortedReversedLength\e[0m = gradesMapValuesSortedReversed.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedReversedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapValuesSortedReversedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqtdqripd.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapKeysSortedReversedLength\e[0m = gradesMapKeysSortedReversed.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedReversedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapKeysSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqtdqripd.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapValuesSor"
  stdout: ''
  timestamp: 1660010242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float,\
    \ String]()){\n            case (acc, grade) =>\n                acc + (grade\
    \ -> (acc.getOrElse(grade, \"\") + s\"+\"))\n        }\n        gradesMap.filter(_._2\
    \ != \"E\").map(_._2).reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx4gunoas.scala:31:48 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        gradesMap.filter(_._2 != \e[31m\"E\"\e[0m).map(_._2).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of scala.collection.mutable.Iterable[String]\
    \ - did you mean scala.collection.mutable.Iterable[String].reversed?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n    \
    \    val gradesLength = gradesSorted.length\n        val gradesSum = gradesSorted.sum\n\
    \        val gradesAvg = gradesSum / gradesLength\n        val gradesSumOfSquares\
    \ = gradesSorted.map(x => x * x).sum\n        val gradesAvgOfSquares = gradesSumOfSquares\
    \ / gradesLength\n        val gradesSumOfSquaresOfDiffs = gradesSorted.map(x =>\
    \ x - gradesAvg).sum\n        val gradesAvgOfSquaresOfDiffs = gradesSumOfSquaresOfDiffs\
    \ / gradesLength\n        val gradesSumOfSquaresOfDiffsOfDiffs = gradesSorted.map(x\
    \ => x - gradesAvg).map(x => x - gradesAvg).sum\n        val gradesAvgOfSquaresOfDiffsOfDiffs\
    \ = gradesSumOfSquaresOfDiffsOfDiffs / gradesLength\n        val gradesSumOfSquaresOfDiffsOfDiffsOfDiffs\
    \ = gradesSorted.map(x => x - gradesAvg).map(x => x - gradesAvg).map(x => x -\
    \ gradesAvg).sum\n        val gradesAvgOfSquaresOfDiffsOfDiffsOfDiffs = gradesSumOfSquaresOfDiffsOfDiffsOfDiffs\
    \ / gradesLength\n        val gradesSumOfSquaresOfDiffsOfDiffsOfDiffsOfDiffs =\
    \ gradesSorted.map(x => x - gradesAvg).map(x => x - gradesAvg).map(x => x - gradesAvg).map(x\
    \ => x - gradesAvg).sum\n        val gradesAvgOfSquaresOfDiffsOfDiffsOfDiffsOfDiffs\
    \ = gradesSumOfSquaresOfDiffsOfDiffsOfDiffsOfDiffs / gradesLength\n        val\
    \ gradesSumOfSquaresOfDiffsOfDiffsOfDiffsOfDiffsOfDiffs = gradesSorted.map(x =>\
    \ x - gradesAvg).map(x => x - gradesAvg).map(x => x - gradesAvg).map(x => x -\
    \ gradesAvg).map(x => x - gradesAvg).sum\n        val gradesAvgOfSquaresOfDiffsOfDiffsOfDiffsOfDiffsOfDiffsOfDiffs\
    \ = gradesSumOfSquaresOfDiffsOfDiffsOfDiffsOfDiffsOfDiffs / gradesLength\n   \
    \     val gradesSum\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyi2b_4lq.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyi2b_4lq.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010242
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => if (grade > 3.0) \"B+\" else\
    \ if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"\
    C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade >\
    \ 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else \"\
    E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhw4z4bz.scala:30)\n\tat Problem.main(tmpnhw4z4bz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedKeys = gradesMapSorted.keys\n\
    \        val gradesMapSortedValues = gradesMapSorted.values\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.length\n        val gradesMapSortedValuesLength = gradesMapSortedValues.length\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpotis2ppm.scala:59:39 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpotis2ppm.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedKeysLength\e[0m = gradesMapSortedKeysLength\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpotis2ppm.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValuesLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpotis2ppm.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeysLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpotis2ppm.scala:36:12 -----------------"
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.map\
    \ {\n            case (grade, index) => (index.toString + grade.toString)\n  \
    \      }\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.map\
    \ {\n            case (grade, index) => (index.toString + grade.toString)\n  \
    \      }\n        val gradesKeysSortedWithIndexAndGradeAndLetter = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map\
    \ {\n            case (grade, index, letter) => (index.toString + grade + letter)\n\
    \        }\n        val gradesValuesSortedWithIndexAndGradeAndLetter = gradesValuesSortedWithIndexAndGrade.zipWithIndex.map\
    \ {\n            case (grade, index, letter) => (index.toString + grade + letter)\n\
    \        }\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndGrade = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map\
    \ {\n            case (grade, index, letter, grade) => (index.toString + grade\
    \ + letter + grade)\n        }\n        val gradesValuesSortedWithIndexAndGradeAndLetterAndGrade\
    \ = gradesValuesSortedWithIndexAndGrade.zipWithIndex.map {\n            case (grade,\
    \ index, letter, grade) => (index.toString + grade + letter + grade)\n       \
    \ }\n        val gradesKeysSortedWithIndexAndGradeAndLetterAndGradeAndGrade =\
    \ gradesKeysSortedWithIndexAndGrade.zipWithIndex.map {\n            case (grade,\
    \ index, letter, grade, grade) => (index.toString + grade + letter + grade + grade)\n\
    \        }\n        val gradesValuesSortedWithIndexAndGradeAndLetterAndGradeAndGra\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppw5rxxb2.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmppw5rxxb2.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmppw5rxxb2.scala:56:5 ---------------------\e[0m\e[0m\n\
    \e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversed\
    \ = gradesSortedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReversedKeys\
    \ = gradesSortedMapReversed.keys\n        val gradesSortedMapReversedValues =\
    \ gradesSortedMapReversed.values\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n        val gradesSortedMapReversedValuesLength\
    \ = gradesSortedMapReversedValues.length\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprpivwcwu.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedValuesLength\e\
    [0m = gradesSortedMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedMapReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprpivwcwu.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedValuesLength\e[0m = gradesSortedMapReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedMapReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprpivwcwu.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedValuesLength\e[0m = gradesSortedMapReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesSortedMapReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprpivwcwu.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedValuesLength\e[0m = gradesSortedMapReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversed\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxmabg7lc.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxmabg7lc.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxmabg7lc.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxmabg7lc.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(_)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(_)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = grades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbo7ih7i_.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbo7ih7i_.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbo7ih7i_.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbo7ih7i_.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /t"
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesArrayLength = gradesArray.length\n     \
    \   val gradesMapLength = gradesMap.length\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapKeysArray = gradesMapKeys.toArray\n        val gradesMapValuesArray\
    \ = gradesMapValues.toArray\n        val gradesMapKeysArrayLength = gradesMapKeysArray.length\n\
    \        val gradesMapValuesArrayLength = gradesMapValuesArray.length\n      \
    \  val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n        val gradesMapValuesArrayLength\
    \ = gradesMapValuesArrayLength\n        val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n\
    \        val gradesMapValuesArrayLength = gradesMapValuesArrayLength\n       \
    \ val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n        val gradesMapValuesArrayLength\
    \ = gradesMapValuesArrayLength\n        val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n\
    \        val gradesMapValuesArrayLength = gradesMapValuesArrayLength\n       \
    \ val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n        val gradesMapValuesArrayLength\
    \ = gradesMapValuesArrayLength\n        val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n\
    \        val gradesMapValuesArrayLength = gradesMapValuesArrayLength\n       \
    \ val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n        val gradesMapValuesArrayLength\
    \ = gradesMapValuesArrayLength\n        val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n\
    \        val gradesMapValuesArrayLength = gradesMapValuesArrayLength\n       \
    \ val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n        val gradesMapValuesArrayLength\
    \ = gradesMapValuesArrayLength\n        val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n\
    \        val gradesMapValuesArrayLength = gradesMapValuesArrayLength\n       \
    \ val gradesMapKeysArrayLength = gradesMapKeysArrayLength\n        val gradesMapValuesArrayLength\
    \ = gradesMapValuesArrayLength\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpqlbsn6_n.scala:61:11 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpqlbsn6_n.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysArrayLength\e\
    [0m = gradesMapKeysArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqlbsn6_n.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesArrayLength\e\
    [0m = gradesMapValuesArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqlbsn6_n.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysArrayLength\e\
    [0m = gradesMapKeysArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqlbsn6_n.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesArrayLength\e\
    [0m = gradesMapValuesArrayLength\n\e[31m\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toInt).zipWithIndex.toMap\n\
    \        val gradesMap2 = grades.map(x => x.toInt).zipWithIndex.filter(_._2 %\
    \ 2 == 0).map(x => x._1 -> x._2)\n        val gradesMap3 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 1).map(x => x._1 -> x._2)\n        val gradesMap4 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 2).map(x => x._1 -> x._2)\n        val gradesMap5 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 3).map(x => x._1 -> x._2)\n        val gradesMap6 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 4).map(x => x._1 -> x._2)\n        val gradesMap7 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 5).map(x => x._1 -> x._2)\n        val gradesMap8 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 6).map(x => x._1 -> x._2)\n        val gradesMap9 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 7).map(x => x._1 -> x._2)\n        val gradesMap10 = grades.map(x =>\
    \ x.toInt).zipWithIndex.filter(_._2 % 2 == 8).map(x => x._1 -> x._2)\n       \
    \ val gradesMap11 = grades.map(x => x.toInt).zipWithIndex.filter(_._2 % 2 == 9).map(x\
    \ => x._1 -> x._2)\n        val gradesMap12 = grades.map(x => x.toInt).zipWithIndex.filter(_._2\
    \ % 2 == 10).map(x => x._1 -> x._2)\n        val gradesMap13 = grades.map(x =>\
    \ x.toInt).zipWithIndex.filter(_._2 % 2 == 11).map(x => x._1 -> x._2)\n      \
    \  val gradesMap14 = grades.map(x => x.toInt).zipWithIndex.filter(_._2 % 2 ==\
    \ 12).map(x => x._1 -> x._2)\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9m1hv1t8.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKey\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:38:"
  stdout: ''
  timestamp: 1660010245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSortedByValues = gradesKeys.sortBy(_._2)\n        val gradesKeysSortedByValuesWithDuplicates\
    \ = gradesKeysSortedByValues.filter(_._2 != gradesKeysSortedByValues.last._2)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGrouped = gradesKeysSortedByValuesWithDuplicates.groupBy(_._2)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGrouped = gradesKeysSortedByValuesWithDuplicatesGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGrouped = gradesKeysSortedByValuesWithDuplicatesGroupedGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped\
    \ = gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped\
    \ = gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGroupedGrouped\
    \ = gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGroupedGrouped\
    \ = gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGroupedGrouped\
    \ = gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped.groupBy(_._1)\n\
    \        val gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGroupedGrouped\
    \ = gradesKeysSortedByValuesWithDuplicatesGro\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiew8q4o2.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped\e\
    [0m = gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGrouped.groupBy(_._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiew8q4o2.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGroupedGrouped\e\
    [0m = gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped.groupBy(_._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGroupedGrouped\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGroupedGrouped\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpiew8q4o2.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGroupedGrouped\e\
    [0m = gradesKeysSortedByValuesWithDuplicatesGroupedGroupedGroupedGrouped.groupBy(_._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapValuesLength = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwq3hz7cd.scala:66:35 ---------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwq3hz7cd.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapValuesLength\e[0m = gradesMapValues.length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mgradesMapValuesLength is already defined as \e[33mvalue\e[0m \e[35mgradesMapValuesLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwq3hz7cd.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e[0m = gradesMapValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwq3hz7cd.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwq3hz7cd.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = grad"
  stdout: ''
  timestamp: 1660010246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = Map(\n    \
    \        4.0 -> \"A+\",\n            3.7 -> \"A\",\n            3.3 -> \"A-\"\
    ,\n            3.0 -> \"B+\",\n            2.7 -> \"B\",\n            2.3 -> \"\
    B-\",\n            2.0 -> \"C+\",\n            1.7 -> \"C\",\n            1.3\
    \ -> \"C-\",\n            1.0 -> \"D+\",\n            0.7 -> \"D\",\n        \
    \    0.0 -> \"D-\",\n            0.0 -> \"E\"\n        )\n        val gradesList\
    \ : List[Float] = grades.toList\n        val gradesMapList : List[(Float, String)]\
    \ = gradesList.map(grade => (grade, gradesMap(grade)))\n        val gradesMapList\
    \ : List[(Float, String)] = gradesList.map(grade => (grade, gradesMap(grade)))\n\
    \        val gradesMapList : List[(Float, String)] = gradesList.map(grade => (grade,\
    \ gradesMap(grade)))\n        val gradesMapList : List[(Float, String)] = gradesList.map(grade\
    \ => (grade, gradesMap(grade)))\n        val gradesMapList : List[(Float, String)]\
    \ = gradesList.map(grade => (grade, gradesMap(grade)))\n        val gradesMapList\
    \ : List[(Float, String)] = gradesList.map(grade => (grade, gradesMap(grade)))\n\
    \        val gradesMapList : List[(Float, String)] = gradesList.map(grade => (grade,\
    \ gradesMap(grade)))\n        val gradesMapList : List[(Float, String)] = gradesList.map(grade\
    \ => (grade, gradesMap(grade)))\n        val gradesMapList : List[(Float, String)]\
    \ = gradesList.map(grade => (grade, gradesMap(grade)))\n        val gradesMapList\
    \ : List[(Float, String)] = gradesList.map(grade => (grade, gradesMap(grade)))\n\
    \        val gradesMapList : List[(Float, String)] = gradesList.map(grade => (grade,\
    \ gradesMap(grade)))\n        val gradesMapList : List[(Float, String)] = gradesList.map(grade\
    \ => (grade, gradesMap(grade)))\n        val gradesMapList : List[(Float, String)]\
    \ = gradesList.map(grade => (grade, gradesMap(grade)))\n        val gradesMapList\
    \ : List[(Float, String)] = gradesList.map(grade => (grade, gradesMap(grade)))\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp178kh42v.scala:57:11 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp178kh42v.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mgradesMapList\e[0m : \e\
    [35mList\e[0m[(\e[35mFloat\e[0m, \e[35mString\e[0m)] = gradesList.map(\e[36mgrade\e\
    [0m => (grade, gradesMap(grade)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapList is already defined as \e[33mvalue\e[0m \e[35mgradesMapList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp178kh42v.scala:45:12 ---------------------------\e[0m\e[0m\n\e\
    [31m45 |\e[0m        \e[33mval\e[0m \e[36mgradesMapList\e[0m : \e[35mList\e[0m[(\e\
    [35mFloat\e[0m, \e[35mString\e[0m)] = gradesList.map(\e[36mgrade\e[0m => (grade,\
    \ gradesMap(grade)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapList is already defined as \e[33mvalue\e[0m \e[35mgradesMapList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp178kh42v.scala:46:12 ---------------------------\e[0m\e[0m\n\e\
    [31m46 |\e[0m        \e[33mval\e[0m \e[36mgradesMapList\e[0m : \e[35mList\e[0m[(\e\
    [35mFloat\e[0m, \e[35mString\e[0m)] = gradesList.map(\e[36mgrade\e[0m => (grade,\
    \ gradesMap(grade)))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapList is already defined as \e[33mvalue\e[0m \e[35mgradesMapList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ def"
  stdout: ''
  timestamp: 1660010249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa6vonc2e.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesL"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesKeys.size\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesSumOfSquares\
    \ = gradesValues.map(x => x * x).sum\n        val gradesAverageOfSquares = gradesSumOfSquares\
    \ / gradesLength\n        val gradesSumOfSquaresOfDifferences = gradesValues.map(x\
    \ => x - gradesAverage).sum\n        val gradesAverageOfSquaresOfDifferences =\
    \ gradesSumOfSquaresOfDifferences / gradesLength\n        val gradesSumOfSquaresOfSquaresOfDifferences\
    \ = gradesValues.map(x => x * x - gradesAverageOfSquares).sum\n        val gradesAverageOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfDifferences / gradesLength\n        val gradesSumOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesValues.map(x => x * x * x - gradesAverageOfSquaresOfSquares).sum\n \
    \       val gradesAverageOfSquaresOfSquaresOfSquaresOfDifferences = gradesSumOfSquaresOfSquaresOfSquaresOfDifferences\
    \ / gradesLength\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesValues.map(x => x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquares).sum\n\
    \        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences =\
    \ gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesLength\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesValues.map(x => x * x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquares).sum\n\
    \        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesLength\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOf\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphntxb237.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphntxb237.scala:39:98\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSumOfSquaresOfSquaresOfSquaresOfDifferences\e[0m = gradesValues.map(\e\
    [36mx\e[0m => x * x * x - gradesAverageOfSquaresOfSquares).sum\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                              Not found: gradesAverageOfSquaresOfSquares\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmphntxb237.scala:39:134 ----------------------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresOfSquaresOfSquaresOfDifferences\e\
    [0m = gradesValues.map(\e[36mx\e[0m => x * x * x - gradesAverageOfSquaresOfSquares).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e\
    [35mCharIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e\
    [0m \e[35mByteIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type\
    \ Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e\
    [0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphntxb237.scala:41:111\
    \ -----------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\e[0m = gradesValues.map(\e\
    [36mx\e[0m => x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquares).sum\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not fo"
  stdout: ''
  timestamp: 1660010246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toInt).zipWithIndex.toMap\n\
    \        val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverse = gradesMapReverse.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverseReverseReverse = gradesMapReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverse = gradesMapReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpio1am7nx.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverse.map(\e[36mx\e[0m => (x._1, x._2)).toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverse is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverse\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpio1am7nx.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(\e[36mx\e\
    [0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverseReverse\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpio1am7nx.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverseReverse\
    \ is already defined as"
  stdout: ''
  timestamp: 1660010246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedReversed\
    \ = gradesSortedByKeyReversed.reverse\n        val gradesSortedByValueReversedReversed\
    \ = gradesSortedByValueReversed.reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversed\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpruw_o6oh.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmpruw_o6oh.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_o6oh.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade\
    \ => grade -> \"A+\".toUpperCase)\n        val gradesMap2 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"B\".toUpperCase)\n        val gradesMap3 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"C\".toUpperCase)\n     \
    \   val gradesMap4 : Map[Float, String] = grades.map(grade => grade -> \"D\".toUpperCase)\n\
    \        val gradesMap5 : Map[Float, String] = grades.map(grade => grade -> \"\
    E\".toUpperCase)\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"F\".toUpperCase)\n        val gradesMap7 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"G\".toUpperCase)\n        val gradesMap8 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"H\".toUpperCase)\n     \
    \   val gradesMap9 : Map[Float, String] = grades.map(grade => grade -> \"I\".toUpperCase)\n\
    \        val gradesMap10 : Map[Float, String] = grades.map(grade => grade -> \"\
    J\".toUpperCase)\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"K\".toUpperCase)\n        val gradesMap12 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"L\".toUpperCase)\n        val gradesMap13 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"M\".toUpperCase)\n     \
    \   val gradesMap14 : Map[Float, String] = grades.map(grade => grade -> \"N\"\
    .toUpperCase)\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"O\".toUpperCase)\n        val gradesMap16 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"P\".toUpperCase)\n        val gradesMap17 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"Q\".toUpperCase)\n     \
    \   val gradesMap18 : Map[Float, String] = grades.map(grade => grade -> \"R\"\
    .toUpperCase)\n        val gradesMap19 : Map[Float, \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4vszvkzg.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4vszvkzg.scala:27:55 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m,\
    \ \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade -> \e[31m\"A+\"\e\
    [0m.toUpperCase)\n\e[31m\e[31m   |\e[0m                                      \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                        Found:    List[(Float, String)]\n\e[31m   |\e[0m    \
    \                     Required: collection.mutable.Map[Float, String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4vszvkzg.scala:28:56 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade\
    \ -> \e[31m\"B\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m                    \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    List[(Float, String)]\n\e[31m\
    \   |\e[0m                         Required: collection.mutable.Map[Float, String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4vszvkzg.scala:29:56\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => grade -> \e[31m\"C\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m         \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[(Float, String)]\n\
    \e[31m   |\e[0m                         Required: collection.mutable.Map[Float,\
    \ String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compilin"
  stdout: ''
  timestamp: 1660010251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapKeysSorted = gradesMapKeys.sort\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sort\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val\
    \ gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength\
    \ = gradesMapKeysSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSor\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmra5njd8.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmra5njd8.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmra5njd8.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmra5njd8.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel "
  stdout: ''
  timestamp: 1660010250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGrade\
    \ = grades.sortBy(_)\n        val gradesSortedByGradeWithZero = gradesSortedByGrade.filter(_\
    \ != 0)\n        val gradesSortedByGradeWithZeroAndOne = gradesSortedByGradeWithZero.filter(_\
    \ != 1)\n        val gradesSortedByGradeWithZeroAndOneAndTwo = gradesSortedByGradeWithZeroAndOne.filter(_\
    \ != 2)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThree = gradesSortedByGradeWithZeroAndOneAndTwo.filter(_\
    \ != 3)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFour =\
    \ gradesSortedByGradeWithZeroAndOneAndTwoAndThree.filter(_ != 4)\n        val\
    \ gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFive = gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFour.filter(_\
    \ != 5)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix\
    \ = gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFive.filter(_ !=\
    \ 6)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven\
    \ = gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven.filter(_\
    \ != 7)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight\
    \ = gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight.filter(_\
    \ != 8)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine\
    \ = gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine.filter(_\
    \ != 9)\n        val gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen\
    \ = gradesSortedByGradeWith\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpubbozibe.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- Error: /tmp/tmpubbozibe.scala:28:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGrade\e[0m\
    \ = grades.sortBy(_)\n\e[31m\e[31m   |\e[0m                                  \
    \                ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for Any..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.comparatorToOrdering[\e\
    [35mAny\e[0m](\n\e[31m   |\e[0m      /* missing */summon[java.util.Comparator[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type java.util.Comparator[Any].\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpubbozibe.scala:36:90 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven\e\
    [0m = gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven.filter(_\
    \ != \e[31m7\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpubbozibe.scala:37:98 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight"
  stdout: ''
  timestamp: 1660010252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesLength = gradesKeys.length\n        val gradesIndexes = gradesValues.zipWithIndex.map\
    \ { case (grade, index) => (index.toString, grade) }\n        val gradesIndexesLength\
    \ = gradesIndexes.size\n        val gradesIndexesIndexes = gradesIndexes.zipWithIndex.map\
    \ { case (gradeIndex, index) => (index.toString, gradeIndex) }\n        val gradesIndexesIndexesLength\
    \ = gradesIndexesIndexes.size\n        val gradesIndexesIndexesIndexes = gradesIndexesIndexes.zipWithIndex.map\
    \ { case (gradeIndexIndex, index) => (index.toString, gradeIndexIndex) }\n   \
    \     val gradesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexes.size\n\
    \        val gradesIndexesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexesIndexes.size\n\
    \        val gradesIndexesIndexesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexesIndexesIndexes.size\n\
    \        val gradesIndexesIndexesIndexesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexesIndexesIndexesIndexes.size\n\
    \        val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexesIndexesIndexesIndexesLength\n\
    \        val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\n        val\
    \ gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\n   \
    \     val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\n   \
    \     val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\
    \ = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\n   \
    \     val gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq4g_dcgx.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq4g_dcgx.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\e\
    [0m = gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesLength\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmpq4g_dcgx.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq4g_dcgx.scala:37:55 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesIndexesIndexesIndexesIndexesLength\e\
    [0m = gradesIndexesIndexesIndexesIndexes.size\n\e[31m\e[31m   |\e[0m         \
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: gradesIndexesIndexesIndexesIndexes\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compili"
  stdout: ''
  timestamp: 1660010254
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => if(grade > 3.0) \"B+\" else\
    \ if (grade > 2.7) \"B\" else if (grade > 2.0) \"C+\" else if (grade > 1.7) \"\
    C\" else if (grade > 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade >\
    \ 0.0) \"D-\" else \"E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkf7qekky.scala:30)\n\tat Problem.main(tmpkf7qekky.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => if (grade > 3.0) \"B+\" else\
    \ if (grade > 2.7) \"B\" else if (grade > 2.0) \"C+\" else if (grade > 1.7) \"\
    C\" else if (grade > 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade >\
    \ 0.0) \"D-\" else \"E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt993axdv.scala:30)\n\tat Problem.main(tmpt993axdv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesSum = gradesValues.sum\n        val gradesSumOfSquares = gradesSum\
    \ * gradesSum\n        val gradesSumOfSquaresOfGrades = gradesSumOfSquares * gradesKeys.size\n\
    \        val gradesSumOfSquaresOfGradesOfGrades = gradesSumOfSquaresOfGrades *\
    \ gradesValues.size\n        val gradesSumOfSquaresOfGradesOfGradesOfGrades =\
    \ gradesSumOfSquaresOfGradesOfGrades * gradesKeys.size\n        val gradesSumOfSquaresOfGradesOfGradesOfGradesOfGrades\
    \ = gradesSumOfSquaresOfGradesOfGradesOfGrades * gradesValues.size\n        val\
    \ gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGrades = gradesSumOfSquaresOfGradesOfGradesOfGradesOfGrades\
    \ * gradesKeys.size\n        val gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades\
    \ = gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGrades * gradesValues.size\n\
    \        val gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades\
    \ = gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades * gradesKeys.size\n\
    \        val gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades\
    \ = gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades * gradesValues.size\n\
    \        val gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades\
    \ = gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades\
    \ * gradesKeys.size\n        val gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOf\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn40phx7q.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn40phx7q.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades\e\
    [0m = gradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades * gradesValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSumOfSquaresOfGradesOfGradesOfGradesOfGradesOfGradesOfGradesOfGrades\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpn40phx7q.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpn40phx7q.scala:42:5 ---------------------\e[0m\e[0m\n\
    \e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"D\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"E\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"G\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"H\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"I\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"J\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"K\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"L\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"M\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"N\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"O\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"P\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"Q\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"R\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"S\")).toMap\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8m5wvid.scala:27:45\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => (grade -> \e[31m\"A+\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8m5wvid.scala:28:46 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"B\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8m5wvid.scala:29:46 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"C\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesMap.sortBy(_._2)\n\
    \        val gradesSortedByKeyReverse = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReverse = gradesSortedByValue.reverse\n        val gradesSortedByKeyReverseMap\
    \ = gradesSortedByKeyReverse.toMap\n        val gradesSortedByValueReverseMap\
    \ = gradesSortedByValueReverse.toMap\n        val gradesSortedByKeyReverseMapReverse\
    \ = gradesSortedByKeyReverseMap.reverse\n        val gradesSortedByValueReverseMapReverse\
    \ = gradesSortedByValueReverseMap.reverse\n        val gradesSortedByKeyReverseMapReverseMap\
    \ = gradesSortedByKeyReverseMapReverse.toMap\n        val gradesSortedByValueReverseMapReverseMap\
    \ = gradesSortedByValueReverseMapReverse.toMap\n        val gradesSortedByKeyReverseMapReverseMapReverse\
    \ = gradesSortedByKeyReverseMapReverseMap.reverse\n        val gradesSortedByValueReverseMapReverseMapReverse\
    \ = gradesSortedByValueReverseMapReverseMap.reverse\n        val gradesSortedByKeyReverseMapReverseMapReverseMap\
    \ = gradesSortedByKeyReverseMapReverseMapReverse.toMap\n        val gradesSortedByValueReverseMapReverseMapReverseMap\
    \ = gradesSortedByValueReverseMapReverseMapReverse.toMap\n        val gradesSortedByKeyReverseMapReverseMapReverseMapReverse\
    \ = gradesSortedByKeyReverseMapReverseMapReverseMap.reverse\n        val gradesSortedByValueReverseMapReverseMapReverseMapReverse\
    \ = gradesSortedByValueReverseMapReverseMapReverseMap.reverse\n        val gradesSortedByKeyReverseMapReverseMapReverseMapReverseMap\
    \ = gradesSortedByKeyReverseMapReverseMapReverseMapReverse.toMap\n        val\
    \ gradesSortedByValueReverseMapReverseMapReverseMapReverseMap = gradesSortedByValueReverseMapReverseMapReverseMap.reverse.toMap\n\
    \        val gradesSortedByKeyReverseMapReverseMapReverseMapReverseMapReverse\
    \ = gradesSortedByKeyReverseMapReverseMapReverseMapReverseMap.reverse.toMap\n\
    \        val gradesSortedByValueReverseMapReverseMapReverseMapReverseMapReverse\
    \ = gradesSortedByValueReverseMapReverseMapReverseMapReverseMap.reverse.toMap\n\
    \        val gradesSortedByKeyReverseMapReverseMapReverseMapReverseMapReverseMap\
    \ = gradesSortedByKeyReverseMapReverseMapReverseMapReverseMap.reverse.toMap\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwn6tllar.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwn6tllar.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n    \
    \    val gradesSum = gradesSorted.sum\n        val gradesCount = gradesSorted.length\n\
    \        val gradesSumOfSquares = gradesSorted.map(x => x * x).sum\n        val\
    \ gradesSumOfSquaresOfSquares = gradesSumOfSquares * gradesSumOfSquares\n    \
    \    val gradesSumOfSquaresOfSquaresOfSquares = gradesSumOfSquaresOfSquares *\
    \ gradesSumOfSquares\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquares * gradesSumOfSquares\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares =\
    \ gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp81y2qknl.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\e\
    [0m = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares * gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp81y2qknl.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = grades.sortBy(_._1)\n        val gradesSortedByValue = grades.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMapWithKeyAndValue\
    \ = gradesSortedByKeyReversedMap.map{\n            case (grade, key) => key ->\
    \ grade\n        }\n        val gradesSortedByValueReversedMapWithKeyAndValue\
    \ = gradesSortedByValueReversedMap.map{\n            case (grade, key) => key\
    \ -> grade\n        }\n        val gradesSortedByKeyReversedMapWithValueAndKey\
    \ = gradesSortedByKeyReversedMapWithKeyAndValue.map{\n            case (key, grade)\
    \ => grade -> key\n        }\n        val gradesSortedByValueReversedMapWithValueAndKey\
    \ = gradesSortedByValueReversedMapWithKeyAndValue.map{\n            case (key,\
    \ grade) => grade -> key\n        }\n        val gradesSortedByKeyReversedMapWithValueAndKeyMap\
    \ = gradesSortedByKeyReversedMapWithValueAndKey.toMap\n        val gradesSortedByValueReversedMapWithValueAndKeyMap\
    \ = gradesSortedByValueReversedMapWithValueAndKey.toMap\n        val gradesSortedByKeyReversedMapWithValueAndKeyMapWithKeyAndValue\
    \ = gradesSortedByKeyReversedMapWithValueAndKeyMap.map{\n            case (grade,\
    \ key, value) => key -> grade -> value\n        }\n        val gradesSortedByValueReversedMapWithValueAndKeyMapWithKeyAndValue\
    \ = gradesSortedByValueReversedMapWithValueAndKeyMap.map{\n            case (grade,\
    \ key, value) => key -> grade -> value\n        }\n        val gradesSortedByKeyReversedMapWithValueAndKeyMapWithValueAndKey\
    \ = gradesSortedByKeyReversedMapWithValueAndKeyMapWithKeyAndValue.map{\n     \
    \       case (grade, key, value) => value -> key -> grade\n        }\n       \
    \ val gradesSortedByValueReversedMapWithValueAndKeyMapWithValueAndKey = gradesSortedByValueReversedMapWithValueAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp787eg3k7.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp787eg3k7.scala:28:48 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m =\
    \ grades.sortBy(_._1)\n\e[31m\e[31m   |\e[0m                                 \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \  value _1 is not a member of Float\n\e[31m\e[31m-- Error: /tmp/tmp787eg3k7.scala:28:51\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m = grades.sortBy(_._1)\n\e[31m\e\
    [31m   |\e[0m                                                   ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp787eg3k7.scala:29:50 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValue\e[0m\
    \ = grades.sortBy(_._2)\n\e[31m\e[31m   |\e[0m                               \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \      value _2 is not a member of Float\n\e[31m\e[31m-- Error: /tmp/tmp787eg3k7.scala:29:53\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesSortedByValue\e[0m = grades.sortBy(_._2)\n\e[31m\e\
    [31m   |\e[0m                                                     ^\e[0m\n\e[31m\
    \   |\e[0mamb"
  stdout: ''
  timestamp: 1660010258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMapReversed\
    \ = gradesSortedByKeyReversedMap.reverse\n        val gradesSortedByValueReversedMapReversed\
    \ = gradesSortedByValueReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMap.reverse\n        val gradesSortedByValueReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n     \
    \   val gradesSortedByValueReversedMapReversedMapReversedMapReversed = gradesSortedByValueReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_3rhqyb9.scala:46:94 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversedMapReversed\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp_3rhqyb9.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_3rhqyb9.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByKeyReversedMapReversedMapReversedMapReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_3rhqyb9.scala:43:75\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByValueReversedMapReversedMapReversedMapReversed\e[0m = gradesSortedByValueReversedMapReversedMapReversedMapReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e["
  stdout: ''
  timestamp: 1660010258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float,\
    \ String]()){\n            case (acc, grade) =>\n                acc + (grade\
    \ -> (acc.getOrElse(grade, \"\") + s\"$grade\"))\n        }\n        val gradesList\
    \ : List[String] = gradesMap.filter(_._2 != \"E\").map(_._2).sorted\n        val\
    \ gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = gradesList.zipWithIndex.filter(_._2\
    \ != 0).map(_._1)\n        val gradesMapList : List[(Float, String)] = grades\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwelj0w__.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapList\e[0m : \e\
    [35mList\e[0m[(\e[35mFloat\e[0m, \e[35mString\e[0m)] = gradesList.zipWithIndex.filter(_._2\
    \ != \e[31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapList is already defined as \e[33mvalue\e[0m \e[35mgradesMapList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwelj0w__.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapList\e[0m : \e[35mList\e[0m[(\e\
    [35mFloat\e[0m, \e[35mString\e[0m)] = gradesList.zipWithIndex.filter(_._2 != \e\
    [31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapList is already defined as \e[33mvalue\e[0m \e[35mgradesMapList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwelj0w__.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapList\e[0m : \e[35mList\e[0m[(\e\
    [35mFloat\e[0m, \e[35mString\e[0m)] = gradesList.zipWithIndex.filter(_._2 != \e\
    [31m0\e[0m).map(_._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapList is already defined as \e[33mvalue\e[0m \e[35mgradesMapList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwelj0w__.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapList\e[0m : \e[35mList\e[0m[(\e\
    [35mFloat\e[0m, \e[35mString\e[0m)] = gradesList.zipWithIndex.filter(_._2 "
  stdout: ''
  timestamp: 1660010259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesLength = gradesKeys.length\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesMin =\
    \ gradesValues.min\n        val gradesMax = gradesValues.max\n        val gradesRange\
    \ = gradesMax - gradesMin\n        val gradesRangeLength = gradesRange.length\n\
    \        val gradesRangeSum = gradesRange.sum\n        val gradesRangeAverage\
    \ = gradesRangeSum / gradesRangeLength\n        val gradesRangeMin = gradesRange.min\n\
    \        val gradesRangeMax = gradesRange.max\n        val gradesRangeRange =\
    \ gradesRangeMax - gradesRangeMin\n        val gradesRangeRangeLength = gradesRangeRange.length\n\
    \        val gradesRangeRangeSum = gradesRangeRange.sum\n        val gradesRangeRangeAverage\
    \ = gradesRangeRangeSum / gradesRangeRangeLength\n        val gradesRangeRangeMin\
    \ = gradesRangeRange.min\n        val gradesRangeRangeMax = gradesRangeRange.max\n\
    \        val gradesRangeRangeRange = gradesRangeRangeMax - gradesRangeRangeMin\n\
    \        val gradesRangeRangeRangeLength = gradesRangeRangeRange.length\n    \
    \    val gradesRangeRangeRangeSum = gradesRangeRangeRange.sum\n        val gradesRangeRangeRangeAverage\
    \ = gradesRangeRangeRangeSum / gradesRangeRangeRangeLength\n        val gradesRangeRangeRangeMin\
    \ = gradesRangeRangeRange.min\n        val gradesRangeRangeRangeMax = gradesRangeRangeRange.max\n\
    \        val gradesRangeRangeRangeRange = gradesRangeRangeRangeMax - gradesRangeRangeRangeMin\n\
    \        val gradesRangeRangeRangeRangeLength = gradesRangeRangeRangeRange.length\n\
    \        val gradesRangeRangeRangeRangeSum = gradesRangeRangeRangeRange.sum\n\
    \        val gradesRangeRangeRangeRangeAverage = gradesRangeRangeRangeRangeSum\
    \ / gradesRangeRangeRangeRangeLength\n        val gradesRangeRangeRangeRangeMin\
    \ = gradesRangeRangeRangeRange.min\n        val gradesRangeRangeRangeRangeMax\
    \ = gradesRangeRangeRangeRange.max\n        val gradesRangeRangeRangeRangeRange\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjlptv2rk.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpjlptv2rk.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpjlptv2rk.scala:60:5 ---------------------\e[0m\e[0m\n\
    \e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValues\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxx4fubv6.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxx4fubv6.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesKeysSortedLength\e[0m = gradesKeysSortedLength - \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxx4fubv6.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxx4fubv6.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxx4fubv6.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660010258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.map(x\
    \ => x._2 + \" \" + x._1)\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.map(x\
    \ => x._2 + \" \" + x._1)\n        val gradesKeysSortedWithIndexAndGradeAndGrades\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3)\n        val gradesValuesSortedWithIndexAndGradeAndGrades =\
    \ gradesValuesSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3)\n        val gradesKeysSortedWithIndexAndGradeAndGradesAndGrades\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4)\n        val gradesValuesSortedWithIndexAndGradeAndGradesAndGrades\
    \ = gradesValuesSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4)\n        val gradesKeysSortedWithIndexAndGradeAndGradesAndGradesAndGrades\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4 + \" \" + x._5)\n        val gradesValuesSortedWithIndexAndGradeAndGradesAndGradesAndGrades\
    \ = gradesValuesSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4 + \" \" + x._5)\n        val gradesKeysSortedWithIndexAndGradeAndGrades\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl30nopqs.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpl30nopqs.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpl30nopqs.scala:43:5 ---------------------\e[0m\e[0m\n\
    \e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010258
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => if (grade > 3.0) \"B+\" else\
    \ if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"\
    C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade >\
    \ 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else \"\
    E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhw4z4bz.scala:30)\n\tat Problem.main(tmpnhw4z4bz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReverse = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReverseMap = gradesMapSortedReverse.toMap\n      \
    \  val gradesMapSortedReverseMapSorted = gradesMapSortedReverseMap.sortBy(_._1)\n\
    \        val gradesMapSortedReverseMapSortedReverse = gradesMapSortedReverseMapSorted.reverse\n\
    \        val gradesMapSortedReverseMapSortedReverseMap = gradesMapSortedReverseMapSortedReverse.toMap\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSorted = gradesMapSortedReverseMapSortedReverseMap.sortBy(_._1)\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverse = gradesMapSortedReverseMapSortedReverseMapSorted.reverse\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMap = gradesMapSortedReverseMapSortedReverseMapSortedReverse.toMap\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSorted =\
    \ gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSorted.sortBy(_._1)\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse.sortBy(_._1)\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMap\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse.toMap\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSorted\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSorted.sortBy(_._1)\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSorted.reverse\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMap\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse.toMap\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSorted.reverse\n\
    \        val gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSorted\
    \ = gradesMapSortedReverseMapSortedReverseMapSortedReverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_sg5rxlm.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse\e\
    [0m = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSorted.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverseMapSortedReverse\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmp_sg5rxlm.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_sg5rxlm.scala:37:78 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReverseMapSortedReverseMapSortedReverseMapSorted\e\
    [0m = gradesMapSortedReverseMapSortedReverseMapSortedReverseMapSorted.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesMapSortedReverseMapSortedReverseMapSortedReverseMapSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ whe"
  stdout: ''
  timestamp: 1660010259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMapReversed = gradesMap.map(x => (x._2, x._1))\n        val\
    \ gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sortWith(_\
    \ < _)\n        val gradesMapReversedValuesSorted = gradesMapReversedValues.sortWith(_\
    \ < _)\n        val gradesMapReversedKeysSortedWithValues = gradesMapReversedKeysSorted.zip(gradesMapReversedValuesSorted)\n\
    \        val gradesMapReversedKeysSortedWithValuesReversed = gradesMapReversedKeysSortedWithValues.map(x\
    \ => (x._2, x._1))\n        val gradesMapReversedKeysSortedWithValuesReversedSorted\
    \ = gradesMapReversedKeysSortedWithValuesReversed.sortWith(_ < _)\n        val\
    \ gradesMapReversedKeysSortedWithValuesReversedSortedWithValues = gradesMapReversedKeysSortedWithValuesReversedSorted.map(x\
    \ => (x._2, x._1))\n        val gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSorted\
    \ = gradesMapReversedKeysSortedWithValuesReversedSortedWithValues.sortWith(_ <\
    \ _)\n        val gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValues\
    \ = gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSorted.map(x\
    \ => (x._2, x._1))\n        val gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSorted\
    \ = gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValues.sortWith(_\
    \ < _)\n        val gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSorted.map(x\
    \ => (x._2, x._1))\n        val gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSortedWithValues\
    \ = gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSortedWithValues.sortWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpah5sk2ul.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSortedWithValues\e\
    [0m = gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSortedWithValues.sortWith\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSortedWithValues\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapReversedKeysSortedWithValuesReversedSortedWithValuesSortedWithValuesSortedWithValues\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpah5sk2ul.scala:27:59 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toString.toUpperCase)\n\e[31m\e\
    [31m   |\e[0m                                                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpah5sk2ul.scala:29:54 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedKeys\e\
    [0m = gradesMapReversed.keys\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue keys is not a member\
    \ of scala.co"
  stdout: ''
  timestamp: 1660010260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesArrayLength = gradesArray.length\n     \
    \   val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0vop2crr.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0vop2crr.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0vop2crr.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0vop2crr.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0vop2crr.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m =\
    \ gradesArray.length"
  stdout: ''
  timestamp: 1660010260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesArrayLength = gradesArray.length\n     \
    \   val gradesMapLength = gradesMap.length\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapKeysLength = gradesMapKeys.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapKeysLength = gradesMapKeys.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapKeysLength = gradesMapKeys.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapKeysLength = gradesMapKeys.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n        val gradesMapKeysLength\
    \ = gradesMapKeys.length\n        val gradesMapValuesLength = gradesMapValues.length\n\
    \        val gradesMapKeysLength = gradesMapKeys.length\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapKeysLength = gradesMapKeys.length\n\
    \        val gradesMapValuesLength = gradesMapValues.length\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx06mkrrx.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx06mkrrx.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysLength\e[0m\
    \ = gradesMapKeys.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgradesMapKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx06mkrrx.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesLength\e\
    [0m = gradesMapValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx06mkrrx.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysLength\e[0m\
    \ = gradesMapKeys.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgradesMapKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx06mkrrx.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |"
  stdout: ''
  timestamp: 1660010259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sort\n        val gradesValuesSorted = gradesValues.sort\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKey\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe_k44u0i.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_k44u0i.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesKeysSortedLength\e[0m = gradesKeysSorted.length\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpe_k44u0i.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_k44u0i.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_k44u0i.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSort"
  stdout: ''
  timestamp: 1660010259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).toMap\n\
    \        val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverse = gradesMapReverse.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverseReverseReverse = gradesMapReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverse = gradesMapReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxn0vko5f.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxn0vko5f.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReverseReverseReverseReverseReverse\e[0m = gradesMapReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverse is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverse\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxn0vko5f.scala:36:12 ---------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(\e[36mx\e\
    [0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverseReverse\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxn0vko5f.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n \
    \       val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3\
    \ = gradesMapSorted2.filter(_._2 > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2\
    \ > 0)\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n   \
    \     val gradesMapSorted6 = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7\
    \ = gradesMapSorted6.filter(_._2 > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2\
    \ > 0)\n        val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n   \
    \     val gradesMapSorted10 = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11\
    \ = gradesMapSorted10.filter(_._2 > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2\
    \ > 0)\n        val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n \
    \       val gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val\
    \ gradesMapSorted15 = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16\
    \ = gradesMapSorted15.filter(_._2 > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2\
    \ > 0)\n        val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n \
    \       val gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val\
    \ gradesMapSorted20 = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21\
    \ = gradesMapSorted20.filter(_._2 > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2\
    \ > 0)\n        val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n \
    \       val gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val\
    \ gradesMapSorted25 = gradesMapSorted24.filter(_._2 > 0)\n        val \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpr26bci7_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpr26bci7_.scala:28:40 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m  value sortBy is not a member of scala.collection.MapView[Float, Float]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr26bci7_.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesMap.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedWithKeys\
    \ = gradesSortedByKeyReversed.map{case (k,v) => (k,v)}\n        val gradesSortedByValueReversedWithKeys\
    \ = gradesSortedByValueReversed.map{case (k,v) => (v,k)}\n        val gradesSortedByKeyReversedWithValues\
    \ = gradesSortedByKeyReversedWithKeys.map{case (k,v) => (v,k)}\n        val gradesSortedByValueReversedWithValues\
    \ = gradesSortedByValueReversedWithKeys.map{case (k,v) => (k,v)}\n        val\
    \ gradesSortedByKeyReversedWithValuesReversed = gradesSortedByKeyReversedWithValues.reverse\n\
    \        val gradesSortedByValueReversedWithValuesReversed = gradesSortedByValueReversedWithValuesReversed.reverse\n\
    \        val gradesSortedByKeyReversedWithValuesReversedWithKeys = gradesSortedByKeyReversedWithValuesReversed.map{case\
    \ (k,v) => (v,k)}\n        val gradesSortedByValueReversedWithValuesReversedWithKeys\
    \ = gradesSortedByValueReversedWithValuesReversed.map{case (k,v) => (k,v)}\n \
    \       val gradesSortedByKeyReversedWithValuesReversedWithValues = gradesSortedByKeyReversedWithValuesReversedWithKeys.map{case\
    \ (k,v) => (v,k)}\n        val gradesSortedByValueReversedWithValuesReversedWithValues\
    \ = gradesSortedByValueReversedWithValuesReversedWithKeys.map{case (k,v) => (k,v)}\n\
    \        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversed = gradesSortedByKeyReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesSortedByValueReversedWithValuesReversedWithValuesReversed =\
    \ gradesSortedByValueReversedWithValuesReversedWithKeys.map{case (k,v) => (v,k)}\n\
    \        val gradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithKeys\
    \ = gradesSortedBy\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyk3dfluy.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyk3dfluy.scala:37:60 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValueReversedWithValuesReversed\e\
    [0m = gradesSortedByValueReversedWithValuesReversed.reverse\n\e[31m\e[31m   |\e\
    [0m                                                            ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByValueReversedWithValuesReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyk3dfluy.scala:44:84\
    \ ------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByKeyReversedWithValuesReversedWithValuesReversedWithKeys\e[0m\
    \ = gradesSortedBy\n\e[31m\e[31m   |\e[0m                                    \
    \                                                ^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                               Not found: gradesSortedBy\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyk3dfluy.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010263
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"D\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"E\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"G\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"H\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"I\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"J\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"K\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"L\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"M\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"N\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"O\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"P\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"Q\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"R\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"S\")).toMap\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8m5wvid.scala:27:45\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => (grade -> \e[31m\"A+\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8m5wvid.scala:28:46 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"B\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8m5wvid.scala:29:46 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"C\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.map(x\
    \ => x._2 + \" \" + x._1)\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.map(x\
    \ => x._2 + \" \" + x._1)\n        val gradesKeysSortedWithIndexAndGradeAndGrades\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3)\n        val gradesValuesSortedWithIndexAndGradeAndGrades =\
    \ gradesValuesSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3)\n        val gradesKeysSortedWithIndexAndGradeAndGradesAndGrades\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4)\n        val gradesValuesSortedWithIndexAndGradeAndGradesAndGrades\
    \ = gradesValuesSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4)\n        val gradesKeysSortedWithIndexAndGradeAndGradesAndGradesAndGrades\
    \ = gradesKeysSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4 + \" \" + x._5)\n        val gradesValuesSortedWithIndexAndGradeAndGradesAndGradesAndGrades\
    \ = gradesValuesSortedWithIndexAndGrade.zipWithIndex.map(x => x._2 + \" \" + x._1\
    \ + \" \" + x._3 + \" \" + x._4 + \" \" + x._5)\n        val gradesKeysSortedWithIndexAndGradeAndGrades\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl30nopqs.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpl30nopqs.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpl30nopqs.scala:43:5 ---------------------\e[0m\e[0m\n\
    \e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n    \
    \    val gradesLength = gradesSorted.length\n        val gradesAverage = gradesSorted.sum\
    \ / gradesLength\n        val gradesSum = gradesSorted.sum\n        val gradesSumOfSquares\
    \ = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresAverage =\
    \ gradesSumOfSquares / gradesLength\n        val gradesSumOfSquaresSum = gradesSumOfSquares.sum\n\
    \        val gradesSumOfSquaresSumOfSquares = gradesSumOfSquaresSum * gradesSumOfSquaresSum\n\
    \        val gradesSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquares\
    \ / gradesLength\n        val gradesSumOfSquaresSumOfSquaresSum = gradesSumOfSquaresSumOfSquares.sum\n\
    \        val gradesSumOfSquaresSumOfSquaresSumOfSquares = gradesSumOfSquaresSumOfSquaresSum\
    \ * gradesSumOfSquaresSumOfSquaresSum\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresAverage\
    \ = gradesSumOfSquaresSumOfSquaresSumOfSquares / gradesLength\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSum\
    \ = gradesSumOfSquaresSumOfSquaresSumOfSquares.sum\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\
    \ = gradesSumOfSquaresSumOfSquaresSumOfSquaresSum * gradesSumOfSquaresSumOfSquaresSumOfSquaresSum\n\
    \        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresAverage = gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\
    \ / gradesLength\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum\
    \ = gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares.sum\n        val gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares\
    \ = gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum * gradesSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum\n\
    \        val gradesSumOfSqu\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5vt5rxd6.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5vt5rxd6.scala:33:55\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSumOfSquaresSum\e[0m = gradesSumOfSquares.sum\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                    value sum is not a member of Float\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5vt5rxd6.scala:45:5 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesMap.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMapReversed\
    \ = gradesSortedByKeyReversedMap.reverse\n        val gradesSortedByValueReversedMapReversed\
    \ = gradesSortedByValueReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMap.reverse\n        val gradesSortedByValueReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMap.reverse\n        val gradesSortedByKeyReversedMapReversedMapReversedMap\
    \ = gradesSortedByKeyReversedMapReversedMapReversed.toMap\n        val gradesSortedByValueReversedMapReversedMapReversedMap\
    \ = gradesSortedByValueReversedMapReversedMapReversed.toMap\n        val gradesSortedByKeyReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n     \
    \   val gradesSortedByValueReversedMapReversedMapReversedMapReversed = gradesSortedByValueReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByValueReversedMapReversedMapReversedMapReversedMapReversed.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp4faa1n4t.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4faa1n4t.scala:42:73 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedByKeyReversedMapReversedMapReversedMapReversed.reverse\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByKeyReversedMapReversedMapReversedMapReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4faa1n4t.scala:43:75\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByValueReversedMapReversedMapReversedMapReversed\e[0m = gradesSortedByValueReversedMapReversedMapReversedMapReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByValueReversedMapReversedMapReversedMapReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp4faa1n4t.scala:44:84\
    \ ---------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedByKeyReversedMapReversedMapReversedMapReversedMapReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                  "
  stdout: ''
  timestamp: 1660010266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.foldLeft(List[String]()){\n            (acc,\
    \ grade) => acc match {\n                case Nil => List(s\"$grade\")\n     \
    \           case x :: xs => if (grade > x) \"B+\" else grade match {\n       \
    \             case _ => \"B\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n                    case _ => \"B-\"\n        \
    \            case _ => \"B-\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvl4o2b8o.scala:119:0 ---------------------------\e\
    [0m\e[0m\n\e[31m119 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpvl4o2b8o.scala:30:42\
    \ -----------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                \e[33mcase\e\
    [0m x :: xs => \e[33mif\e[0m (grade > x) \e[31m\"B+\"\e[0m \e[33melse\e[0m grade\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m>\e[0m in \e[33mclass\e[0m \e[35mFloat\e[0m with types\n\e[31m   |\e\
    [0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m\
    \ (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char):\
    \ Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\
    \e[31m   |\e[0mmatch arguments ((x : String))\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvl4o2b8o.scala:116:5 --------------------\e[0m\e[0m\n\e[31m116\
    \ |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m     Found:\
    \    Unit\n\e[31m    |\e[0m     Required: List[String]\n\e[31m    |\e[0m\n\e[31m\
    \    |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpvl4o2b8o.scala:109:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m109 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660010265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ / 4).reverse).mapValues(_.map(_ % 4).map(x => if (x == 0) \"D\" else if (x ==\
    \ 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap2 = grades.groupBy(_ / 3.7).mapValues(_.toList.sortBy(_\
    \ / 3.7).reverse).mapValues(_.map(_ % 3.7).map(x => if (x == 0) \"D\" else if\
    \ (x == 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap3 = grades.groupBy(_ / 3.3).mapValues(_.toList.sortBy(_\
    \ / 3.3).reverse).mapValues(_.map(_ % 3.3).map(x => if (x == 0) \"D\" else if\
    \ (x == 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap4 = grades.groupBy(_ / 3.0).mapValues(_.toList.sortBy(_\
    \ / 3.0).reverse).mapValues(_.map(_ % 3.0).map(x => if (x == 0) \"D\" else if\
    \ (x == 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap5 = grades.groupBy(_ / 2.7).mapValues(_.toList.sortBy(_\
    \ / 2.7).reverse).mapValues(_.map(_ % 2.7).map(x => if (x == 0) \"D\" else if\
    \ (x == 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap6 = grades.groupBy(_ / 2.3).mapValues(_.toList.sortBy(_\
    \ / 2.3).reverse).mapValues(_.map(_ % 2.3).map(x => if (x == 0) \"D\" else if\
    \ (x == 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap7 = grades.groupBy(_ / 2.0).mapValues(_.toList.sortBy(_\
    \ / 2.0).reverse).mapValues(_.map(_ % 2.0).map(x => if (x == 0) \"D\" else if\
    \ (x == 1) \"C\" else if (x == 2) \"B\" else if (x == 3) \"A\" else \"E\").toList)\n\
    \        val gradesMap8 = grades.groupBy(_ / 1.7).mapValues(_.toList.sortBy(_\
    \ / 1.7).reverse).mapValues(_.map\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1ueirzu9.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1ueirzu9.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReverse\
    \ = gradesSortedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverse\
    \ = gradesSortedMapReverse.map(x => (x._1, x._2)).toMap\n        val gradesSortedMapReverseReverseReverse\
    \ = gradesSortedMapReverseReverse.map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverse.map(x => (x._1, x._2)).toMap\n      \
    \  val gradesSortedMapReverseReverseReverseReverse = gradesSortedMapReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverse.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedMapReverseReverseReverseReverseReverseReverse = gradesSortedMapReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverseReverse.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesSortedMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReverseReverseReverseReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpywbxeewc.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpywbxeewc.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReverseReverseReverseReverse\e[0m = gradesSortedMapReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReverseReverseReverseReverse is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesSortedMapReverseReverseReverseReverse\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpywbxeewc.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesSortedMapReverseReverseReverseReverseReverseReverse.map(\e[36mx\e\
    [0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReverseReverseReverseReverseReverseReverse\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSortedMapReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpywbxeewc.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesSortedMapReverseReverseReverseReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapValuesSorted = gradesMapValues.sortBy(_)\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val\
    \ gradesMapValuesSortedLength = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapValuesSortedLength = grade\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphhb73qvd.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphhb73qvd.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphhb73qvd.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphhb73qvd.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods mu"
  stdout: ''
  timestamp: 1660010271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSortedByValue = gradesKeys.sortBy(_._2)\n        val gradesValuesSortedByKey\
    \ = gradesValues.sortBy(_._1)\n        val gradesKeysSortedByValueAndGrade = gradesKeysSortedByValue.toList\
    \ zip gradesValuesSortedByKey\n        val gradesKeysSortedByValueAndGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGrade.sortBy(_._1)\n        val gradesKeysSortedByValueAndGradeSortedByGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGradeSortedByGrade.sortBy(_._2)\n        val gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGradeSortedByGradeSortedByGrade.sortBy(_._3)\n \
    \       val gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGrade.sortBy(_._4)\n\
    \        val gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade.sortBy(_._5)\n\
    \        val gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade.sortBy(_._6)\n\
    \        val gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade\
    \ = gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade.sortBy(_._7)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdk9b6chf.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdk9b6chf.scala:38:124 --------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade\e\
    [0m = gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade.sortBy(_._6)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpdk9b6chf.scala:39:137 -----------------------\e[0m\e[0m\n\e[31m39 |\e\
    [0m        \e[33mval\e[0m \e[36mgradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade\e\
    [0m = gradesKeysSortedByValueAndGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGradeSortedByGrade.sortBy(_._7)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKey\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:38:"
  stdout: ''
  timestamp: 1660010245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKey\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb8w93cmv.scala:38:"
  stdout: ''
  timestamp: 1660010245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedSorted: Seq[Float]\
    \ = gradesKeysSorted.zip(gradesValuesSorted)\n        val gradesKeysSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSorted.sortBy(x => x._1)\n        val gradesKeysSortedSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSortedSorted.sortBy(x => x._2)\n        val gradesKeysSortedSortedSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSortedSortedSorted.sortBy(x => x._1)\n        val\
    \ gradesKeysSortedSortedSortedSortedSortedSorted: Seq[Float] = gradesKeysSortedSortedSortedSortedSorted.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSortedSortedSortedSortedSorted.sortBy(x => x._1)\n\
    \        val gradesKeysSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Float]\
    \ = gradesKeysSortedSortedSortedSortedSortedSortedSorted.sortBy(x => x._2)\n \
    \       val gradesKeysSortedSortedSortedSortedSortedSortedSortedSorted: Seq[Float]\
    \ = gradesKeysSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x => x._1)\n\
    \        val gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x._1)\n        val gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(x\
    \ => x._2)\n        val gradesKeysSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Seq[Float] = gradesKeysSortedSortedSortedSortedSorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjlua2zlo.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedSortedSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mFloat\e[0m] = gradesKeysSortedSortedSortedSortedSortedSortedSortedSorted.sortBy(\e\
    [36mx\e[0m => x._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedSortedSortedSortedSortedSortedSortedSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesKeysSortedSortedSortedSortedSortedSortedSortedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error: /tmp/tmpjlua2zlo.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpjlua2zlo.scala:33:92 ------------------------\e[0m\e[0m\n\
    \e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedSortedSorted\e[0m:\
    \ \e[35mSeq\e[0m[\e[35mFloat\e[0m] = gradesKeysSortedSorted.sortBy(\e[36mx\e[0m\
    \ => x._1)\n\e[31m\e[31m   |\e[0m                                            \
    \                                              ^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                   value _1 is not a member of Float\n\e[31m\e\
    [31m-- Error: /tmp/tmpjlua2zlo.scala:33:95 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedSortedSorted\e\
    [0m: \e[35mSeq\e[0m[\e[35mFloat\e[0m] = gradesKeysSortedSorted.sortBy(\e[36mx\e\
    [0m => x._1)\n\e[31m"
  stdout: ''
  timestamp: 1660010273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = grades.map(x => x.toInt)\n        val gradesValues =\
    \ grades.map(x => x.toFloat)\n        val gradesValuesWithKeys = gradesKeys.zip(gradesValues)\n\
    \        val gradesValuesWithKeysSorted = gradesValuesWithKeys.sortBy(_._1)\n\
    \        val gradesValuesWithKeysSortedWithKeys = gradesValuesWithKeysSorted.map(x\
    \ => (x._2, x._1))\n        val gradesValuesWithKeysSortedWithKeysReversed = gradesValuesWithKeysSortedWithKeys.reverse\n\
    \        val gradesValuesWithKeysSortedWithKeysReversedWithKeys = gradesValuesWithKeysSortedWithKeysReversed.map(x\
    \ => (x._1, x._2))\n        val gradesValuesWithKeysSortedWithKeysReversedWithKeysReversed\
    \ = gradesValuesWithKeysSortedWithKeysReversedWithKeys.reverse\n        val gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeys\
    \ = gradesValuesWithKeysSortedWithKeysReversedWithKeysReversed.map(x => (x._2,\
    \ x._1))\n        val gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversed\
    \ = gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeys.reverse\n\
    \        val gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversedWithKeys\
    \ = gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversed.map(x\
    \ => (x._1, x._2))\n        val gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed\
    \ = gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversedWithKeys.reverse\n\
    \        val gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversedWithKeys\
    \ = gradesValuesWithKeysSortedWithKeysReversedWithKeysReversedWithKeysReversedWithKeysReversed.map(x\
    \ => (x._2, x._1))\n        val gradesValuesWithKeysSortedWithKeysReversedWithKeysReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvvxq4nnr.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvvxq4nnr.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => (x, \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(x\
    \ => (x, \"B\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(x\
    \ => (x, \"C\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(x\
    \ => (x, \"D\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(x\
    \ => (x, \"E\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(x\
    \ => (x, \"G\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(x\
    \ => (x, \"H\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(x\
    \ => (x, \"I\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(x\
    \ => (x, \"J\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(x\
    \ => (x, \"K\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(x\
    \ => (x, \"L\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(x\
    \ => (x, \"M\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(x\
    \ => (x, \"N\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(x\
    \ => (x, \"O\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(x\
    \ => (x, \"P\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(x\
    \ => (x, \"Q\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(x\
    \ => (x, \"R\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(x\
    \ => (x, \"S\")).toMap\n        val gradesMap20 : Map[Float, String] = grades.map(x\
    \ => (x, \"T\")).toMap\n        val gradesMap21 : Map[Float, String] = grades.map(x\
    \ => (x, \"U\")).toMap\n        val gradesMap22 : Map[Float, \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_o1s1_kw.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_o1s1_kw.scala:27:45 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m,\
    \ \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"A+\"\e[0m)).toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_o1s1_kw.scala:28:46 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"\
    B\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                                      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \          Found:    Map[Float, String]\n\e[31m   |\e[0m                     \
    \    Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_o1s1_kw.scala:29:46 --------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"\
    C\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                                      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \          Found:    Map[Float, String]\n\e[31m   |\e[0m                     \
    \    Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m  "
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(f => -f)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(f => -f)\n        val gradesKeysSortedWithValues = gradesKeysSorted.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversed = gradesKeysSortedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValues = gradesKeysSortedWithValuesReversed.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversed = gradesKeysSortedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValues =\
    \ gradesKeysSortedWithValuesReversedWithValuesReversed.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValues.reverse\n \
    \       val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversed.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4j6sb64k.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp4j6sb64k.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp4j6sb64k.scala:40:113 --------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\e\
    [0m = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp4j6sb64k.scala:42:131 --------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\e\
    [0m = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0mRecur"
  stdout: ''
  timestamp: 1660010273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap2 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap3\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap4 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap5 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap6 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap7\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap8 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap9 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap10 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap11\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap12 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap13 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap14 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap15 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap16\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap17 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap18 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap19 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap20 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap21\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap22 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap23 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap24 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap25 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap26\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps3nc372o.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmps3nc372o.scala:54:5 ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4.0f).mapValues(_.toList).mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap2 = gradesMap.mapValues(_.sortBy(-_._2))\n        val gradesMap3\
    \ = gradesMap2.mapValues(_.sortBy(-_._2))\n        val gradesMap4 = gradesMap3.mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap5 = gradesMap4.mapValues(_.sortBy(-_._2))\n        val gradesMap6\
    \ = gradesMap5.mapValues(_.sortBy(-_._2))\n        val gradesMap7 = gradesMap6.mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap8 = gradesMap7.mapValues(_.sortBy(-_._2))\n        val gradesMap9\
    \ = gradesMap8.mapValues(_.sortBy(-_._2))\n        val gradesMap10 = gradesMap9.mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap11 = gradesMap10.mapValues(_.sortBy(-_._2))\n        val\
    \ gradesMap12 = gradesMap11.mapValues(_.sortBy(-_._2))\n        val gradesMap13\
    \ = gradesMap12.mapValues(_.sortBy(-_._2))\n        val gradesMap14 = gradesMap13.mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap15 = gradesMap14.mapValues(_.sortBy(-_._2))\n        val\
    \ gradesMap16 = gradesMap15.mapValues(_.sortBy(-_._2))\n        val gradesMap17\
    \ = gradesMap16.mapValues(_.sortBy(-_._2))\n        val gradesMap18 = gradesMap17.mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap19 = gradesMap18.mapValues(_.sortBy(-_._2))\n        val\
    \ gradesMap20 = gradesMap19.mapValues(_.sortBy(-_._2))\n        val gradesMap21\
    \ = gradesMap20.mapValues(_.sortBy(-_._2))\n        val gradesMap22 = gradesMap21.mapValues(_.sortBy(-_._2))\n\
    \        val gradesMap23 = gradesMap22.mapValues(_.sortBy(-_._2))\n        val\
    \ gradesMap24 = gradesMap23.mapValues(_.sortBy(-_._2))\n        val gradesMap25\
    \ = gradesMap24.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_vqbxap2.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp_vqbxap2.scala:27:91 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_ / \e[31m4.0f\e\
    [0m).mapValues(_.toList).mapValues(_.sortBy(-_._2))\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \          ^^^^\e[0m\n\e[31m   |\e[0m                                       value\
    \ _2 is not a member of Float\n\e[31m\e[31m-- Error: /tmp/tmp_vqbxap2.scala:27:94\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_ / \e[31m4.0f\e[0m).mapValues(_.toList).mapValues(_.sortBy(-_._2))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                      ^\e[0m\n\e[31m   |\e[0mambiguous given\
    \ instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mBigInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp_vqbxap2.scala:28:57 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m = gradesMap.mapValues(_.sortBy(-_._2))\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value _2 is not a member\
    \ of Float\n\e[31m\e[31m-- Error: /tmp/tmp_vqbxap2.scala:28:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m = gradesMap.mapValues(_.sortBy(-_._2))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m\
    \ \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject"
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap2 = grades.groupBy(_ > 3.7f && _ < 3.3f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap3 = grades.groupBy(_ > 3.3f && _ < 3.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap4 = grades.groupBy(_ > 3.0f && _ < 2.7f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap5 = grades.groupBy(_ > 2.7f && _ < 2.3f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap6 = grades.groupBy(_ > 2.3f && _ < 2.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap7 = grades.groupBy(_ > 2.0f && _ < 1.7f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap8 = grades.groupBy(_ > 1.7f && _ < 1.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap9 = grades.groupBy(_ > 1.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap10 = grades.groupBy(_ > 0.7f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap11 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap12 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap13 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap14 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap15 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap16 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap17 = grades.groupBy(_ > 0.0f).mapValues(_.map(_\
    \ % 4.0f).sum)\n        val gradesMap18 = grades.group\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpoutt44ia.scala:28:40 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m = grades.groupBy(_\
    \ > \e[31m3.7f\e[0m && _ < \e[31m3.3f\e[0m).mapValues(_.map(_ % \e[31m4.0f\e[0m).sum)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpoutt44ia.scala:29:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMap3\e[0m = grades.groupBy(_ > \e[31m3.3f\e[0m && _ < \e[31m3.0f\e\
    [0m).mapValues(_.map(_ % \e[31m4.0f\e[0m).sum)\n\e[31m\e[31m   |\e[0m        \
    \                                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpoutt44ia.scala:30:40 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesMap4\e[0m = grades.groupBy(_\
    \ > \e[31m3.0f\e[0m && _ < \e[31m2.7f\e[0m).mapValues(_.map(_ % \e[31m4.0f\e[0m).sum)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpoutt44ia.scala:31:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMap5\e[0m = grades.groupBy(_ > \e[31m2.7f\e[0m && _ < \e[31m2.3f\e\
    [0m).mapValues(_.map(_ % \e[31m4.0f\e[0m).sum)\n\e[31m\e[31m   |\e[0m        \
    \                                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpoutt44ia.scala:32:40 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMap6\e[0m = grades.groupBy(_\
    \ > \e[31m2.3f\e[0m && _ < \e[31m2.0f\e[0m).mapValues(_.map(_ % \e[31m4.0f\e[0m).sum)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          "
  stdout: ''
  timestamp: 1660010274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(x\
    \ => (x, \"A+\")).toMap\n        val gradesMap2 = grades.map(x => (x, \"B\")).toMap\n\
    \        val gradesMap3 = grades.map(x => (x, \"C\")).toMap\n        val gradesMap4\
    \ = grades.map(x => (x, \"D\")).toMap\n        val gradesMap5 = grades.map(x =>\
    \ (x, \"E\")).toMap\n        val gradesMap6 = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap7 = grades.map(x => (x, \"G\")).toMap\n        val gradesMap8\
    \ = grades.map(x => (x, \"H\")).toMap\n        val gradesMap9 = grades.map(x =>\
    \ (x, \"I\")).toMap\n        val gradesMap10 = grades.map(x => (x, \"J\")).toMap\n\
    \        val gradesMap11 = grades.map(x => (x, \"K\")).toMap\n        val gradesMap12\
    \ = grades.map(x => (x, \"L\")).toMap\n        val gradesMap13 = grades.map(x\
    \ => (x, \"M\")).toMap\n        val gradesMap14 = grades.map(x => (x, \"N\")).toMap\n\
    \        val gradesMap15 = grades.map(x => (x, \"O\")).toMap\n        val gradesMap16\
    \ = grades.map(x => (x, \"P\")).toMap\n        val gradesMap17 = grades.map(x\
    \ => (x, \"Q\")).toMap\n        val gradesMap18 = grades.map(x => (x, \"R\")).toMap\n\
    \        val gradesMap19 = grades.map(x => (x, \"S\")).toMap\n        val gradesMap20\
    \ = grades.map(x => (x, \"T\")).toMap\n        val gradesMap21 = grades.map(x\
    \ => (x, \"U\")).toMap\n        val gradesMap22 = grades.map(x => (x, \"V\")).toMap\n\
    \        val gradesMap23 = grades.map(x => (x, \"W\")).toMap\n        val gradesMap24\
    \ = grades.map(x => (x, \"X\")).toMap\n        val gradesMap25 = grades.map(x\
    \ => (x, \"Y\")).toMap\n        val gradesMap26 = grades.map(x => (x, \"Z\")).toMap\n\
    \        val gradesMap27 = grades.map(x => (x, \"A\")).toMap\n        val gradesMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl8hc4wrx.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpl8hc4wrx.scala:27:45 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m,\
    \ \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"A+\"\e[0m)).toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl8hc4wrx.scala:55:5 ---------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversed\
    \ = gradesSorted.sortBy(x => x).reverse\n        val gradesSortedMapReversedMap\
    \ = gradesSortedMapReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversed\
    \ = gradesSortedMapReversed.sortBy(x => x).reverse.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversed.sortBy(x => x).reverse.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversed.sortBy(x => x).reverse.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfu9xb3bf.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed.sortBy(\e\
    [36mx\e[0m => x).reverse.map(\e[36mx\e[0m => (x.toInt, x)).toMap\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpfu9xb3bf.scala:33:95 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedMapReversedMapReversed.sortBy(\e[36mx\e[0m => x).reverse.map(\e\
    [36mx\e[0m => (x.toInt, x)).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value sortBy is not a member of Map[Int,\
    \ Float]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfu9xb3bf.scala:39:115\
    \ -----------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n"
  stdout: ''
  timestamp: 1660010272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3\
    \ = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5\
    \ = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7\
    \ = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9\
    \ = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11\
    \ = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13\
    \ = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15\
    \ = gradesMapSortedReversedValuesSum14 * gradesMapSortedReversedValues\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpaxaus_wz.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaxaus_wz.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp84b2ierm.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp84b2ierm.scala:27:59\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(_ / \e[31m10\e[0m).mapValues(_.toInt)\n\e\
    [31m\e[31m   |\e[0m                                                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp84b2ierm.scala:28:40 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue sortBy is not a member of scala.collection.MapView[Float, Nothing]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp84b2ierm.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesAvg = (gradesSum\
    \ / gradesKeys.size)\n        val gradesDiff = gradesAvg - grades\n        val\
    \ gradesDiffMap = gradesDiff map { x => (x.toInt, x) }.toMap\n        val gradesDiffKeys\
    \ = gradesDiffMap.keys\n        val gradesDiffValues = gradesDiffMap.values.toList\n\
    \        val gradesDiffSum = gradesDiffValues.sum\n        val gradesDiffAvg =\
    \ (gradesDiffSum / gradesDiffKeys.size)\n        val gradesDiffDiff = gradesDiffAvg\
    \ - gradesAvg\n        val gradesDiffDiffMap = gradesDiffDiff map { x => (x.toInt,\
    \ x) }.toMap\n        val gradesDiffDiffKeys = gradesDiffDiffMap.keys\n      \
    \  val gradesDiffDiffValues = gradesDiffDiffMap.values.toList\n        val gradesDiffDiffSum\
    \ = gradesDiffDiffValues.sum\n        val gradesDiffDiffAvg = (gradesDiffDiffSum\
    \ / gradesDiffDiffKeys.size)\n        val gradesDiffDiffDiff = gradesDiffDiffAvg\
    \ - gradesDiffAvg\n        val gradesDiffDiffDiffMap = gradesDiffDiffDiff map\
    \ { x => (x.toInt, x) }.toMap\n        val gradesDiffDiffDiffKeys = gradesDiffDiffDiffMap.keys\n\
    \        val gradesDiffDiffDiffValues = gradesDiffDiffDiffMap.values.toList\n\
    \        val gradesDiffDiffDiffSum = gradesDiffDiffDiffValues.sum\n        val\
    \ gradesDiffDiffDiffAvg = (gradesDiffDiffDiffSum / gradesDiffDiffDiffKeys.size)\n\
    \        val gradesDiffDiffDiffDiff = gradesDiffDiffDiffAvg - gradesDiffDiffAvg\n\
    \        val gradesDiffDiffDiffDiffMap = gradesDiffDiffDiffDiff map { x => (x.toInt,\
    \ x) }.toMap\n        val gradesDiffDiffDiffDiffKeys = gradesDiffDiffDiffDiffMap.keys\n\
    \        val gradesDiffDiffDiffDiffValues = gradesDiffDiffDiffDiffMap.values.toList\n\
    \        val gradesDiffDiffDiffDiffSum = gradesDiffDiffDiffDiffValues.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpth3scpf6.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error:\
    \ /tmp/tmpth3scpf6.scala:32:35 -----------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesDiff\e[0m = gradesAvg - grades\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e\
    [0m \e[35mFloat\e[0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m \
    \  |\e[0m (x: Float): Float\n\e[31m   |\e[0m (x: Long): Float\n\e[31m   |\e[0m\
    \ (x: Int): Float\n\e[31m   |\e[0m (x: Char): Float\n\e[31m   |\e[0m (x: Short):\
    \ Float\n\e[31m   |\e[0m (x: Byte): Float\n\e[31m   |\e[0mmatch arguments ((grades\
    \ : List[Float]))\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpth3scpf6.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesValuesWithZero = gradesValues.filter(_ != 0)\n        val gradesValuesWithZeroLength\
    \ = gradesValuesWithZero.length\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength\
    \ - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n\
    \        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n   \
    \     val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n      \
    \  val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val\
    \ gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength\
    \ = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength\
    \ - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n\
    \        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n   \
    \     val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n      \
    \  val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val\
    \ gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength\
    \ = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength\
    \ - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n\
    \        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n   \
    \     val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n      \
    \  val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val\
    \ gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength\
    \ = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength\
    \ - 1\n        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n\
    \        val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n   \
    \     val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n      \
    \  val gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val\
    \ gradesValuesWithZeroLength = gradesValuesWithZeroLength - 1\n        val gradesValuesWithZeroLength\
    \ = gradesValue\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcxkcx2ox.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesWithZeroLength\e\
    [0m = gradesValuesWithZeroLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgradesValuesWithZeroLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesValuesWithZeroLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcxkcx2ox.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesWithZeroLength\e\
    [0m = gradesValuesWithZeroLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgradesValuesWithZeroLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesValuesWithZeroLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcxkcx2ox.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesWithZeroLength\e\
    [0m = gradesValuesWithZeroLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgradesValuesWithZeroLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesValuesWithZeroLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcxkcx2ox.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesWithZeroLength\e\
    [0m = gradesValuesWithZeroLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgradesValuesWithZeroLength is already defined as \e[33mvalue\e[0m \e\
    [35mgradesValuesWithZeroLength\e[0m\n\e[31m   |\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1660010274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGrade\
    \ = grades.sortWith(_ < _)\n        val gradesSortedByGradeMap = gradesSortedByGrade.toMap\n\
    \        val gradesSortedByGradeMapKeys = gradesSortedByGradeMap.keys\n      \
    \  val gradesSortedByGradeMapValues = gradesSortedByGradeMap.values.toList\n \
    \       val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val gradesSortedByGradeMapValuesLength = gradesSortedByGradeMapValues.length\n\
    \        val grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjll5iwff.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjll5iwff.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByGradeMapValuesLength\e[0m = gradesSortedByGradeMapValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByGradeMapValuesLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesSortedByGradeMapValuesLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjll5iwff.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByGradeMapValuesLength\e[0m = gradesSortedByGradeMapValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByGradeMapValuesLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesSortedByGradeMapValuesLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjll5iwff.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByGradeMapValuesLength\e[0m = gradesSortedByGradeMapValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByGradeMapValuesLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesSortedByGradeMapValuesLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjll5iwff.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSorted"
  stdout: ''
  timestamp: 1660010274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesKeys.length\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesMin =\
    \ gradesValues.min\n        val gradesMax = gradesValues.max\n        val gradesSumOfSquares\
    \ = gradesValues.map(x => x * x).sum\n        val gradesSumOfSquaresAverage =\
    \ gradesSumOfSquares / gradesLength\n        val gradesSumOfSquaresMin = gradesSumOfSquares.min\n\
    \        val gradesSumOfSquaresMax = gradesSumOfSquares.max\n        val gradesSumOfSquaresSum\
    \ = gradesValues.map(x => x * x).sum\n        val gradesSumOfSquaresSumAverage\
    \ = gradesSumOfSquaresSum / gradesLength\n        val gradesSumOfSquaresSumMin\
    \ = gradesSumOfSquaresSum.min\n        val gradesSumOfSquaresSumMax = gradesSumOfSquaresSum.max\n\
    \        val gradesSumOfSquaresSumSum = gradesValues.map(x => x * x).sum\n   \
    \     val gradesSumOfSquaresSumSumAverage = gradesSumOfSquaresSumSum / gradesLength\n\
    \        val gradesSumOfSquaresSumSumMin = gradesSumOfSquaresSumSum.min\n    \
    \    val gradesSumOfSquaresSumSumMax = gradesSumOfSquaresSumSum.max\n        val\
    \ gradesSumOfSquaresSumSumSum = gradesValues.map(x => x * x).sum\n        val\
    \ gradesSumOfSquaresSumSumSumAverage = gradesSumOfSquaresSumSumSum / gradesLength\n\
    \        val gradesSumOfSquaresSumSumSumMin = gradesSumOfSquaresSumSumSum.min\n\
    \        val gradesSumOfSquaresSumSumSumMax = gradesSumOfSquaresSumSumSum.max\n\
    \        val gradesSumOfSquaresSumSumSumSum = gradesValues.map(x => x * x).sum\n\
    \        val gradesSumOfSquaresSumSumSumSumAverage = gradesSumOfSquaresSumSumSumSum\
    \ / gradesLength\n        val \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpfmk21ndq.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpfmk21ndq.scala:30:38 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesLength\e[0m = gradesKeys.length\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value length is not a member of Iterable[Int]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfmk21ndq.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010274
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float,\
    \ String]()){\n            case (acc, grade) =>\n                val key = grade\
    \ / 4.0f\n                val value = if (grade > 3.7f) \"A+\" else if (grade\
    \ > 3.3f) \"A\" else if (grade > 2.7f) \"A-\" else if (grade > 2.3f) \"B+\" else\
    \ if (grade > 1.7f) \"B\" else if (grade > 1.3f) \"B-\" else if (grade > 0.7f)\
    \ \"C+\" else if (grade > 0.3f) \"C\" else if (grade > 0.0f) \"C-\" else \"D+\"\
    \n                acc + (key -> value)\n        }\n        val gradesList : List[String]\
    \ = gradesMap.keys.toList.sortWith(_ < _).map(key => gradesMap(key))\n       \
    \ gradesList.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6y3v_cmd.scala:37)\n\tat Problem.main(tmp6y3v_cmd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapKeysSorted = gradesMapKeys.sortBy(_)\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sortBy(_)\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSor\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpom5d7uf0.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpom5d7uf0.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpom5d7uf0.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpom5d7uf0.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the"
  stdout: ''
  timestamp: 1660010201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum).toMap\n        val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverse = gradesMapReverse.map(x => (x._1, x._2)).toMap\n\
    \        gradesMapReverseReverse.map(x => x._1 -> x._2).toList.sortBy(x => x._1).reverse.map(x\
    \ => x._2).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_b4u955o.scala:30:103\
    \ -------------------\e[0m\e[0m\n\e[31m30 |\e[0m        gradesMapReverseReverse.map(\e\
    [36mx\e[0m => x._1 -> x._2).toList.sortBy(\e[36mx\e[0m => x._1).reverse.map(\e\
    [36mx\e[0m => x._2).reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mFloat\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedSortedByKey = gradesMapSorted.sortBy(_._2)\n\
    \        val gradesMapSortedSortedByKeyReversed = gradesMapSortedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKey = gradesMapSortedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversed = gradesMapSortedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n     \
    \   val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcfi58a9g.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpcfi58a9g.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpcfi58a9g.scala:41:5 ---------------------\e[0m\e[0m\n\
    \e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA\
    \ = grades.sortBy(_.toFloat)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n\
    \        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesMap = gradesSortedByGPAReversedValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesKeys = gradesSortedByGPAReversedValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValues = gradesSortedByGPAReversedValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesMap = gradesSortedByGPAReversedValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesKeys = gradesSortedByGPAReversedValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValues = gradesSortedByGPAReversedValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesMap = gradesSortedByGPAReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesKeys = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesValues = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesMap\
    \ = gradesSortedByGPAReversedValuesValuesValuesValuesValuesValuesValuesMap.keys.toList\n\
    \        val gradesSortedByGP\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzoz6wr6n.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpzoz6wr6n.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- Error: /tmp/tmpzoz6wr6n.scala:30:74\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m30 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesSortedByGPAReversedMap\e[0m = gradesSortedByGPAReversed.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \   Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m     \
    \                                 where:    K is a type variable\n\e[31m   |\e\
    [0m                                                V is a type variable\n\e[31m\
    \   |\e[0m                                      .\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpzoz6wr6n.scala:43:68 ------------------------\e[0m\e[0m\n\e[31m43\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAReversedValuesValuesValuesValuesKeys\e\
    [0m = gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap.keys\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m   Not found: gradesSortedByGPAReversedValuesValuesValuesValuesValuesMap\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzoz6wr6n.scala:45:79\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m    "
  stdout: ''
  timestamp: 1660010279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedReversed\
    \ = gradesSortedByKeyReversed.reverse\n        val gradesSortedByValueReversedReversed\
    \ = gradesSortedByValueReversed.reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversed\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpruw_o6oh.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmpruw_o6oh.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpruw_o6oh.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values\n\
    \        val gradesLength = gradesKeys.size\n        val gradesSum = gradesValues.foldLeft(0.0f){\
    \ (sum, grade) => sum + grade }\n        val gradesAverage = gradesSum / gradesLength\n\
    \        val gradesDiff = gradesAverage - gradesMap.values.head\n        val gradesDiffLength\
    \ = gradesDiff.size\n        val gradesDiffSum = gradesDiff.foldLeft(0.0f){ (sum,\
    \ grade) => sum + grade }\n        val gradesDiffAverage = gradesDiffSum / gradesDiffLength\n\
    \        val gradesDiffDiff = gradesDiffAverage - gradesDiff.head\n        val\
    \ gradesDiffDiffLength = gradesDiffDiff.size\n        val gradesDiffDiffSum =\
    \ gradesDiffDiff.foldLeft(0.0f){ (sum, grade) => sum + grade }\n        val gradesDiffDiffAverage\
    \ = gradesDiffDiffSum / gradesDiffDiffLength\n        val gradesDiffDiffDiff =\
    \ gradesDiffDiffAverage - gradesDiffDiff.head\n        val gradesDiffDiffDiffLength\
    \ = gradesDiffDiffDiff.size\n        val gradesDiffDiffDiffSum = gradesDiffDiffDiff.foldLeft(0.0f){\
    \ (sum, grade) => sum + grade }\n        val gradesDiffDiffDiffAverage = gradesDiffDiffDiffSum\
    \ / gradesDiffDiffDiffLength\n        val gradesDiffDiffDiffDiff = gradesDiffDiffDiffAverage\
    \ - gradesDiffDiffDiff.head\n        val gradesDiffDiffDiffDiffLength = gradesDiffDiffDiffDiff.size\n\
    \        val gradesDiffDiffDiffDiffSum = gradesDiffDiffDiffDiff.foldLeft(0.0f){\
    \ (sum, grade) => sum + grade }\n        val gradesDiffDiffDiffDiffAverage = gradesDiffDiffDiffDiffSum\
    \ / gradesDiffDiffDiffDiffLength\n        val gradesDiffDiffDiffDiffDiff = gradesDiffDiffDiffDiffAverage\
    \ - gradesDiffDiffDiffDiff.head\n        val gradesDiffDiffDiffDiffDiffLength\
    \ = gradesDiffDiffDiffDiffDiff.size\n        val gradesDiffDiffDiffDiffDiffSum\
    \ = gradesDiffDiffDiffDiffDiff.foldLeft(0.0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjrhawfcl.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjrhawfcl.scala:34:42\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesDiffLength\e[0m = gradesDiff.size\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            value size is not a member of Float\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpjrhawfcl.scala:35:39 ------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesDiffSum\e[0m = gradesDiff.foldLeft(\e\
    [31m0.0f\e[0m){ (\e[36msum\e[0m, \e[36mgrade\e[0m) => sum + grade }\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            value foldLeft is not a member of Float\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpjrhawfcl.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n    \
    \    val gradesSum = gradesSorted.sum\n        val gradesCount = gradesSorted.length\n\
    \        val gradesAverage = gradesSum / gradesCount\n        val gradesSumOfSquares\
    \ = gradesSorted.map(x => x * x).sum\n        val gradesSumOfSquaresAverage =\
    \ gradesSumOfSquares / gradesCount\n        val gradesSumOfSquaresAverageSquare\
    \ = gradesSumOfSquares * (gradesSumOfSquares - gradesAverage) * (gradesSumOfSquares\
    \ - gradesAverage)\n        val gradesSumOfSquaresAverageSquareRoot = math.sqrt(gradesSumOfSquaresAverageSquare)\n\
    \        val gradesSumOfSquaresAverageSquareRootSquare = gradesSumOfSquaresAverageSquareRoot\
    \ * gradesSumOfSquaresAverageSquare\n        val gradesSumOfSquaresAverageSquareRootSquareRoot\
    \ = math.sqrt(gradesSumOfSquaresAverageSquareRootSquare)\n        val gradesSumOfSquaresAverageSquareRootSquareRootSquare\
    \ = gradesSumOfSquaresAverageSquareRootSquare * gradesSumOfSquaresAverageSquareRootSquare\n\
    \        val gradesSumOfSquaresAverageSquareRootSquareRootSquareRoot = math.sqrt(gradesSumOfSquaresAverageSquareRootSquareRootSquare)\n\
    \        val gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare = gradesSumOfSquaresAverageSquareRootSquareRootSquare\
    \ * gradesSumOfSquaresAverageSquareRootSquareRootSquare\n        val gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare\
    \ = math.sqrt(gradesSumOfSquaresAverageSquareRootSquareRootSquareRoot)\n     \
    \   val gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare = gradesSumOfSquaresAverageSquareRootSquareRootSquare\
    \ * gradesSumOfSquaresAverageSquareRootSquareRootSquare\n        val gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquareRoot\
    \ = math.sqrt(gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare)\n\
    \        val gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquareRootSquare\
    \ = gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare * gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare\n\
    \        val gradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquareRootSquareRoot\
    \ = math.sqrt(gradesSumOfSquaresAverageSquare\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp81hfzjcq.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp81hfzjcq.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare\e[0m = math.sqrt(gradesSumOfSquaresAverageSquareRootSquareRootSquareRoot)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp81hfzjcq.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare\e\
    [0m = gradesSumOfSquaresAverageSquareRootSquareRootSquare * gradesSumOfSquaresAverageSquareRootSquareRootSquare\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSumOfSquaresAverageSquareRootSquareRootSquareRootSquare\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp81hfzjcq.scala:45:5 ---------------------\e[0m\e[0m\n\
    \e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-e"
  stdout: ''
  timestamp: 1660010279
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSet = grades.toSet\n        val gradesSetSize\
    \ = grades.size\n        val gradesSetIterator = grades.iterator\n        val\
    \ gradesSetIteratorSize = gradesSetIterator.size\n        val gradesSetIteratorIterator\
    \ = gradesSetIterator.iterator\n        val gradesSetIteratorIteratorSize = gradesSetIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIterator = gradesSetIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorSize = gradesSetIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIterator = gradesSetIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorSize = gradesSetIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIterator = gradesSetIteratorIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorSize = gradesSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gradesSetIteratorIteratorIteratorIteratorIterator.iterator\n        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIterator.size\n        val\
    \ gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ gradesSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n       \
    \ val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n \
    \       val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7o65z88e.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7o65z88e.scala:40:84\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e[0m\
    \ = gradesSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    Not found: gradesSetIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7o65z88e.scala:41:88\
    \ ------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = gradesSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    Not found: gradesSetIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7o65z88e.scala:45:128\
    \ -----------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = gradesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesSetI"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedWithDuplicates\
    \ = gradesSortedByKeyReversed.filter(_._2 > 1)\n        val gradesSortedByValueReversedWithDuplicates\
    \ = gradesSortedByValueReversed.filter(_._2 > 1)\n        val gradesSortedByKeyReversedWithDuplicatesSortedByValue\
    \ = gradesSortedByKeyReversedWithDuplicates.sortBy(_._1)\n        val gradesSortedByValueReversedWithDuplicatesSortedByValue\
    \ = gradesSortedByValueReversedWithDuplicates.sortBy(_._1)\n        val gradesSortedByKeyReversedWithDuplicatesSortedByValueReversed\
    \ = gradesSortedByKeyReversedWithDuplicatesSortedByValue.reverse\n        val\
    \ gradesSortedByValueReversedWithDuplicatesSortedByValueReversed = gradesSortedByValueReversedWithDuplicatesSortedByValue.reverse\n\
    \        val gradesSortedByKeyReversedWithDuplicatesSortedByValueReversedWithDuplicates\
    \ = gradesSortedByKeyReversedWithDuplicatesSortedByValueReversed.filter(_._2 >\
    \ 1)\n        val gradesSortedByValueReversedWithDuplicatesSortedByValueReversedWithDuplicates\
    \ = gradesSortedByValueReversedWithDuplicatesSortedByValueReversed.filter(_._2\
    \ > 1)\n        val gradesSortedByKeyReversedWithDuplicatesSortedByValueReversedWithDuplicatesSortedByValue\
    \ = gradesSortedByKeyReversedWithDuplicatesSortedByValueReversedWithDuplicates.sortBy(_._1)\n\
    \        val gradesSortedByValueReversedWithDuplicatesSortedByValueReversedWithDuplicatesSortedByValue\
    \ = gradesSortedByValueReversedWithDuplicatesSortedByValueReversed.sortBy(_._1)\n\
    \        val gradesSortedByKeyReversedWithDuplicatesSortedByValueReversedWithDuplicatesSortedByValueReversed\
    \ = gradesSortedByKeyReversedWithDuplicatesSortedByValueReversedWithDuplicatesSortedByValue.reverse\n\
    \        val gradesSortedByValueReversedWithDuplicatesSortedByValueReversedWithDuplicatesSortedByValueReversed\
    \ = gradesSortedByValueReversedWithDuplicates\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpaaap1sv3.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaaap1sv3.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesEnumerator\
    \ = grades.iterator\n        val gradesIterator = grades.iterator\n        val\
    \ gradesEnumerator2 = grades.iterator\n        val gradesIterator2 = grades.iterator\n\
    \        val gradesEnumerator3 = grades.iterator\n        val gradesIterator3\
    \ = grades.iterator\n        val gradesEnumerator4 = grades.iterator\n       \
    \ val gradesIterator4 = grades.iterator\n        val gradesEnumerator5 = grades.iterator\n\
    \        val gradesIterator5 = grades.iterator\n        val gradesEnumerator6\
    \ = grades.iterator\n        val gradesIterator6 = grades.iterator\n        val\
    \ gradesEnumerator7 = grades.iterator\n        val gradesIterator7 = grades.iterator\n\
    \        val gradesEnumerator8 = grades.iterator\n        val gradesIterator8\
    \ = grades.iterator\n        val gradesEnumerator9 = grades.iterator\n       \
    \ val gradesIterator9 = grades.iterator\n        val gradesEnumerator10 = grades.iterator\n\
    \        val gradesIterator10 = grades.iterator\n        val gradesEnumerator11\
    \ = grades.iterator\n        val gradesIterator11 = grades.iterator\n        val\
    \ gradesEnumerator12 = grades.iterator\n        val gradesIterator12 = grades.iterator\n\
    \        val gradesEnumerator13 = grades.iterator\n        val gradesIterator13\
    \ = grades.iterator\n        val gradesEnumerator14 = grades.iterator\n      \
    \  val gradesIterator14 = grades.iterator\n        val gradesEnumerator15 = grades.iterator\n\
    \        val gradesIterator15 = grades.iterator\n        val gradesEnumerator16\
    \ = grades.iterator\n        val gradesIterator16 = grades.iterator\n        val\
    \ gradesEnumerator17 = grades.iterator\n        val gradesIterator17 = grades.iterator\n\
    \        val gradesEnumerator18 = grades.iterator\n        val gradesIterator18\
    \ = grades.iterator\n        val gradesEnumerator19 = grades.iterator\n      \
    \  val gradesIterator19 = grades.iterator\n        val gradesEnumerator20 = grades.iterator\n\
    \        val gradesIterator20 = grades.iterator\n        val gradesEnumerator21\
    \ = grades.iterator\n        val gradesIterator21 = grades.iterator\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpugzjwvzk.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpugzjwvzk.scala:75:5\
    \ ---------------------\e[0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010284
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toString -> x)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3\
    \ = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5\
    \ = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7\
    \ = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9\
    \ = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11\
    \ = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13\
    \ = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15\
    \ = gradesMapSortedReversedValuesSum14 * grade\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7_1rz84s.scala:30:66 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedKeys\e\
    [0m = gradesMapSortedReversed.keys\n\e[31m\e[31m   |\e[0m                    \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ keys is not a member of List[(String, Float)] - did you mean gradesMapSortedReversed.head?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7_1rz84s.scala:31:68 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValues\e\
    [0m = gradesMapSortedReversed.values\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   value values is not a member of List[(String, Float)]\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7_1rz84s.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.toIterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.toMap\n        val gradesMap\
    \ = grades.toMap\n        val gradesMap = grades.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpohbwbl_r.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpohbwbl_r.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpohbwbl_r.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpohbwbl_r.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpohbwbl_r.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded met"
  stdout: ''
  timestamp: 1660010286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(_)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(_)\n        val gradesKeysSortedWithDuplicates = gradesKeysSorted.distinct\n\
    \        val gradesValuesSortedWithDuplicates = gradesValuesSorted.distinct\n\
    \        val gradesKeysSortedWithDuplicatesSorted = gradesKeysSortedWithDuplicates.sortBy(_)\n\
    \        val gradesValuesSortedWithDuplicatesSorted = gradesValuesSortedWithDuplicates.sortBy(_)\n\
    \        val gradesKeysSortedWithDuplicatesSortedWithDuplicates = gradesKeysSortedWithDuplicatesSorted.distinct\n\
    \        val gradesValuesSortedWithDuplicatesSortedWithDuplicates = gradesValuesSortedWithDuplicatesSorted.distinct\n\
    \        val gradesKeysSortedWithDuplicatesSortedWithDuplicatesSorted = gradesKeysSortedWithDuplicatesSortedWithDuplicates.sortBy(_)\n\
    \        val gradesValuesSortedWithDuplicatesSortedWithDuplicatesSorted = gradesValuesSortedWithDuplicatesSortedWithDuplicates.sortBy(_)\n\
    \        val gradesKeysSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates\
    \ = gradesKeysSortedWithDuplicatesSortedWithDuplicatesSorted.distinct\n      \
    \  val gradesValuesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates\
    \ = gradesValuesSortedWithDuplicatesSortedWithDuplicatesSorted.distinct\n    \
    \    val gradesKeysSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted\
    \ = gradesKeysSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.sortBy(_)\n\
    \        val gradesValuesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted\
    \ = gradesValuesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.sortBy(_)\n\
    \        val gradesKeysSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates\
    \ = gradesKeysSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.distinct\n\
    \        val gradesValuesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicates\
    \ = gradesValuesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSortedWithDuplicatesSorted.distinct\n\
    \        val gradesKeysSortedWithDuplicate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0_2ao8rz.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp0_2ao8rz.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmp0_2ao8rz.scala:30:49 -----------------------------\e[0m\e[0m\n\
    \e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSorted\e[0m = gradesKeys.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$1 of expanded function:\n\e[31m\
    \   |\e[0m   _$1 => gradesKeys.sortBy(_$1).\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmp0_2ao8rz.scala:31:53 -----------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSorted\e[0m = gradesValues.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                                                     ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$2 of expanded function:\n\e\
    [31m   |\e[0m   _$2 => gradesValues.sortBy(_$2).\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmp0_2ao8rz.scala:34:89 -----------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithDuplicatesSorted\e[0m\
    \ = gradesKeysSortedWithDuplicates.sortBy(_)\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m   I could not infer the typ"
  stdout: ''
  timestamp: 1660010286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesEnumerator\
    \ = grades.iterator\n        val gradesIterator = grades.iterator\n        val\
    \ gradesEnumerator2 = grades.iterator\n        val gradesIterator2 = grades.iterator\n\
    \        val gradesEnumerator3 = grades.iterator\n        val gradesIterator3\
    \ = grades.iterator\n        val gradesEnumerator4 = grades.iterator\n       \
    \ val gradesIterator4 = grades.iterator\n        val gradesEnumerator5 = grades.iterator\n\
    \        val gradesIterator5 = grades.iterator\n        val gradesEnumerator6\
    \ = grades.iterator\n        val gradesIterator6 = grades.iterator\n        val\
    \ gradesEnumerator7 = grades.iterator\n        val gradesIterator7 = grades.iterator\n\
    \        val gradesEnumerator8 = grades.iterator\n        val gradesIterator8\
    \ = grades.iterator\n        val gradesEnumerator9 = grades.iterator\n       \
    \ val gradesIterator9 = grades.iterator\n        val gradesEnumerator10 = grades.iterator\n\
    \        val gradesIterator10 = grades.iterator\n        val gradesEnumerator11\
    \ = grades.iterator\n        val gradesIterator11 = grades.iterator\n        val\
    \ gradesEnumerator12 = grades.iterator\n        val gradesIterator12 = grades.iterator\n\
    \        val gradesEnumerator13 = grades.iterator\n        val gradesIterator13\
    \ = grades.iterator\n        val gradesEnumerator14 = grades.iterator\n      \
    \  val gradesIterator14 = grades.iterator\n        val gradesEnumerator15 = grades.iterator\n\
    \        val gradesIterator15 = grades.iterator\n        val gradesEnumerator16\
    \ = grades.iterator\n        val gradesIterator16 = grades.iterator\n        val\
    \ gradesEnumerator17 = grades.iterator\n        val gradesIterator17 = grades.iterator\n\
    \        val gradesEnumerator18 = grades.iterator\n        val gradesIterator18\
    \ = grades.iterator\n        val gradesEnumerator19 = grades.iterator\n      \
    \  val gradesIterator19 = grades.iterator\n        val gradesEnumerator20 = grades.iterator\n\
    \        val gradesIterator20 = grades.iterator\n        val gradesEnumerator21\
    \ = grades.iterator\n        val gradesIterator21 = grades.iterator\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpugzjwvzk.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpugzjwvzk.scala:75:5\
    \ ---------------------\e[0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010284
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map {\n            case 4.0f => \"A+\"\n\
    \            case 3.7f => \"A\"\n            case 3.3f => \"A-\"\n           \
    \ case 3.0f => \"B+\"\n            case 2.7f => \"B\"\n            case 2.3f =>\
    \ \"B-\"\n            case 2.0f => \"C+\"\n            case 1.7f => \"C\"\n  \
    \          case 1.3f => \"C-\"\n            case 1.0f => \"D+\"\n            case\
    \ 0.7f => \"D\"\n            case 0.0f => \"D-\"\n            case 0.0f => \"\
    E\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 3.5 (of class java.lang.Float)\n\tat Problem$.numericalLetterGrade$$anonfun$1(tmp_wmkr3di.scala:39)\n\
    \tat Problem$.numericalLetterGrade$$anonfun$adapted$1(tmp_wmkr3di.scala:41)\n\t\
    at scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.numericalLetterGrade(tmp_wmkr3di.scala:41)\n\
    \tat Problem$.main(tmp_wmkr3di.scala:44)\n\tat Problem.main(tmp_wmkr3di.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapValuesWithoutZeros = gradesMapValues.filterNot(_ == 0)\n \
    \       val gradesMapValuesWithoutZeroCount = gradesMapValuesWithoutZeros.length\n\
    \        val gradesMapValuesWithoutZeroSum = gradesMapValuesWithoutZeros.sum\n\
    \        val gradesMapValuesWithoutZeroAverage = gradesMapValuesWithoutZeros.average\n\
    \        val gradesMapValuesWithoutZeroVariance = gradesMapValuesWithoutZeros.variance\n\
    \        val gradesMapValuesWithoutZeroStandardDeviation = gradesMapValuesWithoutZeros.standardDeviation\n\
    \        val gradesMapValuesWithoutZeroVarianceDeviation = gradesMapValuesWithoutZeros.varianceDeviation\n\
    \        val gradesMapValuesWithoutZeroStandardDeviationDeviation = gradesMapValuesWithoutZeros.standardDeviationDeviation\n\
    \        val gradesMapValuesWithoutZeroVarianceDeviationDeviation = gradesMapValuesWithoutZeros.varianceDeviationDeviation\n\
    \        val gradesMapValuesWithoutZeroStandardDeviationVariance = gradesMapValuesWithoutZeros.standardDeviationVariance\n\
    \        val gradesMapValuesWithoutZeroVarianceDeviationVariance = gradesMapValuesWithoutZeros.varianceDeviationVariance\n\
    \        val gradesMapValuesWithoutZeroStandardDeviationVarianceDeviation = gradesMapValuesWithoutZeros.standardDeviationVarianceDeviation\n\
    \        val gradesMapValuesWithoutZeroVarianceDeviationVarianceDeviation = gradesMapValuesWithoutZeros.varianceDeviationVarianceDeviation\n\
    \        val gradesMapValuesWithoutZeroStandardDeviationVarianceDeviationDeviation\
    \ = gradesMapValuesWithoutZeros.standardDeviationVarianceDeviationDeviation\n\
    \        val gradesMapValuesWithoutZeroVarianceDeviationVarianceDeviationDeviation\
    \ = gradesMapValuesWithoutZeros.varianceDeviationVarianceDeviationDeviation\n\
    \        val gradesMapValuesWithoutZeroStandardDeviationVarianceDe\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsmmootds.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpsmmootds.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpsmmootds.scala:46:5 ---------------------\e[0m\e[0m\n\
    \e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedWithZero\
    \ = gradesSortedByKeyReversed.map(_._1 -> 0f)\n        val gradesSortedByValueReversedWithZero\
    \ = gradesSortedByValueReversed.map(_._2 -> 0f)\n        val gradesSortedByKeyReversedWithZeroAndZero\
    \ = gradesSortedByKeyReversedWithZero.map(_._1 -> 0f)\n        val gradesSortedByValueReversedWithZeroAndZero\
    \ = gradesSortedByValueReversedWithZero.map(_._2 -> 0f)\n        val gradesSortedByKeyReversedWithZeroAndZeroAndZero\
    \ = gradesSortedByKeyReversedWithZeroAndZero.map(_._1 -> 0f)\n        val gradesSortedByValueReversedWithZeroAndZeroAndZero\
    \ = gradesSortedByValueReversedWithZeroAndZero.map(_._2 -> 0f)\n        val gradesSortedByKeyReversedWithZeroAndZeroAndZeroAndZero\
    \ = gradesSortedByKeyReversedWithZeroAndZeroAndZero.map(_._1 -> 0f)\n        val\
    \ gradesSortedByValueReversedWithZeroAndZeroAndZeroAndZero = gradesSortedByValueReversedWithZeroAndZeroAndZero.map(_._2\
    \ -> 0f)\n        val gradesSortedByKeyReversedWithZeroAndZeroAndZeroAndZeroAndZero\
    \ = gradesSortedByKeyReversedWithZeroAndZeroAndZeroAndZero.map(_._1 -> 0f)\n \
    \       val gradesSortedByValueReversedWithZeroAndZeroAndZeroAndZeroAndZero =\
    \ gradesSortedByValueReversedWithZeroAndZeroAndZeroAndZero.map(_._2 -> 0f)\n \
    \       val gradesSortedByKeyReversedWithZeroAndZeroAndZeroAndZeroAndZeroAndZero\
    \ = gradesSortedByKeyReversedWithZeroAndZeroAndZeroAndZeroAndZero.map(_._1 ->\
    \ 0f)\n        val gradesSortedByValueReversedWithZeroAndZeroAndZeroAndZeroAndZeroAndZero\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5zrtotsd.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp5zrtotsd.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp5zrtotsd.scala:44:5 ---------------------\e[0m\e[0m\n\
    \e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap : Map[Float, String] = grades.map(grade\
    \ => grade -> \"A+\".toUpperCase)\n        val gradesMap2 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"B\".toUpperCase)\n        val gradesMap3 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"C\".toUpperCase)\n     \
    \   val gradesMap4 : Map[Float, String] = grades.map(grade => grade -> \"D\".toUpperCase)\n\
    \        val gradesMap5 : Map[Float, String] = grades.map(grade => grade -> \"\
    E\".toUpperCase)\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"F\".toUpperCase)\n        val gradesMap7 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"G\".toUpperCase)\n        val gradesMap8 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"H\".toUpperCase)\n     \
    \   val gradesMap9 : Map[Float, String] = grades.map(grade => grade -> \"I\".toUpperCase)\n\
    \        val gradesMap10 : Map[Float, String] = grades.map(grade => grade -> \"\
    J\".toUpperCase)\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"K\".toUpperCase)\n        val gradesMap12 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"L\".toUpperCase)\n        val gradesMap13 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"M\".toUpperCase)\n     \
    \   val gradesMap14 : Map[Float, String] = grades.map(grade => grade -> \"N\"\
    .toUpperCase)\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"O\".toUpperCase)\n        val gradesMap16 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"P\".toUpperCase)\n        val gradesMap17 :\
    \ Map[Float, String] = grades.map(grade => grade -> \"Q\".toUpperCase)\n     \
    \   val gradesMap18 : Map[Float, String] = grades.map(grade => grade -> \"R\"\
    .toUpperCase)\n        val gradesMap19 : Map[Float, \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4vszvkzg.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4vszvkzg.scala:27:55 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m,\
    \ \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade -> \e[31m\"A+\"\e\
    [0m.toUpperCase)\n\e[31m\e[31m   |\e[0m                                      \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                        Found:    List[(Float, String)]\n\e[31m   |\e[0m    \
    \                     Required: collection.mutable.Map[Float, String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4vszvkzg.scala:28:56 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade\
    \ -> \e[31m\"B\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m                    \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    List[(Float, String)]\n\e[31m\
    \   |\e[0m                         Required: collection.mutable.Map[Float, String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4vszvkzg.scala:29:56\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => grade -> \e[31m\"C\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m         \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[(Float, String)]\n\
    \e[31m   |\e[0m                         Required: collection.mutable.Map[Float,\
    \ String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compilin"
  stdout: ''
  timestamp: 1660010251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedKeys = gradesMapSorted.keys\n\
    \        val gradesMapSortedValues = gradesMapSorted.values\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.length\n        val gradesMapSortedValuesLength = gradesMapSortedValues.length\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpotis2ppm.scala:59:39 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpotis2ppm.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedKeysLength\e[0m = gradesMapSortedKeysLength\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpotis2ppm.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValuesLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpotis2ppm.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeysLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpotis2ppm.scala:36:12 -----------------"
  stdout: ''
  timestamp: 1660010244
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => if (grade > 3.0) \"B+\" else\
    \ if (grade > 2.7) \"B\" else if (grade > 2.3) \"B-\" else if (grade > 2.0) \"\
    C+\" else if (grade > 1.7) \"C\" else if (grade > 1.3) \"C-\" else if (grade >\
    \ 1.0) \"D+\" else if (grade > 0.7) \"D\" else if (grade > 0.0) \"D-\" else \"\
    E\")\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhw4z4bz.scala:30)\n\tat Problem.main(tmpnhw4z4bz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGrade\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByGradeReversed = gradesSortedByGrade.sortBy(_._1).reverse\n\
    \        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapKeys = gradesSortedByGradeReversedMap.keys\n\
    \        val gradesSortedByGradeReversedMapValues = gradesSortedByGradeReversedMap.values.toList\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGrade = gradesSortedByGradeReversedMapValues.sortBy(_._1)\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversed = gradesSortedByGradeReversedMapValuesSortedByGrade.sortBy(_._1).reverse\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap = gradesSortedByGradeReversedMapValuesSortedByGradeReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapKeys\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap.keys\n      \
    \  val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValues = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap.values.toList\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGrade\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValues.sortBy(_._1)\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversed\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGrade.sortBy(_._1).reverse\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversedMapKeys\
    \ = gradesSortedByGrade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkon5fxi4.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkon5fxi4.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toInt)\n     \
    \   val gradesMapSorted = gradesMap.sortBy(x => x)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedLength = gradesMapSortedReversed.length\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength.toInt\n\
    \        val gradesMapSortedReversedLength = gradesMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9j217dm_.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedLength\e\
    [0m = gradesMapSortedReversedLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9j217dm_.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedLength\e\
    [0m = gradesMapSortedReversedLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9j217dm_.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedLength\e\
    [0m = gradesMapSortedReversedLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9j217dm_.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedLength\e\
    [0m = gradesMapSortedReversedLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgrad"
  stdout: ''
  timestamp: 1660010286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedMap\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n\
    \        val gradesSortedMapReversedMap = gradesSortedMapReversed.toMap\n    \
    \    val gradesSortedMapReversedKeys = gradesSortedMapReversedMap.keys\n     \
    \   val gradesSortedMapReversedValues = gradesSortedMapReversedMap.values.toList\n\
    \        val gradesSortedMapReversedValuesMap = gradesSortedMapReversedValues.toMap\n\
    \        val gradesSortedMapReversedValuesKeys = gradesSortedMapReversedValuesMap.keys\n\
    \        val gradesSortedMapReversedValuesValues = gradesSortedMapReversedValuesMap.values.toList\n\
    \        val gradesSortedMapReversedValuesValuesMap = gradesSortedMapReversedValuesValues.toMap\n\
    \        val gradesSortedMapReversedValuesValuesKeys = gradesSortedMapReversedValuesValuesMap.keys\n\
    \        val gradesSortedMapReversedValuesValuesValues = gradesSortedMapReversedValuesValuesMap.values.toList\n\
    \        val gradesSortedMapReversedValuesValuesValuesMap = gradesSortedMapReversedValuesValuesValues.toMap\n\
    \        val gradesSortedMapReversedValuesValuesValuesKeys = gradesSortedMapReversedValuesValuesValuesMap.keys\n\
    \        val gradesSortedMapReversedValuesValuesValuesValues = gradesSortedMapReversedValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesMap = gradesSortedMapReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesKeys = gradesSortedMapReversedValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesValues = gradesSortedMapReversedValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesValuesMap = gradesSortedMapReversedValuesValuesValuesValuesValuesValues.toMap\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesValuesValuesKeys =\
    \ gradesSortedMapReversedValuesValuesValuesValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesValuesValuesValues\
    \ = gradesSortedMapReversedValuesValuesValuesValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedMapReversedValuesValuesValuesValuesValuesValuesValuesValuesMap\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqhtxlpyp.scala:48:88 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedValuesValuesValuesValuesValuesValuesValuesValuesMap\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                          expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpqhtxlpyp.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhtxlpyp.scala:45:71 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedValuesValuesValuesValuesValuesMap\e\
    [0m = gradesSortedMapReversedValuesValuesValuesValuesValuesValues.toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m  Not found: gradesSortedMapReversedValuesValuesValuesValuesValuesValues\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhtxlpyp.scala:46:78\
    \ ------------------------\e[0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReversedValuesValuesValuesValuesValuesValuesKeys\e[0m = gradesSortedMapReversedValuesValuesValuesValuesValuesValuesValuesMap.keys\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat)\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n  \
    \      val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, x._2))\n        val gradesMap = gradesMap.map(x\
    \ => (x._1, x._2))\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n\
    \        val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, x._2))\n        val gradesMap = gradesMap.map(x\
    \ => (x._1, x._2))\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n\
    \        val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, x._2))\n        val gradesMap = gradesMap.map(x\
    \ => (x._1, x._2))\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n\
    \        val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, x._2))\n        val gradesMap = gradesMap.map(x\
    \ => (x._1, x._2))\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n\
    \        val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, x._2))\n        val gradesMap = gradesMap.map(x\
    \ => (x._1, x._2))\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n\
    \        val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, x._2))\n        val gradesMap = gradesMap.map(x\
    \ => (x._1, x._2))\n        val gradesMap = gradesMap.map(x => (x._1, x._2))\n\
    \        val gradesMap = gradesMap.map(x => (x._1, x._2))\n        val gradesMap\
    \ = gradesMap.map(x => (x._1, \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3tjydsdt.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3tjydsdt.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMap\e[0m = gradesMap.map(\e[36mx\e[0m => (x._1, x._2))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesMap is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3tjydsdt.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = gradesMap.map(\e[36mx\e\
    [0m => (x._1, x._2))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3tjydsdt.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = gradesMap.map(\e[36mx\e\
    [0m => (x._1, x._2))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3tjydsdt.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = gradesMap.map(\e[36mx\e\
    [0m => (x._1, x._2))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same"
  stdout: ''
  timestamp: 1660010288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toList).mapValues(_.sortBy(-_._1))\n\
    \        val gradesMap2 = gradesMap.mapValues(_.map(_._2))\n        val gradesMap3\
    \ = gradesMap2.mapValues(_.map(_._2))\n        val gradesMap4 = gradesMap3.mapValues(_.map(_._2))\n\
    \        val gradesMap5 = gradesMap4.mapValues(_.map(_._2))\n        val gradesMap6\
    \ = gradesMap5.mapValues(_.map(_._2))\n        val gradesMap7 = gradesMap6.mapValues(_.map(_._2))\n\
    \        val gradesMap8 = gradesMap7.mapValues(_.map(_._2))\n        val gradesMap9\
    \ = gradesMap8.mapValues(_.map(_._2))\n        val gradesMap10 = gradesMap9.mapValues(_.map(_._2))\n\
    \        val gradesMap11 = gradesMap10.mapValues(_.map(_._2))\n        val gradesMap12\
    \ = gradesMap11.mapValues(_.map(_._2))\n        val gradesMap13 = gradesMap12.mapValues(_.map(_._2))\n\
    \        val gradesMap14 = gradesMap13.mapValues(_.map(_._2))\n        val gradesMap15\
    \ = gradesMap14.mapValues(_.map(_._2))\n        val gradesMap16 = gradesMap15.mapValues(_.map(_._2))\n\
    \        val gradesMap17 = gradesMap16.mapValues(_.map(_._2))\n        val gradesMap18\
    \ = gradesMap17.mapValues(_.map(_._2))\n        val gradesMap19 = gradesMap18.mapValues(_.map(_._2))\n\
    \        val gradesMap20 = gradesMap19.mapValues(_.map(_._2))\n        val gradesMap21\
    \ = gradesMap20.mapValues(_.map(_._2))\n        val gradesMap22 = gradesMap21.mapValues(_.map(_._2))\n\
    \        val gradesMap23 = gradesMap22.mapValues(_.map(_._2))\n        val gradesMap24\
    \ = gradesMap23.mapValues(_.map(_._2))\n        val gradesMap25 = gradesMap24.mapValues(_.map(_._2))\n\
    \        val gradesMap26 = gradesMap25.mapValues(_.map(_._2))\n        val gradesMap27\
    \ = gradesMap26.mapValues(_.map(_._2))\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsq15qz7v.scala:27:88 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m4\e[0m).mapValues(_.toList).mapValues(_.sortBy(-_._1))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                   ^^^^\e[0m\n\e[31m   |\e[0m                               \
    \        value _1 is not a member of Float\n\e[31m\e[31m-- Error: /tmp/tmpsq15qz7v.scala:27:91\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_ / \e[31m4\e[0m).mapValues(_.toList).mapValues(_.sortBy(-_._1))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                   ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mShort\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpsq15qz7v.scala:28:53 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m = gradesMap.mapValues(_.map(_._2))\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value _2 is not a member\
    \ of Float\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsq15qz7v.scala:29:54\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap3\e[0m = gradesMap2.mapValues(_.map(_._2))\n\e[31m\e[31m   |\e[0m\
    \                                                    ^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ _2 is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import concurrent.duration.durationToPair\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsq15qz7v.scala:30:54\
    \ ------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1660010289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSorted = grades.sortWith((x,y) => x.toFloat < y.toFloat)\n\
    \        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n   \
    \     val gradesSortedMapReversed = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n\
    \        val gradesSortedMapReversedKeys = gradesSortedMapReversed.keys\n    \
    \    val gradesSortedMapReversedValues = gradesSortedMapReversed.values\n    \
    \    val gradesSortedMapReversedValuesSum = gradesSortedMapReversedValues.sum\n\
    \        val gradesSortedMapReversedValuesSum2 = gradesSortedMapReversedValuesSum\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum3\
    \ = gradesSortedMapReversedValuesSum2 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum4 = gradesSortedMapReversedValuesSum3\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum5\
    \ = gradesSortedMapReversedValuesSum4 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum6 = gradesSortedMapReversedValuesSum5\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum7\
    \ = gradesSortedMapReversedValuesSum6 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum8 = gradesSortedMapReversedValuesSum7\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum9\
    \ = gradesSortedMapReversedValuesSum8 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum10 = gradesSortedMapReversedValuesSum9\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum11\
    \ = gradesSortedMapReversedValuesSum10 * gradesSortedMapReversedValuesSum\n  \
    \      val gradesSortedMapReversedValuesSum12 = gradesSortedMapReversedValuesSum11\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum13\
    \ = gradesSortedMapReversedValuesSum12 * gradesSortedMapReversedValuesSum\n  \
    \      val gradesSortedMapReversedValuesSum14 = grades\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3_pjerlp.scala:30:80 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversed\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt, x)).toMap.reverse\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean Map[Int, Float].reversed?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3_pjerlp.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedReversed\
    \ = gradesSortedByKeyReversed.reverse\n        val gradesSortedByValueReversedReversed\
    \ = gradesSortedByValueReversed.reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversed.reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq9k67mqb.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpq9k67mqb.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpq9k67mqb.scala:37:80 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mgradesSortedByKeyReversedReversedReversedReversedReversedReversed\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpq9k67mqb.scala:39:96\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Fou"
  stdout: ''
  timestamp: 1660010288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesMap.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedValues\
    \ = gradesSortedByKeyReversed.map(_._2)\n        val gradesSortedByValueReversedValues\
    \ = gradesSortedByValueReversed.map(_._1)\n        val gradesSortedByKeyReversedValuesSum\
    \ = gradesSortedByKeyReversedValues.sum\n        val gradesSortedByValueReversedValuesSum\
    \ = gradesSortedByValueReversedValues.sum\n        val gradesSortedByKeyReversedValuesSum2\
    \ = gradesSortedByKeyReversedValuesSum * gradesSortedByKeyReversedValuesSum\n\
    \        val gradesSortedByValueReversedValuesSum2 = gradesSortedByValueReversedValuesSum\
    \ * gradesSortedByValueReversedValuesSum\n        val gradesSortedByKeyReversedValuesSum3\
    \ = gradesSortedByKeyReversedValuesSum2 * gradesSortedByKeyReversedValuesSum\n\
    \        val gradesSortedByValueReversedValuesSum3 = gradesSortedByValueReversedValuesSum2\
    \ * gradesSortedByValueReversedValuesSum\n        val gradesSortedByKeyReversedValuesSum4\
    \ = gradesSortedByKeyReversedValuesSum3 * gradesSortedByKeyReversedValuesSum\n\
    \        val gradesSortedByValueReversedValuesSum4 = gradesSortedByValueReversedValuesSum3\
    \ * gradesSortedByValueReversedValuesSum\n        val gradesSortedByKeyReversedValuesSum5\
    \ = gradesSortedByKeyReversedValuesSum4 * gradesSortedByKeyReversedValuesSum\n\
    \        val gradesSortedByValueReversedValuesSum5 = gradesSortedByValueReversedValuesSum4\
    \ * gradesSortedByValueReversedValuesSum\n        val gradesSortedByKeyReversedValuesSum6\
    \ = gradesSortedByKeyReversedValuesSum5 * gradesSortedByKeyReversedValuesSum\n\
    \        val gradesSortedByValueReversedValuesSum6 = gradesSortedByValueReversedValuesSum5\
    \ * gradesSortedByValueReversedValuesSum\n        val gradesSortedByKeyReversedValuesSum7\
    \ = gradesSortedByKeyReversedValuesSum6 * gradesSortedBy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkm6h1wv9.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm6h1wv9.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum).toMap\n        grades.map(grade => gradesMap(grade / 10).map(letter\
    \ => letter + if (grade % 10 == 0) \"-\" else \"+\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxsicd66x.scala:28:73 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        grades.map(\e[36mgrade\e[0m => gradesMap(grade\
    \ / \e[31m10\e[0m).map(\e[36mletter\e[0m => letter + \e[33mif\e[0m (grade % \e\
    [31m10\e[0m == \e[31m0\e[0m) \e[31m\"-\"\e[0m \e[33melse\e[0m \e[31m\"+\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^^\e[0m\n\e[31m   |\e[0m                                   \
    \     expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxsicd66x.scala:28:50 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        grades.map(\e[36mgrade\e[0m => gradesMap(grade\
    \ / \e[31m10\e[0m).map(\e[36mletter\e[0m => letter + \e[33mif\e[0m (grade % \e\
    [31m10\e[0m == \e[31m0\e[0m) \e[31m\"-\"\e[0m \e[33melse\e[0m \e[31m\"+\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            value map is not a member of Float\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesList = grades.toList\n        val gradesIterator\
    \ = grades.iterator\n        val gradesEnumerator = grades.iterator\n        val\
    \ gradesEnumerator2 = grades.iterator\n        val gradesEnumerator3 = grades.iterator\n\
    \        val gradesEnumerator4 = grades.iterator\n        val gradesEnumerator5\
    \ = grades.iterator\n        val gradesEnumerator6 = grades.iterator\n       \
    \ val gradesEnumerator7 = grades.iterator\n        val gradesEnumerator8 = grades.iterator\n\
    \        val gradesEnumerator9 = grades.iterator\n        val gradesEnumerator10\
    \ = grades.iterator\n        val gradesEnumerator11 = grades.iterator\n      \
    \  val gradesEnumerator12 = grades.iterator\n        val gradesEnumerator13 =\
    \ grades.iterator\n        val gradesEnumerator14 = grades.iterator\n        val\
    \ gradesEnumerator15 = grades.iterator\n        val gradesEnumerator16 = grades.iterator\n\
    \        val gradesEnumerator17 = grades.iterator\n        val gradesEnumerator18\
    \ = grades.iterator\n        val gradesEnumerator19 = grades.iterator\n      \
    \  val gradesEnumerator20 = grades.iterator\n        val gradesEnumerator21 =\
    \ grades.iterator\n        val gradesEnumerator22 = grades.iterator\n        val\
    \ gradesEnumerator23 = grades.iterator\n        val gradesEnumerator24 = grades.iterator\n\
    \        val gradesEnumerator25 = grades.iterator\n        val gradesEnumerator26\
    \ = grades.iterator\n        val gradesEnumerator27 = grades.iterator\n      \
    \  val gradesEnumerator28 = grades.iterator\n        val gradesEnumerator29 =\
    \ grades.iterator\n        val gradesEnumerator30 = grades.iterator\n        val\
    \ gradesEnumerator31 = grades.iterator\n        val gradesEnumerator32 = grades.iterator\n\
    \        val gradesEnumerator33 = grades.iterator\n        val gradesEnumerator34\
    \ = grades.iterator\n        val gradesEnumerator35 = grades.iterator\n      \
    \  val gradesEnumerator36 = grades.iterator\n        val gradesEnumerator37 =\
    \ grades.iterator\n        val gradesEnumerator38 = grades.iterator\n        val\
    \ gradesEnumerator\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq39tuny0.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpq39tuny0.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpq39tuny0.scala:72:5 ---------------------\e[0m\e[0m\n\
    \e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesValues.size\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAvg = gradesSum / gradesLength\n        val gradesMin = gradesValues.min\n\
    \        val gradesMax = gradesValues.max\n        val gradesMedian = gradesValues.sortBy(x\
    \ => x).last\n        val gradesStdDev = gradesValues.map(x => Math.sqrt(x.toDouble))\n\
    \        val gradesVariance = gradesStdDev.map(x => x - gradesAvg).sum\n     \
    \   val gradesVariancePercent = gradesVariance / gradesAvg\n        val gradesPercent\
    \ = gradesAvg / gradesSum\n        val gradesPercentOfMax = gradesPercent / gradesMax\n\
    \        val gradesPercentOfMin = gradesPercent / gradesMin\n        val gradesPercentOfMedian\
    \ = gradesPercentOfMax / gradesMedian\n        val gradesPercentOfMedianPercent\
    \ = gradesPercentOfMedian / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMax\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMin\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMin\n        val gradesPercentOfMedianPercentOfMin\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMin\n        val gradesPercentOfMedianPercentOfMax\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMax\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMax\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMax\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMax\
    \ = gradesPercentOfMedianPercent / gradesPercentOfMax\n        val gradesPercentOfMedianPercentOfMax\
    \ = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz_rwg8of.scala:46:12 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mgradesPercentOfMedianPercentOfMin\e\
    [0m = gradesPercentOfMedianPercent / gradesPercentOfMin\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesPercentOfMedianPercentOfMin is already defined as \e\
    [33mvalue\e[0m \e[35mgradesPercentOfMedianPercentOfMin\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz_rwg8of.scala:47:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesPercentOfMedianPercentOfMax\e[0m = gradesPercentOfMedianPercent\
    \ / gradesPercentOfMax\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesPercentOfMedianPercentOfMax is already defined as \e\
    [33mvalue\e[0m \e[35mgradesPercentOfMedianPercentOfMax\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz_rwg8of.scala:48:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesPercentOfMedianPercentOfMax\e[0m = gradesPercentOfMedianPercent\
    \ / gradesPercentOfMax\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesPercentOfMedianPercentOfMax is already defined as \e\
    [33mvalue\e[0m \e[35mgradesPercentOfMedianPercentOfMax\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz_rwg8of.scala:49:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesPercentOfMedianPercentOfMax\e[0m = gradesPercentOfMedianPercent\
    \ / gradesPercentOfMax\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toString.toDouble).zipWithIndex.map(x\
    \ => x._1 -> x._2)\n        val gradesMapSorted = gradesMap.sortBy(x => x._1).reverse\n\
    \        val gradesMapSortedWithIndex = gradesMapSorted.map(x => x._2)\n     \
    \   val gradesMapSortedWithIndexWithLetter = gradesMapSortedWithIndex.map(x =>\
    \ (x._1, x._2))\n        val gradesMapSortedWithIndexWithLetterWithIndex = gradesMapSortedWithIndexWithLetter.map(x\
    \ => (x._2, x._1))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetter\
    \ = gradesMapSortedWithIndexWithLetterWithIndex.map(x => (x._1, x._2))\n     \
    \   val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndex = gradesMapSortedWithIndexWithLetterWithIndexWithLetter.map(x\
    \ => (x._2, x._1))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter\
    \ = gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter.map(x\
    \ => (x._1, x._2))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndex\
    \ = gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndex.map(x\
    \ => (x._2, x._1))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter\
    \ = gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter.map(x\
    \ => (x._1, x._2))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndex\
    \ = gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter.map(x\
    \ => (x._2, x._1))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter\
    \ = gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter.map(x\
    \ => (x._1, x._2))\n        val gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter\
    \ = gradesMapSortedWithIndexWith\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf1_d9xde.scala:30:86 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedWithIndexWithLetter\e\
    [0m = gradesMapSortedWithIndex.map(\e[36mx\e[0m => (x._1, x._2))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \        value _1 is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpf1_d9xde.scala:30:92 ------------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m        \e[33mval\e[0m \e[36mgradesMapSortedWithIndexWithLetter\e[0m = gradesMapSortedWithIndex.map(\e\
    [36mx\e[0m => (x._1, x._2))\n\e[31m\e[31m   |\e[0m                           \
    \                                                               ^^^^\e[0m\n\e\
    [31m   |\e[0m                                         value _2 is not a member\
    \ of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpf1_d9xde.scala:34:87 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter\e\
    [0m = gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter.map(\e\
    [36mx\e[0m => (x._1, x._2))\n\e[31m\e[31m   |\e[0m                           \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetter\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpf1_d9xde.scala:35:96\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndex\e\
    [0m = gradesMapSortedWithIndexWithLetterWithIndexWithLetterWithIndexWithLetterWithIndex.map(\e\
    [36mx\e[0m => (x._2, x._1))\n\e[31m\e[31m   |\e[0m                           \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  grade"
  stdout: ''
  timestamp: 1660010290
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.toList.sortWith(_ < _).reverse.foldLeft(List[String]()){\n\
    \            case (acc, grade) =>\n                val gpa = grade / 4.0f\n  \
    \              val letterGrade = if (gpa > 3.7f) 'A+' else if (gpa > 3.3f) 'A'\
    \ else if (gpa > 2.7f) 'A-' else if (gpa > 2.3f) 'B+' else if (gpa > 1.7f) 'B'\
    \ else if (gpa > 1.3f) 'B-' else if (gpa > 0.7f) 'C+' else if (gpa > 0.3f) 'C'\
    \ else if (gpa > 0.0f) 'C-' else 'D'\n                acc :+ letterGrade\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_y_2ftz7.scala:30:50 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mval\e[0m \e[36mletterGrade\e[0m\
    \ = \e[33mif\e[0m (gpa > \e[31m3.7f\e[0m) \e[31m'A\e[0m+' \e[33melse\e[0m \e[33mif\e\
    [0m (gpa > \e[31m3.3f\e[0m) \e[31m'A'\e[0m \e[33melse\e[0m \e[33mif\e[0m (gpa\
    \ > \e[31m2.7f\e[0m) \e[31m'A\e[0m-' \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m2.3f\e\
    [0m) \e[31m'B\e[0m+' \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m1.7f\e[0m) \e\
    [31m'B'\e[0m \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m1.3f\e[0m) \e[31m'B\e\
    [0m-' \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m0.7f\e[0m) \e[31m'C\e[0m+' \e\
    [33melse\e[0m \e[33mif\e[0m (gpa > \e[31m0.3f\e[0m) \e[31m'C'\e[0m \e[33melse\e\
    [0m \e[33mif\e[0m (gpa > \e[31m0.0f\e[0m) \e[31m'C\e[0m-' \e[33melse\e[0m \e[31m'D'\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                  ^\e\
    [0m\n\e[31m   |\e[0msymbol literal 'A is no longer supported,\n\e[31m   |\e[0muse\
    \ a string literal \"A\" or an application Symbol(\"A\") instead,\n\e[31m   |\e\
    [0mor enclose in braces '{A} if you want a quoted expression.\n\e[31m   |\e[0mFor\
    \ now, you can also `import language.deprecated.symbolLiterals` to accept\n\e\
    [31m   |\e[0mthe idiom, but this possibility might no longer be available in the\
    \ future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_y_2ftz7.scala:30:55 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mval\e[0m \e[36mletterGrade\e[0m\
    \ = \e[33mif\e[0m (gpa > \e[31m3.7f\e[0m) \e[31m'A\e[0m+' \e[33melse\e[0m \e[33mif\e\
    [0m (gpa > \e[31m3.3f\e[0m) \e[31m'A'\e[0m \e[33melse\e[0m \e[33mif\e[0m (gpa\
    \ > \e[31m2.7f\e[0m) \e[31m'A\e[0m-' \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m2.3f\e\
    [0m) \e[31m'B\e[0m+' \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m1.7f\e[0m) \e\
    [31m'B'\e[0m \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m1.3f\e[0m) \e[31m'B\e\
    [0m-' \e[33melse\e[0m \e[33mif\e[0m (gpa > \e[31m0.7f\e[0m) \e[31m'C\e[0m+' \e\
    [33melse\e[0m \e[33mif\e[0m (gpa > \e[31m0.3f\e[0m) \e[31m'C'\e[0m \e[33melse\e\
    [0m \e[33mif\e[0m (gpa > \e[31m0.0f\e[0m) \e[31m'C\e[0m-' \e[33melse\e[0m \e[31m'D'\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                                 "
  stdout: ''
  timestamp: 1660010289
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSor\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:38:"
  stdout: ''
  timestamp: 1659805387
