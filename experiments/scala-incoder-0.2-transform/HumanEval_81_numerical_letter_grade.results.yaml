language: scala
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toInt)\n     \
    \   val gradesMapSorted = gradesMap.sortBy(x => x)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedLength = gradesMapSortedReversed.length\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \        val gradesMapSortedReversedLength = gradesMapSortedReversedLength - 1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqvp3uu8o.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedLength\e\
    [0m = gradesMapSortedReversedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesMapSortedReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqvp3uu8o.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedLength\e\
    [0m = gradesMapSortedReversedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesMapSortedReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqvp3uu8o.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedLength\e\
    [0m = gradesMapSortedReversedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesMapSortedReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqvp3uu8o.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedLength\e\
    [0m = gradesMapSortedReversedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesMapSortedReversedLength is already defined as \e[33"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesArray\
    \ = grades.toArray\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grades.iterator\n        val gradesMap\
    \ = grades.toMap\n        val gradesSet = grades.toSet\n        val gradesSeq\
    \ = grades.toSeq\n        val gradesIter = grade\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekhyn9nk.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekhyn9nk.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSet\e[0m = grades.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSet is already defined as \e[33mvalue\e[0m \e[35mgradesSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpekhyn9nk.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSeq\e[0m = grades.toSeq\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesSeq\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSeq\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpekhyn9nk.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesIter\e[0m = grades.iterator\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesIter is already defined as \e[33mvalue\e[0m \e[35mgradesIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpekhyn9nk.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that over"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByKey = grades.sortBy(x => x)\n        val gradesSortedByValue\
    \ = grades.sortBy(x => x)\n        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n\
    \        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n     \
    \   val gradesSortedByKeyReversedReversed = gradesSortedByKeyReversed.reverse\n\
    \        val gradesSortedByValueReversedReversed = gradesSortedByValueReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversed = gradesSortedByKeyReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversed = gradesSortedByKeyReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversed.reverse\n      \
    \  val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbarfbro2.scala:42:12 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpbarfbro2.scala:40:104 --------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbarfbro2.scala:43:128 -----------------------\e[0m\e[0m\n\e[31m43 |\e\
    [0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = grade\n\e[31m\e[31m   |\e[0m                                           \
    \      "
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum)\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val\
    \ gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedMap\
    \ = gradesMapSortedReversed.toMap\n        val gradesMapSortedReversedMapKeys\
    \ = gradesMapSortedReversedMap.keys\n        val gradesMapSortedReversedMapValues\
    \ = gradesMapSortedReversedMap.values.toList\n        val gradesMapSortedReversedMapValuesSorted\
    \ = gradesMapSortedReversedMapValues.sortBy(_._1)\n        val gradesMapSortedReversedMapValuesSortedReversed\
    \ = gradesMapSortedReversedMapValuesSortedReversed.reverse\n        val gradesMapSortedReversedMapValuesSortedReversedMap\
    \ = gradesMapSortedReversedMapValuesSortedReversed.toMap\n        val gradesMapSortedReversedMapValuesSortedReversedMapKeys\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapKeys.toList\n        val\
    \ gradesMapSortedReversedMapValuesSortedReversedMapValuesSorted = gradesMapSortedReversedMapValuesSortedReversedMapValuesSorted.sortBy(_._1)\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversed\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversed.reverse\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMap\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMap.toMap\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapKeys\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapKeys.toList\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedSorted\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedSorted.sortBy(_._1)\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedSortedReversed\
    \ = gradesMapSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedReversedMapValuesSortedSortedReversed.reverse\n\
    \        val gradesMapSortedReversedMapValuesSortedReversedMapValues\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw_eacq7z.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw_eacq7z.scala:28:40\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  value sortBy\
    \ is not a member of scala.collection.MapView[Float, Float]\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpw_eacq7z.scala:34:61 ---------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedMapValuesSortedReversed\e\
    [0m = gradesMapSortedReversedMapValuesSortedReversed.reverse\n\e[31m\e[31m   |\e\
    [0m                                                             ^\e[0m\n\e[31m\
    \   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesMapSortedReversedMapValuesSortedReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw_eacq7z.scala:36:68\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedMapValuesSortedReversedMapKeys\e[0m = gradesMapSortedReversedMapValuesSortedReversedMapKeys.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesMapSortedReversedMapValuesSortedReversedMapKeys\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw_eacq7z.scala:37:76\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedMapValuesSortedReversedMapValuesSorted\e[0m = gradesMapSortedReversedMapValuesSortedReversedMapValuesSorted.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesMapSortedRever"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.toMap\n\
    \        val gradesSortedByGPAReversedKeys = gradesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedValues = gradesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPA = gradesSortedByGPAReversedValues.sortBy(_._1)\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversed = gradesSortedByGPAReversedValuesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedMap = gradesSortedByGPAReversedValuesSortedByGPAReversed.toMap\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedKeys = gradesSortedByGPAReversedValuesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValues = gradesSortedByGPAReversedValuesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPA\
    \ = gradesSortedByGPAReversedValuesSortedByGPAReversedValues.sortBy(_._1)\n  \
    \      val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversed\
    \ = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedMap\
    \ = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversed.toMap\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedKeys\
    \ = gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedValuesSortedByGPAReversedValuesSortedByGPAReversedValues\
    \ = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpiu1gjcl1.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiu1gjcl1.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_\
    \ % 10).sum)\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val\
    \ gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysSorted\
    \ = gradesMapSortedReversedKeys.sortBy(_)\n        val gradesMapSortedReversedValuesSorted\
    \ = gradesMapSortedReversedValues.sortBy(_)\n        val gradesMapSortedReversedKeysSortedReversed\
    \ = gradesMapSortedReversedKeysSorted.reverse\n        val gradesMapSortedReversedValuesSortedReversed\
    \ = gradesMapSortedReversedValuesSorted.reverse\n        val gradesMapSortedReversedKeysSortedReversedSorted\
    \ = gradesMapSortedReversedKeysSortedReversed.sortBy(_)\n        val gradesMapSortedReversedValuesSortedReversedSorted\
    \ = gradesMapSortedReversedValuesSortedReversed.sortBy(_)\n        val gradesMapSortedReversedKeysSortedReversedSortedSorted\
    \ = gradesMapSortedReversedKeysSortedReversedSorted.reverse\n        val gradesMapSortedReversedValuesSortedReversedSortedSorted\
    \ = gradesMapSortedReversedValuesSortedReversedSorted.reverse\n        val gradesMapSortedReversedKeysSortedReversedSortedSortedSorted\
    \ = gradesMapSortedReversedKeysSortedReversedSortedSorted.sortBy(_)\n        val\
    \ gradesMapSortedReversedValuesSortedReversedSortedSortedSorted = gradesMapSortedReversedValuesSortedReversedSortedSorted.sortBy(_)\n\
    \        val gradesMapSortedReversedKeysSortedReversedSortedSortedSortedSorted\
    \ = gradesMapSortedReversedKeysSortedReversedSortedSortedSorted.reverse\n    \
    \    val gradesMapSortedReversedValuesSortedReversedSortedSortedSortedSorted =\
    \ gradesMapSortedReversedValuesSortedReversedSortedSortedSorted.reverse\n    \
    \    val gradesMapSortedReversedKeysSortedReversedSortedSortedSortedSortedSorted\
    \ = gradesMapSortedReversedKeysSortedReversedSortedSortedSortedSorted.sortBy(_)\n\
    \        val gradesMapSortedReversedValuesSortedReversedSortedSortedSortedSortedSorted\
    \ = gradesMapSortedReversedValuesSortedReverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjwttfh4d.scala:28:40 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m  value sortBy is not a member of scala.collection.MapView[Float, Float]\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpjwttfh4d.scala:32:83 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedKeysSorted\e\
    [0m = gradesMapSortedReversedKeys.sortBy(_)\n\e[31m\e[31m   |\e[0m           \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$5 of expanded function:\n\e[31m\
    \   |\e[0m   _$5 => gradesMapSortedReversedKeys.sortBy(_$5).\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmpjwttfh4d.scala:33:87 -----------------------------\e[0m\e\
    [0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesSorted\e\
    [0m = gradesMapSortedReversedValues.sortBy(_)\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m   I could not infer the type of the parameter _$6 of expanded function:\n\
    \e[31m   |\e[0m   _$6 => gradesMapSortedReversedValues.sortBy(_$6).\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmpjwttfh4d.scala:36:111 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedKeysSortedReversedSorted\e\
    [0m = gradesMapSortedReversedKeysSortedReversed.sortBy(_)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$7 of expanded function:\n\e[31m   |\e[0m   _$7 => gradesMapSortedReversedKeysSortedReversed.sortBy(_$7).\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpjwttfh4d.sca"
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesCount = gradesValues.size\n\
    \        val gradesAvg = (gradesSum / gradesCount).toFloat\n        val gradesSumOfSquares\
    \ = gradesValues.map(x => x * x).sum\n        val gradesSumOfSquaresAvg = gradesSumOfSquares\
    \ / gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvg\
    \ * gradesSumOfSquaresAvg\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOfSquaresAvgSqr\
    \ * gradesCount\n        val gradesSumOfSquaresAvgSqr = gradesSumOf\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp42yy4z9x.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAvgSqr\e\
    [0m = gradesSumOfSquaresAvgSqr * gradesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAvgSqr is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSumOfSquaresAvgSqr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp42yy4z9x.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAvgSqr\e\
    [0m = gradesSumOfSquaresAvgSqr * gradesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAvgSqr is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSumOfSquaresAvgSqr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp42yy4z9x.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAvgSqr\e\
    [0m = gradesSumOfSquaresAvgSqr * gradesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAvgSqr is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSumOfSquaresAvgSqr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp42yy4z9x.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAvgSqr\e\
    [0m = gradesSumOfSquaresAvgSqr * gradesCount\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAvgSqr is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSumOfSquaresAvgSqr\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.map(x => x.toInt).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesAvg = gradesSum /\
    \ gradesKeys.size\n        val gradesDiff = gradesAvg - gradesValues.head\n  \
    \      val gradesDiffs = gradesValues.tail.zip(gradesDiff)\n        val gradesDiffsMap\
    \ = gradesDiffs.map(x => x._1 -> x._2)\n        val gradesDiffsKeys = gradesDiffsMap.keys\n\
    \        val gradesDiffsValues = gradesDiffsMap.values.toList\n        val gradesDiffsSum\
    \ = gradesDiffsValues.sum\n        val gradesDiffsAvg = gradesDiffsSum / gradesDiffsKeys.size\n\
    \        val gradesDiffsDiff = gradesDiffsAvg - gradesDiffsValues.head\n     \
    \   val gradesDiffsDiffs = gradesDiffsValues.tail.zip(gradesDiffsDiff)\n     \
    \   val gradesDiffsDiffsMap = gradesDiffsDiffs.map(x => x._1 -> x._2)\n      \
    \  val gradesDiffsDiffsKeys = gradesDiffsDiffsMap.keys\n        val gradesDiffsDiffsValues\
    \ = gradesDiffsDiffsMap.values.toList\n        val gradesDiffsDiffsSum = gradesDiffsDiffsValues.sum\n\
    \        val gradesDiffsDiffsAvg = gradesDiffsDiffsSum / gradesDiffsDiffsKeys.size\n\
    \        val gradesDiffsDiffsDiff = gradesDiffsDiffsAvg - gradesDiffsDiffsValues.head\n\
    \        val gradesDiffsDiffsDiffs = gradesDiffsDiffsValues.tail.zip(gradesDiffsDiffsDiff)\n\
    \        val gradesDiffsDiffsDiffsMap = gradesDiffsDiffsDiffs.map(x => x._1 ->\
    \ x._2)\n        val gradesDiffsDiffsDiffsKeys = gradesDiffsDiffsDiffsMap.keys\n\
    \        val gradesDiffsDiffsDiffsValues = gradesDiffsDiffsDiffsMap.values.toList\n\
    \        val gradesDiffsDiffsDiffsSum = gradesDiffsDiffsDiffsValue\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp3kfm0pe.scala:27:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.map(\e\
    [36mx\e[0m => x.toInt).toMap\n\e[31m\e[31m   |\e[0m                          \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \               Cannot prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m                                        where:    K is a type variable\n\e\
    [31m   |\e[0m                                                  V is a type variable\n\
    \e[31m   |\e[0m                                        .\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp3kfm0pe.scala:51:39 ------------------------\e[0m\e\
    [0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mgradesDiffsDiffsDiffsSum\e[0m\
    \ = gradesDiffsDiffsDiffsValue\n\e[31m\e[31m   |\e[0m                        \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                      Not found: gradesDiffsDiffsDiffsValue\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp3kfm0pe.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedKeys\
    \ = gradesSortedByKeyReversedMap.keys\n        val gradesSortedByValueReversedValues\
    \ = gradesSortedByValueReversedMap.values\n        val gradesSortedByKeyReversedValuesMap\
    \ = gradesSortedByValueReversedValues.toMap\n        val gradesSortedByKeyReversedValuesKeys\
    \ = gradesSortedByKeyReversedValuesMap.keys\n        val gradesSortedByKeyReversedValuesValues\
    \ = gradesSortedByKeyReversedValuesMap.values.toList\n        val gradesSortedByKeyReversedValuesValuesMap\
    \ = gradesSortedByKeyReversedValuesValues.toMap\n        val gradesSortedByKeyReversedValuesValuesKeys\
    \ = gradesSortedByKeyReversedValuesValuesMap.keys\n        val gradesSortedByKeyReversedValuesValuesValues\
    \ = gradesSortedByKeyReversedValuesValuesMap.values.toList\n        val gradesSortedByKeyReversedValuesValuesValuesMap\
    \ = gradesSortedByKeyReversedValuesValuesValues.toMap\n        val gradesSortedByKeyReversedValuesValuesValuesKeys\
    \ = gradesSortedByKeyReversedValuesValuesValuesMap.keys\n        val gradesSortedByKeyReversedValuesValuesValuesValues\
    \ = gradesSortedByKeyReversedValuesValuesValuesMap.values.toList\n        val\
    \ gradesSortedByKeyReversedValuesValuesValuesValuesMap = gradesSortedByKeyReversedValuesValuesValuesValues.toMap\n\
    \        val gradesSortedByKeyReversedValuesValuesValuesValuesKeys = gradesSortedByKeyReversedValuesValuesValuesValuesMap.keys\n\
    \        val gradesSortedByKeyReversedValuesValuesValuesValuesValues = gradesSortedByKeyReversedValuesValuesValuesValuesMap.values.toList\n\
    \        val gradesSortedByKeyReversedValuesValuesValuesValuesValuesMap = gradesSortedByKeyReversedValuesValuesValuesValuesValues.toMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprzife9to.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprzife9to.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSorted = grades.sortWith(_ < _)\n    \
    \    val gradesSum = gradesSorted.sum\n        val gradesAverage = gradesSum /\
    \ gradesSorted.length\n        val gradesSumOfSquares = gradesSorted.map(x =>\
    \ x * x).sum\n        val gradesAverageOfSquares = gradesSumOfSquares / gradesSorted.length\n\
    \        val gradesSumOfSquaresOfDifferences = gradesSorted.map(x => x - gradesAverage).sum\n\
    \        val gradesAverageOfSquaresOfDifferences = gradesSumOfSquaresOfDifferences\
    \ / gradesSorted.length\n        val gradesSumOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x - gradesAverageOfSquares).sum\n        val gradesAverageOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfDifferences / gradesSorted.length\n        val\
    \ gradesSumOfSquaresOfSquaresOfSquaresOfDifferences = gradesSorted.map(x => x\
    \ * x * x - gradesAverageOfSquaresOfSquares).sum\n        val gradesAverageOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfDifferences / gradesSorted.length\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences = gradesSorted.map(x\
    \ => x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquares).sum\n        val\
    \ gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ / gradesSorted.length\n        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquaresOfSquares).sum\n\
    \        val gradesAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesSorted.length\n\
    \        val gradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesSorted.map(x => x * x * x * x * x * x - gradesAverageOfSquares\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmzmwkm9w.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmzmwkm9w.scala:36:98\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSumOfSquaresOfSquaresOfSquaresOfDifferences\e[0m = gradesSorted.map(\e\
    [36mx\e[0m => x * x * x - gradesAverageOfSquaresOfSquares).sum\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                              Not found: gradesAverageOfSquaresOfSquares\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpmzmwkm9w.scala:36:134 ----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresOfSquaresOfSquaresOfDifferences\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => x * x * x - gradesAverageOfSquaresOfSquares).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e\
    [35mFloatIsFractional\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e\
    [0m \e[35mByteIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type\
    \ Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e\
    [0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmzmwkm9w.scala:38:111\
    \ -----------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\e[0m = gradesSorted.map(\e\
    [36mx\e[0m => x * x * x * x - gradesAverageOfSquaresOfSquaresOfSquares).sum\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not"
  stdout: ''
  timestamp: 1659805386
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        grades.map(grade => {\n            val gpa = grade\n\
    \            val letterGrade = if (gpa > 3.0) \"B+\" else if (gpa > 2.7) \"B\"\
    \ else if (gpa > 2.3) \"B-\" else if (gpa > 2.0) \"C+\" else if (gpa > 1.7) \"\
    C\" else if (gpa > 1.3) \"C-\" else if (gpa > 1.0) \"D+\" else if (gpa > 0.7)\
    \ \"D\" else if (gpa > 0.0) \"D-\" else \"E\"\n            (gpa, letterGrade)\n\
    \        }).sortBy(_._1).map(_._2).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkmrtzb9i.scala:34)\n\tat Problem.main(tmpkmrtzb9i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedKeys = gradesMapSorted.keys\n\
    \        val gradesMapSortedValues = gradesMapSorted.values\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_4eo7l3e.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4eo7l3e.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedKeysLength\e[0m = gradesMapSortedKeys.size\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4eo7l3e.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4eo7l3e.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeys.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_4eo7l3e.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMap"
  stdout: ''
  timestamp: 1659805092
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapKeysSortedByValue = gradesMapKeys.sortBy(_._2)\n        val\
    \ gradesMapValuesSortedByKey = gradesMapValues.sortBy(_._1)\n        val gradesMapKeysSortedByValueReversed\
    \ = gradesMapKeysSortedByValue.reverse\n        val gradesMapValuesSortedByKeyReversed\
    \ = gradesMapValuesSortedByKey.reverse\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversed.length\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversed.length\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKeyReversedLength - 1\n        val gradesMapKeysSortedByValueReversedLength\
    \ = gradesMapKeysSortedByValueReversedLength - 1\n        val gradesMapValuesSortedByKeyReversedLength\
    \ = gradesMapValuesSortedByKey\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7ezhw23e.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedByValueReversedLength\e\
    [0m = gradesMapKeysSortedByValueReversedLength - \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedByValueReversedLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesMapKeysSortedByValueReversedLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7ezhw23e.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedByKeyReversedLength\e\
    [0m = gradesMapValuesSortedByKeyReversedLength - \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedByKeyReversedLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesMapValuesSortedByKeyReversedLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7ezhw23e.scala:38:12 ---------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedByValueReversedLength\e\
    [0m = gradesMapKeysSortedByValueReversedLength - \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedByValueReversedLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesMapKeysSortedByValueReversedLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7ezhw23e.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedByKeyReversedLength\e\
    [0m = gra"
  stdout: ''
  timestamp: 1659805386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesSet = grades.toSet\n        val gradesSortedSet\
    \ = grades.toSeq.sortBy(_.toFloat)\n        val gradesSortedSetIterator = gradesSortedSet.iterator\n\
    \        val gradesSortedSetIteratorNext = gradesSortedSetIterator.next\n    \
    \    val gradesSortedSetIteratorNextNext = gradesSortedSetIteratorNext.next\n\
    \        val gradesSortedSetIteratorNextNextNext = gradesSortedSetIteratorNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNext = gradesSortedSetIteratorNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNext = gradesSortedSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext =\
    \ gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n     \
    \   val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext =\
    \ gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n \
    \       val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7idul7pf.scala:45:11 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp7idul7pf.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNextNext\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp7idul7pf.scala:31:74 ------------------------\e[0m\e[0m\n\
    \e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedSetIteratorNextNext\e\
    [0m = gradesSortedSetIteratorNext.next\n\e[31m\e[31m   |\e[0m                \
    \                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                     value next is not a member of Float\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7idul7pf.scala:39:78 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m = gradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedSetIteratorNextNextNextNextNextNextNextNextNextNext\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compilin"
  stdout: ''
  timestamp: 1659805387
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4.0f).mapValues(_.map(_\
    \ % 4.0f)).toMap\n        grades.map(grade => gradesMap(grade).map(letter => letter\
    \ + \"\").mkString(\"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: 4.0\n\tat scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)\n\
    \tat scala.collection.immutable.HashMap.apply(HashMap.scala:132)\n\tat Problem$.numericalLetterGrade$$anonfun$1(tmpt5fg4vpd.scala:28)\n\
    \tat Problem$.numericalLetterGrade$$anonfun$adapted$1(tmpt5fg4vpd.scala:28)\n\t\
    at scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.numericalLetterGrade(tmpt5fg4vpd.scala:28)\n\
    \tat Problem$.main(tmpt5fg4vpd.scala:31)\n\tat Problem.main(tmpt5fg4vpd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesSortedByKey\
    \ = grades.sortBy(_._1)\n        val gradesSortedByValue = grades.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.toMap\n        val gradesSortedByKeyReversedMap2\
    \ = gradesSortedByKeyReversedMap.toList\n        val gradesSortedByValueReversedMap2\
    \ = gradesSortedByValueReversedMap.toList\n        val gradesSortedByKeyReversedMap3\
    \ = gradesSortedByKeyReversedMap2.toList\n        val gradesSortedByValueReversedMap3\
    \ = gradesSortedByValueReversedMap2.toList\n        val gradesSortedByKeyReversedMap4\
    \ = gradesSortedByKeyReversedMap3.toList\n        val gradesSortedByValueReversedMap4\
    \ = gradesSortedByValueReversedMap3.toList\n        val gradesSortedByKeyReversedMap5\
    \ = gradesSortedByKeyReversedMap4.toList\n        val gradesSortedByValueReversedMap5\
    \ = gradesSortedByValueReversedMap4.toList\n        val gradesSortedByKeyReversedMap6\
    \ = gradesSortedByKeyReversedMap5.toList\n        val gradesSortedByValueReversedMap6\
    \ = gradesSortedByValueReversedMap5.toList\n        val gradesSortedByKeyReversedMap7\
    \ = gradesSortedByKeyReversedMap6.toList\n        val gradesSortedByValueReversedMap7\
    \ = gradesSortedByValueReversedMap6.toList\n        val gradesSortedByKeyReversedMap8\
    \ = gradesSortedByKeyReversedMap7.toList\n        val gradesSortedByValueReversedMap8\
    \ = gradesSortedByValueReversedMap7.toList\n        val gradesSortedByKeyReversedMap9\
    \ = gradesSortedByKeyReversedMap8.toList\n        val gradesSortedByValueReversedMap9\
    \ = gradesSortedByValueReversedMap8.toList\n        val gradesSortedByKeyReversedMap10\
    \ = gradesSortedByKeyReversedMap9.toList\n        val gradesSortedByValueReversedMap10\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpd0q00vn4.scala:51:46 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValueReversedMap10\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpd0q00vn4.scala:27:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpd0q00vn4.scala:28:48 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m = grades.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^\e[0m\n\
    \e[31m   |\e[0m                                       value _1 is not a member\
    \ of Float\n\e[31m\e[31m-- Error: /tmp/tmpd0q00vn4.scala:28:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m =\
    \ grades.sortBy(_._1)\n\e[31m\e[31m   |\e[0m                                 \
    \                  ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mBigInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e\
    [0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd0q00vn4.scala:29:50\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByValue\e[0m = grades.sortBy(_._2)\n\e[31m"
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa6vonc2e.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa6vonc2e.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesL"
  stdout: ''
  timestamp: 1659805009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys\
    \ = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n  \
    \      val gradesMapKeysSorted = gradesMapKeys.sorted\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sorted\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4zukvm4z.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4zukvm4z.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapKeysSortedLength\e[0m = gradesMapKeysSorted.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4zukvm4z.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4zukvm4z.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4zukvm4z.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ % 4).map(letter => letter + \"+\"))\n        val gradesMap2\
    \ = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_\
    \ % 4).map(letter => letter + \"-\"))\n        val gradesMap3 = grades.groupBy(_\
    \ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_ % 4).map(letter =>\
    \ letter + \"+\"))\n        val gradesMap4 = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ % 4).map(letter => letter + \"-\"))\n        val gradesMap5\
    \ = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_\
    \ % 4).map(letter => letter + \"+\"))\n        val gradesMap6 = grades.groupBy(_\
    \ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_ % 4).map(letter =>\
    \ letter + \"-\"))\n        val gradesMap7 = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ % 4).map(letter => letter + \"+\"))\n        val gradesMap8\
    \ = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_\
    \ % 4).map(letter => letter + \"-\"))\n        val gradesMap9 = grades.groupBy(_\
    \ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_ % 4).map(letter =>\
    \ letter + \"+\"))\n        val gradesMap10 = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1)).mapValues(_.map(_ % 4).map(letter => letter + \"-\"))\n        val gradesMap11\
    \ = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_\
    \ % 4).map(letter => letter + \"+\"))\n        val gradesMap12 = grades.groupBy(_\
    \ / 4).mapValues(_.toList.sortBy(_ * -1)).mapValues(_.map(_ % 4).map(letter =>\
    \ letter + \"-\"))\n        val gradesMap13 = grades.groupBy(_ / 4).mapValues(_.toList.sort\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps83g6n0b.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps83g6n0b.scala:39:67\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap13\e[0m = grades.groupBy(_ / \e[31m4\e[0m).mapValues(_.toList.sort\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sort is not a member of List[Float]\
    \ - did you mean List[Float].sortBy?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmps83g6n0b.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float])\
    \ : List[String] = {\n        val gradesMap = grades.toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSor\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprr7rij65.scala:38:"
  stdout: ''
  timestamp: 1659805387
