{
  "language": "scala",
  "name": "HumanEval_148_bf",
  "results": [
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenMercuryAndVenus = List(venus)\n        val planetsBetweenMercuryAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenMercuryAndSaturn = List(uranus)\n        val planetsBetweenMercuryAndUranus = List(uranus)\n        val planetsBetweenMercuryAndNeptune = List(uranus)\n        val planetsBetweenVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenVenusAndJupiter = List(saturn, uranus)\n        val planet\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjo5k37wh.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj",
      "stdout": "",
      "timestamp": 1659798206
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(\n                    Vector(\n                        Vector(0,0,0),\n                        Vector(0,0,1)\n                    ),\n                    Vector(\n                        Vector(0,0,0),\n                        Vector(0,1,0)\n                    )\n                ),\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,1,0)\n                )\n            )),\n            Planet(\"Venus\", Orbit(\n                Vector(\n                    Vector(\n                        Vector(0,0,0),\n                        Vector(0,0,1)\n                    ),\n                    Vector(\n                        Vector(0,0,0),\n                        Vector(0,1,0)\n                    )\n                ),\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,1,0)\n                )\n            )),\n            Planet(\"Earth\", Orbit(\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,0,1)\n                ),\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,1,0)\n                )\n            )),\n            Planet(\"Mars\", Orbit(\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,0,1)\n                ),\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,1,0)\n                )\n            )),\n            Planet(\"Jupiter\", Orbit(\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,0,1)\n                ),\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,1,0)\n                )\n            )),\n            Planet(\"Saturn\", Orbit(\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,0,1)\n                ),\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,1,0)\n                )\n            )),\n            Planet(\"Uranus\", Orbit(\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,0,1)\n                ),\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,1,0)\n                )\n            )),\n            Planet(\"Neptune\", Orbit(\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,0,1)\n                ),\n                Vector(\n                    Vector(0,0,0),\n                    Vector(0,1,0)\n                )\n            ))\n        )\n        val sun = Orbit(\n            Vector(\n                Vector(0,0,0),\n                Vector(0,0,1)\n            ),\n            Vector(\n                Vector(0,0,0),\n                Vector(0,1,0)\n            )\n        )\n        val orbits = planets.\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp28dj3jcy.scala:126:4 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m126 |\u001b[0m    }\n\u001b[31m\u001b[31m    |\u001b[0m    ^\u001b[0m\n\u001b[31m    |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp28dj3jcy.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp28dj3jcy.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp28dj3jcy.scala:38:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp28dj3jcy.scala:38:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp28dj3jcy.scala:54:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m            Planet(\u001b[31m\"Earth\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp28dj3jcy.scala:54:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m            Planet(\u001b[31m",
      "stdout": "",
      "timestamp": 1659798476
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(\n                    Vector(\n                        Vector(\n                            Vector(\n                                Vector(\n                                    Vector(\n                                        Vector(\n                                            Vector(\n                                                Vector(\n                                                    Vector(\n                                                        Vector(\n                                                            Vector(\n                                                                Vector(\n                                                                    Vector(\n                                                                        Vector(\n                                                                            Vector(\n                                                                                Vector(\n                                                                                    Vector(\n                                                                                        Vector(\n                                                                                            Vector(\n                                                                                                Vector(\n                                                                                                    Vector(\n                                                                                                        Vector(\n                                                                                                            Vector(\n                                                                                                                Vector(\n                                                                                                                    Vector(\n                                                                                                                        Vector(\n                                                                                                                            Vector(\n                                                                                                                                Vector(\n                                                                                                                                    Vector(\n                                                                                                                                        Vector(\n                                                                                                                                            Vector(\n                                                                                                                                                Vector(\n                                                                                                                                                    Vector(\n                                                                                                                                                        Vector(\n                                                                                                                                                            Vector(\n                                                                                                                                                                Vector(\n                                                                                                                                                                    Vector(\n                                                                                                                                                                        Vector(\n                                                                                                                                                                            Vector(\n                                                                                                                                                                                Vector(\n                                                                                                                                                                                    Vector(\n                                                                                                                                                                                        Vector(\n                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp2v6c7q2p.scala:102:327 -------------------------\u001b[0m\u001b[0m\n\u001b[31m102 |\u001b[0m                                                                                                                                                                                                                                                                                                                                Vector(\n\u001b[31m\u001b[31m    |\u001b[0m                                                                                                                                                                                                                                                                                                                                       ^\u001b[0m\n\u001b[31m    |\u001b[0m                                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2v6c7q2p.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2v6c7q2p.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2v6c7q2p.scala:104:5 --------------------\u001b[0m\u001b[0m\n\u001b[31m104 |\u001b[0m    }\n\u001b[31m\u001b[31m    |\u001b[0m     ^\u001b[0m\n\u001b[31m    |\u001b[0m     Found:    Unit\n\u001b[31m    |\u001b[0m     Required: List[String]\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659798476
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo5j13vx8.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus, earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(\n                    Vector(\n                        Vector(\n                            Vector(\n                                Vector(\n                                    Vector(\n                                        Vector(\n                                            Vector(\n                                                Vector(\n                                                    Vector(\n                                                        Vector(\n                                                            Vector(\n                                                                Vector(\n                                                                    Vector(\n                                                                        Vector(\n                                                                            Vector(\n                                                                                Vector(\n                                                                                    Vector(\n                                                                                        Vector(\n                                                                                            Vector(\n                                                                                                Vector(\n                                                                                                    Vector(\n                                                                                                        Vector(\n                                                                                                            Vector(\n                                                                                                                Vector(\n                                                                                                                    Vector(\n                                                                                                                        Vector(\n                                                                                                                            Vector(\n                                                                                                                                Vector(\n                                                                                                                                    Vector(\n                                                                                                                                        Vector(\n                                                                                                                                            Vector(\n                                                                                                                                                Vector(\n                                                                                                                                                    Vector(\n                                                                                                                                                        Vector(\n                                                                                                                                                            Vector(\n                                                                                                                                                                Vector(\n                                                                                                                                                                    Vector(\n                                                                                                                                                                        Vector(\n                                                                                                                                                                            Vector(\n                                                                                                                                                                                Vector(\n                                                                                                                                                                                    Vector(\n                                                                                                                                                                                        Vector(\n                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpouqfizgi.scala:101:359 -------------------------\u001b[0m\u001b[0m\n\u001b[31m101 |\u001b[0m                                                                                                                                                                                                                                                                                                                                                                Vector(\n\u001b[31m\u001b[31m    |\u001b[0m                                                                                                                                                                                                                                                                                                                                                                       ^\u001b[0m\n\u001b[31m    |\u001b[0m                                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpouqfizgi.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpouqfizgi.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpouqfizgi.scala:103:5 --------------------\u001b[0m\u001b[0m\n\u001b[31m103 |\u001b[0m    }\n\u001b[31m\u001b[31m    |\u001b[0m     ^\u001b[0m\n\u001b[31m    |\u001b[0m     Found:    Unit\n\u001b[31m    |\u001b[0m     Required: List[String]\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => orbit(planet))\n        val sun = orbits.map(orbit => orbit.map(_.distanceFromSun))\n        val proximity = sun zip sun map { case (sun1, sun2) => sun1.distanceFromSun(sun2) }\n        proximity.sortBy(_._2).reverse.filter(_.isDefined).map(_.head).toList\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp903lhlr4.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => orbit(planet))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp903lhlr4.scala:23:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = orbits.map(\u001b[36morbit\u001b[0m => orbit.map(_.distanceFromSun))\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue map is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import Option.option2Iterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m   |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m   |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp903lhlr4.scala:24:68 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mproximity\u001b[0m = sun zip sun map { \u001b[33mcase\u001b[0m (sun1, sun2) => sun1.distanceFromSun(sun2) }\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value distanceFromSun is not a member of ",
      "stdout": "",
      "timestamp": 1659798477
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\", new Orbit(\n                new Planet(\"Venus\", new Orbit(\n                    new Planet(\"Earth\", new Orbit(\n                        new Planet(\"Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n                                new Planet(\"Saturn\", new Orbit(\n                                    new Planet(\"Uranus\", new Orbit(\n                                        new Planet(\"Neptune\", new Orbit(\n                                            new Planet(\"Mercury\", new Orbit(\n                                                new Planet(\"Venus\", new Orbit(\n                                                    new Planet(\"Earth\", new Orbit(\n                                                        new Planet(\"Mars\", new Orbit(\n                                                            new Planet(\"Jupiter\", new Orbit(\n                                                                new Planet(\"Saturn\", new Orbit(\n                                                                    new Planet(\"Uranus\", new Orbit(\n                                                                        new Planet(\"Neptune\", new Orbit(\n                                                                            new Planet(\"Mercury\", new Orbit(\n                                                                                new Planet(\"Venus\", new Orbit(\n                                                                                    new Planet(\"Earth\", new Orbit(\n                                                                                        new Planet(\"Mars\", new Orbit(\n                                                                                            new Planet(\"Jupiter\", new Orbit(\n                                                                                                new Planet(\"Saturn\", new Orbit(\n                                                                                                    new Planet(\"Uranus\", new Orbit(\n                                                                                                        new Planet(\"Neptune\", new Orbit(\n                                                                                                            new Planet(\"Mercury\", new Orbit(\n                                                                                                                new Planet(\"Venus\", new Orbit(\n                                                                                                                    new Planet(\"Earth\", new Orbit(\n                                                                                                                        new Planet(\"Mars\", new Orbit(\n                                                                                                                            new Planet(\"Jupiter\", new Orbit(\n                                                                                                                                new Planet(\"Saturn\", new Orbit(\n                                                                                                                                    new Planet(\"Uranus\", new Orbit(\n                                                                                                                                        new Planet(\"Neptune\", new Orbit(\n                                                                                                                                            new Planet(\"Mercury\", new Orbit(\n                                                                                                                                                new Planet(\"Venus\", new Orbit(\n                                                                                                                                                    new Planet(\"Earth\", new Orbit(\n                                                                                                                                                        new Planet(\"Mars\", new Orbit(\n                                                                                                                                                            \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpa9m9vyup.scala:57:181 --------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m                                                                                                                                                        \u001b[33mnew\u001b[0m \u001b[35mPlanet\u001b[0m(\u001b[31m\"Mars\"\u001b[0m, \u001b[33mnew\u001b[0m \u001b[35mOrbit\u001b[0m(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\nexception occurred while parser /tmp/tmpa9m9vyup.scala\nexception occurred while compiling /tmp/tmpa9m9vyup.scala\nException in thread \"main\" java.lang.AssertionError: assertion failed: position error, parent span does not contain child span\nparent      = \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m) # -1,\nparent span = <5097..5107>,\nchild       = \u001b[31mnull\u001b[0m # -1,\nchild span  = [5107..5269..5269]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio",
      "stdout": "error while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))))\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\n    )\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mercury\"\u001b[0m, \n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n      \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n        \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\n      )\n    )\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mercury\"\u001b[0m, \n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n        \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n          \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, ",
      "timestamp": 1659798186
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndVenusAndMar\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsfp2719s.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfp2719s.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfp2719s.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfp2719s.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfp2719s.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfp2719s.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps",
      "stdout": "",
      "timestamp": 1659798212
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planet1 = planet1.toUpperCase\n        val planet2 = planet2.toUpperCase\n        if (planet1 == planet2) {\n            List(planet1)\n        } else if (planets.contains(planet1) && planets.contains(planet2)) {\n            val orbit1 = sun.getOrbit(planet1)\n            val orbit2 = sun.getOrbit(planet2)\n            val distance1 = orbit1.distance(sun)\n            val distance2 = orbit2.distance(sun)\n            val proximity = distance1.min(distance2)\n            val planetsBetween = planets.filter(planet => proximity <= sun.getOrbit(planet).getOrbit(planet2).distance(sun))\n            planetsBetween.sortBy(proximity)\n        } else {\n            List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjlz7exox.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjlz7exox.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjlz7exox.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjlz7exox.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjlz7exox.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjlz7exox.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798476
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp92as_44v.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgs45hdcq.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg",
      "stdout": "",
      "timestamp": 1660009381
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndMars = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndJupiter = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndSaturn = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndUranus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndNeptune = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenusAndEarth = List(earth, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1je5q86o.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1je5q86o.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1je5q86o.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1je5q86o.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1je5q86o.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1je5q86o.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1",
      "stdout": "",
      "timestamp": 1660009381
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, -1.0), \n                Vector(-1.0, 0.0), \n                Vector(-1.0, 1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpt8b7qy_a.scala:94:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt8b7qy_a.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt8b7qy_a.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt8b7qy_a.scala:94:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660009383
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,1,0), Vector(0,-1,0)), Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(1,0,0), Vector(-1,0,0)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0), Vector(0,-1,0), Vector(0,1,0)), Vector(0,0,0)),\n            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(0,1,0), Vector(1,0,0)), Vector(0,0,0)),\n            Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,-1,0), Vector(-1,0,0)), Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(1,0,0), Vector(0,1,0)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(-1,0,0), Vector(0,-1,0)), Vector(0,0,0))\n        )\n        val sun = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit2 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit3 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit4 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit5 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit6 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit7 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit8 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit9 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit10 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit11 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit12 = Orbit\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpceqtt0fz.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpceqtt0fz.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpceqtt0fz.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpceqtt0fz.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "stdout": "",
      "timestamp": 1660009383
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun = Vector(0.0, 0.0, 1.0)\n        val planet1 = planets.find(planet => planet == planet1)\n        val planet2 = planets.find(planet => planet == planet2)\n        if (planet1 == null || planet2 == null) {\n            return Nil\n        }\n        val orbit1 = planet1.orbit(sun)\n        val orbit2 = planet2.orbit(sun)\n        val distance = Vector.sub(orbit1, orbit2).magnitude\n        val planetsBetween = planets.filter(planet => Vector.sub(orbit1, planet.orbit(sun)).magnitude < distance)\n        val planetsBetweenSorted = planetsBetween.sortBy(planet => Vector.sub(orbit1, planet.orbit(sun)).magnitude)\n        planetsBetweenSorted\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp84vi2t7t.scala:23:55 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet1\u001b[0m = planets.find(\u001b[36mplanet\u001b[0m => planet == planet1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mplanet1\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp84vi2t7t.scala:24:55 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet2\u001b[0m = planets.find(\u001b[36mplanet\u001b[0m => planet == planet2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mplanet2\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp84vi2t7t.scala:28:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1\u001b[0m = planet1.orbit(sun)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue orbit is not a member of Option[String] - did you mean planet1.wait?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp84vi2t7t.scala:29:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit2\u001b[0m = planet2.orbit(sun)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue orbit is not a member of Option[String] - did you mean planet2.wait?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp84vi2t7t.scala:30:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mdistance\u001b[0m = Vector.sub(orbit1, orbit2).magnitude\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m   value sub is not a member of object scala.collection.immutable.Vector\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp84vi2t7t.scala:31:61 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36m",
      "stdout": "",
      "timestamp": 1660009384
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => Orbit(planet))\n        val sun = Orbit(\"Sun\")\n        val sunOrbit = Orbit(\"Sun\")\n        val sunOrbits = List(sunOrbit)\n        val planetOrbits = orbits.map(orbit => Orbit(orbit.planet))\n        val planetOrbit = Orbit(planet1)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbit = Orbit(planet2)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOr\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppwu6grv3.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppwu6grv3.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetOrbits\u001b[0m = List(planetOrbit)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanetOrbits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanetOrbits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppwu6grv3.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetOrbit\u001b[0m = Orbit(planet2)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanetOrbit is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanetOrbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppwu6grv3.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetOrbits\u001b[0m = List(planetOrbit)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanetOrbits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanetOrbits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppwu6grv3.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetOrbits\u001b[0m = List(planetOrbit)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanetOrbits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanetOrbits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppwu6grv3.scala:32:12 ------------------------",
      "stdout": "",
      "timestamp": 1660009384
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(\n                    Vector(\n                        Vector(\n                            Vector(\n                                Vector(\n                                    Vector(\n                                        Vector(\n                                            Vector(\n                                                Vector(\n                                                    Vector(\n                                                        Vector(\n                                                            Vector(\n                                                                Vector(\n                                                                    Vector(\n                                                                        Vector(\n                                                                            Vector(\n                                                                                Vector(\n                                                                                    Vector(\n                                                                                        Vector(\n                                                                                            Vector(\n                                                                                                Vector(\n                                                                                                    Vector(\n                                                                                                        Vector(\n                                                                                                            Vector(\n                                                                                                                Vector(\n                                                                                                                    Vector(\n                                                                                                                        Vector(\n                                                                                                                            Vector(\n                                                                                                                                Vector(\n                                                                                                                                    Vector(\n                                                                                                                                        Vector(\n                                                                                                                                            Vector(\n                                                                                                                                                Vector(\n                                                                                                                                                    Vector(\n                                                                                                                                                        Vector(\n                                                                                                                                                            Vector(\n                                                                                                                                                                Vector(\n                                                                                                                                                                    Vector(\n                                                                                                                                                                        Vector(\n                                                                                                                                                                            Vector(\n                                                                                                                                                                                Vector(\n                                                                                                                                                                                    Vector(\n                                                                                                                                                                                        Vector(\n                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpouqfizgi.scala:101:359 -------------------------\u001b[0m\u001b[0m\n\u001b[31m101 |\u001b[0m                                                                                                                                                                                                                                                                                                                                                                Vector(\n\u001b[31m\u001b[31m    |\u001b[0m                                                                                                                                                                                                                                                                                                                                                                       ^\u001b[0m\n\u001b[31m    |\u001b[0m                                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpouqfizgi.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpouqfizgi.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpouqfizgi.scala:103:5 --------------------\u001b[0m\u001b[0m\n\u001b[31m103 |\u001b[0m    }\n\u001b[31m\u001b[31m    |\u001b[0m     ^\u001b[0m\n\u001b[31m    |\u001b[0m     Found:    Unit\n\u001b[31m    |\u001b[0m     Required: List[String]\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndVenusAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9w0bgyok.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9w0bgyok.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9w0bgyok.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9w0bgyok.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9w0bgyok.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9w0bgyok.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndMars = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndJupiter = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndSaturn = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndUranus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndNeptune = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenusAndEarth = List(mars, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjvwk9caj.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjvwk9caj.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjvwk9caj.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjvwk9caj.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjvwk9caj.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjvwk9caj.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj",
      "stdout": "",
      "timestamp": 1660009383
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n            Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n            Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n            Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0)\n        )\n        val sun = Planet(\"Sun\", 0, 0)\n        val planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n        val planet2Orbit = planets.find(_.name == planet2).getOrElse(sun)\n        val orbits = List(planet1Orbit, planet2Orbit)\n        val orbitsBetweenPlanets = orbits.filter(_.orbit(planet1) < _.orbit(planet2))\n        val proximity = orbitsBetweenPlanets.map(_.distance(planet1))\n        proximity.sortBy(_.distance)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_5rf8x3z.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, \u001b[31m0\u001b[0m, \u001b[31m0\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_5rf8x3z.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, \u001b[31m0\u001b[0m, \u001b[31m0\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_5rf8x3z.scala:24:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            Planet(\u001b[31m\"Earth\"\u001b[0m, \u001b[31m0\u001b[0m, \u001b[31m0\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_5rf8x3z.scala:25:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            Planet(\u001b[31m\"Mars\"\u001b[0m, \u001b[31m0\u001b[0m, \u001b[31m0\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_5rf8x3z.scala:26:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            Planet(\u001b[31m\"Jupiter\"\u001b[0m, \u001b[31m0\u001b[0m, \u001b[31m0\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_5rf8x3z.scala:27:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            Planet(\u001b[31m\"Saturn\"\u001b[0m, \u001b[31m0\u001b[0m, \u001b[31m0\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun = Vector(0.0, 0.0, 1.0)\n        val planet1Orbit = planets.find(planet => planet == planet1).getOrElse(\"\")\n        val planet2Orbit = planets.find(planet => planet == planet2).getOrElse(\"\")\n        val planet1OrbitSun = Vector(planet1Orbit.split(\"[\\\\[\\\\]]\").map(_.toDouble).sum, sun._1, sun._2)\n        val planet2OrbitSun = Vector(planet2Orbit.split(\"[\\\\[\\\\]]\").map(_.toDouble).sum, sun._1, sun._2)\n        val planet1OrbitSunDistance = planet1OrbitSun.magnitude\n        val planet2OrbitSunDistance = planet2OrbitSun.magnitude\n        val planet1OrbitSunDistanceSquared = planet1OrbitSunDistance * planet1OrbitSunDistance\n        val planet2OrbitSunDistanceSquared = planet2OrbitSunDistance * planet2OrbitSunDistance\n        val planet1OrbitSunDistanceCubed = planet1OrbitSunDistance * planet1OrbitSunDistance * planet1OrbitSunDistance\n        val planet2OrbitSunDistanceCubed = planet2OrbitSunDistance * planet2OrbitSunDistance * planet2OrbitSunDistance\n        val planet1OrbitSunDistanceSquaredCubed = planet1OrbitSunDistanceSquared * planet1OrbitSunDistanceSquared\n        val planet2OrbitSunDistanceSquaredCubed = planet2OrbitSunDistanceSquared * planet2OrbitSunDistanceSquared\n        val planet1OrbitSunDistanceCubedSquared = planet1OrbitSunDistanceCubed * planet1OrbitSunDistanceCubed\n        val planet2OrbitSunDistanceCubedSquared = planet2OrbitSunDistanceCubed * planet2OrbitSunDistanceCubed\n        val planet1OrbitSunDistanceSquaredCubedSquared = planet1OrbitSunDistanceSquaredCubed * planet1OrbitSunDistanceSquaredCubed\n        val planet2OrbitSunDistance\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphssxf2m7.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphssxf2m7.scala:25:93 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet1OrbitSun\u001b[0m = Vector(planet1Orbit.split(\u001b[31m\"[\\\\[\\\\]]\"\u001b[0m).map(_.toDouble).sum, sun._1, sun._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value _1 is not a member of Vector[Double]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphssxf2m7.scala:25:101 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet1OrbitSun\u001b[0m = Vector(planet1Orbit.split(\u001b[31m\"[\\\\[\\\\]]\"\u001b[0m).map(_.toDouble).sum, sun._1, sun._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value _2 is not a member of Vector[Double]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphssxf2m7.scala:26:93 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet2OrbitSun\u001b[0m = Vector(planet2Orbit.split(\u001b[31m\"[\\\\[\\\\]]\"\u001b[0m).map(_.toDouble).sum, sun._1, sun._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value _1 is not a member of Vector[Double]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphssxf2m7.scala:26:101 -----------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet2OrbitSun\u001b[0m = Vector(planet2Orbit.split(\u001b[31m\"[\\\\[\\\\]]\"\u001b[0m).map(_.toDouble).sum, sun._1, sun._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                 ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              value _2 is not a member of Vector[Double]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphssx",
      "stdout": "",
      "timestamp": 1660009384
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1 = planets.find(planet => planet == planet1).getOrElse(\"\")\n        val planet2 = planets.find(planet => planet == planet2).getOrElse(\"\")\n        val sun = Planet(\"Sun\")\n        val planet1Orbit = Planet(planet1)\n        val planet2Orbit = Planet(planet2)\n        val orbits = List(planet1Orbit, planet2Orbit)\n        val orbit1 = orbits.find(orbit => orbit.name == planet1Orbit.name).getOrElse(\"\")\n        val orbit2 = orbits.find(orbit => orbit.name == planet2Orbit.name).getOrElse(\"\")\n        val orbit1Orbit = orbits.find(orbit => orbit.name == planet1Orbit.name).getOrElse(\"\")\n        val orbit2Orbit = orbits.find(orbit => orbit.name == planet2Orbit.name).getOrElse(\"\")\n        val orbit1OrbitSun = orbits.find(orbit => orbit.name == planet1Orbit.name).getOrElse(\"\")\n        val orbit2OrbitSun = orbits.find(orbit => orbit.name == planet2Orbit.name).getOrElse(\"\")\n        val orbit1OrbitSunOrbit2 = orbits.find(orbit => orbit.name == planet1Orbit.name).getOrElse(\"\")\n        val orbit2OrbitSunOrbit2 = orbits.find(orbit => orbit.name == planet2Orbit.name).getOrElse(\"\")\n        val orbit1OrbitSunOrbit2Orbit1 = orbits.find(orbit => orbit.name == planet1Orbit.name).getOrElse(\"\")\n        val orbit2OrbitSunOrbit2Orbit1 = orbits.find(orbit => orbit.name == planet2Orbit.name).getOrElse(\"\")\n        val orbit1OrbitSunOrbit2Orbit1Orbit2 = orbits.find(orbit => orbit.name == planet1Orbit.name).getOrElse(\"\")\n        val orbit2OrbitSunOrbit2Orbit1Orbit2 = orbits.find(orbit => orbit.name == planet2Orbit.name).getOrElse(\"\")\n        val orbit1\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprknrkyru.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprknrkyru.scala:22:55 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet1\u001b[0m = planets.find(\u001b[36mplanet\u001b[0m => planet == planet1).getOrElse(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mplanet1\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprknrkyru.scala:23:55 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet2\u001b[0m = planets.find(\u001b[36mplanet\u001b[0m => planet == planet2).getOrElse(\u001b[31m\"\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mplanet2\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprknrkyru.scala:24:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprknrkyru.scala:25:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet1Orbit\u001b[0m = Planet(planet1)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprknrkyru.scala:26:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m ",
      "stdout": "",
      "timestamp": 1660009386
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val sun = Planet(\"Sun\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        val orbit1 = planets.find(_.name == planet1).map(_.orbit).getOrElse(sun)\n        val orbit2 = planets.find(_.name == planet2).map(_.orbit).getOrElse(sun)\n        val orbits = orbit1.orbit.zip(orbit2.orbit).sortBy(_._1.distance(_._2))\n        orbits.map(_.name).filterNot(_.equals(planet1) || _.equals(planet2))\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp737_4lva.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp737_4lva.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp737_4lva.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp737_4lva.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "stdout": "",
      "timestamp": 1660009384
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\", new Orbit(0.0, 0.0)),\n            new Planet(\"Venus\", new Orbit(0.0, 1.0)),\n            new Planet(\"Earth\", new Orbit(1.0, 0.0)),\n            new Planet(\"Mars\", new Orbit(1.0, 1.0)),\n            new Planet(\"Jupiter\", new Orbit(0.0, 2.0)),\n            new Planet(\"Saturn\", new Orbit(2.0, 0.0)),\n            new Planet(\"Uranus\", new Orbit(2.0, 1.0)),\n            new Planet(\"Neptune\", new Orbit(2.0, 2.0))\n        )\n        val sun = new Orbit(0.0, 1.0)\n        val planet1 = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name == planet2).get\n        val orbit1 = planet1.orbit\n        val orbit2 = planet2.orbit\n        val sun1 = orbit1.toPlanet\n        val sun2 = orbit2.toPlanet\n        val sun3 = sun.orbit.toPlanet\n        val sun4 = sun.orbit.toPlanet\n        val sun5 = sun.orbit.toPlanet\n        val sun6 = sun.orbit.toPlanet\n        val sun7 = sun.orbit.toPlanet\n        val sun8 = sun.orbit.toPlanet\n        val sun9 = sun.orbit.toPlanet\n        val sun10 = sun.orbit.toPlanet\n        val sun11 = sun.orbit.toPlanet\n        val sun12 = sun.orbit.toPlanet\n        val sun13 = sun.orbit.toPlanet\n        val sun14 = sun.orbit.toPlanet\n        val sun15 = sun.orbit.toPlanet\n        val sun16 = sun.orbit.toPlanet\n        val sun17 = sun.orbit.toPlanet\n        val sun18 = sun.orbit.toPlanet\n        val sun19 = sun.orbit.toPlanet\n        val sun20 = sun.orbit.toPlanet\n        val sun21 = sun.orbit.toPlanet\n        val sun22 = sun.orbit.toPlanet\n        val sun23 = sun.orbit.toPlanet\n        val sun24 = sun.orbit.toPlanet\n        val sun25 = sun.orbit.toPlanet\n        val sun26 = sun.orbit.toPlanet\n        val sun27 = sun.orbit.toPlanet\n        val sun28 = sun.orbit.toPlanet\n        val sun29 = sun.orbit.toPlanet\n        val sun30 = sun.\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbfinekec.scala:66:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfinekec.scala:22:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mnew\u001b[0m \u001b[35mPlanet\u001b[0m(\u001b[31m\"Mercury\"\u001b[0m, \u001b[33mnew\u001b[0m \u001b[35mOrbit\u001b[0m(\u001b[31m0.0\u001b[0m, \u001b[31m0.0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: type Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfinekec.scala:23:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mnew\u001b[0m \u001b[35mPlanet\u001b[0m(\u001b[31m\"Venus\"\u001b[0m, \u001b[33mnew\u001b[0m \u001b[35mOrbit\u001b[0m(\u001b[31m0.0\u001b[0m, \u001b[31m1.0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: type Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfinekec.scala:24:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mnew\u001b[0m \u001b[35mPlanet\u001b[0m(\u001b[31m\"Earth\"\u001b[0m, \u001b[33mnew\u001b[0m \u001b[35mOrbit\u001b[0m(\u001b[31m1.0\u001b[0m, \u001b[31m0.0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: type Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfinekec.scala:25:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            \u001b[33mnew\u001b[0m \u001b[35mPlanet\u001b[0m(\u001b[31m\"Mars\"\u001b[0m, \u001b[33mnew\u001b[0m \u001b[35mOrbit\u001b[0m(\u001b[31m1.0\u001b[0m, \u001b[31m1.0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: type Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfinekec.scala:26:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mnew\u001b[0m \u001b[35mPlanet\u001b[0m(\u001b[31m\"Jupiter\"\u001b[0m, \u001b[33mnew\u001b[0m \u001b[35",
      "stdout": "",
      "timestamp": 1660009384
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planetsBetween = planets.filter(planet => planets.contains(planet) && planet != planet1 && planet != planet2)\n        val planetsBetweenWithSun = planetsBetween.filter(planet => planet != planet1 && planet != planet2 && planet != planets.last)\n        val planetsBetweenWithSunAndPlanet1 = planetsBetweenWithSun.filter(planet => planet != planet2 && planet != planets.last)\n        val planetsBetweenWithSunAndPlanet2 = planetsBetweenWithSun.filter(planet => planet != planet1 && planet != planet2 && planet != planets.last)\n        val planetsBetweenWithSunAndPlanet3 = planetsBetweenWithSun.filter(planet => planet != planet1 && planet != planet2 && planet != planets.last)\n        val planetsBetweenWithSunAndPlanet4 = planetsBetweenWithSun.filter(planet => planet != planet1 && planet != planet2 && planet != planets.last)\n        val planetsBetweenWithSunAndPlanet5 = planetsBetweenWithSun.filter(planet => planet != planet1 && planet != planet2 && planet != planets.last)\n        val planetsBetweenWithSunAndPlanet6 = planetsBetweenWithSun.filter(planet => planet != planet1 && planet != planet2 && planet != planets.last)\n        val planetsBetweenWithSunAndPlanet7 = planetsBetweenWithSun.filter(planet => planet != planet1 && planet != planet2 && planet != planets.last)\n        val planetsBetweenWithSunAndPlanet8 = planetsBetweenWithSun.filter(planet => planet != planet1 && planet != planet2 && planet != planets.last)\n        val planetsBetweenWithSunAndPlanet9 = planetsBetweenWithSun.filter(planet => planet != planet1 && planet != planet2 && planet != planets.last)\n        val planetsBetweenWithSunAndPlanet10 = planet\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptoec0uqj.scala:33:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetsBetweenWithSunAndPlanet10\u001b[0m = planet\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptoec0uqj.scala:34:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\", new Orbit(\n                new Orbit(\n                    new Orbit(\n                        new Orbit(\n                            new Orbit(\n                                new Orbit(\n                                    new Orbit(\n                                        new Orbit(\n                                            new Orbit(\n                                                new Orbit(\n                                                    new Orbit(\n                                                        new Orbit(\n                                                            new Orbit(\n                                                                new Orbit(\n                                                                    new Orbit(\n                                                                        new Orbit(\n                                                                            new Orbit(\n                                                                                new Orbit(\n                                                                                    new Orbit(\n                                                                                        new Orbit(\n                                                                                            new Orbit(\n                                                                                                new Orbit(\n                                                                                                    new Orbit(\n                                                                                                        new Orbit(\n                                                                                                            new Orbit(\n                                                                                                                new Orbit(\n                                                                                                                    new Orbit(\n                                                                                                                        new Orbit(\n                                                                                                                            new Orbit(\n                                                                                                                                new Orbit(\n                                                                                                                                    new Orbit(\n                                                                                                                                        new Orbit(\n                                                                                                                                            new Orbit(\n                                                                                                                                                new Orbit(\n                                                                                                                                                    new Orbit(\n                                                                                                                                                        new Orbit(\n                                                                                                                                                            new Orbit(\n                                                                                                                                                                new Orbit(\n                                                                                                                                                                    new Orbit(\n                                                                                                                                                                        new Orbit(\n                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                                                                                            new Orbit(\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp2bf_uuo9.scala:86:278 --------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m                                                                                                                                                                                                                                                                            \u001b[33mnew\u001b[0m \u001b[35mOrbit\u001b[0m(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\nexception occurred while parser /tmp/tmp2bf_uuo9.scala\nexception occurred while compiling /tmp/tmp2bf_uuo9.scala\nException in thread \"main\" java.lang.AssertionError: assertion failed: position error, parent span does not contain child span\nparent      = \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m) # -1,\nparent span = <10837..10847>,\nchild       = \u001b[31mnull\u001b[0m # -1,\nchild span  = [10847..10853..10853]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat s",
      "stdout": "error while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\n  )\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\n    )\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n        \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\n      )\n    )\n  )\n)\nerror while checking \u001b[3",
      "timestamp": 1660009376
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => Orbit(planet))\n        val sun = Orbit(\"Sun\")\n        val sunOrbit = Orbit(\"Sun\")\n        val sunOrbits = List(sunOrbit)\n        val sunOrbitsSet = Set(sunOrbit)\n        val sunOrbitsSet2 = Set(sunOrbit)\n        val sunOrbitsSet3 = Set(sunOrbit)\n        val sunOrbitsSet4 = Set(sunOrbit)\n        val sunOrbitsSet5 = Set(sunOrbit)\n        val sunOrbitsSet6 = Set(sunOrbit)\n        val sunOrbitsSet7 = Set(sunOrbit)\n        val sunOrbitsSet8 = Set(sunOrbit)\n        val sunOrbitsSet9 = Set(sunOrbit)\n        val sunOrbitsSet10 = Set(sunOrbit)\n        val sunOrbitsSet11 = Set(sunOrbit)\n        val sunOrbitsSet12 = Set(sunOrbit)\n        val sunOrbitsSet13 = Set(sunOrbit)\n        val sunOrbitsSet14 = Set(sunOrbit)\n        val sunOrbitsSet15 = Set(sunOrbit)\n        val sunOrbitsSet16 = Set(sunOrbit)\n        val sunOrbitsSet17 = Set(sunOrbit)\n        val sunOrbitsSet18 = Set(sunOrbit)\n        val sunOrbitsSet19 = Set(sunOrbit)\n        val sunOrbitsSet20 = Set(sunOrbit)\n        val sunOrbitsSet21 = Set(sunOrbit)\n        val sunOrbitsSet22 = Set(sunOrbit)\n        val sunOrbitsSet23 = Set(sunOrbit)\n        val sunOrbitsSet24 = Set(sunOrbit)\n        val sunOrbitsSet25 = Set(sunOrbit)\n        val sunOrbitsSet26 = Set(sunOrbit)\n        val sunOrbitsSet27 = Set(sunOrbit)\n        val sunOrbitsSet28 = Set(sunOrbit)\n        val sunOrbitsSet29 = Set(sunOrbit)\n        val sunOrbitsSet30 = Set(sunOrbit)\n        val sunOrbitsSet31 = Set(sunOrbit)\n        val sunOrbitsSet32 = Set(sunOrbit)\n        val sunOrbitsSet33 = Set(sunOr\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpieb7zo1u.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpieb7zo1u.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => Orbit(planet))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpieb7zo1u.scala:23:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Orbit(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpieb7zo1u.scala:24:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msunOrbit\u001b[0m = Orbit(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpieb7zo1u.scala:58:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msunOrbitsSet33\u001b[0m = Set(sunOr\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: sunOr\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpieb7zo1u.scala:59:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n6 errors found\n",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, saturn)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndVenusAndMars = \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp_vo9q3ks.scala:47:46 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetsBetweenSunAndVenusAndMars\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_vo9q3ks.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_vo9q3ks.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_vo9q3ks.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_vo9q3ks.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_vo9q3ks.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mar",
      "stdout": "",
      "timestamp": 1660009381
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgs45hdcq.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg",
      "stdout": "",
      "timestamp": 1660009381
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => (planet, planets.map(planet).map(planet)))\n        val sun = Planet(\"Sun\")\n        val sunOrbit = orbits.find(_._1 == sun).map(_._2)\n        val sunOrbits = sunOrbit.map(_.toList)\n        val planetOrbits = orbits.find(_._1 == planet1).map(_._2)\n        val planetOrbits1 = planetOrbits.map(_.toList)\n        val planetOrbits2 = orbits.find(_._1 == planet2).map(_._2)\n        val planetOrbits2 = planetOrbits2.map(_.toList)\n        val planetOrbits = planetOrbits1 ++ planetOrbits2 ++ sunOrbits\n        val planetOrbits = planetOrbits.sortBy(p => p.distanceTo(sun))\n        val planetOrbits = planetOrbits.filter(p => p.distanceTo(sun) < p.distanceTo(planetOrbits.head))\n        val planetOrbits = planetOrbits.filter(p => p.distanceTo(sun) > p.distanceTo(planetOrbits.last))\n        val planetOrbits = planetOrbits.filter(p => p.distanceTo(sun) == p.distanceTo(planetOrbits.head))\n        val planetOrbits = planetOrbits.filter(p => p.distanceTo(sun) == p.distanceTo(planetOrbits.last))\n        val planetOrbits = planetOrbits.filter(p => p.distanceTo(sun) > p.distanceTo(planetOrbits.head))\n        val planetOrbits = planetOrbits.filter(p => p.distanceTo(sun) < p.distanceTo(planetOrbits.last))\n        val planetOrbits = planetOrbits.filter(p => p.distanceTo(sun) == p.distanceTo(planetOrbits.head))\n        val planetOrbits = planetOrbits.filter(p => p.distanceTo(sun) == p.distanceTo(planetOrbits.last))\n        val planetOrbits = planetOrbits.filter(p => p.distanceTo(sun) > p.distanceTo(planetOrbits.head))\n        val planetOrbits = planetOrbits.filter(p => p.distanceTo(sun) < p.distanceTo(planetOrbits.last\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp753idc19.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp753idc19.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetOrbits2\u001b[0m = planetOrbits2.map(_.toList)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanetOrbits2 is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanetOrbits2\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp753idc19.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetOrbits\u001b[0m = planetOrbits1 ++ planetOrbits2 ++ sunOrbits\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanetOrbits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanetOrbits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp753idc19.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetOrbits\u001b[0m = planetOrbits.sortBy(\u001b[36mp\u001b[0m => p.distanceTo(sun))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanetOrbits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanetOrbits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp753idc19.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetOrbits\u001b[0m = planetOrbits.filter(\u001b[36mp\u001b[0m => p.distanceTo(sun) < p.distanceTo(planetOrbits.head))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mp",
      "stdout": "",
      "timestamp": 1660009384
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\", new Orbit(\n                new Planet(\"Venus\", new Orbit(\n                    new Planet(\"Earth\", new Orbit(\n                        new Planet(\"Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n                                new Planet(\"Saturn\", new Orbit(\n                                    new Planet(\"Uranus\", new Orbit(\n                                        new Planet(\"Neptune\", new Orbit(\n                                            new Planet(\"Mercury\", new Orbit(\n                                                new Planet(\"Venus\", new Orbit(\n                                                    new Planet(\"Earth\", new Orbit(\n                                                        new Planet(\"Mars\", new Orbit(\n                                                            new Planet(\"Jupiter\", new Orbit(\n                                                                new Planet(\"Saturn\", new Orbit(\n                                                                    new Planet(\"Uranus\", new Orbit(\n                                                                        new Planet(\"Neptune\", new Orbit(\n                                                                            new Planet(\"Mercury\", new Orbit(\n                                                                                new Planet(\"Venus\", new Orbit(\n                                                                                    new Planet(\"Earth\", new Orbit(\n                                                                                        new Planet(\"Mars\", new Orbit(\n                                                                                            new Planet(\"Jupiter\", new Orbit(\n                                                                                                new Planet(\"Saturn\", new Orbit(\n                                                                                                    new Planet(\"Uranus\", new Orbit(\n                                                                                                        new Planet(\"Neptune\", new Orbit(\n                                                                                                            new Planet(\"Mercury\", new Orbit(\n                                                                                                                new Planet(\"Venus\", new Orbit(\n                                                                                                                    new Planet(\"Earth\", new Orbit(\n                                                                                                                        new Planet(\"Mars\", new Orbit(\n                                                                                                                            new Planet(\"Jupiter\", new Orbit(\n                                                                                                                                new Planet(\"Saturn\", new Orbit(\n                                                                                                                                    new Planet(\"Uranus\", new Orbit(\n                                                                                                                                        new Planet(\"Neptune\", new Orbit(\n                                                                                                                                            new Planet(\"Mercury\", new Orbit(\n                                                                                                                                                new Planet(\"Venus\", new Orbit(\n                                                                                                                                                    new Planet(\"Earth\", new Orbit(\n                                                                                                                                                        new Planet(\"Mars\", new Orbit(\n                                                                                                                                                            \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpa9m9vyup.scala:57:181 --------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m                                                                                                                                                        \u001b[33mnew\u001b[0m \u001b[35mPlanet\u001b[0m(\u001b[31m\"Mars\"\u001b[0m, \u001b[33mnew\u001b[0m \u001b[35mOrbit\u001b[0m(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\nexception occurred while parser /tmp/tmpa9m9vyup.scala\nexception occurred while compiling /tmp/tmpa9m9vyup.scala\nException in thread \"main\" java.lang.AssertionError: assertion failed: position error, parent span does not contain child span\nparent      = \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m) # -1,\nparent span = <5097..5107>,\nchild       = \u001b[31mnull\u001b[0m # -1,\nchild span  = [5107..5269..5269]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio",
      "stdout": "error while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))))\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\n    )\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mercury\"\u001b[0m, \n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n      \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n        \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\n      )\n    )\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mercury\"\u001b[0m, \n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n        \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n          \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, ",
      "timestamp": 1659798186
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => planet -> planets.map(planets.filter(_ != planet).map(planet => planet -> planet.orbit(planet)).toList))\n        val sun = planets.map(planet => planet -> planet.orbit(planet).map(planet => planet.distanceTo(sun)).toList)\n        val sunOrbits = sun ++ orbits\n        val sunOrbitsByPlanet = sunOrbits.groupBy(_._1)\n        val sunOrbitsByPlanetSorted = sunOrbitsByPlanet.mapValues(_.sortBy(_._2))\n        val sunOrbitsByPlanetSortedBySun = sunOrbitsByPlanetSorted.filter(_._2.contains(sun))\n        val sunOrbitsByPlanetSortedBySunSorted = sunOrbitsByPlanetSortedBySun.map(_._2).sortBy(_._1)\n        val sunOrbitsByPlanetSortedBySunSortedByDistance = sunOrbitsByPlanetSortedBySunSortedByDistance.map(_._2).sortBy(_._1)\n        val sunOrbitsByPlanetSortedBySunSortedByDistanceSorted = sunOrbitsByPlanetSortedBySunSortedByDistance.map(_._2).sortBy(_._1)\n        val sunOrbitsByPlanetSortedBySunSortedByDistanceSortedBySun = sunOrbitsByPlanetSortedBySunSortedByDistance.map(_._2).sortBy(_._1)\n        val sunOrbitsByPlanetSortedBySunSortedByDistanceSortedBySunSorted = sunOrbitsByPlanetSortedBySunSortedByDistance.map(_._2).sortBy(_._1)\n        val sunOrbitsByPlanetSortedBySunSortedByDistanceSortedBySunSortedByDistance = sunOrbitsByPlanetSortedBySunSortedByDistance.map(_._2).sortBy(_._1)\n        val sunOrbitsByPlanetSortedBySunSortedByDistanceSortedBySunSortedByDistanceSorted = sunOrbitsByPlanetSortedBySunSortedByDistance.map(_._2).sortBy(_._1)\n        val sunOrbitsByPlanetSortedBySunSortedByDistanceSortedBySunSortedByDistanceSortedBySun = sunOrbitsByPlanetSortedBySunSortedByDistance.map(_._2).sortBy(_._1)\n        val sunOrbitsByPlan\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbl1s18r6.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbl1s18r6.scala:22:124 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => planet -> planets.map(planets.filter(_ != planet).map(\u001b[36mplanet\u001b[0m => planet -> planet.orbit(planet)).toList))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                     ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value orbit is not a member of String - did you mean planet.split?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbl1s18r6.scala:23:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => planet -> planet.orbit(planet).map(\u001b[36mplanet\u001b[0m => planet.distanceTo(sun)).toList)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value orbit is not a member of String - did you mean planet.split?\n\u001b[31m\u001b[31m-- Error: /tmp/tmpbl1s18r6.scala:26:80 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msunOrbitsByPlanetSorted\u001b[0m = sunOrbitsByPlanet.mapValues(_.sortBy(_._2))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for List[Nothing]..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mList[Nothing]\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[List[Nothing]]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[List[Nothing]].\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Ordering.Implicits.seqOrdering\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- ",
      "stdout": "",
      "timestamp": 1660009385
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = Nil\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = Nil\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwnshygid.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwnshygid.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwnshygid.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwnshygid.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwnshygid.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwnshygid.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val planet1 = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name == planet2).get\n        val orbit1 = planet1.orbit\n        val orbit2 = planet2.orbit\n        val sun = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val orbits = orbit1 #:: orbit2 #:: sun\n        val distances = orbits.map(o => Vector.dist(o.x, o.y, o.z))\n        val sorted = distances.sortBy(_)\n        val result = sorted.takeWhile(_ < sun.length).reverse.takeWhile(_ > 0).reverse\n        if (result.isEmpty) List()\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn4pn0kgf.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn4pn0kgf.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn4pn0kgf.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn4pn0kgf.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "stdout": "",
      "timestamp": 1660009384
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth, venus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, earth, mars, venus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, earth, mars, jupiter, venus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, earth, mars, jupiter, saturn\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqyppnl38.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq",
      "stdout": "",
      "timestamp": 1660009388
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => Orbit(planet))\n        val sun = Orbit(\"Sun\")\n        val sunOrbit = Orbit(\"Sun\")\n        val sunOrbits = List(sunOrbit)\n        val planetOrbits = orbits.map(orbit => Orbit(orbit.planet))\n        val planetOrbit = Orbit(planet1)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbit = Orbit(planet2)\n        val planetOrbits = List(planetOrbit)\n        val sunOrbits = List(sunOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbit = Orbit(planet1)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbit = Orbit(planet2)\n        val planetOrbits = List(planetOrbit)\n        val sunOrbits = List(sunOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbit = Orbit(planet1)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbit = Orbit(planet2)\n        val planetOrbits = List(planetOrbit)\n        val sunOrbits = List(sunOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbit = Orbit(planet1)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbit = Orbit(planet2)\n        val planetOrbits = List(planetOrbit)\n        val sunOrbits = List(sunOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbit = Orbit(planet1)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbit = Orbit(planet2)\n        val planetOrbits = List(planetOrbit)\n        val sunOrbits = List(sunOrbit)\n        val planetOrbits = List(planetOrbit)\n        val planetOrbit = Orbit(planet1)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf943agr9.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetOrbits\u001b[0m = List(planetOrbit)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanetOrbits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanetOrbits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf943agr9.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetOrbit\u001b[0m = Orbit(planet2)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanetOrbit is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanetOrbit\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf943agr9.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetOrbits\u001b[0m = List(planetOrbit)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanetOrbits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanetOrbits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf943agr9.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msunOrbits\u001b[0m = List(sunOrbit)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0msunOrbits is already defined as \u001b[33mvalue\u001b[0m \u001b[35msunOrbits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf943agr9.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetOrbits\u001b[0m = List(planetOrbit)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanetOrbits is already defined as \u001b[33mv",
      "stdout": "",
      "timestamp": 1660009395
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => planet -> planet.orbit(planets))\n        val sun = planets.map(planet => planet -> planet.orbit(planets).map(_.distanceTo(sun)))\n        val planetsBetweenSun = planets.filter(planet => sun(planet).exists(sunPlanet => sunPlanet.exists(sunPlanetOrbit => sunPlanetOrbit.exists(sunPlanetOrbitDistance => sunPlanetOrbitDistance.exists(sunPlanetOrbitDistanceDistance => sunPlanetOrbitDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbitDistanceDistanceDistance.exists(sunPlanetOrbitDistanceDistanceDistance => sunPlanetOrbit\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb4yltglf.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb4yltglf.scala:22:60 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => planet -> planet.orbit(planets))\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value orbit is not a member of String - did you mean planet.split?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb4yltglf.scala:23:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => planet -> planet.orbit(planets).map(_.distanceTo(sun)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value orbit is not a member of String - did you mean planet.split?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb4yltglf.scala:24:61 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetsBetweenSun\u001b[0m = planets.filter(\u001b[36mplanet\u001b[0m => sun(planet).exists(\u001b[36msunPlanet\u001b[0m => sunPlanet.exists(\u001b[36msunPlanetOrbit\u001b[0m => sunPlanetOrbit.exists(\u001b[36msunPlanetOrbitDistance\u001b[0m => sunPlanetOrbitDistance.exists(\u001b[36msunPlanetOrbitDistanceDistance\u001b[0m => sunPlanetOrbitDistanceDistance.exists(\u001b[36msunPlanetOrbitDistanceDistanceDistance\u001b[0m => sunPlanetOrbitDistanceDistanceDistance.exists(\u001b[36msunPlanetOrbitDistanceDistanceDistance\u001b[0m => sunPlanetOrbitDistanceDistanceDistance.exists(\u001b[36msunPlanetOrbitDistanceDistanceDistance\u001b[0m => sunPlanetOrbitDistanceDistanceDistance.exists(\u001b[36msunPlanetOrbitDistanceDistanceDistance\u001b[0m => sunPlanetOrbitDistanceDistanceDistance.exists(\u001b[36msunPlanetOrbitDistanceDistanceDistance\u001b[0m => sunPlanetOrbitDistanceDistanceDistance.exists(\u001b[36msunPlanetOrbitDistanceDistanceDistance\u001b[0m => sunPlanetOrbitDistanceDistanceDistance.exists(\u001b[36msunPlanetOrbitDistanceDist",
      "stdout": "",
      "timestamp": 1660009396
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenMercuryAndSaturn = List(uranus)\n        val planetsBetweenMercuryAndUranus = List(uranus)\n        val planetsBetweenMercuryAndNeptune = List(uranus)\n        val planetsBetweenVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenVenusAndJupiter = List(saturn, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkbecyc_m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbecyc_m.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbecyc_m.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbecyc_m.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbecyc_m.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbecyc_m.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk",
      "stdout": "",
      "timestamp": 1660009394
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth, venus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, earth, mars, venus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, earth, mars, jupiter, venus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, earth, mars, jupiter, saturn\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqyppnl38.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq",
      "stdout": "",
      "timestamp": 1660009388
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth, venus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, earth, mars, venus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, earth, mars, jupiter, venus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, earth, mars, jupiter, saturn\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqyppnl38.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq",
      "stdout": "",
      "timestamp": 1660009388
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(Vector(0,0,0), Vector(0,0,0))),\n            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,0))),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,0))),\n            Planet(\"Mars\", Orbit(Vector(0,0,0), Vector(0,0,0))),\n            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(0,0,0))),\n            Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,0))),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,0))),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(0,0,0)))\n        )\n        val sun = Orbit(Vector(0,0,0), Vector(0,0,0))\n        val planet1Orbit = planets.find(_.name == planet1).getOrElse(throw new Exception(\"Planet not found\")).orbit\n        val planet2Orbit = planets.find(_.name == planet2).getOrElse(throw new Exception(\"Planet not found\")).orbit\n        val orbits = planet1Orbit.orbit.zip(planet2Orbit.orbit).sortBy(_._1.distance(_._2))\n        orbits.map(_.name).filterNot(_.equals(planet1) || _.equals(planet2)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp687xiyj7.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m))),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp687xiyj7.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m))),\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp687xiyj7.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m))),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp687xiyj7.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m))),\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp687xiyj7.scala:24:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            Planet(\u001b[31m\"Earth\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m))),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[3",
      "stdout": "",
      "timestamp": 1660009395
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = Nil\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = Nil\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, ne\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyi4cqgql.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyi4cqgql.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyi4cqgql.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyi4cqgql.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyi4cqgql.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyi4cqgql.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy",
      "stdout": "",
      "timestamp": 1660009394
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenMercuryAndVenus = List(venus)\n        val planetsBetweenMercuryAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenMercuryAndSaturn = List(uranus)\n        val planetsBetweenMercuryAndUranus = List(uranus)\n        val planetsBetweenMercuryAndNeptune = List(uranus)\n        val planetsBetweenVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenVenusAndJupiter = List(saturn, uranus)\n        val planet\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjo5k37wh.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj",
      "stdout": "",
      "timestamp": 1659798206
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", 0, 0),\n            Planet(\"Venus\", 0, 0),\n            Planet(\"Earth\", 0, 0),\n            Planet(\"Mars\", 0, 0),\n            Planet(\"Jupiter\", 0, 0),\n            Planet(\"Saturn\", 0, 0),\n            Planet(\"Uranus\", 0, 0),\n            Planet(\"Neptune\", 0, 0)\n        )\n        val sun = Planet(\"Sun\", 0, 0)\n        val orbits = planets.map(p => (p.name, p.orbit))\n        val orbits1 = orbits.filter(_._1 == planet1).map(_._2)\n        val orbits2 = orbits.filter(_._1 == planet2).map(_._2)\n        val sun1 = orbits1.find(_._1 == sun._1).map(_._2)\n        val sun2 = orbits2.find(_._1 == sun._1).map(_._2)\n        val sun1Orbits = sun1.filter(_._2 > 0)\n        val sun2Orbits = sun2.filter(_._2 > 0)\n        val sun1Orbits1 = sun1Orbits.filter(_._2 > 0)\n        val sun2Orbits2 = sun2Orbits.filter(_._2 > 0)\n        val sun1Orbits2 = sun1Orbits.filter(_._2 < 0)\n        val sun2Orbits1 = sun2Orbits.filter(_._2 < 0)\n        val sun1Orbits3 = sun1Orbits.filter(_._2 < 0)\n        val sun2Orbits3 = sun2Orbits.filter(_._2 < 0)\n        val sun1Orbits4 = sun1Orbits.filter(_._2 < 0)\n        val sun2Orbits4 = sun2Orbits.filter(_._2 < 0)\n        val sun1Orbits5 = sun1Orbits.filter(_._2 < 0)\n        val sun2Orbits5 = sun2Orbits.filter(_._2 < 0)\n        val sun1Orbits6 = sun1Orbits.filter(_._2 < 0)\n        val sun2Orbits6 = sun2Orbits.filter(_._2 < 0)\n        val sun1Orbits7 = sun1Orbits.filter(_._2 < 0)\n        val sun2Orbits7 = sun2Orbits.filter(_._2 < 0)\n        val sun1Orbits8 = sun1Orbits.filter(_._2 < 0)\n        val sun2Orbits8 = sun2Orbits.filter(_._2 < 0)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdbnp8hq3.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, \u001b[31m0\u001b[0m, \u001b[31m0\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdbnp8hq3.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, \u001b[31m0\u001b[0m, \u001b[31m0\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdbnp8hq3.scala:24:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            Planet(\u001b[31m\"Earth\"\u001b[0m, \u001b[31m0\u001b[0m, \u001b[31m0\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdbnp8hq3.scala:25:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            Planet(\u001b[31m\"Mars\"\u001b[0m, \u001b[31m0\u001b[0m, \u001b[31m0\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdbnp8hq3.scala:26:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            Planet(\u001b[31m\"Jupiter\"\u001b[0m, \u001b[31m0\u001b[0m, \u001b[31m0\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdbnp8hq3.scala:27:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            Planet(\u001b[31m\"Saturn\"\u001b[0m, \u001b[31m0\u001b[0m, \u001b[31m0\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available",
      "stdout": "",
      "timestamp": 1660009400
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val sun = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit2 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit3 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit4 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit5 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit6 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit7 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit8 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit9 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit10 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit11 = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val sunOrbit12 = Orbit\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpryszfvi_.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpryszfvi_.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpryszfvi_.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpryszfvi_.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "stdout": "",
      "timestamp": 1660009395
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenMercuryAndSaturn = List(uranus)\n        val planetsBetweenMercuryAndUranus = List(uranus)\n        val planetsBetweenMercuryAndNeptune = List(uranus)\n        val planetsBetweenVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenVenusAndJupiter = List(saturn, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkbecyc_m.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbecyc_m.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbecyc_m.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbecyc_m.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbecyc_m.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkbecyc_m.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk",
      "stdout": "",
      "timestamp": 1660009394
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp92as_44v.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp92as_44v.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planetsBetween = planets.filter(planet => planet != planet1 && planet != planet2)\n        val planetsBetweenSun = planetsBetween.filter(planet => planet == \"Mercury\" || planet == \"Venus\" || planet == \"Earth\" || planet == \"Mars\" || planet == \"Jupiter\" || planet == \"Saturn\" || planet == \"Uranus\" || planet == \"Neptune\")\n        val planetsBetweenSunAndPlanet1 = planetsBetweenSun.filter(planet => planet == planet1)\n        val planetsBetweenSunAndPlanet2 = planetsBetweenSun.filter(planet => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2AndPlanet3 = planetsBetweenSunAndPlanet1.filter(planet => planet == planet3)\n        val planetsBetweenSunAndPlanet1AndPlanet2AndPlanet3AndPlanet4 = planetsBetweenSunAndPlanet1.filter(planet => planet == planet4)\n        val planetsBetweenSunAndPlanet1AndPlanet2AndPlanet3AndPlanet4AndPlanet5 = planetsBetweenSunAndPlanet1.filter(planet => planet == planet5)\n        val planetsBetweenSunAndPlanet1AndPlanet2AndPlanet3AndPlanet4AndPlanet5AndPlanet6 = planetsBetweenSunAndPlanet1.filter(planet => planet == planet6)\n        val planetsBetweenSunAndPlanet1AndPlanet2AndPlanet3AndPlanet4AndPlanet5AndPlanet6AndPlanet7 = planetsBetweenSunAndPlanet1.filter(planet => planet == planet7)\n        val planetsBetweenSunAndPlanet1AndPlanet2AndPlanet3AndPlanet4AndPlanet5AndPlanet6AndPlanet7AndPlanet8 = planetsBetweenSunAndPlanet1.filter(planet => planet \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp9g12xa6g.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9g12xa6g.scala:27:117 -----------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetsBetweenSunAndPlanet1AndPlanet2AndPlanet3\u001b[0m = planetsBetweenSunAndPlanet1.filter(\u001b[36mplanet\u001b[0m => planet == planet3)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: planet3\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9g12xa6g.scala:28:127 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetsBetweenSunAndPlanet1AndPlanet2AndPlanet3AndPlanet4\u001b[0m = planetsBetweenSunAndPlanet1.filter(\u001b[36mplanet\u001b[0m => planet == planet4)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: planet4\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9g12xa6g.scala:29:137 -----------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetsBetweenSunAndPlanet1AndPlanet2AndPlanet3AndPlanet4AndPlanet5\u001b[0m = planetsBetweenSunAndPlanet1.filter(\u001b[36mplanet\u001b[0m => planet == planet5)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                      Not found: planet5\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /t",
      "stdout": "",
      "timestamp": 1660009395
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => Orbit(planet))\n        val sun = Orbit(\"Sun\")\n        val sunOrbit = Orbit(\"Sun\")\n        val sunOrbits = List(sunOrbit)\n        val orbitsBetweenSunAndPlanet = orbits.filter(orbit => orbit != sun)\n        val orbitsBetweenSunAndPlanetWithSun = orbits.filter(orbit => orbit != sun && orbit != sunOrbit)\n        val orbitsBetweenPlanetAndSun = orbits.filter(orbit => orbit != sun && orbit != sunOrbit)\n        val orbitsBetweenPlanetAndSunWithSun = orbits.filter(orbit => orbit != sun && orbit != sunOrbit && orbit != sunOrbit)\n        val orbitsBetweenPlanetAndSunWithSunAndPlanet = orbits.filter(orbit => orbit != sun && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpfsxsp4bi.scala:30:997 --------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbitsBetweenPlanetAndSunWithSunAndPlanet\u001b[0m = orbits.filter(\u001b[36morbit\u001b[0m => orbit != sun && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && orbit != sunOrbit && \n\u001b[31m\u001b[31m   |\u001b[0m
      "stdout": "",
      "timestamp": 1660009395
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            (\"Mercury\"), \n            (\"Venus\"), \n            (\"Earth\"), \n            (\"Mars\"),\n            (\"Jupiter\"), \n            (\"Saturn\"), \n            (\"Uranus\"), \n            (\"Neptune\")\n        )\n        val sun = Vector(0.0, 0.0, 1.0)\n        val planet1Orbit = Vector(planet1.toDouble, planet2.toDouble, 0.0) \n        val planet2Orbit = Vector(planet2.toDouble, planet1.toDouble, 0.0) \n        val planet1OrbitToSun = planet1Orbit - sun\n        val planet2OrbitToSun = planet2Orbit - sun\n        val planet1OrbitToPlanet2 = planet1Orbit - planet2Orbit\n        val planet2OrbitToPlanet1 = planet2Orbit - planet1Orbit\n        val planet1OrbitToPlanets = planet1OrbitToSun.zip(planet1OrbitToPlanet2).map(x => x._1)\n        val planet2OrbitToPlanets = planet2OrbitToSun.zip(planet2OrbitToPlanet1).map(x => x._1)\n        val planets = planets.filter(x => planet1OrbitToPlanets.contains(x))\n        val planets = planets.filter(x => planet2OrbitToPlanets.contains(x))\n        val planets = planets.sortBy(x => planet1OrbitToPlanets.indexOf(x) - planet2OrbitToPlanets.indexOf(x))\n        planets.toList\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1x6x17om.scala:40:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanets\u001b[0m = planets.filter(\u001b[36mx\u001b[0m => planet1OrbitToPlanets.contains(x))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanets is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanets\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1x6x17om.scala:41:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanets\u001b[0m = planets.filter(\u001b[36mx\u001b[0m => planet2OrbitToPlanets.contains(x))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanets is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanets\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1x6x17om.scala:42:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanets\u001b[0m = planets.sortBy(\u001b[36mx\u001b[0m => planet1OrbitToPlanets.indexOf(x) - planet2OrbitToPlanets.indexOf(x))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanets is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanets\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1x6x17om.scala:34:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet1OrbitToSun\u001b[0m = planet1Orbit - sun\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue - is not a member of Vector[Double], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the pro",
      "stdout": "",
      "timestamp": 1660009397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => Orbit(planet, planets))\n        val sun = Orbit(\"Sun\", planets)\n        val sunOrbit = Orbit(\"Sun\", planets)\n        val sunOrbits = orbits.filter(orbit => orbit == sun)\n        val sunOrbitSet = Set(sunOrbit)\n        val sunOrbitSets = sunOrbits.map(orbit => Set(orbit))\n        val sunOrbitSetSet = sunOrbitSets.reduce(_ union _)\n        val sunOrbitSetSets = sunOrbitSetSet.map(orbit => Set(orbit))\n        val sunOrbitSetSetSetSet = sunOrbitSetSets.reduce(_ union _)\n        val sunOrbitSetSetSetSets = sunOrbitSetSetSet.map(orbit => Set(orbit))\n        val sunOrbitSetSetSetSetSet = sunOrbitSetSetSets.reduce(_ union _)\n        val sunOrbitSetSetSetSetSets = sunOrbitSetSetSet.map(orbit => Set(orbit))\n        val sunOrbitSetSetSetSetSetSet = sunOrbitSetSetSets.reduce(_ union _)\n        val sunOrbitSetSetSetSetSetSets = sunOrbitSetSetSet.map(orbit => Set(orbit))\n        val sunOrbitSetSetSetSetSetSetSet = sunOrbitSetSetSets.reduce(_ union _)\n        val sunOrbitSetSetSetSetSetSetSets = sunOrbitSetSetSet.map(orbit => Set(orbit))\n        val sunOrbitSetSetSetSetSetSetSet = sunOrbitSetSets.reduce(_ union _)\n        val sunOrbitSetSetSetSetSetSetSets = sunOrbitSetSetSet.map(orbit => Set(orbit))\n        val sunOrbitSetSetSetSetSetSetSet = sunOrbitSetSets.reduce(_ union _)\n        val sunOrbitSetSetSetSetSetSetSets = sunOrbitSetSetSet.map(orbit => Set(orbit))\n        val sunOrbitSetSetSetSetSetSetSetSet = sunOrbitSetSets.reduce(_ union _)\n        val sunOrbitSetSetSetSetSetSetSetSets = sunOrbitSetSetSet.map(orbit => Set(orbit))\n        val sun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmtvn0t8b.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmtvn0t8b.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msunOrbitSetSetSetSetSetSetSet\u001b[0m = sunOrbitSetSets.reduce(_ union _)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0msunOrbitSetSetSetSetSetSetSet is already defined as \u001b[33mvalue\u001b[0m \u001b[35msunOrbitSetSetSetSetSetSetSet\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmtvn0t8b.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msunOrbitSetSetSetSetSetSetSets\u001b[0m = sunOrbitSetSetSet.map(\u001b[36morbit\u001b[0m => Set(orbit))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0msunOrbitSetSetSetSetSetSetSets is already defined as \u001b[33mvalue\u001b[0m \u001b[35msunOrbitSetSetSetSetSetSetSets\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmtvn0t8b.scala:40:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msunOrbitSetSetSetSetSetSetSet\u001b[0m = sunOrbitSetSets.reduce(_ union _)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0msunOrbitSetSetSetSetSetSetSet is already defined as \u001b[33mvalue\u001b[0m \u001b[35msunOrbitSetSetSetSetSetSetSet\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmtvn0t8b.scala:41:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msunOrbitSetSetSetSetSetSetSets\u001b[0m = sunOrbitSetSetSe",
      "stdout": "",
      "timestamp": 1660009395
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\", new Orbit(\n                new Planet(\"Venus\", new Orbit(\n                    new Planet(\"Earth\", new Orbit(\n                        new Planet(\"Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n                                new Planet(\"Saturn\", new Orbit(\n                                    new Planet(\"Uranus\", new Orbit(\n                                        new Planet(\"Neptune\", new Orbit(\n                                            new Planet(\"Mercury\", new Orbit(\n                                                new Planet(\"Venus\", new Orbit(\n                                                    new Planet(\"Earth\", new Orbit(\n                                                        new Planet(\"Mars\", new Orbit(\n                                                            new Planet(\"Jupiter\", new Orbit(\n                                                                new Planet(\"Saturn\", new Orbit(\n                                                                    new Planet(\"Uranus\", new Orbit(\n                                                                        new Planet(\"Neptune\", new Orbit(\n                                                                            new Planet(\"Mercury\", new Orbit(\n                                                                                new Planet(\"Venus\", new Orbit(\n                                                                                    new Planet(\"Earth\", new Orbit(\n                                                                                        new Planet(\"Mars\", new Orbit(\n                                                                                            new Planet(\"Jupiter\", new Orbit(\n                                                                                                new Planet(\"Saturn\", new Orbit(\n                                                                                                    new Planet(\"Uranus\", new Orbit(\n                                                                                                        new Planet(\"Neptune\", new Orbit(\n                                                                                                            new Planet(\"Mercury\", new Orbit(\n                                                                                                                new Planet(\"Venus\", new Orbit(\n                                                                                                                    new Planet(\"Earth\", new Orbit(\n                                                                                                                        new Planet(\"Mars\", new Orbit(\n                                                                                                                            new Planet(\"Jupiter\", new Orbit(\n                                                                                                                                new Planet(\"Saturn\", new Orbit(\n                                                                                                                                    new Planet(\"Uranus\", new Orbit(\n                                                                                                                                        new Planet(\"Neptune\", new Orbit(\n                                                                                                                                            new Planet(\"Mercury\", new Orbit(\n                                                                                                                                                new Planet(\"Venus\", new Orbit(\n                                                                                                                                                    new Planet(\"Earth\", new Orbit(\n                                                                                                                                                        new Planet(\"Mars\", new Orbit(\n                                                                                                                                                            \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpa9m9vyup.scala:57:181 --------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m                                                                                                                                                        \u001b[33mnew\u001b[0m \u001b[35mPlanet\u001b[0m(\u001b[31m\"Mars\"\u001b[0m, \u001b[33mnew\u001b[0m \u001b[35mOrbit\u001b[0m(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\nexception occurred while parser /tmp/tmpa9m9vyup.scala\nexception occurred while compiling /tmp/tmpa9m9vyup.scala\nException in thread \"main\" java.lang.AssertionError: assertion failed: position error, parent span does not contain child span\nparent      = \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m) # -1,\nparent span = <5097..5107>,\nchild       = \u001b[31mnull\u001b[0m # -1,\nchild span  = [5107..5269..5269]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio",
      "stdout": "error while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))))\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\n    )\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mercury\"\u001b[0m, \n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n      \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n        \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\n      )\n    )\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mercury\"\u001b[0m, \n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n        \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n          \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, ",
      "timestamp": 1659798186
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => planet -> orbit(planet))\n        val sun = orbits.values.map(_.last).last\n        val proximity = orbits.values.map(_.last).zip(sun).map(x => x._1 - x._2)\n        proximity.sortBy(x => x).map(x => planets(x))\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2c2c65sy.scala:22:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => planet -> orbit(planet))\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Not found: orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2c2c65sy.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = orbits.values.map(_.last).last\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value values is not a member of List[(String, Nothing)]\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2c2c65sy.scala:24:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mproximity\u001b[0m = orbits.values.map(_.last).zip(sun).map(\u001b[36mx\u001b[0m => x._1 - x._2)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value values is not a member of List[(String, Nothing)]\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660009396
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(\n                    Vector(\n                        Vector(\n                            Vector(\n                                Vector(\n                                    Vector(\n                                        Vector(\n                                            Vector(\n                                                Vector(\n                                                    Vector(\n                                                        Vector(\n                                                            Vector(\n                                                                Vector(\n                                                                    Vector(\n                                                                        Vector(\n                                                                            Vector(\n                                                                                Vector(\n                                                                                    Vector(\n                                                                                        Vector(\n                                                                                            Vector(\n                                                                                                Vector(\n                                                                                                    Vector(\n                                                                                                        Vector(\n                                                                                                            Vector(\n                                                                                                                Vector(\n                                                                                                                    Vector(\n                                                                                                                        Vector(\n                                                                                                                            Vector(\n                                                                                                                                Vector(\n                                                                                                                                    Vector(\n                                                                                                                                        Vector(\n                                                                                                                                            Vector(\n                                                                                                                                                Vector(\n                                                                                                                                                    Vector(\n                                                                                                                                                        Vector(\n                                                                                                                                                            Vector(\n                                                                                                                                                                Vector(\n                                                                                                                                                                    Vector(\n                                                                                                                                                                        Vector(\n                                                                                                                                                                            Vector(\n                                                                                                                                                                                Vector(\n                                                                                                                                                                                    Vector(\n                                                                                                                                                                                        Vector(\n                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                                                                                            Vector\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwvloyri6.scala:103:4 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m103 |\u001b[0m    }\n\u001b[31m\u001b[31m    |\u001b[0m    ^\u001b[0m\n\u001b[31m    |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwvloyri6.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwvloyri6.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwvloyri6.scala:103:5 --------------------\u001b[0m\u001b[0m\n\u001b[31m103 |\u001b[0m    }\n\u001b[31m\u001b[31m    |\u001b[0m     ^\u001b[0m\n\u001b[31m    |\u001b[0m     Found:    Unit\n\u001b[31m    |\u001b[0m     Required: List[String]\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660009396
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndMars = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndJupiter = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndSaturn = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndUranus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndNeptune = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenusAndEarthAndMars = List(\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpmtnace3e.scala:45:70 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetsBetweenSunAndMercuryAndVenusAndEarthAndMars\u001b[0m = List(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmtnace3e.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmtnace3e.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmtnace3e.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmtnace3e.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmtnace3e.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m      ",
      "stdout": "",
      "timestamp": 1660009396
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, saturn)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenusAndMars = List(jup\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzcsa75aw.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzcsa75aw.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzcsa75aw.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzcsa75aw.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzcsa75aw.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzcsa75aw.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz",
      "stdout": "",
      "timestamp": 1660009396
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", 0.33),\n            Planet(\"Venus\", 0.33),\n            Planet(\"Earth\", 0.33),\n            Planet(\"Mars\", 0.33),\n            Planet(\"Jupiter\", 0.33),\n            Planet(\"Saturn\", 0.33),\n            Planet(\"Uranus\", 0.33),\n            Planet(\"Neptune\", 0.33)\n        )\n        val sun = Planet(\"Sun\", 0)\n        val orbits = planets.map(_.orbit(sun))\n        val proximity = orbits.map(_.distanceTo(sun))\n        proximity.sortBy(_.abs)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp4ymogtz.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, \u001b[31m0.33\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp4ymogtz.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, \u001b[31m0.33\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp4ymogtz.scala:24:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            Planet(\u001b[31m\"Earth\"\u001b[0m, \u001b[31m0.33\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp4ymogtz.scala:25:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            Planet(\u001b[31m\"Mars\"\u001b[0m, \u001b[31m0.33\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp4ymogtz.scala:26:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            Planet(\u001b[31m\"Jupiter\"\u001b[0m, \u001b[31m0.33\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp4ymogtz.scala:27:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            Planet(\u001b[31m\"Saturn\"\u001b[0m, \u001b[31m0.33\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] No",
      "stdout": "",
      "timestamp": 1660009397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => (planet, planet.orbit(planets)))\n        val sun = planets.map(planet => (planet, planet.orbit(planets).map(_.distanceTo(sun)))).minBy(_._2)\n        val planetsBetweenSunAndPlanet = orbits.filter(orbit => orbit._2.contains(sun))\n        val planetsBetweenSunAndPlanetSorted = planetsBetweenSunAndPlanet.sortBy(_._2)\n        planetsBetweenSunAndPlanetSorted.map(_.head).filter(_ == planet1).map(_ => planet1)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppohdtsj7.scala:22:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => (planet, planet.orbit(planets)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value orbit is not a member of String - did you mean planet.split?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppohdtsj7.scala:23:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => (planet, planet.orbit(planets).map(_.distanceTo(sun)))).minBy(_._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m      value orbit is not a member of String - did you mean planet.split?\n\u001b[31m\u001b[31m-- Error: /tmp/tmppohdtsj7.scala:23:107 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => (planet, planet.orbit(planets).map(_.distanceTo(sun)))).minBy(_._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances: both \u001b[33mobject\u001b[0m \u001b[35mByte\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m and \u001b[33mobject\u001b[0m \u001b[35mBigInt\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m match type Ordering[B] of parameter cmp of \u001b[33mmethod\u001b[0m \u001b[35mminBy\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mIterableOnceOps\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppohdtsj7.scala:24:73 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetsBetweenSunAndPlanet\u001b[0m = orbits.filter(\u001b[36morbit\u001b[0m => orbit._2.contains(sun))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue contains is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import collectio",
      "stdout": "",
      "timestamp": 1660009398
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth, venus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, earth, mars, venus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, earth, mars, jupiter, venus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, earth, mars, jupiter, saturn\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqyppnl38.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq",
      "stdout": "",
      "timestamp": 1660009388
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun = Planet(\"Sun\")\n        val planet1Orbit = Planet(planet1)\n        val planet2Orbit = Planet(planet2)\n        val orbits = planets.map(planet => (planet, Planet(planet)))\n        val orbitsBetweenPlanets = orbits.map(orbit => (orbit._1, orbit._2))\n        val orbitsBetweenPlanetsSorted = orbitsBetweenPlanets.sortBy(orbit => (orbit._1.orbitDistance - orbit._2.orbitDistance))\n        val planetsBetweenPlanets = orbitsBetweenPlanetsSorted.map(orbit => orbit._1).filter(planet => planet._1 == planet1Orbit._1 && planet._2 == planet2Orbit._1)\n        val planetsBetweenPlanetsSorted = planetsBetweenPlanets.sortBy(planet => (planet._1.orbitDistance - planet._2.orbitDistance))\n        val planetsBetweenPlanetsSortedWithSun = planetsBetweenPlanetsSorted.filter(planet => planet._1 == sun._1 && planet._2 == sun._2)\n        val planetsBetweenPlanetsSortedWithSun = planetsBetweenPlanetsSortedWithSun.sortBy(planet => (planet._1.orbitDistance - planet._2.orbitDistance))\n        val planetsBetweenPlanetsSortedWithSun = planetsBetweenPlanetsSortedWithSun.filter(planet => planet._1 != sun._1 && planet._2 != sun._2)\n        val planetsBetweenPlanetsSortedWithSun = planetsBetweenPlanetsSortedWithSun.sortBy(planet => (planet._1.orbitDistance - planet._2.orbitDistance))\n        val planetsBetweenPlanetsSortedWithSun = planetsBetweenPlanetsSortedWithSun.filter(planet => planet._1 != sun._1 && planet._2 != sun._2)\n        val planetsBetweenPlanetsSortedWithSun = planetsBetweenPlanetsSortedWithSun.sortBy(planet => (planet._1.orbitDistance - planet._2.orbitDistance))\n        val planetsBetweenPlanetsSortedWithSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbw0cb1it.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbw0cb1it.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetsBetweenPlanetsSortedWithSun\u001b[0m = planetsBetweenPlanetsSortedWithSun.sortBy(\u001b[36mplanet\u001b[0m => (planet._1.orbitDistance - planet._2.orbitDistance))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanetsBetweenPlanetsSortedWithSun is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanetsBetweenPlanetsSortedWithSun\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbw0cb1it.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetsBetweenPlanetsSortedWithSun\u001b[0m = planetsBetweenPlanetsSortedWithSun.filter(\u001b[36mplanet\u001b[0m => planet._1 != sun._1 && planet._2 != sun._2)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanetsBetweenPlanetsSortedWithSun is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanetsBetweenPlanetsSortedWithSun\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbw0cb1it.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanetsBetweenPlanetsSortedWithSun\u001b[0m = planetsBetweenPlanetsSortedWithSun.sortBy(\u001b[36mplanet\u001b[0m => (planet._1.orbitDistance - planet._2.orbitDistance))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660009397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(0,0,0),\n                Vector(0,0,1),\n                Vector(0,1,0),\n                Vector(0,1,1),\n                Vector(1,0,0),\n                Vector(1,0,1),\n                Vector(1,1,0),\n                Vector(1,1,1)\n            )),\n            Planet(\"Venus\", Orbit(\n                Vector(0,0,0),\n                Vector(0,0,1),\n                Vector(0,1,0),\n                Vector(0,1,1),\n                Vector(1,0,0),\n                Vector(1,0,1),\n                Vector(1,1,0),\n                Vector(1,1,1)\n            )),\n            Planet(\"Earth\", Orbit(\n                Vector(0,0,0),\n                Vector(0,0,1),\n                Vector(0,1,0),\n                Vector(0,1,1),\n                Vector(1,0,0),\n                Vector(1,0,1),\n                Vector(1,1,0),\n                Vector(1,1,1)\n            )),\n            Planet(\"Mars\", Orbit(\n                Vector(0,0,0),\n                Vector(0,0,1),\n                Vector(0,1,0),\n                Vector(0,1,1),\n                Vector(1,0,0),\n                Vector(1,0,1),\n                Vector(1,1,0),\n                Vector(1,1,1)\n            )),\n            Planet(\"Jupiter\", Orbit(\n                Vector(0,0,0),\n                Vector(0,0,1),\n                Vector(0,1,0),\n                Vector(0,1,1),\n                Vector(1,0,0),\n                Vector(1,0,1),\n                Vector(1,1,0),\n                Vector(1,1,1)\n            )),\n            Planet(\"Saturn\", Orbit(\n                Vector(0,0,0),\n                Vector(0,0,1),\n                Vector(0,1,0),\n                Vector(0,1,1),\n                Vector(1,0,0),\n                Vector(1,0,1),\n                Vector(1,1,0),\n                Vector(1,1,1)\n            )),\n            Planet(\"Uranus\", Orbit(\n                Vector(0,0,0),\n                Vector(0,0,1),\n                Vector(0,1,0),\n                Vector(0,1,1),\n                Vector(1,0,0),\n                Vector(1,0,1),\n                Vector(1,1,0),\n                Vector(1,1,1)\n            )),\n            Planet(\"Neptune\", Orbit(\n                Vector(0,0,0),\n                Vector(0,0,1),\n                Vector(0,1,0),\n                Vector(0,1,1),\n                Vector(1,0,0),\n                Vector(1,0,1),\n                Vector(1,1,0),\n                Vector(1,1,1)\n            ))\n        )\n        val planet1 = \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp7hnauugd.scala:103:21 --------------------------\u001b[0m\u001b[0m\n\u001b[31m103 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanet1\u001b[0m = \n\u001b[31m\u001b[31m    |\u001b[0m                     ^\u001b[0m\n\u001b[31m    |\u001b[0m                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7hnauugd.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7hnauugd.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7hnauugd.scala:32:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7hnauugd.scala:32:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7hnauugd.scala:42:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m            Planet(\u001b[31m\"Earth\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available whe",
      "stdout": "",
      "timestamp": 1660009397
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\", new Orbit(\n                new Orbit(\n                    new Orbit(\n                        new Orbit(\n                            new Orbit(\n                                new Orbit(\n                                    new Orbit(\n                                        new Orbit(\n                                            new Orbit(\n                                                new Orbit(\n                                                    new Orbit(\n                                                        new Orbit(\n                                                            new Orbit(\n                                                                new Orbit(\n                                                                    new Orbit(\n                                                                        new Orbit(\n                                                                            new Orbit(\n                                                                                new Orbit(\n                                                                                    new Orbit(\n                                                                                        new Orbit(\n                                                                                            new Orbit(\n                                                                                                new Orbit(\n                                                                                                    new Orbit(\n                                                                                                        new Orbit(\n                                                                                                            new Orbit(\n                                                                                                                new Orbit(\n                                                                                                                    new Orbit(\n                                                                                                                        new Orbit(\n                                                                                                                            new Orbit(\n                                                                                                                                new Orbit(\n                                                                                                                                    new Orbit(\n                                                                                                                                        new Orbit(\n                                                                                                                                            new Orbit(\n                                                                                                                                                new Orbit(\n                                                                                                                                                    new Orbit(\n                                                                                                                                                        new Orbit(\n                                                                                                                                                            new Orbit(\n                                                                                                                                                                new Orbit(\n                                                                                                                                                                    new Orbit(\n                                                                                                                                                                        new Orbit(\n                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                                                                                            new Orbit(\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp2bf_uuo9.scala:86:278 --------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m                                                                                                                                                                                                                                                                            \u001b[33mnew\u001b[0m \u001b[35mOrbit\u001b[0m(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\nexception occurred while parser /tmp/tmp2bf_uuo9.scala\nexception occurred while compiling /tmp/tmp2bf_uuo9.scala\nException in thread \"main\" java.lang.AssertionError: assertion failed: position error, parent span does not contain child span\nparent      = \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m) # -1,\nparent span = <10837..10847>,\nchild       = \u001b[31mnull\u001b[0m # -1,\nchild span  = [10847..10853..10853]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat s",
      "stdout": "error while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\n  )\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\n    )\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n        \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\n      )\n    )\n  )\n)\nerror while checking \u001b[3",
      "timestamp": 1660009376
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\", new Orbit(\n                new Vector(\n                    new Vector(\n                        new Vector(\n                            new Vector(\n                                new Vector(\n                                    new Vector(\n                                        new Vector(\n                                            new Vector(\n                                                new Vector(\n                                                    new Vector(\n                                                        new Vector(\n                                                            new Vector(\n                                                                new Vector(\n                                                                    new Vector(\n                                                                        new Vector(\n                                                                            new Vector(\n                                                                                new Vector(\n                                                                                    new Vector(\n                                                                                        new Vector(\n                                                                                            new Vector(\n                                                                                                new Vector(\n                                                                                                    new Vector(\n                                                                                                        new Vector(\n                                                                                                            new Vector(\n                                                                                                                new Vector(\n                                                                                                                    new Vector(\n                                                                                                                        new Vector(\n                                                                                                                            new Vector(\n                                                                                                                                new Vector(\n                                                                                                                                    new Vector(\n                                                                                                                                        new Vector(\n                                                                                                                                            new Vector(\n                                                                                                                                                new Vector(\n                                                                                                                                                    new Vector(\n                                                                                                                                                        new Vector(\n                                                                                                                                                            new Vector(\n                                                                                                                                                                new Vector(\n                                                                                                                                                                    new Vector(\n                                                                                                                                                                        new Vector(\n                                                                                                                                                                            new Vector(\n                                                                                                                                                                                new Vector(\n                                                                                                                                                                                    new Vector(\n                                                                                                                                                                                        new Vector(\n                                                                                                                                                                                            new Vector(\n                                                                                                                                                                                                new Vector(\n                                                                                                                                                                                                    new Vector(\n                                                                                                                                                                                                        new Vector(\n                                                                                                                                                                                                            new Vector(\n                                                                                                                                                                                                                new Vector(\n                                                                                                                                                                                                                    new Vector(\n                                                                                                                                                                                                                        new Vector(\n                                                                                                                                                                                                                            new Vector(\n                                                                                                                                                                                                                                new Vector(\n                                                                                                                                                                                                                                    new Vector(\n                                                                                                                                                                                                                                        new Vector(\n                                                                                                                                                                                                                                            new Vector(\n                                                                                                                                                                                                                                                new Vector(\n                                                                                                                                                                                                                                                    new Vector(\n                                                                                                                                                                                                                                                        new Vector(\n                                                                                                                                                                                                                                                            new Vector(\n                                                                                                                                                                                                                                                                new Vector(\n                                                                                                                                                                                                                                                                    new Vector(\n                                                                                                                                                                                                                                                                        new Vector(\n                                                                                                                                                                                                                                                                            new Vector(\n                                                                                                                                                                                                                                                                                new Vector(\n                                                                                                                                                                                                                                                                                    new Vector(\n                                                                                                                                                                                                                                                                                        new Vector(\n                                                                                                                                                                                                                                                                                            new Vector(\n                                                                                                                                                                                                                                                                                                new Vector(\n                                                                                                                                                                                                                                                                                                    new Vector(\n                                                                                                                                                                                                                                                                                                        new Vector(\n                                                                \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpy0s0w6nh.scala:93:307 --------------------------\u001b[0m\u001b[0m\n\u001b[31m93 |\u001b[0m                                                                                                                                                                                                                                                                                                        \u001b[33mnew\u001b[0m \u001b[35mVector\u001b[0m(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\nexception occurred while parser /tmp/tmpy0s0w6nh.scala\nexception occurred while compiling /tmp/tmpy0s0w6nh.scala\nException in thread \"main\" java.lang.AssertionError: assertion failed: position error, parent span does not contain child span\nparent      = \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[31mnull\u001b[0m) # -1,\nparent span = <12972..12983>,\nchild       = \u001b[31mnull\u001b[0m # -1,\nchild span  = [12983..13053..13053]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.ru",
      "stdout": "error while checking \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[31mnull\u001b[0m)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[31mnull\u001b[0m))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[31mnull\u001b[0m)))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[31mnull\u001b[0m))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[31mnull\u001b[0m)))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[31mnull\u001b[0m))))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[31mnull\u001b[0m))))))\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[31mnull\u001b[0m))))))\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\n        \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[31mnull\u001b[0m)))))\n      )\n    )\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\n        \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\n          \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(\u001b[33mnew \u001b",
      "timestamp": 1660009391
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus, earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgs45hdcq.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg",
      "stdout": "",
      "timestamp": 1660009381
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => Orbit(planet))\n        val sun = Orbit(\"Sun\")\n        val orbit1 = orbits.find(orbit => orbit.planet1.equals(planet1)).get\n        val orbit2 = orbits.find(orbit => orbit.planet2.equals(planet2)).get\n        val orbit1Sun = orbit1.orbit(sun)\n        val orbit2Sun = orbit2.orbit(sun)\n        val orbit1SunAndOrbit2Sun = orbit1Sun.intersect(orbit2Sun)\n        val orbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2Sun = orbit1SunAndOrbit2Sun.intersect(orbit1SunAndOrbit2Sun)\n        val orbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2Sun = orbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2Sun.intersect(orbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2Sun)\n        val orbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2Sun = orbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2Sun.intersect(orbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2Sun)\n        val orbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2Sun = orbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2Sun.intersect(orbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2SunAndOrbit1SunAndOrbit2Sun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmoorazgy.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmoorazgy.scala:22:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => Orbit(planet))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmoorazgy.scala:23:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Orbit(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmoorazgy.scala:24:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1\u001b[0m = orbits.find(\u001b[36morbit\u001b[0m => orbit.planet1.equals(planet1)).get\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                value planet1 is not a member of Nothing\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmoorazgy.scala:25:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit2\u001b[0m = orbits.find(\u001b[36morbit\u001b[0m => orbit.planet2.equals(planet2)).get\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                value planet2 is not a member of Nothing\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmoorazgy.scala:26:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1Sun\u001b[0m = orbit1.orbit(sun)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value orbit is not a member of Nothing\n\u001b[31m\u001b[31",
      "stdout": "",
      "timestamp": 1660009399
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgs45hdcq.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg",
      "stdout": "",
      "timestamp": 1660009381
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus, earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => (planet, planets.map(planet).map(planet._orbit)))\n        val sun = planets.map(planet => (planet, planets.map(planet).map(planet._orbit).map(_.distanceTo(sun)))).maxBy(_._2)\n        val orbit1 = orbits.find(_._1 == planet1).get._2.find(_._2 == planet2).get._2\n        val orbit2 = orbits.find(_._1 == planet2).get._2.find(_._2 == planet1).get._2\n        val orbits = orbits.filter(_._2 > orbit1).filter(_._2 < orbit2).sortBy(_._2)\n        val planets = orbits.map(_.head).filter(planets.contains(_)).sortBy(planets.indexOf(_))\n        planets.toList\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8qqfxqon.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = orbits.filter(_._2 > orbit1).filter(_._2 < orbit2).sortBy(_._2)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0morbits is already defined as \u001b[33mvalue\u001b[0m \u001b[35morbits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8qqfxqon.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mplanets\u001b[0m = orbits.map(_.head).filter(planets.contains(_)).sortBy(planets.indexOf(_))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mplanets is already defined as \u001b[33mvalue\u001b[0m \u001b[35mplanets\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8qqfxqon.scala:22:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => (planet, planets.map(planet).map(planet._orbit)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (planet : String)\n\u001b[31m   |\u001b[0m                                             Required: String => Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8qqfxqon.scala:22:83 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => (planet, planets.map(planet).map(planet._orbit)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value _orbit is not a memb",
      "stdout": "",
      "timestamp": 1660009402
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndMars = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndJupiter = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndSaturn = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndUranus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarthAndNeptune = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndVenusAndEarth = List(mars, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjvwk9caj.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjvwk9caj.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjvwk9caj.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjvwk9caj.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjvwk9caj.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjvwk9caj.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj",
      "stdout": "",
      "timestamp": 1660009383
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000)\n                ),\n                Vector(0.000000, 0.000000, 0.000000)\n            )),\n            Planet(\"Venus\", Orbit(\n                Vector(\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000)\n                ),\n                Vector(0.000000, 0.000000, 0.000000)\n            )),\n            Planet(\"Earth\", Orbit(\n                Vector(\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000)\n                ),\n                Vector(0.000000, 0.000000, 0.000000)\n            )),\n            Planet(\"Mars\", Orbit(\n                Vector(\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000)\n                ),\n                Vector(0.000000, 0.000000, 0.000000)\n            )),\n            Planet(\"Jupiter\", Orbit(\n                Vector(\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000)\n                ),\n                Vector(0.000000, 0.000000, 0.000000)\n            )),\n            Planet(\"Saturn\", Orbit(\n                Vector(\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000)\n                ),\n                Vector(0.000000, 0.000000, 0.000000)\n            )),\n            Planet(\"Uranus\", Orbit(\n                Vector(\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000)\n                ),\n                Vector(0.000000, 0.000000, 0.000000)\n            )),\n            Planet(\"Neptune\", Orbit(\n                Vector(\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000),\n                    Vector(0.000000, 0.000000, 0.000000)\n                ),\n                Vector(0.000000, 0.000000, 0.000000)\n            ))\n        )\n        val sun = Planet(\"Sun\", Orbit(\n            Vector(\n                Vector(0.000000\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsnv0plps.scala:90:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsnv0plps.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsnv0plps.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsnv0plps.scala:30:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsnv0plps.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsnv0plps.scala:38:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            Planet(\u001b[31m\"Earth\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsnv0plps.scala:38:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            Planet(\u001b[31m\"Earth\"\u001b[0m, ",
      "stdout": "",
      "timestamp": 1660009401
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => (planet, planets.map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(plan\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk0cit4vu.scala:23:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk0cit4vu.scala:22:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => (planet, planets.map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(plan\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (planet : String)\n\u001b[31m   |\u001b[0m                 ",
      "stdout": "",
      "timestamp": 1660009411
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(1.0, 1.0), \n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3bqamcyb.scala:94:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3bqamcyb.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3bqamcyb.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3bqamcyb.scala:94:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660009406
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => (planet, planets.map(planet).map(orbit(planet)))).flatten\n        val sun = orbits.map(orbit(planet1)).min\n        val sun2 = orbits.map(orbit(planet2)).min\n        val sun3 = orbits.map(orbit(planet1)).max\n        val sun4 = orbits.map(orbit(planet2)).max\n        val sun5 = orbits.map(orbit(planet1)).sum\n        val sun6 = orbits.map(orbit(planet2)).sum\n        val sun7 = orbits.map(orbit(planet1)).product\n        val sun8 = orbits.map(orbit(planet2)).product\n        val sun9 = orbits.map(orbit(planet1)).minBy(x => x._1 - sun)\n        val sun10 = orbits.map(orbit(planet2)).minBy(x => x._1 - sun)\n        val sun11 = orbits.map(orbit(planet1)).maxBy(x => x._1 - sun)\n        val sun12 = orbits.map(orbit(planet2)).maxBy(x => x._1 - sun)\n        val sun13 = orbits.map(orbit(planet1)).sumBy(x => x._1 - sun)\n        val sun14 = orbits.map(orbit(planet2)).sumBy(x => x._1 - sun)\n        val sun15 = orbits.map(orbit(planet1)).productBy(x => x._1 - sun)\n        val sun16 = orbits.map(orbit(planet2)).productBy(x => x._1 - sun)\n        val sun17 = orbits.map(orbit(planet1)).minBy(x => x._1 - sun2)\n        val sun18 = orbits.map(orbit(planet2)).minBy(x => x._1 - sun2)\n        val sun19 = orbits.map(orbit(planet1)).maxBy(x => x._1 - sun2)\n        val sun20 = orbits.map(orbit(planet2)).maxBy(x => x._1 - sun2)\n        val sun21 = orbits.map(orbit(planet1)).sumBy(x => x._1 - sun2)\n        val sun22 = orbits.map(orbit(planet2)).sumBy(x => x._1 - sun2)\n        val sun23 = orbits.map(orbit(planet1)).productBy(x \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnzm2bwj_.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnzm2bwj_.scala:22:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => (planet, planets.map(planet).map(orbit(planet)))).flatten\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (planet : String)\n\u001b[31m   |\u001b[0m                                             Required: String => Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnzm2bwj_.scala:22:76 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => (planet, planets.map(planet).map(orbit(planet)))).flatten\n\u001b[31m\u001b[31m   |\u001b[0m                                                                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        Not found: orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnzm2bwj_.scala:22:100 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => (planet, planets.map(planet).map(orbit(planet)))).flatten\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0mno given instance of type ((String, List[Nothing])) => IterableOnce[B] was found for parameter toIterableOnce of \u001b[33mmethod\u001b[0m \u001b[35mflatten\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mStrictOptimizedIterableOps\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mwhere:    B is a type variable\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnzm2bwj_.scala:46:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m   ",
      "stdout": "",
      "timestamp": 1660009408
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,1,0), Vector(0,-1,0)), Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(1,0,0), Vector(0,1,0), Vector(0,-1,0)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,1), Vector(0,1,0), Vector(0,-1,0)), Vector(0,0,0)),\n            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(1,0,0), Vector(0,-1,0)), Vector(0,0,0)),\n            Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,1,0), Vector(1,0,0)), Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,1,0), Vector(-1,0,0)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(0,1,0), Vector(0,-1,0)), Vector(0,0,0))\n        )\n        val planet1 = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name == planet2).get\n        val orbit1 = planet1.orbit\n        val orbit2 = planet2.orbit\n        val sun = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val orbits = List(orbit1, orbit2)\n        val sunOrbit = orbits.find(_.isEqual(sun)).get\n        val orbitsBetweenSunAndPlanet = orbits.filter(_.isBetween(sunOrbit, planet1.orbit, planet2.orbit))\n        val planetsBetweenSunAndPlanet = planets.filter(_.isBetween(sunOrbit, planet1.orbit, planet2.orbit))\n        val planetsBetweenSunAndPlanetSorted = planetsBetweenSunAndPlanet.sortBy(_.proximityToSun)\n        val planetsBetweenSunAndPlanetSortedReversed = planetsBetweenSunAndPlanetSorted.reverse\n        val planetsBetweenSunAndPlanetSortedReversedSorted = planetsBetweenSunAndPlanetSortedReversed.sortBy(_.proximityToSun)\n        val planetsBetweenSunAndPlanetSortedReversedSortedReversed = planets\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpefdx_jsa.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpefdx_jsa.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpefdx_jsa.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpefdx_jsa.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "stdout": "",
      "timestamp": 1660009410
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\", new Orbit(\n                new Orbit(\n                    new Orbit(\n                        new Orbit(\n                            new Orbit(\n                                new Orbit(\n                                    new Orbit(\n                                        new Orbit(\n                                            new Orbit(\n                                                new Orbit(\n                                                    new Orbit(\n                                                        new Orbit(\n                                                            new Orbit(\n                                                                new Orbit(\n                                                                    new Orbit(\n                                                                        new Orbit(\n                                                                            new Orbit(\n                                                                                new Orbit(\n                                                                                    new Orbit(\n                                                                                        new Orbit(\n                                                                                            new Orbit(\n                                                                                                new Orbit(\n                                                                                                    new Orbit(\n                                                                                                        new Orbit(\n                                                                                                            new Orbit(\n                                                                                                                new Orbit(\n                                                                                                                    new Orbit(\n                                                                                                                        new Orbit(\n                                                                                                                            new Orbit(\n                                                                                                                                new Orbit(\n                                                                                                                                    new Orbit(\n                                                                                                                                        new Orbit(\n                                                                                                                                            new Orbit(\n                                                                                                                                                new Orbit(\n                                                                                                                                                    new Orbit(\n                                                                                                                                                        new Orbit(\n                                                                                                                                                            new Orbit(\n                                                                                                                                                                new Orbit(\n                                                                                                                                                                    new Orbit(\n                                                                                                                                                                        new Orbit(\n                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                                                                            new Orbit(\n                                                                                                                                                                                                                                                                new Orbit(\n                                                                                                                                                                                                                                                                    new Orbit(\n                                                                                                                                                                                                                                                                        new Orbit(\n                                                                                                                                                                                                                                                                            new Orbit(\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp2bf_uuo9.scala:86:278 --------------------------\u001b[0m\u001b[0m\n\u001b[31m86 |\u001b[0m                                                                                                                                                                                                                                                                            \u001b[33mnew\u001b[0m \u001b[35mOrbit\u001b[0m(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\nexception occurred while parser /tmp/tmp2bf_uuo9.scala\nexception occurred while compiling /tmp/tmp2bf_uuo9.scala\nException in thread \"main\" java.lang.AssertionError: assertion failed: position error, parent span does not contain child span\nparent      = \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m) # -1,\nparent span = <10837..10847>,\nchild       = \u001b[31mnull\u001b[0m # -1,\nchild span  = [10847..10853..10853]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat s",
      "stdout": "error while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\n  )\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\n    )\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n        \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))))\n      )\n    )\n  )\n)\nerror while checking \u001b[3",
      "timestamp": 1660009376
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune\n        )\n        val planetsBetween = planets.filter(planet => planets.contains(planet) && planet != planet1 && planet != planet2)\n        val planetsBetweenWithSun = planetsBetween.filter(planet => planet.orbit(planet1).orbit(planet2).distance < planet.orbit(planet1).orbit(planet2).distance + planet.orbit(planet1).orbit(planet2).distance)\n        planetsBetweenWithSun.sortBy(planet => planet.orbit(planet1).orbit(planet2).distance).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprm22pfr0.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Mercury\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprm22pfr0.scala:22:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: Venus\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprm22pfr0.scala:22:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Earth\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprm22pfr0.scala:22:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Not found: Mars\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprm22pfr0.scala:22:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: Jupiter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprm22pfr0.scala:22:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |",
      "stdout": "",
      "timestamp": 1660009406
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo5j13vx8.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val sun = Planet(\"Sun\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        val orbit1 = planets.find(_.name == planet1).getOrElse(throw new IllegalArgumentException(\"Planet \" + planet1 + \" not found\")).orbit\n        val orbit2 = planets.find(_.name == planet2).getOrElse(throw new IllegalArgumentException(\"Planet \" + planet2 + \" not found\")).orbit\n        val orbits = orbit1 #:: orbit2\n        val sunOrbit = sun.orbit\n        val sunOrbits = sunOrbit #:: sunOrbit\n        val sunOrbitSet = sunOrbits.toSet\n        val orbitSet = orbits.toSet\n        val result = orbitSet.filter(sunOrbitSet.contains).toList\n        result.sortBy(_.distanceTo(sunOrbit))\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8ixfo01p.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8ixfo01p.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8ixfo01p.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8ixfo01p.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "stdout": "",
      "timestamp": 1660009408
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgs45hdcq.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs45hdcq.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg",
      "stdout": "",
      "timestamp": 1660009381
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1), Vector(1,0,0), Vector(1,0,1), Vector(1,1,0), Vector(1,1,1))),\n            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1), Vector(1,0,0), Vector(1,0,1), Vector(1,1,0), Vector(1,1,1))),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1), Vector(1,0,0), Vector(1,0,1), Vector(1,1,0), Vector(1,1,1))),\n            Planet(\"Mars\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1), Vector(1,0,0), Vector(1,0,1), Vector(1,1,0), Vector(1,1,1))),\n            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1), Vector(1,0,0), Vector(1,0,1), Vector(1,1,0), Vector(1,1,1))),\n            Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1), Vector(1,0,0), Vector(1,0,1), Vector(1,1,0), Vector(1,1,1))),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1), Vector(1,0,0), Vector(1,0,1), Vector(1,1,0), Vector(1,1,1))),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1), Vector(1,0,0), Vector(1,0,1), Vector(1,1,0), Vector(1,1,1)))\n        )\n        val planet1Orbit = planets.find(_.name == planet1).getOrElse(throw new Exception(\"Planet \" + planet1 + \" not found\")).orbit\n        val planet2Orbit = planets.find(_.name == planet2).getOrElse(throw new Exception(\"Planet \" + planet2 + \" not found\")).orbit\n        val sunOrbit = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1), Vector(1,0,0), Vector(1,0,1), Vector(1,1,0), Vector(1,1,1))\n        val orbits = planets.map(_.orbit).filter(orbit => orbit != sunOrbit)\n        val proximities = orbits.map(orbit => planets.map(\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp_xbe78tw.scala:35:58 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mproximities\u001b[0m = orbits.map(\u001b[36morbit\u001b[0m => planets.map(\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xbe78tw.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m1\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m1\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m1\u001b[0m))),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xbe78tw.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m1\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m1\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m1\u001b[0m))),\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_xbe78tw.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[",
      "stdout": "",
      "timestamp": 1660009409
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun = Planet(\"Sun\")\n        val planet1 = planets.find(planet => planets.contains(planet))\n        val planet2 = planets.find(planet => planets.contains(planet))\n        val orbit1 = planet1.orbit(sun)\n        val orbit2 = planet2.orbit(sun)\n        val orbits = orbit1 zip orbit2\n        val proximity = orbits.map(orbit => (orbit._1 - orbit._2).abs)\n        proximity.sortBy(_._1).reverse.map(_.toString)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzkyi6f20.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzkyi6f20.scala:25:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1\u001b[0m = planet1.orbit(sun)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue orbit is not a member of Option[String] - did you mean planet1.wait?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzkyi6f20.scala:26:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit2\u001b[0m = planet2.orbit(sun)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue orbit is not a member of Option[String] - did you mean planet2.wait?\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660009408
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(0.0, 0.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(0.0, -1.0), \n                Vector(1.0, 1.0), \n                Vector(-1.0, 0.0), \n                Vector(-1.0, -1.0), \n                Vector(1.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(0.0, -1.0), \n                Vector(1.0, 1.0), \n                Vector(-1.0, 0.0), \n                Vector(-1.0, -1.0), \n                Vector(1.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(0.0, -1.0), \n                Vector(1.0, 1.0), \n                Vector(-1.0, 0.0), \n                Vector(-1.0, -1.0), \n                Vector(1.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(0.0, -1.0), \n                Vector(1.0, 1.0), \n                Vector(-1.0, 0.0), \n                Vector(-1.0, -1.0), \n                Vector(1.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(0.0, -1.0), \n                Vector(1.0, 1.0), \n                Vector(-1.0, 0.0), \n                Vector(-1.0, -1.0), \n                Vector(1.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(0.0, -1.0), \n                Vector(1.0, 1.0), \n                Vector(-1.0, 0.0), \n                Vector(-1.0, -1.0), \n                Vector(1.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(0.0, -1.0), \n                Vector(1.0, 1.0), \n                Vector(-1.0, 0.0), \n                Vector(-1.0, -1.0), \n                Vector(1.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(0.0, -1.0), \n                Vector(1.0, 1.0), \n                Vector(-1.0, 0.0), \n                Vector(-1.0, -1.0), \n                Vector(1.0, -1.0), \n                Vector(0.0, -1.0), \n                Vector(0.0, 1.0), \n                Vector(1.0, 0.0), \n                Vector(0.0, -1.0), \n                Vector(1.0, 1.0), \n                Vector(-1.0, 0.0), \n                Vector(-1.0, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp55ooj9ek.scala:94:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55ooj9ek.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55ooj9ek.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp55ooj9ek.scala:94:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m94 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660009408
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus, earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth, venus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, earth, mars, venus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, earth, mars, jupiter, venus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, earth, mars, jupiter, saturn\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqyppnl38.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq",
      "stdout": "",
      "timestamp": 1660009388
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val sun = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val planet1Orbit = planet1.toLowerCase match {\n            case \"mercury\" => planets(0).orbit\n            case \"venus\" => planets(1).orbit\n            case \"earth\" => planets(2).orbit\n            case \"mars\" => planets(3).orbit\n            case \"jupiter\" => planets(4).orbit\n            case \"saturn\" => planets(5).orbit\n            case \"uranus\" => planets(6).orbit\n            case \"neptune\" => planets(7).orbit\n            case _ => List()\n        }\n        val planet2Orbit = planet2.toLowerCase match {\n            case \"mercury\" => planets(0).orbit\n            case \"venus\" => planets(1).orbit\n            case \"earth\" => planets(2).orbit\n            case \"mars\" => planets(3).orbit\n            case \"jupiter\" => planets(4).orbit\n            case \"saturn\" => planets(5).orbit\n            case \"uranus\" => planets(6).orbit\n            case \"neptune\" => planets(7).orbit\n            case _ => \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjco__bxm.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjco__bxm.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjco__bxm.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjco__bxm.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjco__bxm.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,-\u001b[31m1\u001b[0m)), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m)),\n\u001b[31m\u001b[31m  ",
      "stdout": "",
      "timestamp": 1660009408
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv7hrlwh3.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = Nil\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = Nil\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, ne\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyi4cqgql.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyi4cqgql.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyi4cqgql.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyi4cqgql.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyi4cqgql.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyi4cqgql.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy",
      "stdout": "",
      "timestamp": 1660009394
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpticw34bk.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,0.0,1.0)\n                ),\n                Vector(0.0,0.0,0.0)\n            )),\n            Planet(\"Venus\", Orbit(\n                Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,0.0,1.0)\n                ),\n                Vector(0.0,0.0,0.0)\n            )),\n            Planet(\"Earth\", Orbit(\n                Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,0.0,1.0)\n                ),\n                Vector(0.0,0.0,0.0)\n            )),\n            Planet(\"Mars\", Orbit(\n                Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,0.0,1.0)\n                ),\n                Vector(0.0,0.0,0.0)\n            )),\n            Planet(\"Jupiter\", Orbit(\n                Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,0.0,1.0)\n                ),\n                Vector(0.0,0.0,0.0)\n            )),\n            Planet(\"Saturn\", Orbit(\n                Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,0.0,1.0)\n                ),\n                Vector(0.0,0.0,0.0)\n            )),\n            Planet(\"Uranus\", Orbit(\n                Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,0.0,1.0)\n                ),\n                Vector(0.0,0.0,0.0)\n            )),\n            Planet(\"Neptune\", Orbit(\n                Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,0.0,1.0)\n                ),\n                Vector(0.0,0.0,0.0)\n            ))\n        )\n        val planet1 = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name == planet2).get\n        val orbit1 = planet1.orbit\n        val orbit2 = planet2.orbit\n        val sun = Orbit(\n            Vector(\n                Vector(0.0,0.0,0.0),\n                Vector(0.0,1.0,0.0),\n                Vector(0.0,0.0,1.0)\n            ),\n            Vector(0.0,0.0,0.0)\n        )\n        val orbits = List(orbit1, orbit2, sun)\n        val orbitsBetweenPlanets = orbits.filter(\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpzpmvlh5n.scala:100:49 --------------------------\u001b[0m\u001b[0m\n\u001b[31m100 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbitsBetweenPlanets\u001b[0m = orbits.filter(\n\u001b[31m\u001b[31m    |\u001b[0m                                                 ^\u001b[0m\n\u001b[31m    |\u001b[0m                                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzpmvlh5n.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzpmvlh5n.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzpmvlh5n.scala:30:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzpmvlh5n.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzpmvlh5n.scala:38:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m            Planet(\u001b[31m\"Earth\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not fou",
      "stdout": "",
      "timestamp": 1660009410
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\", new Orbit(\n                new Vector(0,0,0), \n                new Vector(0,0,1), \n                new Vector(0,1,0), \n                new Vector(0,1,1), \n                new Vector(1,0,0), \n                new Vector(1,0,1), \n                new Vector(1,1,0), \n                new Vector(1,1,1))),\n            new Planet(\"Venus\", new Orbit(\n                new Vector(0,0,0), \n                new Vector(0,0,1), \n                new Vector(0,1,0), \n                new Vector(0,1,1), \n                new Vector(1,0,0), \n                new Vector(1,0,1), \n                new Vector(1,1,0), \n                new Vector(1,1,1))),\n            new Planet(\"Earth\", new Orbit(\n                new Vector(0,0,0), \n                new Vector(0,0,1), \n                new Vector(0,1,0), \n                new Vector(0,1,1), \n                new Vector(1,0,0), \n                new Vector(1,0,1), \n                new Vector(1,1,0), \n                new Vector(1,1,1))),\n            new Planet(\"Mars\", new Orbit(\n                new Vector(0,0,0), \n                new Vector(0,0,1), \n                new Vector(0,1,0), \n                new Vector(0,1,1), \n                new Vector(1,0,0), \n                new Vector(1,0,1), \n                new Vector(1,1,0), \n                new Vector(1,1,1))),\n            new Planet(\"Jupiter\", new Orbit(\n                new Vector(0,0,0), \n                new Vector(0,0,1), \n                new Vector(0,1,0), \n                new Vector(0,1,1), \n                new Vector(1,0,0), \n                new Vector(1,0,1), \n                new Vector(1,1,0), \n                new Vector(1,1,1))),\n            new Planet(\"Saturn\", new Orbit(\n                new Vector(0,0,0), \n                new Vector(0,0,1), \n                new Vector(0,1,0), \n                new Vector(0,1,1), \n                new Vector(1,0,0), \n                new Vector(1,0,1), \n                new Vector(1,1,0), \n                new Vector(1,1,1))),\n            new Planet(\"Uranus\", new Orbit(\n                new Vector(0,0,0), \n                new Vector(0,0,1), \n                new Vector(0,1,0), \n                new Vector(0,1,1), \n                new Vector(1,0,0), \n                new Vector(1,0,1), \n                new Vector(1,1,0), \n                new Vector(1,1,1))),\n            new Planet(\"Neptune\", new Orbit(\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp3evrl0g1.scala:85:44 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m85 |\u001b[0m            \u001b[33mnew\u001b[0m \u001b[35mPlanet\u001b[0m(\u001b[31m\"Neptune\"\u001b[0m, \u001b[33mnew\u001b[0m \u001b[35mOrbit\u001b[0m(\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\nexception occurred while parser /tmp/tmp3evrl0g1.scala\nexception occurred while compiling /tmp/tmp3evrl0g1.scala\nException in thread \"main\" java.lang.AssertionError: assertion failed: position error, parent span does not contain child span\nparent      = \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m) # -1,\nparent span = <3374..3384>,\nchild       = \u001b[31mnull\u001b[0m # -1,\nchild span  = [3384..3390..3390]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JPro",
      "stdout": "error while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Neptune\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))\nerror while checking List(\n  \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mercury\"\u001b[0m, \n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 0, 0), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 0, 1), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 1, 0), \n      \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 1, 1)\n    , \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 0, 0), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 0, 1), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 1, 0), \n      \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 1, 1)\n    )\n  )\n, \n  \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 0, 0), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 0, 1), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 1, 0), \n      \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 1, 1)\n    , \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 0, 0), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 0, 1), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 1, 0), \n      \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 1, 1)\n    )\n  )\n, \n  \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 0, 0), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 0, 1), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 1, 0), \n      \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 1, 1)\n    , \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 0, 0), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 0, 1), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 1, 0), \n      \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 1, 1)\n    )\n  )\n, \n  \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 0, 0), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 0, 1), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 1, 0), \n      \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 1, 1)\n    , \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 0, 0), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 0, 1), \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 1, 0), \n      \u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(1, 1, 1)\n    )\n  )\n, \n  \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Jupiter\"\u001b[0m, \n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mVector\u001b[0m(0, 0, 0), \u001b[33mnew \u001b[0m\u001b[35mV",
      "timestamp": 1660009401
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth, venus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, earth, mars, venus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, earth, mars, jupiter, venus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, earth, mars, jupiter, saturn\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqyppnl38.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq",
      "stdout": "",
      "timestamp": 1660009388
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => planet -> orbit(planet))\n        val sun = orbits.values.map(_.head).last\n        val orbit1 = orbits(planet1)\n        val orbit2 = orbits(planet2)\n        val orbit1Sun = orbit1.map(_.head).last\n        val orbit2Sun = orbit2.map(_.head).last\n        val sunDistance = math.sqrt((orbit1Sun.x - sun.x) * (orbit1Sun.x - sun.x) + (orbit1Sun.y - sun.y) * (orbit1Sun.y - sun.y))\n        val orbit1SunDistance = math.sqrt((orbit1Sun.x - orbit1Sun.head).head * (orbit1Sun.x - orbit1Sun.head).head + (orbit1Sun.y - orbit1Sun.head).head * (orbit1Sun.y - orbit1Sun.head).head)\n        val orbit2SunDistance = math.sqrt((orbit2Sun.x - orbit2Sun.head).head * (orbit2Sun.x - orbit2Sun.head).head + (orbit2Sun.y - orbit2Sun.head).head * (orbit2Sun.y - orbit2Sun.head).head)\n        val distance = math.sqrt((orbit1SunDistance - orbit2SunDistance) * (orbit1SunDistance - orbit2SunDistance) + (orbit1Sun.y - orbit2Sun.head).head * (orbit1Sun.y - orbit2Sun.head).head)\n        val distanceToSun = math.sqrt((sun.x - orbit1Sun.head).head * (sun.x - orbit1Sun.head).head + (sun.y - orbit1Sun.head).head * (sun.y - orbit1Sun.head).head)\n        val distanceToSunToPlanet1 = math.sqrt((orbit1Sun.x - sun.x) * (orbit1Sun.x - sun.x) + (orbit1Sun.y - sun.y) * (orbit1Sun.y - sun.y))\n        val distanceToSunToPlanet2 = math.sqrt((orbit2Sun.x - sun.x) * (orbit2Sun.x - sun.x) + (orbit2Sun.y - sun.y) * (orbit2Sun.y - sun.y))\n        val distanceToSunToPlanet1ToPlanet2 = math.sqrt((orbit1Sun.x - orbit2Sun.head).head * (orbit1Sun.x - orbit2Sun.head).head + (orbit1Sun.y - orbit2Sun.head).head * (orbit1Sun.y - orbit2Sun.head).head)\n        val distanceToSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpys2kl0ou.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpys2kl0ou.scala:22:53 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => planet -> orbit(planet))\n\u001b[31m\u001b[31m   |\u001b[0m                                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Not found: orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpys2kl0ou.scala:23:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = orbits.values.map(_.head).last\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 value values is not a member of List[(String, Nothing)]\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpys2kl0ou.scala:24:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1\u001b[0m = orbits(planet1)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (planet1 : String)\n\u001b[31m   |\u001b[0m                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpys2kl0ou.scala:25:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit2\u001b[0m = orbits(planet2)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    (planet2 : String)\n\u001b[31m   |\u001b[0m                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpys2kl0ou.scala:26:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbit1Sun\u001b[0m = orbit1.map(_.head).last\n\u001b[31m\u001b[31m   |\u001b[0m       ",
      "stdout": "",
      "timestamp": 1660009410
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => {\n            val planetOrbit = PlanetOrbit(planet)\n            val sunOrbit = PlanetOrbit(\"Sun\")\n            val distance = planetOrbit.distanceTo(sunOrbit)\n            val planetOrbitWithDistance = PlanetOrbit(planet, distance)\n            (planetOrbit, planetOrbitWithDistance)\n        })\n        val sunOrbit = PlanetOrbit(\"Sun\")\n        val sunOrbitWithDistance = PlanetOrbit(\"Sun\", 0)\n        val sunOrbitWithDistanceAndPlanets = PlanetOrbit(\"Sun\", 0, planets)\n        val sunOrbitWithDistanceAndPlanetsAndPlanets = PlanetOrbit(\"Sun\", 0, planets, planets)\n        val sunOrbitWithDistanceAndPlanetsAndPlanetsAndPlanets = PlanetOrbit(\"Sun\", 0, planets, planets, planets)\n        val sunOrbitWithDistanceAndPlanetsAndPlanetsAndPlanetsAndPlanets = PlanetOrbit(\"Sun\", 0, planets, planets, planets, planets)\n        val sunOrbitWithDistanceAndPlanetsAndPlanetsAndPlanetsAndPlanetsAndPlanets = PlanetOrbit(\"Sun\", 0, planets, planets, planets, planets, planets)\n        val sunOrbitWithDistanceAndPlanetsAndPlanetsAndPlanetsAndPlanetsAndPlanetsAndPlanets = PlanetOrbit(\"Sun\", 0, planets, planets, planets, planets, planets, planets)\n        val sunOrbitWithDistanceAndPlanetsAndPlanetsAndPlanetsAndPlanetsAndPlanetsAndPlanetsAndPlanets = PlanetOrbit(\"Sun\", 0, planets, planets, planets, planets, planets, planets, planets)\n        val sunOrbitWithDistanceAndPlanetsAndPlanetsAndPlanetsAndPlanetsAndPlanetsAndPlanetsAndPlanetsAndPlanets = PlanetOrbit(\"Sun\", 0, planets, planets, planets, planets, planets, planets, planets, planets)\n        val sunOrbitWithDistanceAndPlanetsAndPlanetsAndPlanetsAndPlanetsAndPlanetsAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqdwg15hf.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqdwg15hf.scala:23:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanetOrbit\u001b[0m = PlanetOrbit(planet)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: PlanetOrbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqdwg15hf.scala:24:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msunOrbit\u001b[0m = PlanetOrbit(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: PlanetOrbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqdwg15hf.scala:26:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mplanetOrbitWithDistance\u001b[0m = PlanetOrbit(planet, distance)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Not found: PlanetOrbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqdwg15hf.scala:29:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msunOrbit\u001b[0m = PlanetOrbit(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: PlanetOrbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqdwg15hf.scala:30:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msunOrbitWithDistance\u001b[0m = PlanetOrbit(\u001b[31m\"Sun\"\u001b[0m, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m          ",
      "stdout": "",
      "timestamp": 1660009408
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\", new Orbit(\n                new Planet(\"Venus\", new Orbit(\n                    new Planet(\"Earth\", new Orbit(\n                        new Planet(\"Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n                                new Planet(\"Saturn\", new Orbit(\n                                    new Planet(\"Uranus\", new Orbit(\n                                        new Planet(\"Neptune\", new Orbit(\n                                            new Planet(\"Mercury\", new Orbit(\n                                                new Planet(\"Venus\", new Orbit(\n                                                    new Planet(\"Earth\", new Orbit(\n                                                        new Planet(\"Mars\", new Orbit(\n                                                            new Planet(\"Jupiter\", new Orbit(\n                                                                new Planet(\"Saturn\", new Orbit(\n                                                                    new Planet(\"Uranus\", new Orbit(\n                                                                        new Planet(\"Neptune\", new Orbit(\n                                                                            new Planet(\"Mercury\", new Orbit(\n                                                                                new Planet(\"Venus\", new Orbit(\n                                                                                    new Planet(\"Earth\", new Orbit(\n                                                                                        new Planet(\"Mars\", new Orbit(\n                                                                                            new Planet(\"Jupiter\", new Orbit(\n                                                                                                new Planet(\"Saturn\", new Orbit(\n                                                                                                    new Planet(\"Uranus\", new Orbit(\n                                                                                                        new Planet(\"Neptune\", new Orbit(\n                                                                                                            new Planet(\"Mercury\", new Orbit(\n                                                                                                                new Planet(\"Venus\", new Orbit(\n                                                                                                                    new Planet(\"Earth\", new Orbit(\n                                                                                                                        new Planet(\"Mars\", new Orbit(\n                                                                                                                            new Planet(\"Jupiter\", new Orbit(\n                                                                                                                                new Planet(\"Saturn\", new Orbit(\n                                                                                                                                    new Planet(\"Uranus\", new Orbit(\n                                                                                                                                        new Planet(\"Neptune\", new Orbit(\n                                                                                                                                            new Planet(\"Mercury\", new Orbit(\n                                                                                                                                                new Planet(\"Venus\", new Orbit(\n                                                                                                                                                    new Planet(\"Earth\", new Orbit(\n                                                                                                                                                        new Planet(\"Mars\", new Orbit(\n                                                                                                                                                            \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpa9m9vyup.scala:57:181 --------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m                                                                                                                                                        \u001b[33mnew\u001b[0m \u001b[35mPlanet\u001b[0m(\u001b[31m\"Mars\"\u001b[0m, \u001b[33mnew\u001b[0m \u001b[35mOrbit\u001b[0m(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\nexception occurred while parser /tmp/tmpa9m9vyup.scala\nexception occurred while compiling /tmp/tmpa9m9vyup.scala\nException in thread \"main\" java.lang.AssertionError: assertion failed: position error, parent span does not contain child span\nparent      = \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m) # -1,\nparent span = <5097..5107>,\nchild       = \u001b[31mnull\u001b[0m # -1,\nchild span  = [5107..5269..5269]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio",
      "stdout": "error while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))))\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m)))))\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\n    )\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mercury\"\u001b[0m, \n  \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n    \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n      \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n        \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[31mnull\u001b[0m))))\n      )\n    )\n  )\n)\nerror while checking \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n  \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mercury\"\u001b[0m, \n    \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n      \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Venus\"\u001b[0m, \n        \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\n          \u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Earth\"\u001b[0m, \u001b[33mnew \u001b[0m\u001b[35mOrbit\u001b[0m(\u001b[33mnew \u001b[0m\u001b[35mPlanet\u001b[0m(\u001b[32m\"Mars\"\u001b[0m, ",
      "timestamp": 1659798186
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(\n                    Vector(\n                        Vector(\n                            Vector(\n                                Vector(\n                                    Vector(\n                                        Vector(\n                                            Vector(\n                                                Vector(\n                                                    Vector(\n                                                        Vector(\n                                                            Vector(\n                                                                Vector(\n                                                                    Vector(\n                                                                        Vector(\n                                                                            Vector(\n                                                                                Vector(\n                                                                                    Vector(\n                                                                                        Vector(\n                                                                                            Vector(\n                                                                                                Vector(\n                                                                                                    Vector(\n                                                                                                        Vector(\n                                                                                                            Vector(\n                                                                                                                Vector(\n                                                                                                                    Vector(\n                                                                                                                        Vector(\n                                                                                                                            Vector(\n                                                                                                                                Vector(\n                                                                                                                                    Vector(\n                                                                                                                                        Vector(\n                                                                                                                                            Vector(\n                                                                                                                                                Vector(\n                                                                                                                                                    Vector(\n                                                                                                                                                        Vector(\n                                                                                                                                                            Vector(\n                                                                                                                                                                Vector(\n                                                                                                                                                                    Vector(\n                                                                                                                                                                        Vector(\n                                                                                                                                                                            Vector(\n                                                                                                                                                                                Vector(\n                                                                                                                                                                                    Vector(\n                                                                                                                                                                                        Vector(\n                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                                            Vector(\n                                                                                                                                                                                                                                                                                                                                Vector(\n                                                                                                                                                                                                                                                                                                                                    Vector(\n                                                                                                                                                                                                                                                                                                                                        Vector(\n                                                                                                                                                                                                                                                                                                                                            Vector(\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpip1i2us9.scala:102:339 -------------------------\u001b[0m\u001b[0m\n\u001b[31m102 |\u001b[0m                                                                                                                                                                                                                                                                                                                                            Vector(\n\u001b[31m\u001b[31m    |\u001b[0m                                                                                                                                                                                                                                                                                                                                                   ^\u001b[0m\n\u001b[31m    |\u001b[0m                                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpip1i2us9.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpip1i2us9.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpip1i2us9.scala:103:5 --------------------\u001b[0m\u001b[0m\n\u001b[31m103 |\u001b[0m    }\n\u001b[31m\u001b[31m    |\u001b[0m     ^\u001b[0m\n\u001b[31m    |\u001b[0m     Found:    Unit\n\u001b[31m    |\u001b[0m     Required: List[String]\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660009410
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprsb4u0xm.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprsb4u0xm.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth, venus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, earth, mars, venus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, earth, mars, jupiter, venus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, earth, mars, jupiter, saturn, venus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, earth, mars, jupiter, saturn\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqyppnl38.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqyppnl38.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq",
      "stdout": "",
      "timestamp": 1660009388
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(Vector(0.0, 0.0), 0.0)),\n            Planet(\"Venus\", Orbit(Vector(0.0, -1.0), 0.0)),\n            Planet(\"Earth\", Orbit(Vector(1.0, 0.0), 0.0)),\n            Planet(\"Mars\", Orbit(Vector(0.0, 1.0), 0.0)),\n            Planet(\"Jupiter\", Orbit(Vector(0.0, 2.0), 0.0)),\n            Planet(\"Saturn\", Orbit(Vector(1.0, 0.0), 0.0)),\n            Planet(\"Uranus\", Orbit(Vector(-1.0, 0.0), 0.0)),\n            Planet(\"Neptune\", Orbit(Vector(-2.0, 0.0), 0.0))\n        )\n        val sun = Orbit(Vector(0.0, 1.0), 0.0)\n        val orbits = planets.map(_.orbit(sun))\n        val planetsBetween = orbits.filter(_.between(planet1, planet2))\n        planetsBetween.sortBy(_.distance(sun))\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq0cnau0h.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0.0\u001b[0m, \u001b[31m0.0\u001b[0m), \u001b[31m0.0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq0cnau0h.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0.0\u001b[0m, \u001b[31m0.0\u001b[0m), \u001b[31m0.0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq0cnau0h.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0.0\u001b[0m, -\u001b[31m1.0\u001b[0m), \u001b[31m0.0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq0cnau0h.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0.0\u001b[0m, -\u001b[31m1.0\u001b[0m), \u001b[31m0.0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq0cnau0h.scala:24:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            Planet(\u001b[31m\"Earth\"\u001b[0m, Orbit(Vector(\u001b[31m1.0\u001b[0m, \u001b[31m0.0\u001b[0m), \u001b[31m0.0\u001b[0m)),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq0cnau0h.scala:24:28 -----------------",
      "stdout": "",
      "timestamp": 1660009410
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenMercuryAndVenus = List(venus)\n        val planetsBetweenMercuryAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenMercuryAndSaturn = List(uranus)\n        val planetsBetweenMercuryAndUranus = List(uranus)\n        val planetsBetweenMercuryAndNeptune = List(uranus)\n        val planetsBetweenVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenVenusAndJupiter = List(saturn, uranus)\n        val planet\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpjo5k37wh.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjo5k37wh.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj",
      "stdout": "",
      "timestamp": 1659798206
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbln89bmo.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbln89bmo.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbln89bmo.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbln89bmo.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbln89bmo.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbln89bmo.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb",
      "stdout": "",
      "timestamp": 1660009409
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(0.0, 0.0, 0.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0, -1.0, 0.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-1.0, 0.0, 0.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0, -1.0, 0.0), \n                Vector(0.0, 0.0, 1.0), \n                Vector(0.0, 0.0, -1.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-1.0, 0.0, 0.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0, -1.0, 0.0), \n                Vector(0.0, 0.0, 1.0), \n                Vector(0.0, 0.0, -1.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-1.0, 0.0, 0.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0, -1.0, 0.0), \n                Vector(0.0, 0.0, 1.0), \n                Vector(0.0, 0.0, -1.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-1.0, 0.0, 0.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0, -1.0, 0.0), \n                Vector(0.0, 0.0, 1.0), \n                Vector(0.0, 0.0, -1.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-1.0, 0.0, 0.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0, -1.0, 0.0), \n                Vector(0.0, 0.0, 1.0), \n                Vector(0.0, 0.0, -1.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-1.0, 0.0, 0.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0, -1.0, 0.0), \n                Vector(0.0, 0.0, 1.0), \n                Vector(0.0, 0.0, -1.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-1.0, 0.0, 0.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0, -1.0, 0.0), \n                Vector(0.0, 0.0, 1.0), \n                Vector(0.0, 0.0, -1.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-1.0, 0.0, 0.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0, -1.0, 0.0), \n                Vector(0.0, 0.0, 1.0), \n                Vector(0.0, 0.0, -1.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-1.0, 0.0, 0.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0, -1.0, 0.0), \n                Vector(0.0, 0.0, 1.0), \n                Vector(0.0, 0.0, -1.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-1.0, 0.0, 0.0), \n                Vector(0.0, 1.0, 0.0), \n                Vector(0.0, -1.0, 0.0), \n                Vector(0.0, 0.0, 1.0), \n                Vector(0.0, 0.0, -1.0), \n                Vector(1.0, 0.0, 0.0), \n                Vector(-\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbz7fenj5.scala:88:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbz7fenj5.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbz7fenj5.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbz7fenj5.scala:87:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m87 |\u001b[0m                Vector(-\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: -\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbz7fenj5.scala:88:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m88 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[String]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660009410
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus, earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo5j13vx8.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5j13vx8.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => (planet, planets.map(planet).map(planet)))\n        val sun = planets.map(planet => (planet, planets.map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp11ipb82i.scala:24:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp11ipb82i.scala:22:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => (planet, planets.map(planet).map(planet)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (planet : String)\n\u001b[31m   |\u001b[0m                                             Required: String => Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp11ipb82i.scala:23:61 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => (planet, planets.map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(plane",
      "stdout": "",
      "timestamp": 1660009412
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter, saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncqjbz8j.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpncqjbz8j.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn",
      "stdout": "",
      "timestamp": 1659798192
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1))),\n            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1))),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1))),\n            Planet(\"Mars\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1))),\n            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1))),\n            Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1))),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1))),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1))))\n        val planet1 = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name == planet2).get\n        val orbit1 = planet1.orbit\n        val orbit2 = planet2.orbit\n        val sun = Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,1,0), Vector(0,1,1))\n        val orbits = List(orbit1, orbit2)\n        val orbitsBetweenPlanets = orbits.filter(_.betweenPlanets(planet1, planet2))\n        val proximity = orbitsBetweenPlanets.map(_.proximityTo(sun))\n        proximity.toList.sortBy(_.distanceTo(sun)).map(_.name)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjdsrfsjd.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m1\u001b[0m))),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjdsrfsjd.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m1\u001b[0m))),\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjdsrfsjd.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m1\u001b[0m))),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjdsrfsjd.scala:23:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m0\u001b[0m), Vector(\u001b[31m0\u001b[0m,\u001b[31m1\u001b[0m,\u001b[31m1\u001b[0m))),\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-e",
      "stdout": "",
      "timestamp": 1660009411
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", 6378137.0, 0.01720209),\n            Planet(\"Venus\", 6378145.0, 0.01720195),\n            Planet(\"Earth\", 6378388.0, 0.01720195),\n            Planet(\"Mars\", 6378245.0, 0.01720195),\n            Planet(\"Jupiter\", 6378293.0, 0.04172019),\n            Planet(\"Saturn\", 6378057.0, 0.04172019),\n            Planet(\"Uranus\", 6378165.0, 0.01720195),\n            Planet(\"Neptune\", 6378140.0, 0.01720195)\n        )\n        val planet1 = planets.find(_.name == planet1).get\n        val planet2 = planets.find(_.name == planet2).get\n        val sun = Planet(\"Sun\", 6378160.0, 0.01720195)\n        val sunOrbit = sun.orbit(planet1)\n        val sunOrbit2 = sun.orbit(planet2)\n        val orbits = planets.filter(_.orbit(planet1) < sun.orbit(planet2))\n        val orbits2 = planets.filter(_.orbit(planet1) > sun.orbit(planet2))\n        val orbits3 = planets.filter(_.orbit(planet1) == sun.orbit(planet2))\n        val orbits4 = planets.filter(_.orbit(planet1) == sun.orbit(planet2))\n        val orbits5 = planets.filter(_.orbit(planet1) == sun.orbit(planet2))\n        val orbits6 = planets.filter(_.orbit(planet1) == sun.orbit(planet2))\n        val orbits7 = planets.filter(_.orbit(planet1) == sun.orbit(planet2))\n        val orbits8 = planets.filter(_.orbit(planet1) == sun.orbit(planet2))\n        val orbits9 = planets.filter(_.orbit(planet1) == sun.orbit(planet2))\n        val orbits10 = planets.filter(_.orbit(planet1) == sun.orbit(planet2))\n        val orbits11 = planets.filter(_.orbit(planet1) == sun.orbit(planet2))\n        val orbits12 = planets.filter(_.orbit(planet1) == sun.orbit(planet2))\n        val orbits13 = planets.filter(_.orbit(planet1) == sun.orbit(planet2))\n        val orbits\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkf3tpjne.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkf3tpjne.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, \u001b[31m6378137.0\u001b[0m, \u001b[31m0.01720209\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkf3tpjne.scala:23:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, \u001b[31m6378145.0\u001b[0m, \u001b[31m0.01720195\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkf3tpjne.scala:24:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m            Planet(\u001b[31m\"Earth\"\u001b[0m, \u001b[31m6378388.0\u001b[0m, \u001b[31m0.01720195\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkf3tpjne.scala:25:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m            Planet(\u001b[31m\"Mars\"\u001b[0m, \u001b[31m6378245.0\u001b[0m, \u001b[31m0.01720195\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkf3tpjne.scala:26:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            Planet(\u001b[31m\"Jupiter\"\u001b[0m, \u001b[31m6378293.0\u001b[0m, \u001b[31m0.04172019\u001b[0m),\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /t",
      "stdout": "",
      "timestamp": 1660009412
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val orbits = planets.map(planet => (planet, planets.map(planet).map(planet)))\n        val sun = planets.map(planet => (planet, planets.map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp11ipb82i.scala:24:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp11ipb82i.scala:22:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36morbits\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => (planet, planets.map(planet).map(planet)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (planet : String)\n\u001b[31m   |\u001b[0m                                             Required: String => Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp11ipb82i.scala:23:61 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = planets.map(\u001b[36mplanet\u001b[0m => (planet, planets.map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(plane",
      "stdout": "",
      "timestamp": 1660009412
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus, earth, mars, jupiter, saturn, uranus)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxdsscna.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mjupiter\u001b[0m = Planet(\u001b[31m\"Jupiter\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpfn5nfzau.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfn5nfzau.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf",
      "stdout": "",
      "timestamp": 1659798191
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\", Orbit(\n                Vector(0.0, -9.80665, 0.0),\n                Vector(0.0, +9.80665, 0.0),\n                Vector(0.0, +0.0, +1.0))),\n            Planet(\"Venus\", Orbit(\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0))),\n            Planet(\"Earth\", Orbit(\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0))),\n            Planet(\"Mars\", Orbit(\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0))),\n            Planet(\"Jupiter\", Orbit(\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0))),\n            Planet(\"Saturn\", Orbit(\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0))),\n            Planet(\"Uranus\", Orbit(\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0))),\n            Planet(\"Neptune\", Orbit(\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0),\n                Vector(0.0, +0.0, +1.0)))\n        )\n        val planet1 = planets.find(_.name == planet1).getOrElse(throw new IllegalArgumentException(\"Planet \" + planet1 + \" not found\"))\n        val planet2 = planets.find(_.name == planet2).getOrElse(throw new IllegalArgumentException(\"Planet \" + planet2 + \" not found\"))\n        val sun = Orbit(Vector(0.0, 0.0, 1.0), Vector(0.0, 0.0, 1.0), Vector(0.0, 0.0, 1.0))\n        val orbits = planet1.orbits.flatMap(_.orbit).filter(_.inOrbit(planet2.orbit)).sortBy(_.distanceTo(sun))\n        val result = orbits.map(_.name)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0xmunx7d.scala:22:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0xmunx7d.scala:22:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            Planet(\u001b[31m\"Mercury\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0xmunx7d.scala:26:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0xmunx7d.scala:26:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            Planet(\u001b[31m\"Venus\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0xmunx7d.scala:30:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            Planet(\u001b[31m\"Earth\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0xmunx7d.scala:30:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m            Planet(\u001b[31m\"Earth\"\u001b[0m, Orbit(\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Not found: Orbit\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compilin",
      "stdout": "",
      "timestamp": 1660009412
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n        val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n        val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn, uranus, venus)\n        val planetsBetweenSun\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6uz93_5t.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:22:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msun\u001b[0m = Planet(\u001b[31m\"Sun\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmercury\u001b[0m = Planet(\u001b[31m\"Mercury\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:24:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mvenus\u001b[0m = Planet(\u001b[31m\"Venus\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:25:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mearth\u001b[0m = Planet(\u001b[31m\"Earth\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uz93_5t.scala:26:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmars\u001b[0m = Planet(\u001b[31m\"Mars\"\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: Planet\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6",
      "stdout": "",
      "timestamp": 1660009382
    }
  ]
}