language: scala
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Create a stack to keep track of open\
    \ and closed parens\n        val paren_stack = mutable.Stack[String]()\n     \
    \   // Create a mutable list to store the result\n        val result = mutable.ListBuffer[String]()\n\
    \        // Iterate through each character in the string\n        for (c <- paren_string)\
    \ {\n            // If the character is a left paren, push it onto the stack\n\
    \            if (c == '(') {\n                paren_stack.push(c)\n          \
    \  }\n            // If the character is a right paren, pop it from the stack\n\
    \            else if (c == ')') {\n                val popped_char = paren_stack.pop()\n\
    \                // If the popped character is null, then we reached the end of\
    \ the stack\n                if (popped_char == null) {\n                    //\
    \ If the stack is empty, that means we reached the end of the string\n       \
    \             if (paren_stack.isEmpty) {\n                        result.add(c)\n\
    \                    }\n                    // If the stack is not empty, then\
    \ we reached the end of the string and we found a left paren\n               \
    \     else {\n                        result.add(c)\n                    }\n \
    \               }\n                // If the popped character is not null, then\
    \ we found a right paren\n                else {\n                    result.add(popped_char)\n\
    \                }\n            }\n            // If the character is not a left\
    \ or right paren, just add it to the result\n            else {\n            \
    \    result.add(c)\n            }\n        }\n        // Return the result\n \
    \       result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr9pbf18.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkr9pbf18.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_parens = paren_groups.map(x => x.replace(\"\
    )\", \"\\\\)\"))\n        val paren_groups_with_parens_without_spaces = paren_groups_with_parens.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces.map(x => x.replaceAll(\"\\\\)\", \"\
    \"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces.map(x => x.replaceAll(\"\
    \\\\(\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp9ysuglf.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Use a stack to keep track of which\
    \ parenthesis are currently open\n        val paren_stack = mutable.Stack[String]()\n\
    \        // Use a list to keep track of which parenthesis are currently open\n\
    \        val paren_groups = mutable.ListBuffer[String]()\n        // Iterate over\
    \ each character in the string\n        for (c <- paren_string) {\n          \
    \  // If the character is a left parenthesis, push it onto the stack\n       \
    \     if (c == '(') {\n                paren_stack.push(c)\n            }\n  \
    \          // If the character is a right parenthesis, pop it off the stack\n\
    \            else if (c == ')') {\n                paren_stack.pop()\n       \
    \     }\n            // If the character is a left or right parenthesis, add it\
    \ to the list\n            else {\n                paren_groups.append(c)\n  \
    \          }\n        }\n        // Return the list of parenthesis\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp30yqdxrd.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp30yqdxrd.scala:14:27 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortWith(_.length\
    \ < _.length)\n        val paren_group_strings_sorted_without_spaces = paren_group_strings_sorted.map(x\
    \ => x.replace(\"( \", \"(\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces.map(x => x.replace(\")\", \"\"))\n\
    \        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \"(\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \"(\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \"(\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\"))\n        val paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \"(\"))\n        val paren_group_strings_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdszpjdls.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdszpjdls.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\"(\"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_group_strings_sorted_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdszpjdls.scala:24:5 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659795744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\"(\
    \ \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpch4jcu_y.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_space\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpch4jcu_y.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.distinct\n        val paren_groups_flat3 = paren_groups_flat2.filterNot(x\
    \ => x.contains(\"(\"))\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(x\
    \ => x.contains(\")\"))\n        paren_groups_flat4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8gpb7vb1.scala:14:69 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(\e[36mx\e[0m => x.contains(\e[31m\"(\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \ value contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp8gpb7vb1.scala:15:69 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m = paren_groups_flat3.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value contains is not a member of\
    \ Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8gpb7vb1.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        paren_groups_flat4\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (paren_groups_flat4 : Array[Char])\n\e[31m   |\e[0m        Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length).toList\n        val paren_group_lengths = paren_groups.map(x => x.split(\"\
    \\\\)\").length).toList\n        val paren_group_lengths_sum = paren_group_lengths.sum\n\
    \        val paren_group_lengths_product = paren_group_lengths.product\n     \
    \   val paren_group_lengths_product2 = paren_group_lengths_product * paren_group_lengths_product\n\
    \        val paren_group_lengths_product3 = paren_group_lengths_product2 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product4 = paren_group_lengths_product3 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product5 = paren_group_lengths_product4 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product6 = paren_group_lengths_product5 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product7 = paren_group_lengths_product6 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product8 = paren_group_lengths_product7 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product9 = paren_group_lengths_product8 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product10 = paren_group_lengths_product9 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product11 = paren_group_lengths_product10 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product12 = paren_group_lengths_product11 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product13 = paren_group_lengths_product12 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product14 = paren_group_lengths_product13 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product15 = paren_group_lengths_product14 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product16 = paren_group_lengths_product15 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product17 = paren_group_lengths_product16 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product18 = paren_group_lengths_product17 * paren_group_lengths_product\n\
    \        val paren_group_lengths_product19 = paren_group_lengths_product\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcw6yntmo.scala:34:5\
    \ ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s\", \"\"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpju668ln_.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpju668ln_.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach { x =>\n      \
    \      if (x == '(') {\n                paren_open += x\n            } else if\
    \ (x == ')') {\n                paren_closed += x\n            } else if (x !=\
    \ ' ') {\n                paren_groups += x\n            }\n        }\n      \
    \  if (paren_open.size == paren_closed.size) {\n            paren_groups\n   \
    \     } else {\n            separateParenGroups(paren_open.toList) +\n       \
    \         separateParenGroups(paren_closed.toList) +\n                paren_groups\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph044zgtk.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph044zgtk.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmph044zgtk.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph044zgtk.scala:26:51 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            separateParenGroups(paren_open.toList) +\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of List[String], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659795744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_remainder\
    \ = paren_groups_count % 2\n        val paren_groups_remainder_count = paren_groups_remainder\
    \ + 1\n        val paren_groups_remainder_groups = paren_groups.take(paren_groups_remainder_count)\n\
    \        val paren_groups_remainder_groups_count = paren_groups_remainder_groups.length\n\
    \        val paren_groups_remainder_groups_remainder = paren_groups_remainder_groups_count\
    \ % 2\n        val paren_groups_remainder_groups_remainder_count = paren_groups_remainder_groups_remainder\
    \ + 1\n        val paren_groups_remainder_groups_remainder_groups = paren_groups_remainder_groups.take(paren_groups_remainder_groups_remainder_count)\n\
    \        val paren_groups_remainder_groups_remainder_groups_count = paren_groups_remainder_groups_remainder_groups.length\n\
    \        val paren_groups_remainder_groups_remainder_groups_remainder = paren_groups_remainder_groups_remainder_groups_count\
    \ % 2\n        val paren_groups_remainder_groups_remainder_groups_remainder_count\
    \ = paren_groups_remainder_groups_remainder_groups_remainder + 1\n        val\
    \ paren_groups_remainder_groups_remainder_groups_remainder_groups = paren_groups_remainder_groups_remainder_groups_remainder_groups.take(paren_groups_remainder_groups_remainder_groups_remainder_count)\n\
    \        val paren_groups_remainder_groups_remainder_groups_remainder_groups_count\
    \ = paren_groups_remainder_groups_remainder_groups_remainder_groups.length\n \
    \       val paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder\
    \ = paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count\
    \ % 2\n        val paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count\
    \ = paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count\
    \ + 1\n        val paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups\
    \ = paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups.take(paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count)\n\
    \        val paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups_count\
    \ = paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups.length\n\
    \        val paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups_remainder\
    \ = paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count\
    \ % 2\n        val paren_groups_remainder_groups_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv4fjuorz.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv4fjuorz.scala:23:78\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remainder_groups_remainder_groups_remainder_groups\e[0m =\
    \ paren_groups_remainder_groups_remainder_groups_remainder_groups.take(paren_groups_remainder_groups_remainder_groups_remainder_count)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mparen_groups_remainder_groups_remainder_groups_remainder_groups\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpv4fjuorz.scala:26:94\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count\e\
    [0m = paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpv4fjuorz.scala:27:95 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups\e\
    [0m = paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_groups.take(paren_groups_remainder_groups_remainder_groups_remainder_groups_remainder_count)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                       ^\e[0m\n\e["
  stdout: ''
  timestamp: 1659795744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatMap(x => x.split(\"\
    \\\\)\"))\n        paren_groups_flat.filter(x => x.nonEmpty)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpul_780k9.scala:13:32\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_groups_flat.filter(\e\
    [36mx\e[0m => x.nonEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var close_braces = 0\n        var paren_group\
    \ = \"\"\n        var paren_group_open = false\n        var paren_group_close\
    \ = false\n        var paren_group_open_brace = false\n        var paren_group_close_brace\
    \ = false\n        var paren_group_open_brace_count = 0\n        var paren_group_close_brace_count\
    \ = 0\n        var paren_group_open_brace_count_in_paren_group = 0\n        var\
    \ paren_group_close_brace_count_in_paren_group = 0\n        var paren_group_open_brace_count_in_paren_group_with_paren_group\
    \ = 0\n        var paren_group_close_brace_count_in_paren_group_with_paren_group\
    \ = 0\n        var paren_group_open_brace_count_in_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        var paren_group_close_brace_count_in_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        var paren_group_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        var paren_group_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        var paren_group_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        var paren_group_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        var paren_group_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        var paren_group_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        var paren_group_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        var paren_group_close_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        var paren_group_open_brace_count_in_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group_with_paren_group\
    \ = 0\n        var paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpty2tnybj.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpty2tnybj.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpty2tnybj.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_remaining\
    \ = paren_groups_size\n        val paren_groups_remaining_list = mutable.ListBuffer[String]()\n\
    \        val paren_groups_remaining_list_size = paren_groups_remaining\n     \
    \   val paren_groups_remaining_list_remaining = paren_groups_remaining_list_size\n\
    \        val paren_groups_remaining_list_remaining_list = mutable.ListBuffer[String]()\n\
    \        val paren_groups_remaining_list_remaining_list_size = paren_groups_remaining_list_remaining\n\
    \        val paren_groups_remaining_list_remaining_list_remaining = mutable.ListBuffer[String]()\n\
    \        val paren_groups_remaining_list_remaining_list_remaining_size = paren_groups_remaining_list_remaining_list\n\
    \        val paren_groups_remaining_list_remaining_list_remaining_remaining =\
    \ mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remaining_remaining_size\
    \ = paren_groups_remaining_list_remaining_list_remaining\n        val paren_groups_remaining_list_remaining_list_remaining_remaining_remaining\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remaining_remaining_remaining\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remaining_remaining_remaining\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remaining_remaining_remaining\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remaining_remaining_remaining_remaining\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remaining_remaining_remaining_remaining\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remaining_remaining_remaining_remaining\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remaining_remaining_remaining_remaining\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remaining_remaining_remaining_remaining_remaining\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remaining_remaining_remaining_remaining_remaining\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remaining_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg50pb44l.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg50pb44l.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remaining_list_remaining_list_remaining_remaining_remaining\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remaining_list_remaining_list_remaining_remaining_remaining\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_groups_remaining_list_remaining_list_remaining_remaining_remaining\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg50pb44l.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_list_remaining_list_remaining_remaining_remaining\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remaining_list_remaining_list_remaining_remaining_remaining\
    \ is already defined as \e[33mvalue\e[0m \e[35mparen_groups_remaining_list_remaining_list_remaining_remaining_remaining\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg50pb44l.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_list_remaining_list_remaining_remaining_remaining\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remain"
  stdout: ''
  timestamp: 1659795744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Your code here\n        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        val paren_stack = mutable.Stack[String]()\n\
    \        val paren_open = mutable.Set[String]()\n        paren_string.foreach\
    \ { char =>\n            if (char == '(') {\n                paren_stack.push(char)\n\
    \            } else if (char == ')') {\n                paren_stack.pop\n    \
    \        } else if (char == ' ') {\n                paren_groups += paren_stack.toList\n\
    \                paren_stack.clear()\n            } else if (char == '(') {\n\
    \                paren_open.add(char)\n            } else if (char == ')') {\n\
    \                paren_open.remove(char)\n            }\n        }\n        paren_groups\
    \ += paren_stack.toList\n        paren_groups\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb2z2r1z9.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb2z2r1z9.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb2z2r1z9.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_count_with_parens\
    \ = paren_groups_count + 1\n        val paren_groups_count_without_parens = paren_groups_count\
    \ - 1\n        val paren_groups_count_with_parens_and_spaces = paren_groups_count_with_parens\
    \ + 1\n        val paren_groups_count_without_parens_and_spaces = paren_groups_count_without_parens\
    \ + 1\n        val paren_groups_count_with_parens_and_spaces_and_spaces = paren_groups_count_with_parens_and_spaces\
    \ + 1\n        val paren_groups_count_without_parens_and_spaces_and_spaces = paren_groups_count_without_parens_and_spaces\
    \ + 1\n        val paren_groups_count_with_parens_and_spaces_and_spaces_and_spaces\
    \ = paren_groups_count_with_parens_and_spaces_and_spaces + 1\n        val paren_groups_count_without_parens_and_spaces_and_spaces_and_spaces\
    \ = paren_groups_count_without_parens_and_spaces_and_spaces + 1\n        val paren_groups_count_with_parens_and_spaces_and_spaces_and_spaces_and_spaces\
    \ = paren_groups_count_with_parens_and_spaces_and_spaces_and_spaces + 1\n    \
    \    val paren_groups_count_without_parens_and_spaces_and_spaces_and_spaces_and_spaces\
    \ = paren_groups_count_without_parens_and_spaces_and_spaces_and_spaces + 1\n \
    \       val paren_groups_count_with_parens_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces\
    \ = paren_groups_count_with_parens_and_spaces_and_spaces_and_spaces_and_spaces\
    \ + 1\n        val paren_groups_count_without_parens_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces\
    \ = paren_groups_count_without_parens_and_spaces_and_spaces_and_spaces_and_spaces\
    \ + 1\n        val paren_groups_count_with_parens_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces\
    \ = paren_groups_count_with_parens_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces\
    \ + 1\n        val paren_groups_count_without_parens_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces\
    \ = paren_groups_count_without_parens_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces\
    \ + 1\n        val paren_groups_count_with_parens_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces\
    \ = paren_groups_count_with_parens_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces\
    \ + 1\n        val paren_groups_count_without_parens_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces\
    \ = paren_groups_count_without_parens_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces\
    \ + 1\n        val paren_groups_count_with_parens_and_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph0enzt2g.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmph0enzt2g.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptrqscvor.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptrqscvor.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_remainder\
    \ = paren_groups_count % 2\n        val paren_groups_remainder_count = paren_groups_count\
    \ - paren_groups_remainder\n        val paren_groups_remainder_strings = paren_groups.take(paren_groups_remainder_count)\n\
    \        val paren_groups_remainder_strings_count = paren_groups_remainder_strings.length\n\
    \        val paren_groups_remainder_strings_remainder = paren_groups_remainder_strings_count\
    \ % 2\n        val paren_groups_remainder_strings_remainder_count = paren_groups_remainder_strings_count\
    \ - paren_groups_remainder_strings_remainder\n        val paren_groups_remainder_strings_remainder_strings\
    \ = paren_groups_remainder_strings.take(paren_groups_remainder_strings_remainder_count)\n\
    \        val paren_groups_remainder_strings_remainder_strings_count = paren_groups_remainder_strings_remainder_strings.length\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder = paren_groups_remainder_strings_remainder_strings_count\
    \ % 2\n        val paren_groups_remainder_strings_remainder_strings_remainder_count\
    \ = paren_groups_remainder_strings_remainder_strings_count - paren_groups_remainder_strings_remainder_strings_remainder\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings\
    \ = paren_groups_remainder_strings_remainder_strings.take(paren_groups_remainder_strings_remainder_strings_remainder_count)\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings_count\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings.length\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings_count %\
    \ 2\n        val paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_count\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings_count -\
    \ paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings.take(paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9t_oipbn.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9t_oipbn.scala:27:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings\e\
    [0m = paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings.take(paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                           ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9t_oipbn.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659795743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_stack = mutable.Stack[String]()\n        paren_string.foreach(c\
    \ => {\n            if (c == '(') {\n                paren_group_stack push c\n\
    \            } else if (c == ')') {\n                paren_group_stack.pop\n \
    \           } else if (paren_group_stack.nonEmpty && paren_group_stack.peek()\
    \ == '(') {\n                paren_groups += paren_group_stack.peek()\n      \
    \          paren_group_stack.pop()\n            }\n        })\n        paren_groups\
    \ += paren_group_stack.peek()\n        paren_groups\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_wynoo3.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0_wynoo3.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_stack\e[0m =\
    \ mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_paren = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_paren_without_spaces\
    \ = paren_groups_with_paren.map(x => x.replace(\"  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces.map(x => x.replace(\"(\", \"\"))\n\
    \        val paren_groups_with_paren_without_spaces_without_paren_without_spaces\
    \ = paren_groups_with_paren_without_spaces_without_paren.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren.map(x\
    \ => x.replace(\"\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6wa8x0tv.scala:21:386 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces\e\
    [0m = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren.map(\e\
    [36mx\e[0m => x.replace(\"\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                                 unclosed string literal\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6wa8x0tv.scala:19:154 -----------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\e\
    [0m = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E00"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_open\
    \ = paren_groups_with_spaces_sorted.map(x => x + \"(\")\n        val paren_groups_with_spaces_sorted_with_close\
    \ = paren_groups_with_spaces_sorted.map(x => x + \")\")\n        val paren_groups_with_spaces_sorted_with_open_and_close\
    \ = paren_groups_with_spaces_sorted_with_open.zip(paren_groups_with_spaces_sorted_with_close)\n\
    \        val paren_groups_with_spaces_sorted_with_open_and_close_sorted = paren_groups_with_spaces_sorted_with_open_and_close.sortBy(x\
    \ => x._1)\n        val paren_groups_with_spaces_sorted_with_open_and_close_sorted_with_open\
    \ = paren_groups_with_spaces_sorted_with_open_and_close_sorted.map(x => x + \"\
    (\")\n        val paren_groups_with_spaces_sorted_with_open_and_close_sorted_with_close\
    \ = paren_groups_with_spaces_sorted_with_open_and_close_sorted.map(x => x + \"\
    )\")\n        val paren_groups_with_spaces_sorted_with_open_and_close_sorted_with_open_and_close\
    \ = paren_groups_with_spaces_sorted_with_open_and_close_sorted_with_open.zip(paren_groups_with_spaces_sorted_with_open_and_close_sorted_with_close)\n\
    \        val paren_groups_with_spaces_sorted_with_open_and_close_sorted_with_open_and_close_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_and_close_sorted_with_open_and_close.sortBy(x\
    \ => x._1)\n        val paren_groups_with_spaces_sorted_with_open_and_close_sorted_with_open_and_close_sorted_with_open\
    \ = paren_groups_with_spaces_sorted_with_open_and_close_sorted_with_open_and_close_sorted.map(x\
    \ => x + \"(\")\n        val paren_groups_with_spaces_sorted_with_open_and_close_sorted_with_open_and_close_sorted_with_close\
    \ = paren_groups_with_spaces_sorted_with_open_and_close_sorted_with_open_and_close_sorted.map(x\
    \ => x + \")\")\n        paren_groups_with_spaces_sorted_with_open_and_close_sorted_with_open_and_close_sorted_with_open_and_close.map(x\
    \ => x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_k08h53.scala:18:153 -----------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_and_close_sorted_with_open\e\
    [0m = paren_groups_with_spaces_sorted_with_open_and_close_sorted.map(\e[36mx\e\
    [0m => x + \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \                                                                            \
    \                                                 ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of (String, String), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg_k08h53.scala:19:154\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_open_and_close_sorted_with_close\e[0m\
    \ = paren_groups_with_spaces_sorted_with_open_and_close_sorted.map(\e[36mx\e[0m\
    \ => x + \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                                                ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of (String, String), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpg_k08h53.scala:21:196 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_and_close_sorted_with_open_and"
  stdout: ''
  timestamp: 1660013194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n        val paren_groups_with_close_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\")).filter(x => x != \"\")\n        paren_groups_with_close_braces.filter(x\
    \ => x.contains(\"(\")).map(x => x.replace(\"(\", \"\").replace(\")\", \"\")).filter(x\
    \ => x != \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1v15rptp.scala:14:120\
    \ -------------------\e[0m\e[0m\n\e[31m14 |\e[0m        paren_groups_with_close_braces.filter(\e\
    [36mx\e[0m => x.contains(\e[31m\"(\"\e[0m)).map(\e[36mx\e[0m => x.replace(\e[31m\"\
    (\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m)).filter(\e\
    [36mx\e[0m => x != \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"  \", \" \"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8v6u8y8p.scala:16:99 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp8v6u8y8p.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp8v6u8y8p.scala:18:129 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                          "
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_group_stack = mutable.Stack[String]()\n\
    \        val paren_group_buffer = mutable.ListBuffer[String]()\n        paren_groups.foreach(paren_group\
    \ => {\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren_group_buffer\
    \ += paren_group\n            paren_group_buffer += paren_group\n            paren\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfpys9nzm.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfpys9nzm.scala:70:0 ----------------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpys9nzm.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_stack\e[0m =\
    \ mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfpys9nzm.scala:13:33\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_buffer\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfpys9nzm.scala:60:12 ------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m            paren\n\e[31m\e[31m   |\e[0m            ^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: paren\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660013189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \" \"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqng8u2yu.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_\n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                          Not found: paren_groups_with_\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqng8u2yu.scala:24:5 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_open_braces = paren_groups.map(paren\
    \ => paren.split(\"\\\\)\").map(_.trim).toList)\n        val paren_groups_with_open_braces_with_closed_braces\
    \ = paren_groups_with_open_braces.map(paren => paren.map(_.trim))\n        val\
    \ paren_groups_with_open_braces_with_closed_braces_with_spaces = paren_groups_with_open_braces_with_closed_braces.map(paren\
    \ => paren.map(_.trim))\n        val paren_groups_with_open_braces_with_closed_braces_with_spaces_with_commas\
    \ = paren_groups_with_open_braces_with_closed_braces_with_spaces.map(paren =>\
    \ paren.map(_.trim))\n        val paren_groups_with_open_braces_with_closed_braces_with_spaces_with_commas_with_spaces\
    \ = paren_groups_with_open_braces_with_closed_braces_with_spaces_with_commas.map(paren\
    \ => paren.map(_.trim))\n        val paren_groups_with_open_braces_with_closed_braces_with_spaces_with_commas_with_spaces_with_spaces\
    \ = paren_groups_with_open_braces_with_closed_braces_with_spaces_with_commas_with_spaces.map(paren\
    \ => paren.map(_.trim))\n        val paren_groups_with_open_braces_with_closed_braces_with_spaces_with_commas_with_spaces_with_spaces_with_spaces\
    \ = paren_groups_with_open_braces_with_closed_braces_with_spaces_with_commas_with_spaces_with_spaces.map(paren\
    \ => paren.map(_.trim))\n        val paren_groups_with_open_braces_with_closed_braces_with_spaces_with_commas_with_spaces_with_spaces_with_spaces_with_spaces\
    \ = paren_groups_with_open_braces_with_closed_braces_with_spaces_with_commas_with_spaces_with_spaces_with_spaces.map(paren\
    \ => paren.map(_.trim))\n        val paren_groups_with_open_braces_with_closed_braces_with_spaces_with_commas_with_spaces_with_spaces_with_spaces_with_spaces_with_spaces\
    \ = paren_groups_with_open_braces_with_closed_braces_with_spaces_with_commas_with_spaces_with_spaces_with_spaces_with_spaces.map(paren\
    \ => paren.map(_.trim))\n        val paren_groups_with_open_braces_with_closed_braces_with_spaces_with_commas_with_spaces_with_spaces_with_spaces_with_spaces_with_spaces_with_spaces\
    \ = paren_groups_with_open_braces_with_closed_braces_with_spaces_with_commas_with_spaces_with_spaces_with_spaces_with_spaces_with_spaces.map(paren\
    \ => paren.\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_wmyan_q.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_wmyan_q.scala:22:5 ---------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_list\
    \ = paren_groups.map(x => x.length)\n        val paren_groups_size_list2 = paren_groups_size_list.map(x\
    \ => x.toInt)\n        val paren_groups_size_list3 = paren_groups_size_list2.map(x\
    \ => x.toInt)\n        val paren_groups_size_list4 = paren_groups_size_list3.map(x\
    \ => x.toInt)\n        val paren_groups_size_list5 = paren_groups_size_list4.map(x\
    \ => x.toInt)\n        val paren_groups_size_list6 = paren_groups_size_list5.map(x\
    \ => x.toInt)\n        val paren_groups_size_list7 = paren_groups_size_list6.map(x\
    \ => x.toInt)\n        val paren_groups_size_list8 = paren_groups_size_list7.map(x\
    \ => x.toInt)\n        val paren_groups_size_list9 = paren_groups_size_list8.map(x\
    \ => x.toInt)\n        val paren_groups_size_list10 = paren_groups_size_list9.map(x\
    \ => x.toInt)\n        val paren_groups_size_list11 = paren_groups_size_list10.map(x\
    \ => x.toInt)\n        val paren_groups_size_list12 = paren_groups_size_list11.map(x\
    \ => x.toInt)\n        val paren_groups_size_list13 = paren_groups_size_list12.map(x\
    \ => x.toInt)\n        val paren_groups_size_list14 = paren_groups_size_list13.map(x\
    \ => x.toInt)\n        val paren_groups_size_list15 = paren_groups_size_list14.map(x\
    \ => x.toInt)\n        val paren_groups_size_list16 = paren_groups_size_list15.map(x\
    \ => x.toInt)\n        val paren_groups_size_list17 = paren_groups_size_list16.map(x\
    \ => x.toInt)\n        val paren_groups_size_list18 = paren_groups_size_list17.map(x\
    \ => x.toInt)\n        val paren_groups_size_list19 = paren_groups_size_list18.map(x\
    \ => x.toInt)\n        val paren_groups_size_list20 = paren_groups_size_list19.map(x\
    \ => x.toInt)\n        val paren_groups_size_list21 = paren_groups_size_list20.map(x\
    \ => x.toInt)\n        val paren_groups_size_list22 = paren_groups_size_list21.map(x\
    \ => x.toInt)\n\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe26ia5wf.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").filter(_.nonEmpty)\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted =\
    \ paren_groups_with_spaces.sortBy(x => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"(\", \" ( \"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\")\"\
    , \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_1k4nnrj.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_1k4nnrj.scala:17:84\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x.length)\n\e[31m\e[31m   |\e[0m                               \
    \                                                     ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_1k4nnrj.scala:18:96\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp_1k4nnrj.scala:19:103 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x.length)\n\e[31m\e[31m   |\e[0m                               \
    \                                                                       "
  stdout: ''
  timestamp: 1660013194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"  \", \"\"))\n        val\
    \ paren_groups_with_open_braces_without_spaces_without_spaces = paren_groups_with_open_braces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxftgr7dr.scala:19:149 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpxftgr7dr.scala:20:164 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxftgr7dr.scala:21:179 -----------"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var close_braces = 0\n        var paren_group\
    \ = \"\"\n        for (c <- paren_string) {\n            if (c == '(') {\n   \
    \             open_braces += 1\n                paren_group += c\n           \
    \ } else if (c == ')') {\n                close_braces += 1\n                if\
    \ (open_braces == close_braces) {\n                    paren_groups += paren_group\n\
    \                    paren_group = \"\"\n                    open_braces = 0\n\
    \                    close_braces = 0\n                }\n            }\n    \
    \    }\n        if (open_braces != close_braces) {\n            paren_groups +=\
    \ paren_group\n        }\n        paren_groups.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmluo3v0c.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_in_balance\
    \ = paren_groups_size % 2\n        val paren_groups_size_in_balance = if (paren_groups_size_in_balance\
    \ == 0) paren_groups_size else paren_groups_size_in_balance + 1\n        val paren_groups_size_in_balance_list\
    \ = List(0, paren_groups_size_in_balance)\n        val paren_groups_size_in_balance_list_size\
    \ = paren_groups_size_in_balance_list.length\n        val paren_groups_size_in_balance_list_size_in_balance\
    \ = paren_groups_size_in_balance_list_size % 2\n        val paren_groups_size_in_balance_list_size_in_balance\
    \ = if (paren_groups_size_in_balance_list_size_in_balance == 0) paren_groups_size_in_balance_list_size\
    \ else paren_groups_size_in_balance_list_size_in_balance + 1\n        val paren_groups_size_in_balance_list_size_in_balance_list\
    \ = List(0, paren_groups_size_in_balance_list_size_in_balance)\n        val paren_groups_size_in_balance_list_size_in_balance_list_size\
    \ = paren_groups_size_in_balance_list_size_in_balance_list.length\n        val\
    \ paren_groups_size_in_balance_list_size_in_balance_list_size_in_balance = paren_groups_size_in_balance_list_size_in_balance_list_size\
    \ % 2\n        val paren_groups_size_in_balance_list_size_in_balance_list_size_in_balance\
    \ = if (paren_groups_size_in_balance_list_size_in_balance_list_size_in_balance\
    \ == 0) paren_groups_size_in_balance_list_size_in_balance_list_size else paren_groups_size_in_balance_list_size_in_balance_list_size_in_balance\
    \ + 1\n        val paren_groups_size_in_balance_list_size_in_balance_list_size_in_balance_list\
    \ = List(0, paren_groups_size_in_balance_list_size_in_balance_list_size_in_balance)\n\
    \        val paren_groups_size_in_balance_list_size_in_balance_list_size_in_balance_list_size_in_balance\
    \ = paren_groups_size_in_balance_list_size_in_balance_list_size_in_balance_list_size_in_balance_list.length\n\
    \        val paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7tf9jg7g.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7tf9jg7g.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_size_in_balance\e[0m = \e[33mif\e[0m (paren_groups_size_in_balance\
    \ == \e[31m0\e[0m) paren_groups_size \e[33melse\e[0m paren_groups_size_in_balance\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_in_balance is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_size_in_balance\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7tf9jg7g.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_in_balance_list_size_in_balance\e\
    [0m = \e[33mif\e[0m (paren_groups_size_in_balance_list_size_in_balance == \e[31m0\e\
    [0m) paren_groups_size_in_balance_list_size \e[33melse\e[0m paren_groups_size_in_balance_list_size_in_balance\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_in_balance_list_size_in_balance is already\
    \ defined as \e[33mvalue\e[0m \e[35mparen_groups_size_in_balance_list_size_in_balance\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7tf9jg7g.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_in_balance_list_size_in_balance_list_size_in_balance\e\
    [0m = \e[33mif\e[0m (paren_groups_size_in_"
  stdout: ''
  timestamp: 1660013192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_list\
    \ = paren_groups.map(x => x.split(\"\\\\)\").length)\n        val paren_groups_size_list\
    \ = paren_groups_size_list.zipWithIndex.filter(_._2 != paren_groups_size).toList\n\
    \        val paren_groups_size_list = paren_groups_size_list.map(x => x._1)\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = paren_groups_size_list.filter(x => paren_groups_size_list.contains(x))\n\
    \        val paren_groups_size_list = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6c8e9x0z.scala:34:36 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                    expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6c8e9x0z.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_size_list\e[0m = paren_groups_size_list.zipWithIndex.filter(_._2\
    \ != paren_groups_size).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6c8e9x0z.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size_list.map(\e[36mx\e[0m => x._1)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6c8e9x0z.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size_list.filter(\e[36mx\e[0m => paren_groups_size.contains(x))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote"
  stdout: ''
  timestamp: 1660013194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replaceAll(\"\
    \\\\)\",\"\"))\n        val paren_groups_with_open_braces_with_spaces = paren_groups_with_open_braces.map(x\
    \ => x.replaceAll(\"\\\\s+\",\"\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces_with_spaces.map(x => x.replaceAll(\"\\\\s\"\
    ,\"\"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets\
    \ = paren_groups_with_open_braces_without_spaces.map(x => x.replaceAll(\"\\\\\
    (\",\"\"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_with_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_brackets.map(x => x.replaceAll(\"\
    \\\\s+\",\"\"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_with_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_brackets_with_spaces.map(x\
    \ => x.replaceAll(\"\\\\s\",\"\"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_brackets_with_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s\",\"\"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_brackets_with_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s\",\"\"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_brackets_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s\",\"\"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_brackets_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s\",\"\"))\n        val paren_groups_with_open_braces_without_spaces_without_brackets_with_spaces_without_spaces_without_spaces_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnboi53il.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnboi53il.scala:23:5 ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"\
    )\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \" \"\
    )\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"\\\\\"\
    )\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \")\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \" \")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"\\\\\"\
    )\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \")\"\
    )\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \" \"\
    )\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \")\"\
    )\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \" \"\
    )\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \")\"\
    )\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \" \"\
    )\n        val paren_groups_flat25 = paren_groups_flat24.filterNot(_ == \"\\\\\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbdhqj4w2.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpbdhqj4w2.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbdhqj4w2.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbdhqj4w2.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbdhqj4w2.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbdhqj4w2.scala:18:62 -----------------------------------------\e\
    [0m\e[0m"
  stdout: ''
  timestamp: 1660013195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_paren = paren_groups.map(x => x.replace(\"\
    )\", \"\\\\)\"))\n        val paren_groups_with_paren_without_spaces = paren_groups_with_paren.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces.map(x => x.replace(\"(\", \"\"))\n\
    \        val paren_groups_with_paren_without_spaces_without_paren_without_spaces\
    \ = paren_groups_with_paren_without_spaces_without_paren.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_bhlq_95.scala:19:154 -----------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\e\
    [0m = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_bhlq_95.scala:20:183\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\e\
    [0m = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_with"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n        val paren_groups_with_close_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\"))\n        paren_groups_with_close_braces.filter(x => x != \"\").filter(x\
    \ => paren_groups_with_close_braces.contains(x)).distinct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaxfcw102.scala:14:116\
    \ -------------------\e[0m\e[0m\n\e[31m14 |\e[0m        paren_groups_with_close_braces.filter(\e\
    [36mx\e[0m => x != \e[31m\"\"\e[0m).filter(\e[36mx\e[0m => paren_groups_with_close_braces.contains(x)).distinct\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var open_brace_count\
    \ = 0\n        var closed_brace_count = 0\n        paren_string.foreach { c =>\n\
    \            if (c == '(') {\n                open_braces += 1\n             \
    \   open_brace_count += 1\n            } else if (c == ')') {\n              \
    \  closed_braces += 1\n                closed_brace_count += 1\n            }\
    \ else if (c == '(' && open_braces > 0 && closed_braces == 0) {\n            \
    \    paren_groups += paren_string.substring(open_brace_count, paren_string.length)\n\
    \                open_brace_count = 0\n                closed_brace_count = 0\n\
    \                open_braces -= 1\n            } else if (c == ')' && open_braces\
    \ == 0 && closed_braces > 0) {\n                paren_groups += paren_string.substring(closed_brace_count,\
    \ paren_string.length)\n                closed_brace_count = 0\n             \
    \   closed_braces -= 1\n            }\n        }\n        if (open_braces > 0\
    \ || closed_braces > 0) {\n            paren_groups += paren_string.substring(open_brace_count,\
    \ paren_string.length)\n        }\n        paren_groups.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphnguwraz.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size2\
    \ = paren_groups_size/2\n        val paren_groups_size3 = paren_groups_size/3\n\
    \        val paren_groups_size4 = paren_groups_size/4\n        val paren_groups_size5\
    \ = paren_groups_size/5\n        val paren_groups_size6 = paren_groups_size/6\n\
    \        val paren_groups_size7 = paren_groups_size/7\n        val paren_groups_size8\
    \ = paren_groups_size/8\n        val paren_groups_size9 = paren_groups_size/9\n\
    \        val paren_groups_size10 = paren_groups_size/10\n        val paren_groups_size11\
    \ = paren_groups_size/11\n        val paren_groups_size12 = paren_groups_size/12\n\
    \        val paren_groups_size13 = paren_groups_size/13\n        val paren_groups_size14\
    \ = paren_groups_size/14\n        val paren_groups_size15 = paren_groups_size/15\n\
    \        val paren_groups_size16 = paren_groups_size/16\n        val paren_groups_size17\
    \ = paren_groups_size/17\n        val paren_groups_size18 = paren_groups_size/18\n\
    \        val paren_groups_size19 = paren_groups_size/19\n        val paren_groups_size20\
    \ = paren_groups_size/20\n        val paren_groups_size21 = paren_groups_size/21\n\
    \        val paren_groups_size22 = paren_groups_size/22\n        val paren_groups_size23\
    \ = paren_groups_size/23\n        val paren_groups_size24 = paren_groups_size/24\n\
    \        val paren_groups_size25 = paren_groups_size/25\n        val paren_groups_size26\
    \ = paren_groups_size/26\n        val paren_groups_size27 = paren_groups_size/27\n\
    \        val paren_groups_size28 = paren_groups_size/28\n        val paren_groups_size29\
    \ = paren_groups_size/29\n        val paren_groups_size30 = paren_groups_size/30\n\
    \        val paren_groups_size31 = paren_groups_size/31\n        val paren_groups_size32\
    \ = paren_groups_size/32\n        val paren_groups_size33 = paren_groups_size/33\n\
    \        val paren_groups_size34 = paren_groups_size/34\n        val paren_groups_size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvyboxh1r.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvyboxh1r.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val closed_braces\
    \ = mutable.ListBuffer[String]()\n        val open_brace_count = 0\n        val\
    \ closed_brace_count = 0\n        paren_string.foreach { x =>\n            val\
    \ c = x\n            if (c == '(') {\n                open_brace_count += 1\n\
    \                open_braces += c\n            } else if (c == ')') {\n      \
    \          closed_brace_count += 1\n                closed_braces += c\n     \
    \       } else if (c == ' ') {\n                if (open_brace_count == closed_brace_count)\
    \ {\n                    paren_groups += open_braces.toList\n                \
    \    open_braces.clear()\n                    closed_braces.clear()\n        \
    \            open_brace_count = 0\n                    closed_brace_count = 0\n\
    \                } else {\n                    open_braces += c\n            \
    \    }\n            }\n        }\n        if (open_brace_count != closed_brace_count)\
    \ {\n            paren_groups += open_braces.toList\n        }\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpffmgc6yc.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpffmgc6yc.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpffmgc6yc.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mclosed_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpffmgc6yc.scala:19:33 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                open_brace_count += \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \    value += is not a member of Int - did you mean open_brace_count.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpffmgc6yc.scala:22:35 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                closed_brace_count += \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \   value += is not a member of Int - did you mean closed_brace_count.!=?\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpffmgc6yc.scala:29:37 -----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    open_brace_count = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m   "
  stdout: ''
  timestamp: 1660013194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces.filter(x => x.contains(\")\"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed = paren_groups_with_spaces_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed.map(x => x.replace(\"\
    )\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\")\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\")\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\")\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\")\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(x\
    \ => x.replace(\")\", \" \"))\n        val paren_groups_with_spaces_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1pr43waj.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1pr43waj.scala:20:106\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1pr43waj.scala:21:114 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed_trimmed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1pr43waj.scala:22:130\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_trimmed_tri"
  stdout: ''
  timestamp: 1660013194
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_reversed = paren_groups_with_spaces.reverse\n\
    \        val paren_groups_with_spaces_reversed_with_spaces = paren_groups_with_spaces_reversed.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces.reverse\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces.reverse\n\
    \        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces.map(x\
    \ => x.replace(\"(\", \" ( \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\
    \ = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpz6bq0fne.scala:22:287 --------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpz6bq0fne.scala:18:102 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpz6bq0fne.scala:19:111 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed\e\
    [0m = paren_groups_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed.map(\e\
    [36mx\e[0m => x.replace(\e"
  stdout: ''
  timestamp: 1660013192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_size = mutable.ListBuffer[Int]()\n        paren_string.split(\"\
    \\\\(\").foreach(x => {\n            val paren_group_size = paren_group_size.updated(x.length,\
    \ 1)\n            paren_groups += x\n        })\n        paren_group_size.foreach(x\
    \ => {\n            if (paren_group_size.last(x) == paren_group_size.last(x -\
    \ 1)) {\n                paren_groups += \"()\"\n            } else {\n      \
    \          paren_groups += \"(\" + paren_group_size.last(x) + \")\"\n        \
    \    }\n        })\n        paren_groups.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74il559c.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74il559c.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var paren_group\
    \ = \"\"\n        for (c <- paren_string) {\n            if (c == '(') {\n   \
    \             open_braces += 1\n            } else if (c == ')') {\n         \
    \       closed_braces += 1\n            } else if (c == '(' && closed_braces ==\
    \ open_braces) {\n                paren_group += c\n            } else if (c ==\
    \ '(' && closed_braces > open_braces) {\n                paren_group += c\n  \
    \              paren_groups += paren_group\n                paren_group = \"\"\
    \n                open_braces = 0\n            } else if (c == ')' && open_braces\
    \ > closed_braces) {\n                paren_group += c\n                paren_groups\
    \ += paren_group\n                paren_group = \"\"\n                closed_braces\
    \ = 0\n            }\n        }\n        if (paren_group.length > 0) {\n     \
    \       paren_groups += paren_group\n        }\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps91s24ab.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_ ==\
    \ \"(\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_ == \"\
    )\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_ == \" \"\
    )\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_ == \"\\\\\"\
    )\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_ == \"(\")\n\
    \        val paren_groups_flat11 = paren_groups_flat10.filterNot(_ == \")\")\n\
    \        val paren_groups_flat12 = paren_groups_flat11.filterNot(_ == \" \")\n\
    \        val paren_groups_flat13 = paren_groups_flat12.filterNot(_ == \"\\\\\"\
    )\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_ == \")\"\
    )\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_ == \" \"\
    )\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_ == \")\"\
    )\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_ == \" \"\
    )\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_ == \"\\\\\
    \")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_ == \"(\"\
    )\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_ == \")\"\
    )\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_ == \" \"\
    )\n        val paren_groups_flat25 = paren_groups_flat24.filterNot(_ == \"\\\\\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbdhqj4w2.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpbdhqj4w2.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbdhqj4w2.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbdhqj4w2.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbdhqj4w2.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbdhqj4w2.scala:18:62 -----------------------------------------\e\
    [0m\e[0m"
  stdout: ''
  timestamp: 1660013195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var paren_open_braces = 0\n        var paren_closed_braces = 0\n    \
    \    var paren_group = \"\"\n        var paren_group_open_braces = 0\n       \
    \ var paren_group_closed_braces = 0\n        var paren_group_char = \"\"\n   \
    \     var paren_group_char_open_braces = 0\n        var paren_group_char_closed_braces\
    \ = 0\n        var paren_group_char_char = \"\"\n        var paren_group_char_char_open_braces\
    \ = 0\n        var paren_group_char_char_closed_braces = 0\n        var paren_group_char_char_char\
    \ = \"\"\n        var paren_group_char_char_char_open_braces = 0\n        var\
    \ paren_group_char_char_char_closed_braces = 0\n        var paren_group_char_char_char_char\
    \ = \"\"\n        var paren_group_char_char_char_char_open_braces = 0\n      \
    \  var paren_group_char_char_char_char_closed_braces = 0\n        var paren_group_char_char_char_char_char\
    \ = \"\"\n        var paren_group_char_char_char_char_char_open_braces = 0\n \
    \       var paren_group_char_char_char_char_char_closed_braces = 0\n        var\
    \ paren_group_char_char_char_char_char_char = \"\"\n        var paren_group_char_char_char_char_char_char_open_braces\
    \ = 0\n        var paren_group_char_char_char_char_char_char_closed_braces = 0\n\
    \        var paren_group_char_char_char_char_char_char_char = \"\"\n        var\
    \ paren_group_char_char_char_char_char_char_char_open_braces = 0\n        var\
    \ paren_group_char_char_char_char_char_char_char_closed_braces = 0\n        var\
    \ paren_group_char_char_char_char_char_char_char_char = \"\"\n        var paren_group_char_char_char_char_char_char_char_char_open_braces\
    \ = 0\n        var paren_group_char_char_char_char_char_char_char_char_closed_braces\
    \ = 0\n        var paren_group_char_char_char_char_char_char_char_char_char =\
    \ \"\"\n        var paren_group_char_char_char_char_char_char_char_char_char_open_braces\
    \ = 0\n        var paren_group_char_char_char_char_char_char_char_char_char_closed_braces\
    \ = 0\n        var paren_group_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n        var paren_group_char_char_char_char_char_char_char_char_char_char_open_braces\
    \ = 0\n        var paren_group_char_char_char_char_char_char_char_char_char_char_closed_braces\
    \ = 0\n        var paren_group_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n        var paren_group_char_char_char_char_char_char_char_char_char_char_open_braces\
    \ = 0\n        var paren_group_char_char_char_char_char_char_char_char_char_char_char_close\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpttfy7pwz.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpttfy7pwz.scala:48:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_char_char_char_char_char_char_char_char_char_char_open_braces\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_char_char_char_char_char_char_char_char_char_char_open_braces\
    \ is already defined as \e[33mvariable\e[0m \e[35m\n\e[31m   |\e[0m  paren_group_char_char_char_char_char_char_char_char_char_char_open_braces\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpttfy7pwz.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpttfy7pwz.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660013201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n        val paren_groups_with_closed_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\"))\n        val paren_groups_with_open_braces_not_nested = paren_groups_with_closed_braces.filter(x\
    \ => paren_groups_with_closed_braces.indexOf(x) == -1)\n        val paren_groups_with_closed_braces_not_nested\
    \ = paren_groups_with_open_braces_not_nested.filter(x => paren_groups_with_open_braces_not_nested.indexOf(x)\
    \ == -1)\n        paren_groups_with_open_braces_not_nested.map(x => x.replace(\"\
    (\", \"\").replace(\")\", \"\"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4buyldui.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        paren_groups_with_open_braces_not_nested.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\")\"\
    \e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013202
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_with_brackets\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"[\").replace(\"\
    )\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets.map(x => x.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets.map(x => x.replace(\"\
    (\", \"[\").replace(\")\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"(\").replace(\"]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"(\", \"[\").replace(\")\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"(\").replace(\"]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnsl0kz8q.scala:18:142 -----------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"[\"\e[0m, \e[31m\"(\"\e[0m).replace(\e[31m\"]\"\
    \e[0m, \e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnsl0kz8q.scala:19:170\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnsl0kz8q.scala:20:5\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660013204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_flat = paren_groups_with_spaces_trimmed.flatMap(x\
    \ => x.split(\" \"))\n        val paren_groups_with_spaces_trimmed_flat_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat.map(x => x.trim())\n        val paren_groups_with_spaces_trimmed_flat_trimmed_flat\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed.flatMap(x => x.split(\" \"))\n\
    \        val paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed = paren_groups_with_spaces_trimmed_flat_trimmed_flat.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed.flatMap(x => x.split(\"\
    \ \"))\n        val paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat.map(x => x.trim())\n\
    \        val paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed.flatMap(x\
    \ => x.split(\" \"))\n        val paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed\
    \ = paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9x647_44.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9x647_44.scala:21:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed\e\
    [0m = paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed.map(\e\
    [36mx\e[0m => x.trim())\n\e[31m\e[31m   |\e[0m                               \
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp9x647_44.scala:22:104 --------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat\e\
    [0m = paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat.map(\e\
    [36mx\e[0m => x.trim())\n\e[31m\e[31m   |\e[0m                               \
    \                                                                         ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp9x647_44.scala:23:112 --------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed\e\
    [0m = paren_groups_with_spaces_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed_flat_trimmed.map(\e\
    [36mx\e[0m => x.trim())\n\e[31m\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660013206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        paren_groups_flat4.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi9p47vuw.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpi9p47vuw.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpi9p47vuw.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi9p47vuw.scala:16:27\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        paren_groups_flat4.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_parens = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"()\"))\n        val paren_groups_with_parens_without_spaces\
    \ = paren_groups_with_parens.map(x => x.replace(\"  \", \"\"))\n        paren_groups_with_parens_without_spaces.filter(x\
    \ => x.contains(\"()\"))\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppf1kww8c.scala:14:54\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        paren_groups_with_parens_without_spaces.filter(\e\
    [36mx\e[0m => x.contains(\e[31m\"()\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_parens = paren_groups.map(x => x.replace(\"\
    )\", \"\\\\)\"))\n        val paren_groups_with_parens_with_brackets = paren_groups_with_parens.map(x\
    \ => x.replace(\"(\", \"\\\\(\"))\n        val paren_groups_with_parens_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets.map(x => x.replace(\"{\", \"\\\\{\"\
    ))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets.map(x => x.replace(\"\
    }\", \"\\\\}\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets.map(x =>\
    \ x.replace(\"[\", \"\\\\[\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"]\", \"\\\\]\"))\n        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \        val paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_bra\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptqn3q9np.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptqn3q9np.scala:18:123\
    \ --------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_parens_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptqn3q9np.scala:20:5 ---------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013203
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Initialize a mutable list to hold our\
    \ result\n        var paren_groups: List[String] = Nil\n        // Iterate over\
    \ each character in the string\n        for (c <- paren_string) {\n          \
    \  // If the character is a left paren, add it to the list\n            if (c\
    \ == '(') {\n                paren_groups = paren_groups ::: List(c)\n       \
    \     }\n            // If the character is a right paren, remove the last element\
    \ from the list\n            else if (c == ')') {\n                paren_groups\
    \ = paren_groups.tail\n            }\n            // If the character is a space,\
    \ ignore it\n            else if (c == ' ') {\n            }\n            // If\
    \ the character is a non-left paren, ignore it\n            else {\n         \
    \   }\n        }\n        // Return the list of paren groups\n        return paren_groups\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_fyep09.scala:17:31\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                paren_groups\
    \ = paren_groups ::: List(c)\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      Found:    List[Matchable]\n\e[31m   |\e[0m                            \
    \   Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013204
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_closed_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\"))\n        val\
    \ paren_groups_with_open_braces_with_brackets = paren_groups_with_open_braces.map(x\
    \ => x.replace(\"(\", \"[\").replace(\")\", \"]\"))\n        val paren_groups_with_closed_braces_with_brackets\
    \ = paren_groups_with_closed_braces.map(x => x.replace(\"[\", \"(\").replace(\"\
    ]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_and_closed_braces\
    \ = paren_groups_with_open_braces.zip(paren_groups_with_closed_braces).map(x =>\
    \ x._1 + \"(\" + x._2 + \")\")\n        val paren_groups_with_open_braces_with_brackets_and_closed_braces_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets.zip(paren_groups_with_closed_braces_with_brackets).map(x\
    \ => x._1 + \"[\" + x._2 + \"]\")\n        paren_groups_with_open_braces_with_brackets_and_closed_braces_with_brackets.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqxy_49zu.scala:21)\n\tat Problem.main(tmpqxy_49zu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_set = paren_groups.toSet\n        val paren_groups_list_without_duplicates\
    \ = paren_groups.toList.distinct\n        val paren_groups_list_without_duplicates_set\
    \ = paren_groups_list_without_duplicates.toSet\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set.size\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_without_duplicates_set_size.toInt\n        val paren_groups_list_without_duplicates_set_size\
    \ = paren_groups_list_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxf1tdn07.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_set_size\e\
    [0m = paren_groups_list_without_duplicates_set_size.toInt\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_without_duplicates_set_size is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_list_without_duplicates_set_size\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxf1tdn07.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_set_size\e\
    [0m = paren_groups_list_without_duplicates_set_size.toInt\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_without_duplicates_set_size is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_list_without_duplicates_set_size\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxf1tdn07.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_list_without_duplicates_set_size\e\
    [0m = paren_groups_list_without_duplicates_set_size.toInt\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_list_without_duplicates_set_size is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_groups_list_without_duplicates_set_size\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxf1tdn07.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m "
  stdout: ''
  timestamp: 1660013205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Initialize a stack to store all the\
    \ parenthesis groups\n        var paren_stack : Stack[String] = new Stack[String]()\n\
    \        // Initialize a list to store the result\n        var result : List[String]\
    \ = Nil\n        // Iterate through all the characters in the string\n       \
    \ for (c <- paren_string.toCharArray) {\n            // If current character is\
    \ a left parenthesis, push it into the stack\n            if (c == '(') {\n  \
    \              paren_stack.push(c)\n            }\n            // If current character\
    \ is a right parenthesis, pop it from the stack\n            else if (c == ')')\
    \ {\n                // If stack is empty, return empty list\n               \
    \ if (paren_stack.isEmpty) {\n                    return Nil\n               \
    \ }\n                // Otherwise, pop from the stack\n                else {\n\
    \                    paren_stack.pop()\n                }\n            }\n   \
    \         // If current character is a space, ignore it\n            else if (c\
    \ == ' ') {\n            }\n            // If current character is a new line,\
    \ ignore it\n            else if (c == '\\n') {\n            }\n            //\
    \ If current character is a comma, ignore it\n            else if (c == ',') {\n\
    \            }\n            // If current character is a closing brace, ignore\
    \ it\n            else if (c == '}') {\n                // If stack is empty,\
    \ return empty list\n                if (paren_stack.isEmpty) {\n            \
    \        return Nil\n                }\n                // Otherwise, pop from\
    \ the stack\n                else {\n                    paren_stack.pop()\n \
    \               }\n            }\n            // If current character is a opening\
    \ brace, ignore it\n            else if (c == '{') {\n                // If stack\
    \ is empty, return empty list\n                if (paren_stack.isEmpty) {\n  \
    \                  return Nil\n                }\n                // Otherwise,\
    \ pop from the stack\n                else {\n                    paren_stack.pop()\n\
    \                }\n            }\n            // If current character is a letter,\
    \ ignore it\n            else if (Character.isLetter(c)) {\n            }\n  \
    \          // If current character is a number, ignore it\n            else if\
    \ (Character.isDigit(c)) {\n            }\n            // If current character\
    \ is a special character, ignore it\n            else if (Character.isLetterOrDigit(c))\
    \ {\n            }\n            // If current character is a space, ignore it\n\
    \            else if (c == ' ') {\n            }\n            // If current character\
    \ is a new line, ignore it\n            else if (c == '\\n') {\n            }\n\
    \            // If current character is a comma, ignore it\n            else if\
    \ (c == ',') {\n            }\n            // If current character is a closing\
    \ brace, ignore it\n            else if (c == '}') {\n                // If stack\
    \ is empty, return empty list\n                if (paren_stack.isEmpty) {\n  \
    \                  return Nil\n                }\n                // Otherwise,\
    \ pop from the stack\n                else {\n                    paren_stack.pop()\n\
    \                }\n            }\n            // If current character is a opening\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxxyxwdsj.scala:102:0 ---------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxxyxwdsj.scala:19:33\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                paren_stack.push(c)\n\
    \e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    (c : Char)\n\e[31m   |\e[0m      \
    \                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxxyxwdsj.scala:101:1 --------------------\e\
    [0m\e[0m\n\e[31m101 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e[0m\n\e[31m    |\e[0m Found:\
    \    Unit\n\e[31m    |\e[0m Required: List[String]\n\e[31m    |\e[0m\n\e[31m \
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpxxyxwdsj.scala:94:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m94 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660013206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_close_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\"))\n        val paren_groups_with_open_braces_not_nested = paren_groups_with_close_braces.filter(x\
    \ => !x.contains(\"(\"))\n        val paren_groups_with_close_braces_not_nested\
    \ = paren_groups_with_open_braces_not_nested.filter(x => !x.contains(\")\"))\n\
    \        paren_groups_with_close_braces_not_nested.map(x => x.replace(\"(\", \"\
    \").replace(\")\", \"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe09swlad.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        paren_groups_with_close_braces_not_nested.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\")\"\
    \e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_paren = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_paren_without_spaces\
    \ = paren_groups_with_paren.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n       \
    \ val paren_groups_with_paren_without_spaces_without_duplicates = paren_groups_with_paren_without_spaces.distinct\n\
    \        val paren_groups_with_paren_without_spaces_without_duplicates_with_paren\
    \ = paren_groups_with_paren_without_spaces_without_duplicates.map(x => x.replace(\"\
    (\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces\
    \ = paren_groups_with_paren_without_spaces_without_duplicates_with_paren.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates\
    \ = paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces.distinct\n\
    \        val paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren\
    \ = paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren_without_spaces\
    \ = paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates\
    \ = paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates.distinct\n\
    \        val paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren\
    \ = paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyz76_pwa.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyz76_pwa.scala:20:162\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates\e\
    [0m = paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates.distinct\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyz76_pwa.scala:21:173 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren\e\
    [0m = paren_groups_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates_with_paren_without_spaces_without_duplicates.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"(\"\e[0m).replace(\e[31m\")\"\
    \e[0m, \e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\")\", \"\").replace(\"\
    (\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqruvtemq.scala:19:144 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"(\"\
    \e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpqruvtemq.scala:20:159 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\"(\"\
    \e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \                                                     ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqruvt"
  stdout: ''
  timestamp: 1660013206
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).filter(_.nonEmpty)\n        val paren_groups_with_open_braces\
    \ = paren_groups.map(paren => paren.split(\"\\\\)\").map(_.trim).filter(_.nonEmpty))\n\
    \        val paren_groups_with_open_braces_without_spaces = paren_groups_with_open_braces.map(paren\
    \ => paren.map(_.trim))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates\
    \ = paren_groups_with_open_braces_without_spaces.distinct\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates.map(paren\
    \ => paren.map(_.trim).mkString(\"(\", \")\"))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces.map(paren\
    \ => paren.map(_.trim).mkString(\"(\", \")\"))\n        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces.distinct\n\
    \        val paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces\
    \ = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates.map(paren\
    \ => paren.map(_.trim).mkString(\"(\", \")\"))\n        paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces_without_duplicates_with_open_braces.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyyuulflp.scala:15:199\
    \ -------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_duplicates.map(\e[36mparen\e\
    [0m => paren.map(_.trim).mkString(\e[31m\"(\"\e[0m, \e[31m\")\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                                                           ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (String,\
    \ String)\n\e[31m   |\e[0m                                              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyyuulflp.scala:16:210\
    \ -----------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces.map(\e\
    [36mparen\e[0m => paren.map(_.trim).mkString(\e[31m\"(\"\e[0m, \e[31m\")\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       value map is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpyyuulflp.scala:16:241 ----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_duplicates_with_open_braces.map(\e\
    [36mparen\e[0m => paren.map(_.trim).mkString(\e[31m\"(\"\e[0m, \e[31m\")\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          "
  stdout: ''
  timestamp: 1660013207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.filterNot(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxq9gdepn.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxq9gdepn.scala:13:68\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_flat2\e[0m = paren_groups_flat.filterNot(\e[36mx\e[0m => x.contains(\e\
    [31m\"(\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                  value contains is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpxq9gdepn.scala:14:69 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value contains is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxq9gdepn.scala:15:69 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(\e[36mx\e[0m => x.contains(\e[31m\")\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \ value contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxq9gdepn.scala:16:69 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m = paren_groups_flat4.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\"(\"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value contains is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxq9gdepn.scala:17:69 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filte"
  stdout: ''
  timestamp: 1660013209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Use a mutable collection to store the\
    \ result\n        var result: List[String] = Nil\n        // Use a mutable collection\
    \ to store the current group\n        var group: List[String] = Nil\n        //\
    \ Iterate through the string\n        for (c <- paren_string) {\n            //\
    \ If current character is a left parenthesis, add it to the current group\n  \
    \          if (c == '(') {\n                group = group :+ c\n            }\n\
    \            // If current character is a right parenthesis, add it to the current\
    \ group\n            else if (c == ')') {\n                // If the current group\
    \ is empty, add it to the result\n                if (group.isEmpty) {\n     \
    \               result = result :+ group\n                }\n                //\
    \ Otherwise, add the current group to the result\n                else {\n   \
    \                 result = result :+ group\n                }\n              \
    \  // Clear the current group\n                group = Nil\n            }\n  \
    \          // If current character is a space, ignore it\n            else if\
    \ (c == ' ') {\n            }\n            // If current character is a new line,\
    \ ignore it\n            else if (c == '\\n') {\n            }\n            //\
    \ If current character is a comma, ignore it\n            else if (c == ',') {\n\
    \            }\n            // If current character is a colon, ignore it\n  \
    \          else if (c == ':') {\n            }\n            // If current character\
    \ is a closing brace, ignore it\n            else if (c == '}') {\n          \
    \  }\n            // If current character is a opening brace, ignore it\n    \
    \        else if (c == '{') {\n            }\n            // If current character\
    \ is a closing parenthesis, ignore it\n            else if (c == '(') {\n    \
    \        }\n            // If current character is a opening parenthesis, ignore\
    \ it\n            else if (c == '[') {\n            }\n            // If current\
    \ character is a closing square bracket, ignore it\n            else if (c ==\
    \ '[') {\n            }\n            // If current character is a closing curly\
    \ bracket, ignore it\n            else if (c == '{') {\n            }\n      \
    \      // If current character is a closing square bracket, ignore it\n      \
    \      else if (c == '[') {\n            }\n            // If current character\
    \ is a closing curly bracket, ignore it\n            else if (c == '{') {\n  \
    \          }\n            // If current character is a closing square bracket,\
    \ ignore it\n            else if (c == '[') {\n            }\n            // If\
    \ current character is a closing curly bracket, ignore it\n            else if\
    \ (c == '{') {\n            }\n            // If current character is a closing\
    \ square bracket, ignore it\n            else if (c == '[') {\n            }\n\
    \            // If current character is a closing curly bracket, ignore it\n \
    \           else if (c == '{') {\n            }\n            // If current character\
    \ is a closing square bracket, ignore it\n            else if (c == '[') {\n \
    \           }\n            // If current character is a closing curly bracket,\
    \ ignore \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb266axi2.scala:95:0 ----------------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb266axi2.scala:19:33\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                group = group\
    \ :+ c\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m \
    \  |\e[0m                                 Found:    (c : Char)\n\e[31m   |\e[0m\
    \                                 Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb266axi2.scala:25:39 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    result = result :+ group\n\e[31m\e\
    [31m   |\e[0m                                       ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                       Found:    (group : List[String])\n\e[31m\
    \   |\e[0m                                       Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb266axi2.scala:29:39 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    result = result :+ group\n\e[31m\e\
    [31m   |\e[0m                                       ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                       Found:    (group : List[String])\n\e[31m\
    \   |\e[0m                                       Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb266axi2.scala:94:1 ---------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpb266axi2.scala:87:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m87 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n"
  stdout: ''
  timestamp: 1660013207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_reversed = paren_groups_with_spaces_sorted.reverse\n\
    \        val paren_groups_with_spaces_sorted_reversed_with_spaces = paren_groups_with_spaces_sorted_reversed.map(x\
    \ => x + \" \")\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces.sortBy(x => x)\n    \
    \    val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_sorted.map(x => x + \"\
    \ \")\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \")\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \")\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \" \")\n        val paren_groups_with_spaces_sorted_reversed_with_spaces_sorted_with_spaces_sorted_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1u121517.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp1u121517.scala:25:5 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_count = paren_groups.length\n        val paren_groups_with_paren_groups\
    \ = paren_groups.map(x => x.split(\"\\\\)\"))\n        val paren_groups_with_paren_group_count\
    \ = paren_groups_with_paren_groups.length\n        val paren_groups_with_paren_groups_with_paren_groups\
    \ = paren_groups_with_paren_groups.map(x => x.split(\"\\\\)\\\\(\"))\n       \
    \ val paren_groups_with_paren_groups_with_paren_group_count = paren_groups_with_paren_groups_with_paren_groups.length\n\
    \        val paren_groups_with_paren_groups_with_paren_groups_with_paren_groups\
    \ = paren_groups_with_paren_groups_with_paren_groups.map(x => x.split(\"\\\\)\\\
    \\(()\\\\(\"))\n        val paren_groups_with_paren_groups_with_paren_groups_with_paren_group_count\
    \ = paren_groups_with_paren_groups_with_paren_groups_with_paren_groups.length\n\
    \        val paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups\
    \ = paren_groups_with_paren_groups_with_paren_groups_with_paren_groups.map(x =>\
    \ x.split(\"\\\\)\\\\(()\\\\(()\\\\(\"))\n        val paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_group_count\
    \ = paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups.length\n\
    \        val paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_group_count\
    \ = paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups.length\n\
    \        val paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_group_count\
    \ = paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups.length\n\
    \        val paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_group_count\
    \ = paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups.length\n\
    \        val paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_group_count\
    \ = paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy8u_8fsx.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_group_count\e\
    [0m = paren\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_group_count\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_groups_with_paren_group_count\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpy8u_8fsx.scala:15:105 -----------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_groups_with_paren_groups\e\
    [0m = paren_groups_with_paren_groups.map(\e[36mx\e[0m => x.split(\e[31m\"\\\\\
    )\\\\(\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                                                                ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m     value split is not a member of Array[String] - did you mean\
    \ x.wait?\n\e[31m\e[31m-- Error: /tmp/tmpy8u_8fsx.scala:15:121 ----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_groups_with_paren_groups\e\
    [0m = paren_groups_with_paren_groups.map(\e[36mx\e[0m => x.split(\e[31m\"\\\\\
    )\\\\(\"\e[0m))\n\e[31m\e[31m   |\e[0m                                       \
    \                                                                            \
    \      ^\e[0m\n\e[31m   |\e[0m                                          No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                where:    B is a "
  stdout: ''
  timestamp: 1660013209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\").replaceAll(\"\\\\s\", \"\"))\n        paren_group_strings.filter(x\
    \ => x.nonEmpty)\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpafsaoytj.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => x.nonEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => x != \"\")\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces.filter(x => x != \"\")\n    \
    \    val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces.filter(x => x\
    \ != \"\")\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => x != \"\")\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => x != \"\")\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => x != \"\")\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => x != \"\")\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(x\
    \ => x != \"\")\n        val paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpsopu9lnl.scala:19:149 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(\e\
    [36mx\e[0m => x != \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpsopu9lnl.scala:20:164 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.filter(\e\
    [36mx\e[0m => x != \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpsopu9lnl.scala:21:179 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m  "
  stdout: ''
  timestamp: 1660013208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_open_braces = paren_groups.filter(_.contains(\"\
    {\"))\n        val paren_groups_with_close_braces = paren_groups.filter(_.contains(\"\
    }\"))\n        val paren_groups_with_nested_parens = paren_groups.filter(_.contains(\"\
    (\"))\n        val paren_groups_with_nested_parens_with_brackets = paren_groups.filter(_.contains(\"\
    [\"))\n        val paren_groups_with_nested_parens_with_brackets_with_braces =\
    \ paren_groups.filter(_.contains(\"{\"))\n        val paren_groups_with_nested_parens_with_brackets_with_braces_with_brackets\
    \ = paren_groups.filter(_.contains(\"[\"))\n        val paren_groups_with_nested_parens_with_brackets_with_braces_with_brackets_with_braces\
    \ = paren_groups.filter(_.contains(\"{\"))\n        val paren_groups_with_nested_parens_with_brackets_with_braces_with_brackets_with_braces_with_brackets\
    \ = paren_groups.filter(_.contains(\"[\"))\n        val paren_groups_with_nested_parens_with_brackets_with_braces_with_brackets_with_braces_with_brackets_with_braces\
    \ = paren_groups.filter(_.contains(\"{\"))\n        val paren_groups_with_nested_parens_with_brackets_with_braces_with_brackets_with_braces_with_brackets_with_braces_with_brackets\
    \ = paren_groups.filter(_.contains(\"[\"))\n        val paren_groups_with_nested_parens_with_brackets_with_braces_with_brackets_with_braces_with_brackets_with_braces_with_brackets_with_braces\
    \ = paren_groups.filter(_.contains(\"{\"))\n        val paren_groups_with_nested_parens_with_brackets_with_braces_with_brackets_with_braces_with_brackets_with_braces_with_brackets_with_braces_with_brackets\
    \ = paren_groups.filter(_.contains(\"[\"))\n        val paren_groups_with_nested_parens_with_brackets_with_braces_with_brackets_with_braces_with_brackets_with_braces_with_brackets_with_braces_with_brackets_with_braces\
    \ = paren_groups.filter(\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpwr91bksx.scala:24:196 --------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_nested_parens_with_brackets_with_braces_with_brackets_with_braces_with_brackets_with_braces_with_brackets_with_braces_with_brackets_with_braces\e\
    [0m = paren_groups.filter(\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                                                                            \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwr91bksx.scala:25:5 ---------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\")\n        paren_groups_flat5.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps_ya4u45.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmps_ya4u45.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmps_ya4u45.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmps_ya4u45.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps_ya4u45.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        paren_groups_flat5.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660013212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\")\n        paren_groups_flat5.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps_ya4u45.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmps_ya4u45.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmps_ya4u45.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmps_ya4u45.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps_ya4u45.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        paren_groups_flat5.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660013212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).filter(_.nonEmpty)\n        val paren_groups_with_open_braces\
    \ = paren_groups.map(paren_group => paren_group.replaceAll(\"\\\\)\", \"\\\\)\\\
    \\(\"))\n        val paren_groups_with_close_braces = paren_groups_with_open_braces.map(paren_group\
    \ => paren_group.replaceAll(\"\\\\(\", \"\\\\)\\\\(\"))\n        val paren_groups_with_open_braces_and_close_braces\
    \ = paren_groups_with_open_braces.zip(paren_groups_with_close_braces)\n      \
    \  val paren_groups_with_open_braces_and_close_braces_with_brackets = paren_groups_with_open_braces_and_close_braces.map(paren_group\
    \ => paren_group.replaceAll(\"\\\\)\\\\(\", \"\\\\)\\\\(|\\\\(\"))\n        val\
    \ paren_groups_with_open_braces_and_close_braces_with_brackets_with_brackets =\
    \ paren_groups_with_open_braces_and_close_braces_with_brackets.map(paren_group\
    \ => paren_group.replaceAll(\"\\\\)\\\\(|\\\\(\", \"\\\\)\\\\(|\\\\(|\\\\(\"))\n\
    \        val paren_groups_with_open_braces_and_close_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_and_close_braces_with_brackets_with_brackets.map(paren_group\
    \ => paren_group.replaceAll(\"\\\\)\\\\(|\\\\(|\\\\(\", \"\\\\)\\\\(|\\\\(|\\\\\
    (|\\\\(\"))\n        val paren_groups_with_open_braces_and_close_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_and_close_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \        val paren_groups_with_open_braces_and_close_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_bra\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9jyl39qx.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9jyl39qx.scala:15:153\
    \ -----------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_open_braces_and_close_braces_with_brackets\e[0m = paren_groups_with_open_braces_and_close_braces.map(\e\
    [36mparen_group\e[0m => paren_group.replaceAll(\e[31m\"\\\\)\\\\(\"\e[0m, \e[31m\"\
    \\\\)\\\\(|\\\\(\"\e[0m))\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value replaceAll is not a member of (String, String)\n\e\
    [31m\e[31m-- Error: /tmp/tmp9jyl39qx.scala:15:188 ----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_and_close_braces_with_brackets\e\
    [0m = paren_groups_with_open_braces_and_close_braces.map(\e[36mparen_group\e[0m\
    \ => paren_group.replaceAll(\e[31m\"\\\\)\\\\(\"\e[0m, \e[31m\"\\\\)\\\\(|\\\\\
    (\"\e[0m))\n\e[31m\e[31m   |\e[0m                                            \
    \                                                                            \
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9jyl39qx.scala:18:131\
    \ --------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_open_braces_and_close_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_and_close_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                              "
  stdout: ''
  timestamp: 1660013215
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x + \"( )\")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortWith((x, y) => x.compareTo(y))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces =\
    \ paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x + \"( )( )\")\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \"( )( )( )\")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \"( )( )( )( )\")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \"( )( )( )( )( )\")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjlqhmxtd.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjlqhmxtd.scala:13:101 -------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted\e[0m = paren_groups_with_spaces.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \                   Found:    Int\n\e[31m   |\e[0m                           \
    \                            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjlqhmxtd.scala:15:139 -------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces.sortWith((\e[36mx\e[0m, \e[36my\e\
    [0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                                    Found:    Int\n\e[31m   |\e[0m          \
    \                                             Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjlqhmxtd.scala:17:177 -------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \                                                                         "
  stdout: ''
  timestamp: 1660013216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(paren_group => paren_group.split(\"\
    \\\\)\").size)\n        val paren_group_counts_sum = paren_group_counts.sum\n\
    \        val paren_group_counts_average = paren_group_counts_sum / paren_group_counts.length\n\
    \        val paren_group_counts_min = paren_group_counts.min\n        val paren_group_counts_max\
    \ = paren_group_counts.max\n        val paren_group_counts_range = paren_group_counts_max\
    \ - paren_group_counts_min\n        val paren_group_counts_average = paren_group_counts_range\
    \ / paren_group_counts.length\n        val paren_group_counts_average = paren_group_counts_average\
    \ * 100\n        val paren_group_counts_average = paren_group_counts_average.toInt\n\
    \        val paren_group_counts_average = paren_group_counts_average.toString\n\
    \        val paren_group_counts_average = paren_group_counts_average.substring(0,\
    \ paren_group_counts_average.length - 1)\n        val paren_group_counts_average\
    \ = paren_group_counts_average.substring(0, paren_group_counts_average.length\
    \ - 1)\n        val paren_group_counts_average = paren_group_counts_average.substring(0,\
    \ paren_group_counts_average.length - 1)\n        val paren_group_counts_average\
    \ = paren_group_counts_average.substring(0, paren_group_counts_average.length\
    \ - 1)\n        val paren_group_counts_average = paren_group_counts_average.substring(0,\
    \ paren_group_counts_average.length - 1)\n        val paren_group_counts_average\
    \ = paren_group_counts_average.substring(0, paren_group_counts_average.length\
    \ - 1)\n        val paren_group_counts_average = paren_group_counts_average.substring(0,\
    \ paren_group_counts_average.length - 1)\n        val paren_group_counts_average\
    \ = paren_group_counts_average.substring(0, paren_group_counts_average.length\
    \ - 1)\n        val paren_group_counts_average = paren_group_counts_average.substring(0,\
    \ paren_group_counts_average.length - 1)\n        val paren_group_counts_average\
    \ = paren_group_counts_average.substring(0, paren_group_counts_average.length\
    \ - 1)\n        val paren_group_counts_average = paren_group_counts_average.substring(0,\
    \ paren_group_counts_average.length - 1)\n        val paren_group_counts_average\
    \ = paren_group_counts_average.substring(0, paren_group_counts_average.length\
    \ - 1)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4vthj0mz.scala:34:11 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp4vthj0mz.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_average\e\
    [0m = paren_group_counts_range / paren_group_counts.length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_counts_average is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_counts_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4vthj0mz.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_average\e\
    [0m = paren_group_counts_average * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_group_counts_average is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_group_counts_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4vthj0mz.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_group_counts_average\e\
    [0m = paren_group_counts_average.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_counts_average is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_counts_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4vthj0mz.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |"
  stdout: ''
  timestamp: 1660013216
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_with_brackets\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"[\").replace(\"\
    )\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets.map(x => x.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets.map(x => x.replace(\"\
    (\", \"[\").replace(\")\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"(\").replace(\"]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"(\", \"[\").replace(\")\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"(\").replace(\"]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnsl0kz8q.scala:18:142 -----------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"[\"\e[0m, \e[31m\"(\"\e[0m).replace(\e[31m\"]\"\
    \e[0m, \e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnsl0kz8q.scala:19:170\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnsl0kz8q.scala:20:5\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660013204
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_count = paren_groups.length\n\
    \        val paren_groups_remaining = paren_groups_count - paren_groups.filter(_.contains(\"\
    (\")).size\n        val paren_groups_remaining_count = paren_groups_remaining\
    \ - paren_groups.filter(_.contains(\")\")).size\n        val paren_groups_remaining_count_str\
    \ = paren_groups_remaining_count.toString\n        val paren_groups_remaining_count_str\
    \ = paren_groups_remaining_count_str.substring(0, paren_groups_remaining_count_str.length\
    \ - 1)\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_groups_remaining_count_str\
    \ + \")\"\n        val paren_groups_remaining_count_str = paren_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjgf9zgon.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_count_str\e\
    [0m = paren_groups_remaining_count_str.substring(\e[31m0\e[0m, paren_groups_remaining_count_str.length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remaining_count_str is already defined as \e\
    [33mvalue\e[0m \e[35mparen_groups_remaining_count_str\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjgf9zgon.scala:17:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remaining_count_str\e[0m = paren_groups_remaining_count_str\
    \ + \e[31m\")\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remaining_count_str is already defined as \e\
    [33mvalue\e[0m \e[35mparen_groups_remaining_count_str\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjgf9zgon.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remaining_count_str\e[0m = paren_groups_remaining_count_str\
    \ + \e[31m\")\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remaining_count_str is already defined as \e\
    [33mvalue\e[0m \e[35mparen_groups_remaining_count_str\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjgf9zgon.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_remaining_count_str\e[0m = paren_groups_remaining_count_s"
  stdout: ''
  timestamp: 1660013218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces.map(x => x.trim).filter(x => !x.isEmpty)\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted = paren_groups_with_spaces_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ccxo28k.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ccxo28k.scala:21:120\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.map(\e\
    [36mx\e[0m => x.trim).filter(\e[36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ccxo28k.scala:22:139\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanat"
  stdout: ''
  timestamp: 1660013218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_remainder\
    \ = paren_groups_count % 2\n        val paren_groups_remainder_count = paren_groups_remainder\
    \ + 1\n        val paren_groups_remainder_strings = paren_groups.takeRight(paren_groups_remainder_count)\n\
    \        val paren_groups_remainder_strings_count = paren_groups_remainder_strings.length\n\
    \        val paren_groups_remainder_strings_remainder = paren_groups_remainder_strings_count\
    \ % 2\n        val paren_groups_remainder_strings_remainder_count = paren_groups_remainder_strings_remainder\
    \ + 1\n        val paren_groups_remainder_strings_remainder_strings = paren_groups_remainder_strings.takeRight(paren_groups_remainder_strings_remainder_count)\n\
    \        val paren_groups_remainder_strings_remainder_strings_count = paren_groups_remainder_strings_remainder_strings.length\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder = paren_groups_remainder_strings_remainder_strings_count\
    \ % 2\n        val paren_groups_remainder_strings_remainder_strings_remainder_count\
    \ = paren_groups_remainder_strings_remainder_strings_remainder + 1\n        val\
    \ paren_groups_remainder_strings_remainder_strings_remainder_strings = paren_groups_remainder_strings_remainder_strings.takeRight(paren_groups_remainder_strings_remainder_strings_remainder_count)\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings_count\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings.length\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings_count %\
    \ 2\n        val paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_count\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder\
    \ + 1\n        val paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings.takeRight(paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_count)\n\
    \        val paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings_count\
    \ = paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_string\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl1nja1kn.scala:28:105 -----------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remainder_strings_remainder_strings_remainder_strings_remainder_strings_count\e\
    [0m = paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_string\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_remainder_strings_remainder_strings_remainder_strings_remainder_string\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl1nja1kn.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Your code goes here\n        val paren_groups\
    \ = mutable.ListBuffer[String]()\n        paren_string.split(\"\\\\(\").foreach(x\
    \ => {\n            val paren_group = \"\"\n            val paren_open = x.indexOf(\"\
    (\")\n            val paren_close = x.indexOf(\")\")\n            val paren_length\
    \ = paren_close - paren_open\n            val paren_group_size = paren_length\
    \ / 2\n            val paren_group_start = paren_open - paren_group_size\n   \
    \         val paren_group_end = paren_open + paren_group_size\n            paren_group\
    \ += x.substring(paren_group_start, paren_group_end)\n            paren_groups\
    \ += paren_group\n        })\n        paren_groups.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2th82___.scala:12:27 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2th82___.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            paren_group += x.substring(paren_group_start,\
    \ paren_group_end)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m       value += is not a member of String - did you mean paren_group.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).filter(_.nonEmpty)\n        val paren_groups_with_spaces\
    \ = paren_groups.map(x => x.replaceAll(\"\\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s\", \"\"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpduafjo3s.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     Not found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpduafjo3s.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_size = mutable.ListBuffer[Int]()\n        paren_string.foreach\
    \ { char =>\n            if (char == '(') {\n                paren_groups += char\n\
    \                paren_group_size.push(paren_groups.size.toInt)\n            }\
    \ else if (char == ')') {\n                val group_size = paren_group_size.last\n\
    \                if (group_size == paren_groups.size) {\n                    paren_groups\
    \ += char\n                    paren_group_size.clear()\n                } else\
    \ {\n                    paren_groups += char\n                    paren_group_size.clear()\n\
    \                    paren_groups += paren_groups.take(group_size)\n         \
    \           paren_group_size.clear()\n                }\n            }\n     \
    \   }\n        paren_groups.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0bvz1ol.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0bvz1ol.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013214
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_open_braces = paren_groups.map(paren_group\
    \ => {\n            val open_braces = paren_group.split(\"\\\\)\").map(_.trim).toList\n\
    \            val closed_parens = open_braces.map(open_brace => {\n           \
    \     val closed_paren = open_brace.split(\"\\\\)\").map(_.trim).toList\n    \
    \            closed_paren.map(closed_paren => closed_paren.trim).mkString(\"(\"\
    ) + \")\"\n            })\n            open_braces.map(open_brace => open_brace.trim).mkString(\"\
    (\") + \")\"\n        })\n        paren_groups_with_open_braces.filter(paren_group\
    \ => paren_group.length == paren_groups.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnp29xkls.scala:23)\n\tat Problem.main(tmpnp29xkls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_with_brackets = paren_groups_with_spaces.map(x\
    \ => x.replace(\"(\", \"[ \"))\n        val paren_groups_with_spaces_with_brackets_with_braces\
    \ = paren_groups_with_spaces_with_brackets.map(x => x.replace(\"[\", \"{ \"))\n\
    \        val paren_groups_with_spaces_with_brackets_with_braces_with_braces =\
    \ paren_groups_with_spaces_with_brackets_with_braces.map(x => x.replace(\"{\"\
    , \"} \"))\n        val paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces\
    \ = paren_groups_with_spaces_with_brackets_with_braces_with_braces.map(x => x.replace(\"\
    }\", \"} \"))\n        val paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces\
    \ = paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces.map(x\
    \ => x.replace(\"}\", \"} \"))\n        val paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces\
    \ = paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces.map(x\
    \ => x.replace(\"}\", \"} \"))\n        val paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces\
    \ = paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces.map(x\
    \ => x.replace(\"}\", \"} \"))\n        val paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces\
    \ = paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces.map(x\
    \ => x.replace(\"}\", \"} \"))\n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa4o7dqq_.scala:18:113 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces\e\
    [0m = paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"}\"\e[0m, \e[31m\"} \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                            ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpa4o7dqq_.scala:19:125 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces\e\
    [0m = paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"}\"\e[0m, \e[31m\"} \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpa4o7dqq_.scala:20:137 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces_with_braces\e\
    [0m = paren_groups_with_spaces_with_brackets_with_braces_with_braces_with_braces_with_braces_with_braces_with_brace"
  stdout: ''
  timestamp: 1660013218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_open = mutable.ListBuffer[String]()\n        val paren_group_closed\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach {\n           \
    \ c =>\n            c match {\n                case '(' =>\n                 \
    \   paren_group_open += c\n                case '{' =>\n                    paren_group_closed\
    \ += c\n                case ')' =>\n                    paren_group_open += c\n\
    \                case ']' =>\n                    paren_group_closed += c\n  \
    \              case ' ' =>\n                    paren_groups += paren_group_open.toList\n\
    \                    paren_group_open = mutable.ListBuffer[String]()\n       \
    \             paren_group_closed = mutable.ListBuffer[String]()\n            \
    \    case _ =>\n                    paren_groups += paren_group_open.toList\n\
    \                    paren_group_open = mutable.ListBuffer[String]()\n       \
    \             paren_group_closed = mutable.ListBuffer[String]()\n            }\n\
    \        }\n        paren_groups += paren_group_open.toList\n        paren_groups\
    \ += paren_group_closed.toList\n        paren_groups.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14x8h3p0.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14x8h3p0.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open\e[0m =\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14x8h3p0.scala:13:33\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_closed\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp14x8h3p0.scala:27:39 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    paren_group_open = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                                    \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14x8h3p0.scala:28:41\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                    paren_group_closed\
    \ = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compili"
  stdout: ''
  timestamp: 1660013215
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\").trim())\n        val paren_groups_with_open_braces_with_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \" (\"))\n       \
    \ val paren_groups_with_open_braces_with_spaces_without_spaces = paren_groups_with_open_braces_with_spaces.map(x\
    \ => x.replace(\")\", \" ))\")\n        val paren_groups_with_open_braces_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_with_spaces_without_spaces.map(x => x.replace(\"\
    )\", \" ))\")\n        val paren_groups_with_open_braces_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_with_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" ))\")\n        val paren_groups_with_open_braces_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" ))\")\n        val paren_groups_with_open_braces_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" ))\")\n        val paren_groups_with_open_braces_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" ))\")\n        val paren_groups_with_open_braces_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\")\", \" ))\")\n        val paren_groups_with_open_braces_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_with_spaces_without_spaces_without_spaces_without_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppfmdm9db.scala:15:8 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_with_spaces_without_spaces.map(\e[36mx\e[0m\
    \ => x.replace(\e[31m\")\"\e[0m, \e[31m\" ))\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'val' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmppfmdm9db.scala:30:1 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_open = mutable.ListBuffer[String]()\n        val paren_group_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_group_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_size = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_depth = mutable.ListBuffer[Int]()\n        val paren_group_closed_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_depth_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_depth_limit = mutable.ListBuffer[Int]()\n    \
    \    val paren_group_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_group_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz77aclkp.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_depth_limit_reached\e\
    [0m = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_depth_limit_reached is already defined as\
    \ \e[33mvalue\e[0m \e[35mparen_group_open_depth_limit_reached\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz77aclkp.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_closed_depth_limit_reached\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed_depth_limit_reached is already defined\
    \ as \e[33mvalue\e[0m \e[35mparen_group_closed_depth_limit_reached\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpz77aclkp.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_depth_limit_reached\e[0m\
    \ = mutable.ListBuffer[\e[35mBoolean\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_depth_limit_reached is already defined as\
    \ \e[33mvalue\e[0m \e[35mparen_group_open_depth_limit_reached\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz77aclkp.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_closed_depth_limit_reached\e[0m = mutable.ListBuffer[\e[35mBoolean\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_paren_groups = paren_groups.filter(_.contains(\"\
    (\"))\n        val close_paren_groups = paren_groups.filter(_.contains(\")\"))\n\
    \        val open_paren_groups_count = open_paren_groups.map(_.length).sum\n \
    \       val close_paren_groups_count = close_paren_groups.map(_.length).sum\n\
    \        val open_paren_groups_sum = open_paren_groups_count * open_paren_groups.length\n\
    \        val close_paren_groups_sum = close_paren_groups_count * close_paren_groups.length\n\
    \        val open_paren_groups_average = open_paren_groups_sum / open_paren_groups.length\n\
    \        val close_paren_groups_average = close_paren_groups_sum / close_paren_groups.length\n\
    \        val open_paren_groups_variance = open_paren_groups_average * (open_paren_groups_average\
    \ - 1)\n        val close_paren_groups_variance = close_paren_groups_average *\
    \ (close_paren_groups_average - 1)\n        val open_paren_groups_standard_deviation\
    \ = math.sqrt(open_paren_groups_variance)\n        val close_paren_groups_standard_deviation\
    \ = math.sqrt(close_paren_groups_variance)\n        val open_paren_groups_min\
    \ = open_paren_groups.minBy(_.length)\n        val close_paren_groups_min = close_paren_groups.minBy(_.length)\n\
    \        val open_paren_groups_max = open_paren_groups.maxBy(_.length)\n     \
    \   val close_paren_groups_max = close_paren_groups.maxBy(_.length)\n        val\
    \ open_paren_groups_sum = open_paren_groups.map(_.length).sum\n        val close_paren_groups_sum\
    \ = close_paren_groups.map(_.length).sum\n        val open_paren_groups_average\
    \ = open_paren_groups_sum / open_paren_groups.length\n        val close_paren_groups_average\
    \ = close_paren_groups_sum / close_paren_groups.length\n        val open_paren_groups_variance\
    \ = open_paren_groups_average * (open_paren_groups_average - 1)\n        val close_paren_groups_variance\
    \ = close_paren_groups_average * (close_paren_groups_average - 1)\n        val\
    \ open_paren_groups_standard_deviation = math.sqrt(open_paren_groups_variance)\n\
    \        val close_paren_groups_standard_deviation = math.sqrt(close_paren_groups_variance)\n\
    \        val open_paren_groups_min = open_paren_groups.minBy(_.length)\n     \
    \   val close_paren_groups_min = close_paren_groups.minBy(_.length)\n        val\
    \ open_paren_groups_max = open_paren_groups.maxBy(_.length)\n        val close_paren_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4apikmzf.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4apikmzf.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopen_paren_groups_sum\e[0m = open_paren_groups.map(_.length).sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_paren_groups_sum is already defined as \e[33mvalue\e\
    [0m \e[35mopen_paren_groups_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4apikmzf.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mclose_paren_groups_sum\e\
    [0m = close_paren_groups.map(_.length).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_paren_groups_sum is already defined as \e[33mvalue\e\
    [0m \e[35mclose_paren_groups_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4apikmzf.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mopen_paren_groups_average\e\
    [0m = open_paren_groups_sum / open_paren_groups.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_paren_groups_average is already defined as \e[33mvalue\e\
    [0m \e[35mopen_paren_groups_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4apikmzf.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mclose_paren_groups_average\e\
    [0m = close_paren_groups_sum / close_paren_groups.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size_list\
    \ = paren_groups.map(x => x.length)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toDouble)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toInt)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toLong)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toFloat)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toDouble)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toInt)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toLong)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toFloat)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toDouble)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toInt)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toLong)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toFloat)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toDouble)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toInt)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toLong)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toFloat)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toDouble)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toInt)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toLong)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toFloat)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toDouble)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toInt)\n        val paren_groups_size_list = paren_groups_size_list.map(x\
    \ => x.toLong)\n        val paren_groups_size_list = paren_groups_size\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbjjjrrgz.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size_list.map(\e[36mx\e[0m => x.toDouble)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbjjjrrgz.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size_list.map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbjjjrrgz.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size_list.map(\e[36mx\e[0m => x.toLong)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_size_list\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbjjjrrgz.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_size_list\e\
    [0m = paren_groups_size_list.map(\e[36mx\e[0m => x.toFloat)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_size_list is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_size_lis"
  stdout: ''
  timestamp: 1660013220
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach { c =>\n      \
    \      c match {\n                case '(' =>\n                    paren_open\
    \ += c\n                case '{' =>\n                    paren_closed += c\n \
    \               case ')' =>\n                    paren_open match {\n        \
    \                case x if paren_open.size == paren_closed.size =>\n         \
    \                   paren_groups += paren_open.toString\n                    \
    \        paren_open = paren_closed.clear\n                        case _ =>\n\
    \                            paren_closed += c\n                    }\n      \
    \          case ']' =>\n                    paren_closed += c\n              \
    \  case ' ' =>\n                    paren_closed += c\n                case _\
    \ =>\n                    paren_open += c\n            }\n        }\n        paren_groups\
    \ += paren_open.toList\n        paren_groups.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_93_7c5.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_93_7c5.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_93_7c5.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpk_93_7c5.scala:24:39 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                            paren_open = paren_closed.clear\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Reassignment to val paren_open\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013217
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        val open_parens = mutable.ListBuffer[String]()\n\
    \        val close_parens = mutable.ListBuffer[String]()\n        val paren_open\
    \ = mutable.ListBuffer[String]()\n        val paren_close = mutable.ListBuffer[String]()\n\
    \        val paren_group_size = mutable.ListBuffer[Int]()\n        val paren_group_open\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_close = mutable.ListBuffer[Int]()\n\
    \        val paren_group_balance = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_group_open_brace = mutable.ListBuffer[Int]()\n        val paren_group_close_brace\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_paren = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_paren = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_paren_brace = mutable.ListBuffer[Int]()\n        val paren_group_close_paren_brace\
    \ = mutable.ListBuffer[Int]()\n        val paren_group_open_paren_paren = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_paren_paren = mutable.ListBuffer[Int]()\n     \
    \   val paren_group_open_paren_paren_brace = mutable.ListBuffer[Int]()\n     \
    \   val paren_group_close_paren_paren_brace = mutable.ListBuffer[Int]()\n    \
    \    val paren_group_open_paren_paren_paren = mutable.ListBuffer[Int]()\n    \
    \    val paren_group_close_paren_paren_paren = mutable.ListBuffer[Int]()\n   \
    \     val paren_group_open_paren_paren_paren_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_paren_paren_paren_brace = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_paren_paren_paren_paren = mutable.ListBuffer[Int]()\n\
    \        val paren_group_close_paren_paren_paren_paren = mutable.ListBuffer[Int]()\n\
    \        val paren_group_open_paren_paren_paren_paren_brace = mutable.ListBuffer[Int]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpix_emyt6.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpix_emyt6.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpix_emyt6.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpix_emyt6.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mopen_parens\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpix_emyt6.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mclose_parens\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpix_emyt6.scala"
  stdout: ''
  timestamp: 1660013219
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \" ) \"))\n    \
    \    val paren_groups_with_spaces_sorted_with_spaces_without_spaces = paren_groups_with_spaces_sorted_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc5xo49qf.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_group\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_sorted_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpc5xo49qf.scala:13:99 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces.sortWith((\e[36mx\e[0m, \e[36my\e[0m) => x.length\
    \ <=> y.length)\n\e[31m\e[31m   |\e[0m                                       \
    \                                                   ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                 value <=> is not a member of Int - did you mean Int.<=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc5xo49qf.scala:23:5 ---------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,y)\
    \ => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_paren\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \"\").replace(\"\
    (\", \"\"))\n        val paren_groups_with_spaces_sorted_with_paren_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_paren.map(x => x.replace(\"(\", \"\"\
    ).replace(\")\", \"\"))\n        val paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_paren_without_spaces.sortWith((x,y) =>\
    \ x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren\
    \ = paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted.map(x =>\
    \ x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces.sortWith((x,y)\
    \ => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces_sorted_with_paren\
    \ = paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces_sorted.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces_sorted_with_paren.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpugycelmy.scala:22:145 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_paren_without_spaces_sorted_with_paren_without_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpugycelmy.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Use a stack to keep track of which\
    \ parenthesis are open\n        var paren_stack = Stack[String]()\n        //\
    \ Use a list to keep track of which parenthesis are closed\n        var paren_closed\
    \ = List[String]()\n        // Use a list to keep track of which parenthesis are\
    \ open\n        var paren_open = List[String]()\n        // Use a list to keep\
    \ track of which parenthesis are open\n        var paren_open = List[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        var\
    \ paren_open = List[String]()\n        // Use a list to keep track of which parenthesis\
    \ are open\n        var paren_open = List[String]()\n        // Use a list to\
    \ keep track of which parenthesis are open\n        var paren_open = List[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        var\
    \ paren_open = List[String]()\n        // Use a list to keep track of which parenthesis\
    \ are open\n        var paren_open = List[String]()\n        // Use a list to\
    \ keep track of which parenthesis are open\n        var paren_open = List[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        var\
    \ paren_open = List[String]()\n        // Use a list to keep track of which parenthesis\
    \ are open\n        var paren_open = List[String]()\n        // Use a list to\
    \ keep track of which parenthesis are open\n        var paren_open = List[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        var\
    \ paren_open = List[String]()\n        // Use a list to keep track of which parenthesis\
    \ are open\n        var paren_open = List[String]()\n        // Use a list to\
    \ keep track of which parenthesis are open\n        var paren_open = List[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        var\
    \ paren_open = List[String]()\n        // Use a list to keep track of which parenthesis\
    \ are open\n        var paren_open = List[String]()\n        // Use a list to\
    \ keep track of which parenthesis are open\n        var paren_open = List[String]()\n\
    \        // Use a list to keep track of which parenthesis are open\n        var\
    \ paren_open = List[String]()\n        // Use a list to keep track of which parenthesis\
    \ are open\n        var paren_open = List[String]()\n        // Use a list to\
    \ keep track of which parenthesis are open\n        var paren_open = List[String]()\n\
    \        // Use a list to \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb5ftynm8.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mparen_open\e[0m = List[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open is already defined as \e[33mvariable\e[0m \e[35mparen_open\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb5ftynm8.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mvar\e[0m \e[36mparen_open\e[0m = List[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_open is already defined as \e[33mvariable\e[0m \e[35mparen_open\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb5ftynm8.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mvar\e[0m \e[36mparen_open\e[0m = List[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_open is already defined as \e[33mvariable\e[0m \e[35mparen_open\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb5ftynm8.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mvar\e[0m \e[36mparen_open\e[0m = List[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_open is already defined as \e[33mvariable\e[0m \e[35mparen_open\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpb5ftynm8.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mvar\e[0m \e[36mparen_open\e[0m = List[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mparen_open is already "
  stdout: ''
  timestamp: 1660013221
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_closed_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\"))\n        paren_groups_with_closed_braces.filter(x => x.isEmpty).map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_2jpldmv.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        paren_groups_with_closed_braces.filter(\e\
    [36mx\e[0m => x.isEmpty).map(\e[36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\
    \"\e[0m).replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_with_spaces = paren_groups_with_spaces_trimmed.map(x\
    \ => x.replace(\" ( \", \" (\"))\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_trimmed_with_spaces.map(x => x.trim())\n        val\
    \ paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces = paren_groups_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\" ( \", \" (\"))\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces.map(x =>\
    \ x.trim())\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\" ( \", \" (\"))\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed.map(x\
    \ => x.replace(\" ( \", \" (\"))\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed\
    \ = paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\
    \ = paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3e0v4r7.scala:22:139 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces\e\
    [0m = paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trim\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trimmed_with_spaces_trim\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph3e0v4r7.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_parens = mutable.ListBuffer[String]()\n\
    \        val close_parens = mutable.ListBuffer[String]()\n        paren_groups.foreach(x\
    \ => {\n            if (x.contains(\")\")) {\n                close_parens +=\
    \ x\n            } else {\n                open_parens += x\n            }\n \
    \       })\n        open_parens.toList.flatMap(x => close_parens.map(y => x +\
    \ \"(\" + y + \")\"))\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo3p2k2d6.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mopen_parens\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpo3p2k2d6.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mclose_parens\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\").replaceAll(\"\\\\s\", \"\"))\n        paren_group_strings.filter(x\
    \ => x.nonEmpty)\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpafsaoytj.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => x.nonEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013207
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_paren_groups = paren_groups.filter(x\
    \ => x.startsWith(\"(\"))\n        val close_paren_groups = paren_groups.filter(x\
    \ => x.endsWith(\")\"))\n        val open_paren_groups_count = open_paren_groups.size\n\
    \        val close_paren_groups_count = close_paren_groups.size\n        val open_paren_groups_not_nested\
    \ = open_paren_groups.length - open_paren_groups_count\n        val close_paren_groups_not_nested\
    \ = close_paren_groups.length - close_paren_groups_count\n        val open_paren_groups_not_balanced\
    \ = open_paren_groups_not_nested - open_paren_groups_count * close_paren_groups_not_nested\n\
    \        val close_paren_groups_not_balanced = close_paren_groups_not_nested -\
    \ close_paren_groups_count * open_paren_groups_not_nested\n        val open_paren_groups_not_nested_within_another_group\
    \ = open_paren_groups_not_nested - open_paren_groups_count * close_paren_groups_not_nested\n\
    \        val close_paren_groups_not_nested_within_another_group = close_paren_groups_not_nested\
    \ - close_paren_groups_count * open_paren_groups_not_nested\n        val open_paren_groups_not_nested_within_another_group_balanced\
    \ = open_paren_groups_not_nested_within_another_group - open_paren_groups_count\
    \ * close_paren_groups_not_nested_within_another_group\n        val close_paren_groups_not_nested_within_another_group_balanced\
    \ = close_paren_groups_not_nested_within_another_group - close_paren_groups_count\
    \ * open_paren_groups_not_nested_within_another_group\n        val open_paren_groups_not_nested_within_another_group_balanced_balanced\
    \ = open_paren_groups_not_nested_within_another_group_balanced - open_paren_groups_count\
    \ * close_paren_groups_not_nested_within_another_group_balanced\n        val close_paren_groups_not_nested_within_another_group_balanced_balanced\
    \ = close_paren_groups_not_nested_within_another_group_balanced - close_paren_groups_count\
    \ * open_paren_groups_not_nested_within_another_group_balanced\n        val open_paren_groups_not_nested_within_another_group_balanced_balanced_balanced\
    \ = open_paren_groups_not_nested_within_another_group_balanced_balanced - open_paren_groups_count\
    \ * close_paren_groups_not_nested_within_another_group_balanced_balanced\n   \
    \     val close_paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2nlnsjg2.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2nlnsjg2.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_with_brackets\
    \ = paren_groups.map(x => x.replace(\")\", \"\").replace(\"(\", \"\"))\n     \
    \   val paren_groups_with_brackets_count = paren_groups_with_brackets.length\n\
    \        val paren_groups_with_brackets_within_each = paren_groups_with_brackets.map(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_with_brackets_within_each_count\
    \ = paren_groups_with_brackets_within_each.length\n        val paren_groups_with_brackets_within_each_within_each\
    \ = paren_groups_with_brackets_within_each.map(x => x.map(y => y.replace(\")\"\
    , \"\").replace(\"(\", \"\")))\n        val paren_groups_with_brackets_within_each_within_each_count\
    \ = paren_groups_with_brackets_within_each_within_each.length\n        val paren_groups_with_brackets_within_each_within_each_within_each_count\
    \ = paren_groups_with_brackets_within_each_within_each.map(x => x.map(y => y.split(\"\
    \\\\)\")).length)\n        val paren_groups_with_brackets_within_each_within_each_within_each_within_each_count\
    \ = paren_groups_with_brackets_within_each_within_each.map(x => x.map(y => y.split(\"\
    \\\\)\")).map(z => z.length))\n        val paren_groups_with_brackets_within_each_within_each_within_each_within_each_within_each_count\
    \ = paren_groups_with_brackets_within_each_within_each_within_each.map(x => x.map(y\
    \ => y.split(\"\\\\)\")).map(z => z.map(w => w.replace(\")\", \"\").replace(\"\
    (\", \"\")))\n        val paren_groups_with_brackets_within_each_within_each_within_each_within_each_within_each_count\
    \ = paren_groups_with_brackets_within_each_within_each_within_each.map(x => x.map(y\
    \ => y.split(\"\\\\)\")).map(z => z.map(w => w.replace(\")\", \"\").replace(\"\
    (\", \"\")).map(x => x.split(\"\\\\)\")).length)\n        val paren_groups_with_brackets_within_each_within_each_within_each_within_each_within_each_within_each_count\
    \ = paren_groups_with_brackets_within_each_within_each_with\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4mc_v2b_.scala:22:8 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_brackets_within_each_within_each_within_each_within_each_within_each_count\e\
    [0m = paren_groups_with_brackets_within_each_within_each_within_each.map(\e[36mx\e\
    [0m => x.map(\e[36my\e[0m => y.split(\e[31m\"\\\\)\"\e[0m)).map(\e[36mz\e[0m =>\
    \ z.map(\e[36mw\e[0m => w.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e\
    [31m\"(\"\e[0m, \e[31m\"\"\e[0m)).map(\e[36mx\e[0m => x.split(\e[31m\"\\\\)\"\e\
    [0m)).length)\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        ')'\
    \ expected, but 'val' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4mc_v2b_.scala:21:107\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_brackets_within_each_within_each_within_each_within_each_within_each_count\e\
    [0m = paren_groups_with_brackets_within_each_within_each_within_each.map(\e[36mx\e\
    [0m => x.map(\e[36my\e[0m => y.split(\e[31m\"\\\\)\"\e[0m)).map(\e[36mz\e[0m =>\
    \ z.map(\e[36mw\e[0m => w.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m).replace(\e\
    [31m\"(\"\e[0m, \e[31m\"\"\e[0m)))\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mNot found: paren_groups_with_brackets_within_each_within_each_within_each\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4mc_v2b_.scala:32:1\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_parens = paren_groups.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => !x.isEmpty)\n  \
    \      val paren_groups_with_parens_without_spaces = paren_groups_with_parens.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens\
    \ = paren_groups_with_parens_without_spaces.map(x => x.replace(\"(\", \"\").replace(\"\
    )\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens_with_parens\
    \ = paren_groups_with_parens_without_spaces_without_parens.map(x => x.replace(\"\
    (\", \"(\").replace(\")\", \"(\"))\n        val paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_parens_with_parens.map(x =>\
    \ x.replace(\"  \", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens\
    \ = paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens\
    \ = paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens\
    \ = paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens\
    \ = paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_paren\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5xhfvezc.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5xhfvezc.scala:20:153\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens\e\
    [0m = paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m\
    \  paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp5xhfvezc.scala:21:195 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens\e\
    [0m = paren_groups_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens_with_parens_without_spaces_without_parens.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_parens_without_spaces_witho"
  stdout: ''
  timestamp: 1660013228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_braces = paren_groups.filter(_.contains(\"\
    {\"))\n        val closed_braces = paren_groups.filter(_.contains(\"}\"))\n  \
    \      val open_brace_pairs = open_braces.map(x => (x.split(\"{\")(0), x.split(\"\
    }\")(0)))\n        val closed_brace_pairs = closed_braces.map(x => (x.split(\"\
    {\")(0), x.split(\"}\")(0)))\n        val open_brace_pairs_with_closed_braces\
    \ = open_brace_pairs ++ closed_brace_pairs\n        val open_brace_pairs_with_closed_braces_sorted\
    \ = open_brace_pairs_with_closed_braces.sortBy(_._1)\n        val open_brace_pairs_with_closed_braces_sorted_reversed\
    \ = open_brace_pairs_with_closed_braces_sorted.reverse\n        val open_brace_pairs_with_closed_braces_sorted_reversed_sorted\
    \ = open_brace_pairs_with_closed_braces_sorted_reversed.sortBy(_._1)\n       \
    \ val open_brace_pairs_with_closed_braces_sorted_reversed_sorted_grouped = open_brace_pairs_with_closed_braces_sorted_reversed_sorted.groupBy(_._1)\n\
    \        val open_brace_pairs_with_closed_braces_sorted_reversed_sorted_grouped_sorted\
    \ = open_brace_pairs_with_closed_braces_sorted_reversed_sorted_grouped.sortBy(_._2)\n\
    \        val open_brace_pairs_with_closed_braces_sorted_reversed_sorted_grouped_sorted_grouped\
    \ = open_brace_pairs_with_closed_braces_sorted_reversed_sorted_grouped_sorted.groupBy(_._1)\n\
    \        val open_brace_pairs_with_closed_braces_sorted_reversed_sorted_grouped_sorted_grouped_sorted\
    \ = open_brace_pairs_with_closed_braces_sorted_reversed_sorted_grouped_sorted_grouped.sortBy(_._2)\n\
    \        val open_brace_pairs_with_closed_braces_sorted_reversed_sorted_grouped_sorted_grouped_sorted_grouped\
    \ = open_brace_pairs_with_closed_braces_sorted_reversed_sorted_grouped_sorted_grouped_sorted.groupBy(_._1)\n\
    \        val open_brace_pairs_with_closed_braces_sorted_reversed_sorted_grouped_sorted_grouped_sorted_grouped_sorted\
    \ = open_brace_pairs_with_closed_braces_sorted_reversed_sorted_grouped_sorted_grouped_sorted_grouped.sortBy(_._2)\n\
    \        val open_brace_pair\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4crqoj4p.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4crqoj4p.scala:21:155\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mopen_brace_pairs_with_closed_braces_sorted_reversed_sorted_grouped_sorted\e\
    [0m = open_brace_pairs_with_closed_braces_sorted_reversed_sorted_grouped.sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     value sortBy is not a member of Map[String, List[(String,\
    \ String)]]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4crqoj4p.scala:27:5\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Initialize a list to store the result\n\
    \        var result: List[String] = Nil\n        // Iterate over each character\
    \ in the string\n        for (c <- paren_string) {\n            // If the character\
    \ is a left parenthesis, add it to the list\n            if (c == '(') {\n   \
    \             result ::= c\n            }\n            // If the character is\
    \ a right parenthesis, remove it from the list\n            else if (c == ')')\
    \ {\n                result ::= result.takeWhile(_ != '(')\n            }\n  \
    \          // If the character is a space, ignore it\n            else if (c ==\
    \ ' ') {\n            }\n            // If the character is not a left or right\
    \ parenthesis, ignore it\n            else {\n            }\n        }\n     \
    \   // Return the list of parentheses\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp23wofae8.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                result ::= c\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String]\
    \ - did you mean List[String].::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp23wofae8.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                result ::=\
    \ result.takeWhile(_ != \e[31m'('\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String] -\
    \ did you mean List[String].::?\n\e[31m\e[31m-- Error: /tmp/tmp23wofae8.scala:21:44\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \         result ::= result.takeWhile(_ != \e[31m'('\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types String and Char cannot be compared with == or !=\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_closed_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\"))\n        paren_groups_with_closed_braces.filter(x => x.isEmpty).map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_2jpldmv.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        paren_groups_with_closed_braces.filter(\e\
    [36mx\e[0m => x.isEmpty).map(\e[36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\
    \"\e[0m).replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.map(x => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_flat3\
    \ = paren_groups_flat2.map(x => x.split(\"\\\\)\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.flatten\n        val paren_groups_flat5 = paren_groups_flat4.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_flat6 = paren_groups_flat5.map(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat7 = paren_groups_flat6.flatten\n\
    \        val paren_groups_flat8 = paren_groups_flat7.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_flat9 = paren_groups_flat8.map(x =>\
    \ x.split(\"\\\\)\"))\n        val paren_groups_flat10 = paren_groups_flat9.flatten\n\
    \        val paren_groups_flat11 = paren_groups_flat10.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_flat12 = paren_groups_flat11.map(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat13 = paren_groups_flat12.flatten\n\
    \        val paren_groups_flat14 = paren_groups_flat13.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_flat15 = paren_groups_flat14.map(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat16 = paren_groups_flat15.flatten\n\
    \        val paren_groups_flat17 = paren_groups_flat16.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_flat18 = paren_groups_flat17.map(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat19 = paren_groups_flat18.flatten\n\
    \        val paren_groups_flat20 = paren_groups_flat19.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_flat21 = paren_groups_flat20.map(x\
    \ => x.split(\"\\\\)\"))\n        val paren_groups_flat22 = paren_groups_flat21.flatten\n\
    \        val paren_groups_flat23 = paren_groups_flat22.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_flat24 = paren_groups_flat23.map(x\
    \ => x.split(\"\\\\)\"))\n\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv888ojce.scala:13:62 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.map(\e[36mx\e[0m => x.trim).filter(\e[36mx\e[0m => !x.isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m                                      value trim\
    \ is not a member of Char\n\e[31m\e[31m-- Error: /tmp/tmpv888ojce.scala:13:67\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m = paren_groups_flat.map(\e[36mx\e\
    [0m => x.trim).filter(\e[36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m     \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpv888ojce.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        paren_string.split(\"\\\\(\").foreach(paren_groups += _)\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyeq2jw82.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\").trim())\n        paren_group_strings.filter(x\
    \ => x.nonEmpty)\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdw1of3cg.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => x.nonEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_remaining\
    \ = paren_groups_size - 1\n        val paren_groups_remaining_size = paren_groups_remaining\
    \ * 2\n        val paren_groups_remaining_list = mutable.ListBuffer[String]()\n\
    \        val paren_groups_remaining_list_size = paren_groups_remaining_size *\
    \ 2\n        val paren_groups_remaining_list_remaining = paren_groups_remaining_size\
    \ - 1\n        val paren_groups_remaining_list_remaining_size = paren_groups_remaining_list_remaining\
    \ * 2\n        val paren_groups_remaining_list_remaining_list = mutable.ListBuffer[String]()\n\
    \        val paren_groups_remaining_list_remaining_list_size = paren_groups_remaining_list_remaining_size\
    \ * 2\n        val paren_groups_remaining_list_remaining_list_remaining = paren_groups_remaining_list_remaining_size\
    \ - 1\n        val paren_groups_remaining_list_remaining_list_remaining_size =\
    \ paren_groups_remaining_list_remaining_list_remaining * 2\n        val paren_groups_remaining_list_remaining_list_remaining_list\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remaining_list_size\
    \ = paren_groups_remaining_list_remaining_list_remaining_size * 2\n        val\
    \ paren_groups_remaining_list_remaining_list_remaining_list_remaining = paren_groups_remaining_list_remaining_list_remaining_size\
    \ - 1\n        val paren_groups_remaining_list_remaining_list_remaining_list_remaining_size\
    \ = paren_groups_remaining_list_remaining_list_remaining_list_remaining * 2\n\
    \        val paren_groups_remaining_list_remaining_list_remaining_list_remaining_list\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remaining_list_remaining_list_size\
    \ = paren_groups_remaining_list_remaining_list_remaining_list_remaining_size *\
    \ 2\n        val paren_groups_remaining_list_remaining_list_remaining_list_remaining_list_remaining\
    \ = paren_groups_remaining_list_remaining_list_remaining_list_remaining_size -\
    \ 1\n        val paren_groups_remaining_list_remaining_list_remaining_list_remaining_list_remaining_size\
    \ = paren_groups_remaining_list_remaining_list_remaining_list_remaining_list_remaining\
    \ * 2\n        val paren_groups_remaining_list_remaining_list_remaining_list_remaining_list_remaining_list\
    \ = mutable.ListBuffer[String]()\n        val paren_groups_remaining_list_remaining_list_remain\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfigrc3q_.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfigrc3q_.scala:15:42\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_remaining_list\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfigrc3q_.scala:19:57\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_remaining_list_remaining_list\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                                \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfigrc3q_.scala:23:72 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_remaining_list_remaining_list_remaining_list\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m         \
    \                                                               ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfigrc3q_.scala:27:87\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_remaining_list_remaining_list_remaining_list_remaining_list\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                          "
  stdout: ''
  timestamp: 1660013229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\"(\"\
    , \" ( \"))).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\"(\", \" ( \"))).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \")).filter(x => !x.isEmpty)\n        val paren_groups_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpopvqcu39.scala:16:159 --------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted.map(\e[36mx\e[0m => x.replace(\e\
    [31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).filter(x => !x.isEmpty)\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \      '}' expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpopvqcu39.scala:20:254\
    \ --------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).filter(x => !x.isEmpty)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                      '}' expected, but ')' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpopvqcu39.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpopvqcu39.scala:16:184 -------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted.map(\e[36mx\e[0m => x.replace(\e\
    [31m\"(\"\e[0m, \e[31m\" ( \"\e[0m))).filter(x => !x.isEmpty)\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                "
  stdout: ''
  timestamp: 1660013229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_open = mutable.ListBuffer[String]()\n        val paren_group_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_group_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index = paren_group_open_index.init\n        val paren_group_closed_index\
    \ = paren_group_closed_index.init\n        val paren_group_open = paren_group_open.init\n\
    \        val paren_group_closed = paren_group_closed.init\n        val paren_group_open_index\
    \ = paren_group_open_index.init\n        val paren_group_closed_index = paren_group_closed_index.init\n\
    \        val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpwx7t6bok.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpwx7t6bok.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_index\e\
    [0m = paren_group_open_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwx7t6bok.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed_index\e\
    [0m = paren_group_closed_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_closed_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwx7t6bok.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open\e[0m =\
    \ paren_group_open.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open is already defined as \e[33mvalue\e[0m \e\
    [35mparen_group_open\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwx7t6bok.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed\e[0m\
    \ = paren_group_closed.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        paren_string.split(\"\\\\(\").foreach(paren_group => {\n            paren_groups\
    \ += paren_group\n        })\n        paren_groups.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg4b40qqi.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        paren_string.split(\"\\\\(\").foreach(paren_groups += _)\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyeq2jw82.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_flat = paren_groups_with_spaces_trimmed.flatMap(x\
    \ => x.split(\" \"))\n        val paren_groups_with_spaces_trimmed_flat2 = paren_groups_with_spaces_trimmed_flat.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_spaces_trimmed_flat3\
    \ = paren_groups_with_spaces_trimmed_flat2.map(x => x.replace(\")\", \"\"))\n\
    \        val paren_groups_with_spaces_trimmed_flat4 = paren_groups_with_spaces_trimmed_flat3.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_flat5 = paren_groups_with_spaces_trimmed_flat4.map(x\
    \ => x.split(\" \"))\n        val paren_groups_with_spaces_trimmed_flat6 = paren_groups_with_spaces_trimmed_flat5.map(x\
    \ => x.replace(\")\", \"\"))\n        val paren_groups_with_spaces_trimmed_flat7\
    \ = paren_groups_with_spaces_trimmed_flat6.map(x => x.replace(\"(\", \"\"))\n\
    \        val paren_groups_with_spaces_trimmed_flat8 = paren_groups_with_spaces_trimmed_flat7.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_flat9 = paren_groups_with_spaces_trimmed_flat8.map(x\
    \ => x.split(\" \"))\n        val paren_groups_with_spaces_trimmed_flat10 = paren_groups_with_spaces_trimmed_flat9.map(x\
    \ => x.replace(\")\", \"\"))\n        val paren_groups_with_spaces_trimmed_flat11\
    \ = paren_groups_with_spaces_trimmed_flat10.map(x => x.replace(\"(\", \"\"))\n\
    \        val paren_groups_with_spaces_trimmed_flat12 = paren_groups_with_spaces_trimmed_flat11.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_flat13 = paren_groups_with_spaces_trimmed_flat12.map(x\
    \ => x.split(\" \"))\n        val paren_groups_with_spaces_trimmed_flat14 = paren_groups_with_spaces_trimmed_flat13.map(x\
    \ => x.replace(\")\", \"\"))\n        val paren_groups_with_spaces_trimmed_flat15\
    \ = paren_groups_with_spaces_trimmed_flat14.map(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpy9xy1by7.scala:28:102 --------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_flat15\e\
    [0m = paren_groups_with_spaces_trimmed_flat14.map(\e[36mx\e[0m => \n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy9xy1by7.scala:19:103 -----------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_flat6\e\
    [0m = paren_groups_with_spaces_trimmed_flat5.map(\e[36mx\e[0m => x.replace(\e\
    [31m\")\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value replace is\
    \ not a member of Array[String]\n\e[31m\e[31m-- Error: /tmp/tmpy9xy1by7.scala:19:120\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e\
    [33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_flat6\e[0m = paren_groups_with_spaces_trimmed_flat5.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                   No ClassTag available for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                          where:    B is a\
    \ type variable\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy9xy1by7.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013232
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replaceAll(\"\
    \\\\)\", \"\"))\n        val paren_groups_with_close_braces = paren_groups_with_open_braces.map(x\
    \ => x.replaceAll(\"\\\\(\", \"\"))\n        val paren_groups_with_open_brace_and_close_braces\
    \ = paren_groups_with_close_braces.map(x => x.replaceAll(\"\\\\(\", \"\").replaceAll(\"\
    \\\\)\", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces\
    \ = paren_groups_with_open_brace_and_close_braces.map(x => x.replaceAll(\"\\\\\
    s+\", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces_without_spaces\
    \ = paren_groups_with_open_brace_and_close_brace_and_spaces.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_brace_and_close_brace_and_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_brace_and_close_brace_and_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_brace_and_close_brace_and_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_brace_and_close_brace_and_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_open_brace_and_close_brace_and_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_brace_and_close_brace_and_spaces_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdlkf3iwr.scala:21:160 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_brace_and_close_brace_and_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_brace_and_close_brace_and_spaces_\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                            \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m     Not found: paren_groups_with_open_brace_and_close_brace_and_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdlkf3iwr.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013231
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_paren = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_paren_without_spaces\
    \ = paren_groups_with_paren.map(x => x.replace(\"  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces.map(x => x.replace(\"(\", \"\"))\n\
    \        val paren_groups_with_paren_without_spaces_without_paren_without_spaces\
    \ = paren_groups_with_paren_without_spaces_without_paren.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\
    \ = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_space\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpevmgqnvk.scala:19:154 -----------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\e\
    [0m = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpevmgqnvk.scala:21:212\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren\e\
    [0m = paren_groups_with_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_spaces_without_paren_without_space\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_paren_without_spaces_without_paren_without_spaces_withou"
  stdout: ''
  timestamp: 1660013232
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_paren = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_paren_with_brackets\
    \ = paren_groups_with_paren.map(x => x.replace(\")\", \"\").replace(\"(\", \"\"\
    )).filter(x => !x.isEmpty).map(x => x.replace(\"(\", \"[\").replace(\")\", \"\
    ]\"))\n        val paren_groups_with_paren_with_brackets_with_brackets = paren_groups_with_paren.map(x\
    \ => x.replace(\")\", \"\").replace(\"(\", \"\")).filter(x => !x.isEmpty).map(x\
    \ => x.replace(\"(\", \"[\").replace(\")\", \"]\")).map(x => x.replace(\"[\",\
    \ \"(\").replace(\"]\", \")\"))\n        val paren_groups_with_paren_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_paren.map(x => x.replace(\")\", \"\").replace(\"(\", \"\"\
    )).filter(x => !x.isEmpty).map(x => x.replace(\"(\", \"[\").replace(\")\", \"\
    ]\")).map(x => x.replace(\"[\", \"(\").replace(\"]\", \")\")).map(x => x.replace(\"\
    [\", \"(\").replace(\"]\", \")\"))\n        val paren_groups_with_paren_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_paren.map(x => x.replace(\")\", \"\").replace(\"(\", \"\"\
    )).filter(x => !x.isEmpty).map(x => x.replace(\"(\", \"[\").replace(\")\", \"\
    ]\")).map(x => x.replace(\"[\", \"(\").replace(\"]\", \")\")).map(x => x.replace(\"\
    [\", \"(\").replace(\"]\", \")\")).map(x => x.replace(\"[\", \"(\").replace(\"\
    ]\", \")\"))\n        val paren_groups_with_paren_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_paren.map(x => x.replace(\")\", \"\").replace(\"(\", \"\"\
    )).filter(x => !x.isEmpty).map(x => x.replace(\"(\", \"[\").replace(\")\", \"\
    ]\")).map(x => x.replace(\"[\", \"(\").replace(\"]\", \")\")).map(x => x.replace(\"\
    [\", \"(\").replace(\"]\", \")\")).map(x => x.replace(\"[\", \"(\").replace(\"\
    ]\", \")\")).map(x => x.replace(\"[\", \"(\").replace(\"]\", \")\"))\n       \
    \ val paren_groups_with_paren_with_bracket\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwr2fchiu.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwr2fchiu.scala:19:5 ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach { c =>\n      \
    \      if (c == '(') {\n                open_braces += c\n            } else if\
    \ (c == ')') {\n                close_braces += c\n            } else if (c ==\
    \ ' ') {\n                paren_groups += c\n            } else {\n          \
    \      paren_groups += c\n            }\n        }\n        val open_braces_count\
    \ = open_braces.size\n        val close_braces_count = close_braces.size\n   \
    \     if (open_braces_count != close_braces_count) {\n            throw new RuntimeException(\"\
    Open and close braces count mismatch\")\n        }\n        val open_braces_count\
    \ = open_braces.size\n        val close_braces_count = close_braces.size\n   \
    \     if (open_braces_count != close_braces_count) {\n            throw new RuntimeException(\"\
    Open and close braces count mismatch\")\n        }\n        val open_braces_count\
    \ = open_braces.size\n        val close_braces_count = close_braces.size\n   \
    \     if (open_braces_count != close_braces_count) {\n            throw new RuntimeException(\"\
    Open and close braces count mismatch\")\n        }\n        val open_braces_count\
    \ = open_braces.size\n        val close_braces_count = close_braces.size\n   \
    \     if (open_braces_count != close_braces_count) {\n            throw new RuntimeException(\"\
    Open and close braces count mismatch\")\n        }\n        val open_braces_count\
    \ = open_braces.size\n        val close_braces_count = close_braces.size\n   \
    \     if (open_braces_count != close_braces_count) {\n            throw new RuntimeException(\"\
    Open and close braces count mismatch\")\n        }\n        val open_braces_count\
    \ = open_braces.size\n        val close_braces_count = close_braces.size\n   \
    \     if (open_braces_count != close_braces_count) {\n            throw new RuntimeException(\"\
    Open and close braces count mismatch\")\n        }\n        val open_braces_count\
    \ = open_braces.size\n        val close_braces_count = close_braces.size\n   \
    \     if (open_braces_count != close_braces_count) {\n            throw new RuntimeException(\"\
    Open and close braces count mismatch\")\n        }\n        val open_braces_count\
    \ = open_braces.size\n        val close_braces_count = close_braces.size\n   \
    \     if (open_braces_count != close_braces_count) {\n            throw new RuntimeException(\"\
    Open and \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpl1s58hv3.scala:63:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m            \e[33mthrow\e[0m \e[33mnew\e[0m \e[35mRuntimeException\e\
    [0m(\"Open and \n\e[31m\e[31m   |\e[0m                                       ^\e\
    [0m\n\e[31m   |\e[0m                                       unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpl1s58hv3.scala:65:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl1s58hv3.scala:73:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m73 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\nexception occurred while\
    \ parser /tmp/tmpl1s58hv3.scala\nexception occurred while compiling /tmp/tmpl1s58hv3.scala\n\
    Exception in thread \"main\" java.lang.AssertionError: assertion failed: position\
    \ error, parent span does not contain child span\nparent      = \e[33mnew \e[0m\e\
    [35mRuntimeException\e[0m(\e[31mnull\e[0m) # -1,\nparent span = <2944..2975>,\n\
    child       = \e[31mnull\e[0m # -1,\nchild span  = [2965..2980..2980]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.sc"
  stdout: "error while checking \e[33mnew \e[0m\e[35mRuntimeException\e[0m(\e[31mnull\e\
    [0m)\nerror while checking \e[33mthrow \e[0m\e[33mnew \e[0m\e[35mRuntimeException\e\
    [0m(\e[31mnull\e[0m)\nerror while checking {\n  \e[33mthrow \e[0m\e[33mnew \e\
    [0m\e[35mRuntimeException\e[0m(\e[31mnull\e[0m)\n}\nerror while checking \e[33mif\
    \ \e[0m(open_braces_count != close_braces_count) \n  {\n    \e[33mthrow \e[0m\e\
    [33mnew \e[0m\e[35mRuntimeException\e[0m(\e[31mnull\e[0m)\n  }\nerror while checking\
    \ {\n  \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n  \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n  \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n  paren_string.foreach(\n    {\n      c => \n        {\n          \e[33mif\
    \ \e[0m(c == \e[31m'('\e[0m) \n            {\n              open_braces += c\n\
    \            }\n          \e[33m else \e[0m\n            \e[33mif \e[0m(c == \e\
    [31m')'\e[0m) \n              {\n                close_braces += c\n         \
    \     }\n            \e[33m else \e[0m\n              \e[33mif \e[0m(c == \e[31m'\
    \ '\e[0m) \n                {\n                  paren_groups += c\n         \
    \       }\n              \e[33m else \e[0m\n                {\n              \
    \    paren_groups += c\n                }\n        }\n    }\n  )\n  \e[33mval\e\
    [0m \e[36mopen_braces_count\e[0m = open_braces.size\n  \e[33mval\e[0m \e[36mclose_braces_count\e\
    [0m = close_braces.size\n  \e[33mif \e[0m(open_braces_count != close_braces_count)\
    \ \n    {\n      \e[33mthrow \e[0m\e[33mnew \e[0m\e[35mRuntimeException\e[0m(\e\
    [32m\"Open and close braces count mismatch\"\e[0m)\n    }\n  \e[33mval\e[0m \e\
    [36mopen_braces_count\e[0m = open_braces.size\n  \e[33mval\e[0m \e[36mclose_braces_count\e\
    [0m = close_braces.size\n  \e[33mif \e[0m(open_braces_count != close_braces_count)\
    \ \n    {\n      \e[33mthrow \e[0m\e[33mnew \e[0m\e[35mRuntimeException\e[0m(\e\
    [32m\"Open and close braces count mismatch\"\e[0m)\n    }\n  \e[33mval\e[0m \e\
    [36mopen_braces_count\e[0m = open_braces.size\n  \e[33mval\e[0m \e[36mclose_braces_count\e\
    [0m = close_braces.size\n  \e[33mif \e[0m(open_braces_count != close_braces_count)\
    \ \n    {\n      \e[33mthrow \e[0m\e[33m"
  timestamp: 1660013226
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\(|\\\\)\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptw71jw0t.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptw71jw0t.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_max = mutable.ListBuffer[Int]()\n        val paren_closed_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_min = mutable.ListBuffer[Int]()\n        val paren_open_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_avg = mutable.ListBuffer[Double]()\n        val\
    \ paren_closed_depth_avg = mutable.ListBuffer[Double]()\n        val paren_open_depth_min\
    \ = mutable.ListBuffer[Double]()\n        val paren_closed_depth_min = mutable.ListBuffer[Double]()\n\
    \        val paren_open_depth_max = mutable.ListBuffer[Double]()\n        val\
    \ paren_closed_depth_max = mutable.ListBuffer[Double]()\n        val paren_open_depth_sum\
    \ = mutable.ListBuffer[Double]()\n        val paren_closed_depth_sum = mutable.ListBuffer[Double]()\n\
    \        val paren_open_depth_avg = mutable.ListBuffer[Int]()\n        val paren_closed_depth_avg\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_min = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_depth_min = mutable.ListBuffer[Int]()\n        val paren_open_depth_max\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth_max = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_sum = mutable.ListBuffer[Int]()\n        val paren_closed_depth_sum\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_avg = mutable.ListBuffer[Double]()\n\
    \        val paren_closed_depth_\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppdp12p0_.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppdp12p0_.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_open_depth_min\e[0m = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_min is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_open_depth_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppdp12p0_.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_min\e\
    [0m = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_depth_min is already defined as \e[33mvalue\e\
    [0m \e[35mparen_closed_depth_min\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppdp12p0_.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mparen_open_depth_max\e[0m\
    \ = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_open_depth_max is already defined as \e[33mvalue\e[0m\
    \ \e[35mparen_open_depth_max\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmppdp12p0_.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_depth_max\e\
    [0m = mutable.ListBuffer[\e[35mDouble\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_closed_depth_"
  stdout: ''
  timestamp: 1660013233
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaf6fzpj_.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpaf6fzpj_.scala:13:101 -------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted\e[0m = paren_groups_with_spaces.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \    ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \                   Found:    Int\n\e[31m   |\e[0m                           \
    \                            Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpaf6fzpj_.scala:15:139 -------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces.sortWith((\e[36mx\e[0m, \e[36my\e\
    [0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                                    Found:    Int\n\e[31m   |\e[0m          \
    \                                             Required: Boolean\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaf6fzpj_.scala:17:177 -------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.compareTo(y))\n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \                                                                         "
  stdout: ''
  timestamp: 1660013235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(x => x.contains(\"(\"))\n        val paren_groups_flat3\
    \ = paren_groups_flat2.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat4\
    \ = paren_groups_flat3.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat5\
    \ = paren_groups_flat4.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat6\
    \ = paren_groups_flat5.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat7\
    \ = paren_groups_flat6.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat8\
    \ = paren_groups_flat7.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat10\
    \ = paren_groups_flat9.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat11\
    \ = paren_groups_flat10.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat12\
    \ = paren_groups_flat11.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat13\
    \ = paren_groups_flat12.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat14\
    \ = paren_groups_flat13.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat15\
    \ = paren_groups_flat14.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat16\
    \ = paren_groups_flat15.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat17\
    \ = paren_groups_flat16.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat18\
    \ = paren_groups_flat17.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat19\
    \ = paren_groups_flat18.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat21\
    \ = paren_groups_flat20.filterNot(x => x.contains(\")\"))\n        val paren_groups_flat22\
    \ = paren_groups_flat21.filterNot(x \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpohvfn54v.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpohvfn54v.scala:13:68\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_flat2\e[0m = paren_groups_flat.filterNot(\e[36mx\e[0m => x.contains(\e\
    [31m\"(\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                  value contains is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpohvfn54v.scala:14:69 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value contains is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpohvfn54v.scala:15:69 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(\e[36mx\e[0m => x.contains(\e[31m\")\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \ value contains is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpohvfn54v.scala:16:69 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m = paren_groups_flat4.filterNot(\e\
    [36mx\e[0m => x.contains(\e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \                                                        ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value contains is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpohvfn54v.scala:17:69 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filte"
  stdout: ''
  timestamp: 1660013238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkps6ocpg.scala:21:122 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkps6ocpg.scala:23:141 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkps6ocpg.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013235
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\").replaceAll(\"\\\\s+\", \"\"))\n        val paren_group_strings_sorted\
    \ = paren_group_strings.sortWith(_.length < _.length)\n        paren_group_strings_sorted.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp2yjp69e.scala:17)\n\tat Problem.main(tmpp2yjp69e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filter(_ != \")\")\n        val paren_groups_flat3 = paren_groups_flat2.filter(_\
    \ != \")\")\n        val paren_groups_flat4 = paren_groups_flat3.filter(_ != \"\
    )\")\n        val paren_groups_flat5 = paren_groups_flat4.filter(_ != \")\")\n\
    \        val paren_groups_flat6 = paren_groups_flat5.filter(_ != \")\")\n    \
    \    val paren_groups_flat7 = paren_groups_flat6.filter(_ != \")\")\n        val\
    \ paren_groups_flat8 = paren_groups_flat7.filter(_ != \")\")\n        val paren_groups_flat9\
    \ = paren_groups_flat8.filter(_ != \")\")\n        val paren_groups_flat10 = paren_groups_flat9.filter(_\
    \ != \")\")\n        val paren_groups_flat11 = paren_groups_flat10.filter(_ !=\
    \ \")\")\n        val paren_groups_flat12 = paren_groups_flat11.filter(_ != \"\
    )\")\n        val paren_groups_flat13 = paren_groups_flat12.filter(_ != \")\"\
    )\n        val paren_groups_flat14 = paren_groups_flat13.filter(_ != \")\")\n\
    \        val paren_groups_flat15 = paren_groups_flat14.filter(_ != \")\")\n  \
    \      val paren_groups_flat16 = paren_groups_flat15.filter(_ != \")\")\n    \
    \    val paren_groups_flat17 = paren_groups_flat16.filter(_ != \")\")\n      \
    \  val paren_groups_flat18 = paren_groups_flat17.filter(_ != \")\")\n        val\
    \ paren_groups_flat19 = paren_groups_flat18.filter(_ != \")\")\n        val paren_groups_flat20\
    \ = paren_groups_flat19.filter(_ != \")\")\n        val paren_groups_flat21 =\
    \ paren_groups_flat20.filter(_ != \")\")\n        val paren_groups_flat22 = paren_groups_flat21.filter(_\
    \ != \")\")\n        val paren_groups_flat23 = paren_groups_flat22.filter(_ !=\
    \ \")\")\n        val paren_groups_flat24 = paren_groups_flat23.filter(_ != \"\
    )\")\n        val paren_groups_flat25 = paren_groups_flat24.filter(_ != \")\"\
    )\n        val paren_groups_flat26 = paren_groups_flat25.filter(_ != \")\")\n\
    \        val paren_groups_flat27 = paren_groups_flat26.filter(_ != \")\")\n  \
    \      val paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl68qfqn6.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpl68qfqn6.scala:13:58\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m = paren_groups_flat.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpl68qfqn6.scala:14:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m14 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m = paren_groups_flat2.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpl68qfqn6.scala:15:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m15 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m = paren_groups_flat3.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpl68qfqn6.scala:16:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m16 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m = paren_groups_flat4.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpl68qfqn6.scala:17:59\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \ \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m = paren_groups_flat5.filter(_ !=\
    \ \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m                                   \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Valu"
  stdout: ''
  timestamp: 1660013242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_group_count = paren_groups.length\n\
    \        val paren_group_lengths = paren_groups.map(_.length).toList\n       \
    \ val paren_group_lengths_sum = paren_group_lengths.sum\n        val paren_group_lengths_product\
    \ = paren_group_lengths.product\n        val paren_group_lengths_product2 = paren_group_lengths_product\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product3 = paren_group_lengths_product2\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product4 = paren_group_lengths_product3\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product5 = paren_group_lengths_product4\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product6 = paren_group_lengths_product5\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product7 = paren_group_lengths_product6\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product8 = paren_group_lengths_product7\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product9 = paren_group_lengths_product8\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product10 = paren_group_lengths_product9\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product11 = paren_group_lengths_product10\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product12 = paren_group_lengths_product11\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product13 = paren_group_lengths_product12\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product14 = paren_group_lengths_product13\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product15 = paren_group_lengths_product14\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product16 = paren_group_lengths_product15\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product17 = paren_group_lengths_product16\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product18 = paren_group_lengths_product17\
    \ * paren_group_lengths_product\n        val paren_group_lengths_product19 = paren_group_lengths_product18\
    \ * paren_group_lengths_product\n        val paren\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptuxyusi_.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptuxyusi_.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        paren_string.split(\"\\\\(\").foreach(paren_groups ++= _)\n        paren_groups.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1vpa7117.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_paren_groups = paren_groups.filter(x\
    \ => x.startsWith(\"(\"))\n        val close_paren_groups = paren_groups.filter(x\
    \ => x.endsWith(\")\"))\n        val open_paren_groups_count = open_paren_groups.length\n\
    \        val close_paren_groups_count = close_paren_groups.length\n        val\
    \ open_paren_groups_sum = open_paren_groups_count * open_paren_groups.length\n\
    \        val close_paren_groups_sum = close_paren_groups_count * close_paren_groups.length\n\
    \        val open_paren_groups_average = open_paren_groups_sum / open_paren_groups.length\n\
    \        val close_paren_groups_average = close_paren_groups_sum / close_paren_groups.length\n\
    \        val open_paren_groups_variance = open_paren_groups_average * (open_paren_groups_count\
    \ - 1)\n        val close_paren_groups_variance = close_paren_groups_average *\
    \ (close_paren_groups_count - 1)\n        val open_paren_groups_standard_deviation\
    \ = math.sqrt(open_paren_groups_variance)\n        val close_paren_groups_standard_deviation\
    \ = math.sqrt(close_paren_groups_variance)\n        val open_paren_groups_min\
    \ = open_paren_groups.minBy(_.length)\n        val close_paren_groups_min = close_paren_groups.minBy(_.length)\n\
    \        val open_paren_groups_max = open_paren_groups.maxBy(_.length)\n     \
    \   val close_paren_groups_max = close_paren_groups.maxBy(_.length)\n        val\
    \ open_paren_groups_sum = open_paren_groups.map(_.length).sum\n        val close_paren_groups_sum\
    \ = close_paren_groups.map(_.length).sum\n        val open_paren_groups_average\
    \ = open_paren_groups_sum / open_paren_groups.length\n        val close_paren_groups_average\
    \ = close_paren_groups_sum / close_paren_groups.length\n        val open_paren_groups_variance\
    \ = open_paren_groups_average * (open_paren_groups_count - 1)\n        val close_paren_groups_variance\
    \ = close_paren_groups_average * (close_paren_groups_count - 1)\n        val open_paren_groups_standard_deviation\
    \ = math.sqrt(open_paren_groups_variance)\n        val close_paren_groups_standard_deviation\
    \ = math.sqrt(close_paren_groups_variance)\n        val open_paren_groups_min\
    \ = open_paren_groups.minBy(_.length)\n        val close_paren_groups_min = close_paren_groups.minBy(_.length)\n\
    \        val open_paren_groups_max = open_paren_groups.maxBy(_.length)\n     \
    \   val close_paren_groups_max = \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_7rbnv70.scala:39:36 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mclose_paren_groups_max\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m\
    \   |\e[0m                                    expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_7rbnv70.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mopen_paren_groups_sum\e[0m = open_paren_groups.map(_.length).sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_paren_groups_sum is already defined as \e[33mvalue\e\
    [0m \e[35mopen_paren_groups_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_7rbnv70.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mclose_paren_groups_sum\e\
    [0m = close_paren_groups.map(_.length).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclose_paren_groups_sum is already defined as \e[33mvalue\e\
    [0m \e[35mclose_paren_groups_sum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_7rbnv70.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mopen_paren_groups_average\e\
    [0m = open_paren_groups_sum / open_paren_groups.length\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mopen_paren_groups_average is already defined as \e[33mvalue\e\
    [0m \e[35mopen_paren_groups_average\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tm"
  stdout: ''
  timestamp: 1660013240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces = 0\n        var closed_braces = 0\n        var paren_group\
    \ = \"\"\n        var paren_group_open = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n        var paren_group_opened = false\n        var paren_group_closed\
    \ = false\n\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptpfz51np.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_closed\e[0m\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_closed\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptpfz51np.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_opened\e[0m\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_opened is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_opened\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptpfz51np.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_closed\e[0m\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_closed\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptpfz51np.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_opened\e[0m\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_opened is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_opened\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptpfz51np.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_closed\e[0m\
    \ = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces.map(x => x.trim).filter(x => !x.isEmpty)\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted = paren_groups_with_spaces_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.map(x\
    \ => x.trim).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(x\
    \ => x.replace(\")\", \" ) \"))\n        val paren_groups_with_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ccxo28k.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ccxo28k.scala:21:120\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted.map(\e\
    [36mx\e[0m => x.trim).filter(\e[36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ccxo28k.scala:22:139\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\")\"\e[0m, \e[31m\" ) \"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed_sorted_with_spaces_trimmed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanat"
  stdout: ''
  timestamp: 1660013218
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached2 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached2 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached3 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached3 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached4 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached4 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached5 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached5 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached6 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached6 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached7 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached7 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached8 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached8 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached9 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached9 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_depth_limit_reached10 = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa05pluwd.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa05pluwd.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa05pluwd.scala:12:25 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpa05pluwd.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa05pluwd.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_open_size\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa05pluwd.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e["
  stdout: ''
  timestamp: 1660013241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_with_brackets\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"[\").replace(\"\
    )\", \"]\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets.map(x => x.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets.map(x => x.replace(\"\
    (\", \"[(\").replace(\")\", \"](\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"(\").replace(\"]\", \")(\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"(\", \"[(\").replace(\")\", \"](\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"[\", \"(\").replace(\"]\", \")(\"))\n        val paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpc_ehkbuy.scala:19:288 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpc_ehkbuy.scala:19:156 -----------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_open_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc_ehkbuy.scala:20:5\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Foun"
  stdout: ''
  timestamp: 1660013241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_size = paren_groups.size\n\
    \        val paren_groups_remaining = paren_groups_size - paren_groups.filter(_.isEmpty).size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining + paren_groups_size\n\
    \        val paren_groups_remaining_size = paren_groups_remaining \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4afda3hy.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_size\e\
    [0m = paren_groups_remaining + paren_groups_size\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remaining_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_remaining_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4afda3hy.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_size\e\
    [0m = paren_groups_remaining + paren_groups_size\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remaining_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_remaining_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4afda3hy.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_size\e\
    [0m = paren_groups_remaining + paren_groups_size\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remaining_size is already defined as \e[33mvalue\e\
    [0m \e[35mparen_groups_remaining_size\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4afda3hy.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_size\e\
    [0m = paren_groups_remaining + paren_groups_size\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remaining_size is already defined a"
  stdout: ''
  timestamp: 1660013242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        paren_string.split(\"\\\\(\").foreach(x => {\n            val paren_group\
    \ = x\n            val open_brace_count = paren_group.split(\"\\\\)\").length\n\
    \            val close_brace_count = paren_group.split(\"\\\\)\").length - 1\n\
    \            val open_brace_count_diff = close_brace_count - open_brace_count\n\
    \            if (open_brace_count_diff == 0) {\n                paren_groups +=\
    \ paren_group\n            }\n        })\n        paren_groups.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxh5_aasz.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_count = paren_groups.length\n        val paren_groups_with_paren\
    \ = paren_groups.map(x => x + \"(\").mkString(\"(\", \")(\")\n        val paren_groups_with_paren_count\
    \ = paren_groups_with_paren.length\n        val paren_groups_with_paren_count_with_paren\
    \ = paren_groups_with_paren_count + paren_groups_with_paren\n        val paren_groups_with_paren_count_without_paren\
    \ = paren_groups_with_paren_count - paren_groups_with_paren_count_with_paren\n\
    \        val paren_groups_with_paren_count_without_paren_without_paren = paren_groups_with_paren_count_without_paren\
    \ - paren_groups_with_paren_count_with_paren\n        val paren_groups_with_paren_count_without_paren_with_paren\
    \ = paren_groups_with_paren_count_without_paren - paren_groups_with_paren_count_without_paren\n\
    \        val paren_groups_with_paren_count_without_paren_with_paren_without_paren\
    \ = paren_groups_with_paren_count_without_paren_with_paren - paren_groups_with_paren_count_with_paren\n\
    \        val paren_groups_with_paren_count_without_paren_with_paren_with_paren\
    \ = paren_groups_with_paren_count_without_paren_with_paren - paren_groups_with_paren_count_without_paren\n\
    \        val paren_groups_with_paren_count_without_paren_with_paren_with_paren_without_paren\
    \ = paren_groups_with_paren_count_without_paren_with_paren_with_paren - paren_groups_with_paren_count_without_paren\n\
    \        val paren_groups_with_paren_count_without_paren_with_paren_with_paren_with_paren\
    \ = paren_groups_with_paren_count_without_paren_with_paren_with_paren - paren_groups_with_paren_count_without_paren\n\
    \        val paren_groups_with_paren_count_without_paren_with_paren_with_paren_with_paren_without_paren\
    \ = paren_groups_with_paren_count_without_paren_with_paren_with_paren_with_paren\
    \ - paren_groups_with_paren_count_without_paren\n        val paren_groups_with_paren_count_without_paren_with_paren_with_paren_with_paren_with_paren\
    \ = paren_groups_with_paren_count_without_paren_with_paren_with_paren_with_paren\
    \ - paren_groups_with_paren_count_without_paren\n        val paren_groups_with_paren_count_without_paren_with_paren_with_paren_with_paren_with_paren_without_paren\
    \ = paren_groups_with_paren_count_without_paren_with_paren_with_paren_with_paren_with_paren\
    \ - paren_groups_with_paren_count_without_paren\n        val paren_groups_with_paren_count_without_paren_with_paren_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp76bqbrmd.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp76bqbrmd.scala:13:78 --------------------\e[0m\e[0m\n\e[31m13 |\e[0m\
    \        \e[33mval\e[0m \e[36mparen_groups_with_paren\e[0m = paren_groups.map(\e\
    [36mx\e[0m => x + \e[31m\"(\"\e[0m).mkString(\e[31m\"(\"\e[0m, \e[31m\")(\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                             Found:    (String, String)\n\e[31m   |\e[0m    \
    \                                          Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp76bqbrmd.scala:14:68 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_paren_count\e\
    [0m = paren_groups_with_paren.length\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                    value length is not a member of Char\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp76bqbrmd.scala:27:5 ---------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660013242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_open = mutable.ListBuffer[String]()\n        val paren_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_open_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_size = mutable.ListBuffer[Int]()\n        val paren_open_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_depth = mutable.ListBuffer[Int]()\n\
    \        val paren_open_depth_limit = mutable.ListBuffer[Int]()\n        val paren_closed_depth_limit\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_closed_depth_limit_reached = mutable.ListBuffer[Boolean]()\n\
    \        val paren_open_brace = mutable.ListBuffer[Int]()\n        val paren_closed_brace\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_limit = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_limit = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_limit_reached = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_closed_brace_limit_reached = mutable.ListBuffer[Boolean]()\n        val\
    \ paren_open_brace_open = mutable.ListBuffer[Int]()\n        val paren_closed_brace_open\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_closed = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_closed = mutable.ListBuffer[Int]()\n        val\
    \ paren_open_brace_open_size = mutable.ListBuffer[Int]()\n        val paren_closed_brace_open_size\
    \ = mutable.ListBuffer[Int]()\n        val paren_open_brace_closed_size = mutable.ListBuffer[Int]()\n\
    \        val paren_closed_brace_closed_size = mutable.ListBuffer[Int]()\n    \
    \    val paren_open_brace_open_depth = mutable.ListBuffer[Int]()\n        val\
    \ paren_closed_brace_open_depth = mutable.ListBuffer[Int]()\n        val paren_open_brace_closed_depth\
    \ = mutable.ListBuffer[Int]()\n        val paren_closed_\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj3xva5_n.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3xva5_n.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpj3xva5_n.scala:12:25 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_open\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpj3xva5_n.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_closed\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3xva5_n.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_open_size\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Not found: mutable\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj3xva5_n.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_closed_size\e[0m =\
    \ mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^\e[0m\n\e["
  stdout: ''
  timestamp: 1660013241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.distinct\n        val paren_groups_flat3 = paren_groups_flat2.filterNot(paren_groups_flat2.contains)\n\
    \        paren_groups_flat3.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5tq97pjb.scala:15:27\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        paren_groups_flat3.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        paren_groups_flat4.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpi9p47vuw.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpi9p47vuw.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpi9p47vuw.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi9p47vuw.scala:16:27\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        paren_groups_flat4.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    List[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m        Required:\
    \ List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013205
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replace(\" \"\
    , \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkps6ocpg.scala:21:122 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkps6ocpg.scala:23:141 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkps6ocpg.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013235
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"  \", \" \"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    \  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8v6u8y8p.scala:16:99 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp8v6u8y8p.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp8v6u8y8p.scala:18:129 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                          "
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x + \"( )\")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortWith((x, y) => x.compareTo(y)\
    \ == -1)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x + \"( )( )\"\
    )\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \"( )( )( )\")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \"( )( )( )( )\")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x + \"( )( )( )( )( )\")\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm_i3c0b7.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpm_i3c0b7.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8utv5a7.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn8utv5a7.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\").trim())\n        paren_group_strings.filter(x\
    \ => !x.isEmpty)\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_cer5db3.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => !x.isEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val open_braces = mutable.ListBuffer[String]()\n        val close_braces\
    \ = mutable.ListBuffer[String]()\n        paren_string.foreach { x =>\n      \
    \      x match {\n                case \" \" => ()\n                case \")\"\
    \ => close_braces += x\n                case \")(\" => open_braces += x\n    \
    \            case \")(\" => open_braces += x\n                case \")(\" => open_braces\
    \ += x\n                case \")(\" => open_braces += x\n                case\
    \ \")(\" => open_braces += x\n                case \")(\" => open_braces += x\n\
    \                case \")(\" => open_braces += x\n                case \")(\"\
    \ => open_braces += x\n                case \")(\" => open_braces += x\n     \
    \           case \")(\" => open_braces += x\n                case \")(\" => open_braces\
    \ += x\n                case \")(\" => open_braces += x\n                case\
    \ \")(\" => open_braces += x\n                case \")(\" => open_braces += x\n\
    \                case \")(\" => open_braces += x\n                case \")(\"\
    \ => open_braces += x\n                case \")(\" => open_braces += x\n     \
    \           case \")(\" => open_braces += x\n                case \")(\" => open_braces\
    \ += x\n                case \")(\" => open_braces += x\n                case\
    \ \")(\" => open_braces += x\n                case \")(\" => open_braces += x\n\
    \                case \")(\" => open_braces += x\n                case \")(\"\
    \ => open_braces += x\n                case \")(\" => open_braces += x\n     \
    \           case \")(\" => open_braces += x\n                case \")(\" => open_braces\
    \ += x\n                case \")(\" => open_braces += x\n                case\
    \ \")(\" => open_braces += x\n                case \")(\" => open_braces += x\n\
    \                case \")(\" => open_braces += x\n                case \")(\"\
    \ => open_braces += x\n                case \")(\" => open_braces += x\n     \
    \           case \")(\" => open_braces += x\n                case \")(\" => open_braces\
    \ += x\n                case \")(\" => open_braces += x\n                case\
    \ \")(\" => open_braces += x\n                case \")(\" => open_braces += x\n\
    \                case \")(\" => open_braces += x\n                case \")(\"\
    \ => open_b\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6gegst_z.scala:67:0 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6gegst_z.scala:11:27\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6gegst_z.scala:12:26 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mopen_braces\e[0m = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp6gegst_z.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mclose_braces\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp6gegst_z.scala:16:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m \e[31m\" \"\e[0m => ()\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp6gegst_z.scala:17:21 -----------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                \e[33mcase\e[0m \e[31m\")\"\e[0m => close_braces\
    \ += x\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m  \
    \      Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmp6gegst_z.scala:18:21 ------------------------"
  stdout: ''
  timestamp: 1660013249
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \"\"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzpy2xuda.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Not found: paren_groups_with_spaces_sorted_with_spaces_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzpy2xuda.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces.sortBy(x => x.length)\n      \
    \  val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x.length)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyo9_y6l8.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpyo9_y6l8.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_group_open = mutable.ListBuffer[String]()\n        val paren_group_closed\
    \ = mutable.ListBuffer[String]()\n        val paren_group_open_index = mutable.ListBuffer[Int]()\n\
    \        val paren_group_closed_index = mutable.ListBuffer[Int]()\n        val\
    \ paren_group_open_index = paren_group_open_index.init\n        val paren_group_closed_index\
    \ = paren_group_closed_index.init\n        val paren_group_open = paren_group_open.init\n\
    \        val paren_group_closed = paren_group_closed.init\n        val paren_group_open_index\
    \ = paren_group_open_index.init\n        val paren_group_closed_index = paren_group_closed_index.init\n\
    \        val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val paren_group_open = paren_group_open.init\n        val paren_group_closed\
    \ = paren_group_closed.init\n        val paren_group_open_index = paren_group_open_index.init\n\
    \        val paren_group_closed_index = paren_group_closed_index.init\n      \
    \  val \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpwx7t6bok.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpwx7t6bok.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open_index\e\
    [0m = paren_group_open_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_open_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwx7t6bok.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed_index\e\
    [0m = paren_group_closed_index.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_closed_index is already defined as \e[33mvalue\e\
    [0m \e[35mparen_group_closed_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwx7t6bok.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_group_open\e[0m =\
    \ paren_group_open.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open is already defined as \e[33mvalue\e[0m \e\
    [35mparen_group_open\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwx7t6bok.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_group_closed\e[0m\
    \ = paren_group_closed.init\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_size = paren_groups.length\n        val paren_groups_size2\
    \ = paren_groups_size/2\n        val paren_groups_size3 = paren_groups_size/3\n\
    \        val paren_groups_size4 = paren_groups_size/4\n        val paren_groups_size5\
    \ = paren_groups_size/5\n        val paren_groups_size6 = paren_groups_size/6\n\
    \        val paren_groups_size7 = paren_groups_size/7\n        val paren_groups_size8\
    \ = paren_groups_size/8\n        val paren_groups_size9 = paren_groups_size/9\n\
    \        val paren_groups_size10 = paren_groups_size/10\n        val paren_groups_size11\
    \ = paren_groups_size/11\n        val paren_groups_size12 = paren_groups_size/12\n\
    \        val paren_groups_size13 = paren_groups_size/13\n        val paren_groups_size14\
    \ = paren_groups_size/14\n        val paren_groups_size15 = paren_groups_size/15\n\
    \        val paren_groups_size16 = paren_groups_size/16\n        val paren_groups_size17\
    \ = paren_groups_size/17\n        val paren_groups_size18 = paren_groups_size/18\n\
    \        val paren_groups_size19 = paren_groups_size/19\n        val paren_groups_size20\
    \ = paren_groups_size/20\n        val paren_groups_size21 = paren_groups_size/21\n\
    \        val paren_groups_size22 = paren_groups_size/22\n        val paren_groups_size23\
    \ = paren_groups_size/23\n        val paren_groups_size24 = paren_groups_size/24\n\
    \        val paren_groups_size25 = paren_groups_size/25\n        val paren_groups_size26\
    \ = paren_groups_size/26\n        val paren_groups_size27 = paren_groups_size/27\n\
    \        val paren_groups_size28 = paren_groups_size/28\n        val paren_groups_size29\
    \ = paren_groups_size/29\n        val paren_groups_size30 = paren_groups_size/30\n\
    \        val paren_groups_size31 = paren_groups_size/31\n        val paren_groups_size32\
    \ = paren_groups_size/32\n        val paren_groups_size33 = paren_groups_size/33\n\
    \        val paren_groups_size34 = paren_groups_size/34\n        val paren_groups_size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvyboxh1r.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvyboxh1r.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val open_braces = paren_groups.filter(_.startsWith(\"\
    (\"))\n        val closed_braces = paren_groups.filter(_.startsWith(\")\"))\n\
    \        val unclosed_braces = paren_groups.filter(_.startsWith(\")(\"))\n   \
    \     val unclosed_parens = paren_groups.filter(_.startsWith(\"(\"))\n       \
    \ val unclosed_groups = paren_groups.filter(_.startsWith(\"(\"))\n        val\
    \ unclosed_groups_with_parens = unclosed_groups.map(x => x + \"(\")\n        val\
    \ unclosed_groups_with_parens_with_braces = unclosed_groups_with_parens.map(x\
    \ => x + \"(\")\n        val unclosed_groups_with_parens_with_braces_with_brackets\
    \ = unclosed_groups_with_parens_with_braces.map(x => x + \"[\")\n        val unclosed_groups_with_parens_with_braces_with_brackets_with_brackets\
    \ = unclosed_groups_with_parens_with_braces_with_brackets.map(x => x + \"{\")\n\
    \        val unclosed_groups_with_parens_with_braces_with_brackets_with_brackets_with_brackets\
    \ = unclosed_groups_with_parens_with_braces_with_brackets_with_brackets.map(x\
    \ => x + \"}\")\n        val unclosed_groups_with_parens_with_braces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = unclosed_groups_with_parens_with_braces_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x + \"}\")\n        val unclosed_groups_with_parens_with_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = unclosed_groups_with_parens_with_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \        val unclosed_groups_with_parens_with_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvauah4f2.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvauah4f2.scala:22:110\
    \ --------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36munclosed_groups_with_parens_with_braces_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = unclosed_groups_with_parens_with_braces_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x + \e[31m\"}\"\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  unclosed_groups_with_parens_with_braces_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpvauah4f2.scala:23:124 -----------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36munclosed_groups_with_parens_with_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = unclosed_groups_with_parens_with_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: unclosed_groups_with_parens_with_braces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvauah4f2.scala:25:5\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m  "
  stdout: ''
  timestamp: 1660013247
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_count = paren_groups.length\n        val paren_group_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_open_braces = 0\n  \
    \      var paren_group_close_braces = 0\n        var paren_group_open_brace_count\
    \ = 0\n        var paren_group_close_brace_count = 0\n        var paren_group_open_brace_string\
    \ = \"\"\n        var paren_group_close_brace_string = \"\"\n        var paren_group_open_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_close_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_open_brace_string =\
    \ \"\"\n        var paren_group_close_brace_string = \"\"\n        var paren_group_open_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_close_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_open_brace_string =\
    \ \"\"\n        var paren_group_close_brace_string = \"\"\n        var paren_group_open_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_close_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_open_brace_string =\
    \ \"\"\n        var paren_group_close_brace_string = \"\"\n        var paren_group_open_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_close_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_open_brace_string =\
    \ \"\"\n        var paren_group_close_brace_string = \"\"\n        var paren_group_open_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_close_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_open_brace_string =\
    \ \"\"\n        var paren_group_close_brace_string = \"\"\n        var paren_group_open_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_close_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_open_brace_string =\
    \ \"\"\n        var paren_group_close_brace_string = \"\"\n        var paren_group_open_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_close_brace_strings\
    \ = mutable.ListBuffer[String]()\n        var paren_group_open_brace_string =\
    \ \"\"\n        var paren\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3yqsgt3f.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3yqsgt3f.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mparen_group_open_brace_string\e[0m = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mparen_group_open_brace_string\
    \ is already defined as \e[33mvariable\e[0m \e[35mparen_group_open_brace_string\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3yqsgt3f.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_close_brace_string\e[0m\
    \ = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_close_brace_string is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_close_brace_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3yqsgt3f.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_open_brace_strings\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_open_brace_strings is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_open_brace_strings\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3yqsgt3f.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_close_brace_strings\e\
    [0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e"
  stdout: ''
  timestamp: 1660013247
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,\
    \ y) => x.compareTo(y) < 0)\n        paren_group_strings_sorted.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9t5tsc9u.scala:17)\n\tat Problem.main(tmp9t5tsc9u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_closed_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\"))\n        val paren_groups_with_spaces = paren_groups_with_closed_braces.map(x\
    \ => x.replace(\"(\", \" \"))\n        val paren_groups_with_no_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\")\", \"\"))\n        paren_groups_with_no_spaces.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp02kxfib9.scala:19)\n\tat Problem.main(tmp02kxfib9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_with_paren = paren_groups_with_spaces_trimmed.map(x\
    \ => x.replace(\"(\", \"( \"))\n        val paren_groups_with_spaces_trimmed_with_paren_trimmed\
    \ = paren_groups_with_spaces_trimmed_with_paren.map(x => x.trim())\n        val\
    \ paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren = paren_groups_with_spaces_trimmed_with_paren_trimmed.map(x\
    \ => x.replace(\"(\", \"( \"))\n        val paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed\
    \ = paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren.map(x => x.trim())\n\
    \        val paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren\
    \ = paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed.map(x\
    \ => x.replace(\"(\", \"( \"))\n        val paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed\
    \ = paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren\
    \ = paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed.map(x\
    \ => x.replace(\"(\", \"( \"))\n        val paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed\
    \ = paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren\
    \ = paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed.map(x\
    \ => x.replace(\"(\"\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp05625162.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp05625162.scala:22:254\
    \ ----------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren\e\
    [0m = paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m\n\e[31m\e[31m   |\e[0m              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35mreplace\e[0m in \e[33mclass\e[0m \e[35mString\e[0m\
    \ with types\n\e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence): String\n\
    \e[31m   |\e[0m (x$0: Char, x$1: Char): String\n\e[31m   |\e[0mmatch arguments\
    \ ((\e[32m\"(\"\e[0m : String))\n\e[31m\e[31m-- Error: /tmp/tmp05625162.scala:22:265\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e\
    [33mval\e[0m \e[36mparen_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren\e\
    [0m = paren_groups_with_spaces_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed_with_paren_trimmed.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m\n\e[31m\e[31m   |\e[0m              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \            No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m   \
    \                                       where:    B i"
  stdout: ''
  timestamp: 1660013252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\"))\n        val paren_group_strings_sorted = paren_group_strings.sortBy(x\
    \ => x.length)\n        val paren_group_strings_sorted_reversed = paren_group_strings_sorted.reverse\n\
    \        val paren_group_strings_sorted_reversed_size = paren_group_strings_sorted_reversed.size\n\
    \        val paren_group_strings_sorted_reversed_size_2 = paren_group_strings_sorted_reversed_size\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_3 = paren_group_strings_sorted_reversed_size_2\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_4 = paren_group_strings_sorted_reversed_size_3\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_5 = paren_group_strings_sorted_reversed_size_4\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_6 = paren_group_strings_sorted_reversed_size_5\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_7 = paren_group_strings_sorted_reversed_size_6\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_8 = paren_group_strings_sorted_reversed_size_7\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_9 = paren_group_strings_sorted_reversed_size_8\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_10 = paren_group_strings_sorted_reversed_size_9\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_11 = paren_group_strings_sorted_reversed_size_10\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_12 = paren_group_strings_sorted_reversed_size_11\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_13 = paren_group_strings_sorted_reversed_size_12\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_14 = paren_group_strings_sorted_reversed_size_13\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_15 = paren_group_strings_sorted_reversed_size_14\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_16 = paren_group_strings_sorted_reversed_size_15\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_17 = paren_group_strings_sorted_reversed_size_16\
    \ / 2\n        val paren_group_strings_sorted_reversed_size_18 = paren_group_string\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65n8kjs3.scala:32:58 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_reversed_size_18\e\
    [0m = paren_group_string\n\e[31m\e[31m   |\e[0m                              \
    \                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                                   Not found: paren_group_string\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp65n8kjs3.scala:33:5 ---------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_with_brackets = paren_groups_with_spaces.map(x\
    \ => x.replace(\"(\", \"[ \"))\n        val paren_groups_with_spaces_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets.map(x => x.replace(\"[\", \"] \"))\n\
    \        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets_with_brackets.map(x => x.replace(\"\
    ]\", \"] \"))\n        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets.map(x =>\
    \ x.replace(\"]\", \"] \"))\n        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"]\", \"] \"))\n        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"]\", \"] \"))\n        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(x\
    \ => x.replace(\"]\", \"] \"))\n        val paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\
    \ = paren_groups_with_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcfxthd_d.scala:18:123 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"]\"\e[0m, \e[31m\"] \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                      ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpcfxthd_d.scala:19:137 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"]\"\e[0m, \e[31m\"] \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpcfxthd_d.scala:20:151 -----------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets_with_brackets\e\
    [0m = paren_g"
  stdout: ''
  timestamp: 1660013251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,y)\
    \ => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\"(\",\"\").replace(\"\
    )\",\"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces.sortWith((x,y) => x.size\
    \ < y.size)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted.map(x => x.replace(\"\
    (\",\"\").replace(\")\",\"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces.sortWith((x,y)\
    \ => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\",\"\").replace(\")\",\"\")).filter(x => !x.isEmpty)\n    \
    \    val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.sortWith((x,y)\
    \ => x.size < y.size)\n        val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\",\"\").replace(\")\",\"\")).filter(x => !x.isEmpty)\n    \
    \    val paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()())\
    \ ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\"\
    , \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzyas8b8a.scala:21:142 -----------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_open_braces_sorted_with_open\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzyas8b8a.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_sorted\
    \ = paren_groups_with_open_braces.sortBy(x => x)\n        val paren_groups_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted.map(x => x.replace(\"(\", \"(\").replace(\"\
    )\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces.sortBy(x => x)\n   \
    \     val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted.map(x => x.replace(\"\
    (\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.sortBy(x\
    \ => x)\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi5g1ad8m.scala:18:116 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\e\
    [0m = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"(\"\e[0m).replace(\e[31m\")\"\
    \e[0m, \e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \           ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m \
    \  |\e[0m  paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpi5g1ad8m.scala:19:123 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\e\
    [0m = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"(\"\e[0m).replace(\e[31m\")\"\
    \e[0m, \e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpi5g1ad8m.scala:21:147 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\e\
    [0m = paren_groups_with_open_br"
  stdout: ''
  timestamp: 1660013252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        paren_group_strings.filter(x => x.nonEmpty)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpes7c3rw4.scala:13:34\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.filter(\e\
    [36mx\e[0m => x.nonEmpty)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).filter(_.nonEmpty)\n        val paren_group_stack = mutable.Stack[String]()\n\
    \        val paren_group_list_with_paren = mutable.ListBuffer[String]()\n    \
    \    paren_groups.foreach(paren_group => {\n            paren_group_stack.clear()\n\
    \            paren_group_list_with_paren.clear()\n            paren_group.foreach(c\
    \ => {\n                if (c == \"(\") {\n                    paren_group_stack\
    \ += c\n                } else if (c == \")\") {\n                    paren_group_stack\
    \ += c\n                    paren_group_list_with_paren += paren_group_stack.toList\n\
    \                    paren_group_stack.clear()\n                } else {\n   \
    \                 paren_group_stack += c\n                }\n            })\n\
    \        })\n        paren_group_list_with_paren.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkkzqsvfx.scala:12:32 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_group_stack\e[0m =\
    \ mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkkzqsvfx.scala:13:42\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_group_list_with_paren\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpkkzqsvfx.scala:18:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m (c == \e[31m\"(\"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpkkzqsvfx.scala:20:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                } \e[33melse\e[0m \e[33mif\e[0m (c ==\
    \ \e[31m\")\"\e[0m) {\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n4 errors found\n"
  stdout: ''
  timestamp: 1660013253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_without_spaces\
    \ = paren_groups_with_spaces.map(x => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\" \", \"\"))\n\
    \        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    \ \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\" \", \"\"))\n        val paren_group\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb5qiekd7.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb5qiekd7.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\" \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpb5qiekd7.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\" \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpb5qiekd7.scala:18:129 --------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_witho"
  stdout: ''
  timestamp: 1660013252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(x => x.replace(\"\
    )\", \"\").trim())\n        val paren_group_strings_sorted = paren_group_strings.sortWith((x,\
    \ y) => x.compareTo(y) == -1)\n        val paren_group_strings_sorted_with_open_braces\
    \ = paren_group_strings_sorted.map(x => x.replace(\"(\", \"{\").replace(\")\"\
    , \"}\"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces\
    \ = paren_group_strings_sorted_with_open_braces.map(x => x.replace(\"{\", \"{\"\
    \ + \" \"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces_without_braces\
    \ = paren_group_strings_sorted_with_open_braces_without_spaces.map(x => x.replace(\"\
    }\", \"}\" + \" \"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces\
    \ = paren_group_strings_sorted_with_open_braces_without_spaces_without_braces.map(x\
    \ => x.replace(\"{\", \"{\" + \" \"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces.map(x\
    \ => x.replace(\"}\", \"}\" + \" \"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"{\", \"{\" + \" \"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"}\", \"}\" + \" \"))\n        val paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"{\", \"{\" + \" \"))\n        val paren_group_strings_sorted_with_open\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprwkewn3x.scala:23:4 ----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmprwkewn3x.scala:19:133\
    \ --------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"{\"\e[0m, \e[31m\"{\"\e[0m + \e[31m\" \"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \ ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmprwkewn3x.scala:20:148 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"}\"\e[0m, \e[31m\"}\"\e[0m + \e[31m\" \"\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  paren_group_strings_sorted_with_open_braces_without_spaces_without_braces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling w"
  stdout: ''
  timestamp: 1660013254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        var open_braces : Int = 0\n        var closed_braces : Int = 0\n    \
    \    var open_parens : Int = 0\n        var close_parens : Int = 0\n        var\
    \ open_parens_count : Int = 0\n        var close_parens_count : Int = 0\n    \
    \    var paren_group : String = \"\"\n        var paren_group_count : Int = 0\n\
    \        var paren_group_string : String = \"\"\n        var paren_group_string\
    \ : String = \"\"\n        var paren_group_string : String = \"\"\n        var\
    \ paren_group_string : String = \"\"\n        var paren_group_string : String\
    \ = \"\"\n        var paren_group_string : String = \"\"\n        var paren_group_string\
    \ : String = \"\"\n        var paren_group_string : String = \"\"\n        var\
    \ paren_group_string : String = \"\"\n        var paren_group_string : String\
    \ = \"\"\n        var paren_group_string : String = \"\"\n        var paren_group_string\
    \ : String = \"\"\n        var paren_group_string : String = \"\"\n        var\
    \ paren_group_string : String = \"\"\n        var paren_group_string : String\
    \ = \"\"\n        var paren_group_string : String = \"\"\n        var paren_group_string\
    \ : String = \"\"\n        var paren_group_string : String = \"\"\n        var\
    \ paren_group_string : String = \"\"\n        var paren_group_string : String\
    \ = \"\"\n        var paren_group_string : String = \"\"\n        var paren_group_string\
    \ : String = \"\"\n        var paren_group_string : String = \"\"\n        var\
    \ paren_group_string : String = \"\"\n        var paren_group_string : String\
    \ = \"\"\n        var paren_group_string : String = \"\"\n        var paren_group_string\
    \ : String = \"\"\n        var paren_group_string : String = \"\"\n        var\
    \ paren_group_string : String = \"\"\n        var paren_group_string : String\
    \ = \"\"\n        var paren_group_string : String = \"\"\n        var paren_group_string\
    \ : String = \"\"\n        var paren_group_string : String = \"\"\n        var\
    \ paren_group_string : String = \"\"\n        var paren_group_string : String\
    \ = \"\"\n        var paren_group_string : String = \"\"\n        var paren_group_string\
    \ : String = \"\"\n        var paren_group_string : String = \"\"\n        var\
    \ paren_group_string : String = \"\"\n        var paren_group_string : String\
    \ = \"\"\n        var paren_group_string : String = \"\"\n        var paren_group_string\
    \ : String = \"\"\n        var paren_group_string : String = \"\"\n        var\
    \ paren_group_string : String = \"\"\n        var paren_group_string : String\
    \ = \"\"\n        var paren_group_string : String = \"\"\n        var paren_group_string\
    \ : String = \"\"\n        var paren_group_string : String = \"\"\n        var\
    \ paren_group_string : String = \"\"\n        var paren_group_string : String\
    \ = \"\"\n        var paren_group_string : String = \"\"\n        var paren_group_string\
    \ : String = \"\"\n        var paren_group_string : String = \"\"\n        var\
    \ paren_group_string : String = \"\"\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr2eyp0xh.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_string\e[0m\
    \ : \e[35mString\e[0m = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_string is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr2eyp0xh.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_string\e[0m\
    \ : \e[35mString\e[0m = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_string is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr2eyp0xh.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_string\e[0m\
    \ : \e[35mString\e[0m = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_string is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr2eyp0xh.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mparen_group_string\e[0m\
    \ : \e[35mString\e[0m = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_group_string is already defined as \e[33mvariable\e\
    [0m \e[35mparen_group_string\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr2eyp0xh.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[3"
  stdout: ''
  timestamp: 1660013254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_close_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\").replace(\")\"\
    , \"\")).filter(x => !x.isEmpty)\n        val paren_groups_with_open_braces_not_nested\
    \ = paren_groups_with_close_braces.filter(x => !x.contains(\"(\"))\n        val\
    \ paren_groups_with_close_braces_not_nested = paren_groups_with_open_braces_not_nested.filter(x\
    \ => !x.contains(\")\"))\n        val paren_groups_with_open_braces_not_nested_and_not_closed\
    \ = paren_groups_with_open_braces_not_nested.filter(x => !x.contains(\")\") &&\
    \ !x.contains(\"(\"))\n        val paren_groups_with_close_braces_not_nested_and_not_closed\
    \ = paren_groups_with_close_braces_not_nested.filter(x => !x.contains(\"(\") &&\
    \ !x.contains(\")\"))\n        val paren_groups_with_open_braces_not_nested_and_closed\
    \ = paren_groups_with_open_braces_not_nested_and_not_closed.filter(x => x.contains(\"\
    (\") && !x.contains(\")\"))\n        val paren_groups_with_close_braces_not_nested_and_closed\
    \ = paren_groups_with_close_braces_not_nested_and_not_closed.filter(x => x.contains(\"\
    )\") && !x.contains(\"(\"))\n        val paren_groups_with_open_braces_not_nested_and_closed_and_not_closed\
    \ = paren_groups_with_open_braces_not_nested_and_closed.filter(x => x.contains(\"\
    (\") && !x.contains(\")\") && !x.contains(\")\"))\n        val paren_groups_with_close_braces_not_nested_and_closed_and_not_closed\
    \ = paren_groups_with_close_braces_not_nested_and_closed_and_not_closed.filter(x\
    \ => x.contains(\")\") && !x.contains(\"(\") && !x.contains(\")\"))\n        val\
    \ paren_groups_with_open_braces_not_nested_and_closed_and_closed = paren_groups_with_open_braces_not_nested_and_closed_and_not_closed.filter(x\
    \ => x.contains(\"(\") && !x.contains(\")\") && x.contains(\")\"))\n        val\
    \ paren_groups_with_close_braces_not_nested_and_closed_and_closed = paren_groups_with_close_braces_not_nested_and_closed_and_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb_17u4me.scala:21:82 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_close_braces_not_nested_and_closed_and_not_closed\e\
    [0m = paren_groups_with_close_braces_not_nested_and_closed_and_not_closed.filter(\e\
    [36mx\e[0m => x.contains(\e[31m\")\"\e[0m) && !x.contains(\e[31m\"(\"\e[0m) &&\
    \ !x.contains(\e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                      \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0mRecursive \e[33mvalue\e[0m \e[35mparen_groups_with_close_braces_not_nested_and_closed_and_not_closed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb_17u4me.scala:23:78\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_close_braces_not_nested_and_closed_and_closed\e[0m = paren_groups_with_close_braces_not_nested_and_closed_and_\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    Not found: paren_groups_with_close_braces_not_nested_and_closed_and_\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb_17u4me.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,\
    \ y) => x.length < y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replace(\")\", \"\").replace(\"\
    (\", \"\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces.map(x => x.replace(\"(\"\
    , \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces.sortWith((x,\
    \ y) => x.length < y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces.sortWith((x,\
    \ y) => x.length < y.length)\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces_sorted.map(x\
    \ => x.replace(\"(\", \"\").replace(\")\", \"\"))\n        val paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces_sorted.map(x\
    \ => x.replace(\"(\", \"\"\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpizsbay43.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpizsbay43.scala:21:156\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces\e\
    [0m = paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces_sorted.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces_sorted_with_open_braces_without_spaces_sorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpizsbay43.scala:22:5\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        // Initialize a list to hold the result\n\
    \        var result : List[String] = Nil\n\n        // Iterate through each character\
    \ in the string\n        for (i <- 0 until paren_string.length) {\n          \
    \  // If the character is a left parenthesis, add it to the list\n           \
    \ if (paren_string(i) == '(') {\n                result ::= paren_string(i)\n\
    \            }\n            // If the character is a right parenthesis, remove\
    \ it from the list\n            else if (paren_string(i) == ')') {\n         \
    \       result ::= paren_string.drop(i + 1)\n            }\n            // If\
    \ the character is a space, ignore it\n            else if (paren_string(i) ==\
    \ ' ') {\n            }\n            // If the character is not a left or right\
    \ parenthesis, ignore it\n            else {\n            }\n        }\n\n   \
    \     // Return the list of parentheses\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2hwcbeid.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                result ::= paren_string(i)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not\
    \ a member of List[String] - did you mean List[String].::?\n1 error found\n"
  stdout: ''
  timestamp: 1660013254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_parens = paren_groups.map(x => x.replace(\"\
    )\", \"\\\\)\"))\n        val paren_groups_with_parens_without_spaces = paren_groups_with_parens.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens\
    \ = paren_groups_with_parens_without_spaces.map(x => x.replace(\"(\", \"\\\\(\"\
    ))\n        val paren_groups_with_parens_without_spaces_without_parens_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_parens.map(x => x.replaceAll(\"\
    \\\\s+\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_parens_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_parens_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_parens_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_parens_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_parens_without_spaces_without_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_parens_without_spaces_without_parens_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpaxnz1kvd.scala:23:5\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_list_size\
    \ = paren_groups_count * 2\n        val paren_groups_list_size_in_bytes = paren_groups_list_size\
    \ * 4\n        val paren_groups_list_size_in_bits = paren_groups_list_size_in_bytes\
    \ * 8\n        val paren_groups_list_size_in_bits_rounded = math.round(paren_groups_list_size_in_bits)\n\
    \        val paren_groups_list_size_in_bits_rounded_to_int = paren_groups_list_size_in_bits_rounded\
    \ + 1\n        val paren_groups_list_size_in_bits_rounded_to_string = paren_groups_list_size_in_bits_rounded.toString\n\
    \        val paren_groups_list_size_in_bits_rounded_to_string_with_zeros = paren_groups_list_size_in_bits_rounded_to_string\
    \ + \"0\"\n        val paren_groups_list_size_in_bits_rounded_to_string_with_zeros_with_braces\
    \ = paren_groups_list_size_in_bits_rounded_to_string_with_zeros + \"(\"\n    \
    \    val paren_groups_list_size_in_bits_rounded_to_string_with_zeros_with_braces_with_brackets\
    \ = paren_groups_list_size_in_bits_rounded_to_string_with_zeros_with_braces +\
    \ \"[\"\n        val paren_groups_list_size_in_bits_rounded_to_string_with_zeros_with_braces_with_brackets_with_square_brackets\
    \ = paren_groups_list_size_in_bits_rounded_to_string_with_zeros_with_braces_with_brackets\
    \ + \"{\"\n        val paren_groups_list_size_in_bits_rounded_to_string_with_zeros_with_braces_with_brackets_with_square_brackets_with_brackets\
    \ = paren_groups_list_size_in_bits_rounded_to_string_with_zeros_with_braces_with_brackets_with_square_brackets\
    \ + \"<\"\n        val paren_groups_list_size_in_bits_rounded_to_string_with_zeros_with_braces_with_brackets_with_square_brackets_with_brackets_with_square_brackets\
    \ = paren_groups_list_size_in_bits_rounded_to_string_with_zeros_with_braces_with_brackets_with_square_brackets_with_brackets\
    \ + \">\"\n        val paren_groups_list_size_in_bits_rounded_to_string_with_zeros_with_braces_with_brackets_with_square_brackets_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9qgmg2y8.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9qgmg2y8.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = mutable.ListBuffer[String]()\n\
    \        val paren_stack = mutable.Stack[String]()\n        paren_string.foreach\
    \ { c =>\n            c match {\n                case '(' => paren_stack += '('\n\
    \                case ')' =>\n                    paren_stack = paren_stack\n\
    \                        .takeWhile(c => c != ')')\n                        .drop(1)\n\
    \                        .map(c => c + '(')\n                    paren_groups\
    \ += paren_stack\n                    paren_stack = mutable.Stack[String]()\n\
    \                case ' ' =>\n                case ',' =>\n                case\
    \ _ =>\n                    paren_stack += c\n            }\n        }\n     \
    \   paren_groups += paren_stack\n        paren_groups.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\"\
    )).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"))));\n\
    \    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5i1v6wl.scala:11:27 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mparen_groups\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5i1v6wl.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mparen_stack\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmpa5i1v6wl.scala:17:32 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    paren_stack = paren_stack\n\e[31m\e\
    [31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m                    Reassignment\
    \ to val paren_stack\n\e[31m18 |\e[0m                        .takeWhile(\e[36mc\e\
    [0m => c != \e[31m')'\e[0m)\n\e[31m19 |\e[0m                        .drop(\e[31m1\e\
    [0m)\n\e[31m20 |\e[0m                        .map(\e[36mc\e[0m => c + \e[31m'('\e\
    [0m)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa5i1v6wl.scala:22:34\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    paren_stack\
    \ = mutable.Stack[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_open_braces = paren_groups.map(x\
    \ => x.replace(\")\", \"\\\\)\"))\n        val paren_groups_with_close_braces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"(\", \"\\\\(\"))\n    \
    \    val paren_groups_with_open_braces_and_close_braces = paren_groups_with_open_braces\
    \ ++ paren_groups_with_close_braces\n        val paren_groups_with_open_braces_and_close_braces_without_spaces\
    \ = paren_groups_with_open_braces_and_close_braces.map(x => x.replace(\"  \",\
    \ \" \"))\n        val paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets\
    \ = paren_groups_with_open_braces_and_close_braces_without_spaces.map(x => x.replace(\"\
    [\", \"\").replace(\"]\", \"\"))\n        val paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces\
    \ = paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        val paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"  \", \" \"))\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6jfyynrj.scala:20:153 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp6jfyynrj.scala:21:168 --------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\" \"\e[0m))\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                            \
    \                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  paren_groups_with_open_braces_and_close_braces_without_spaces_without_brackets_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tm"
  stdout: ''
  timestamp: 1660013256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_sorted\
    \ = paren_groups_with_open_braces.sortBy(x => x)\n        val paren_groups_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted.map(x => x.replace(\"(\", \"(\").replace(\"\
    )\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces.sortBy(x => x)\n   \
    \     val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted.map(x => x.replace(\"\
    (\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.sortBy(x\
    \ => x)\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\
    \ = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(x\
    \ => x.replace(\"(\", \"(\").replace(\")\", \")\"))\n        val paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\
    \ = paren_groups_with_open_braces_sorted_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi5g1ad8m.scala:18:116 --------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\e\
    [0m = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"(\"\e[0m).replace(\e[31m\")\"\
    \e[0m, \e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \           ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m \
    \  |\e[0m  paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpi5g1ad8m.scala:19:123 --------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\e\
    [0m = paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"(\"\e[0m, \e[31m\"(\"\e[0m).replace(\e[31m\")\"\
    \e[0m, \e[31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  paren_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpi5g1ad8m.scala:21:147 -----------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted_with_open_braces_sorted\e\
    [0m = paren_groups_with_open_br"
  stdout: ''
  timestamp: 1660013252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_trimmed = paren_groups_with_spaces.map(x\
    \ => x.trim())\n        val paren_groups_with_spaces_trimmed_flat = paren_groups_with_spaces_trimmed.flatMap(x\
    \ => x.split(\" \"))\n        val paren_groups_with_spaces_trimmed_flat2 = paren_groups_with_spaces_trimmed_flat.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_trimmed_flat3 = paren_groups_with_spaces_trimmed_flat2.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_trimmed_flat4 = paren_groups_with_spaces_trimmed_flat3.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_trimmed_flat5 = paren_groups_with_spaces_trimmed_flat4.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_trimmed_flat6 = paren_groups_with_spaces_trimmed_flat5.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_trimmed_flat7 = paren_groups_with_spaces_trimmed_flat6.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_trimmed_flat8 = paren_groups_with_spaces_trimmed_flat7.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_trimmed_flat9 = paren_groups_with_spaces_trimmed_flat8.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_trimmed_flat10 = paren_groups_with_spaces_trimmed_flat9.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_trimmed_flat11 = paren_groups_with_spaces_trimmed_flat10.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_trimmed_flat12 = paren_groups_with_spaces_trimmed_flat11.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_trimmed_flat13 = paren_groups_with_spaces_trimmed_flat12.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_trimmed_flat14 = paren_groups_with_spaces_trimmed_flat13.filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_trimmed_flat15 = paren_groups_with_spaces_trimmed_flat14.filter(x\
    \ => !x.isEmpty)\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4s8h4gae.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_count = paren_groups.length\n        val paren_groups_remaining\
    \ = paren_groups_count - 1\n        val paren_groups_remaining_strings = paren_groups.take(paren_groups_remaining)\n\
    \        val paren_groups_remaining_strings_count = paren_groups_remaining_strings.length\n\
    \        val paren_groups_remaining_strings_remaining = paren_groups_remaining_strings_count\
    \ - 1\n        val paren_groups_remaining_strings_remaining_strings = paren_groups_remaining_strings.take(paren_groups_remaining_strings_remaining)\n\
    \        val paren_groups_remaining_strings_remaining_strings_count = paren_groups_remaining_strings_remaining.length\n\
    \        val paren_groups_remaining_strings_remaining_strings_remaining = paren_groups_remaining_strings_remaining_strings.length\
    \ - 1\n        val paren_groups_remaining_strings_remaining_strings_remaining_strings\
    \ = paren_groups_remaining_strings_remaining.take(paren_groups_remaining_strings_remaining_strings_remaining)\n\
    \        val paren_groups_remaining_strings_remaining_strings_remaining_strings_count\
    \ = paren_groups_remaining_strings_remaining_strings_remaining.length\n      \
    \  val paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\
    \ = paren_groups_remaining_strings_remaining_strings_remaining_strings_count -\
    \ 1\n        val paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\
    \ = paren_groups_remaining_strings_remaining_strings_remaining_strings_count -\
    \ 1\n        val paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\
    \ = paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\
    \ - 1\n        val paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\
    \ = paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\
    \ - 1\n        val paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\
    \ = paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\
    \ - 1\n        val paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\
    \ = paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\
    \ - 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2myps2zh.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\e\
    [0m = paren_groups_remaining_strings_remaining_strings_remaining_strings_count\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp2myps2zh.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\e\
    [0m = paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mparen_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_remaining_strings_remaining_strings_remaining_strings_remaining_strings_count\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp2myps2zh.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_remaining_strings_remaining_strin"
  stdout: ''
  timestamp: 1660013258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_flat = paren_groups.flatten\n        val paren_groups_flat2\
    \ = paren_groups_flat.filterNot(_ == \")\")\n        val paren_groups_flat3 =\
    \ paren_groups_flat2.filterNot(_ == \"(\")\n        val paren_groups_flat4 = paren_groups_flat3.filterNot(_\
    \ == \" \")\n        val paren_groups_flat5 = paren_groups_flat4.filterNot(_ ==\
    \ \"\\\\(\")\n        val paren_groups_flat6 = paren_groups_flat5.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat7 = paren_groups_flat6.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat8 = paren_groups_flat7.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat9 = paren_groups_flat8.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat10 = paren_groups_flat9.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat11 = paren_groups_flat10.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat12 = paren_groups_flat11.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat13 = paren_groups_flat12.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat14 = paren_groups_flat13.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat15 = paren_groups_flat14.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat16 = paren_groups_flat15.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat17 = paren_groups_flat16.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat18 = paren_groups_flat17.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat19 = paren_groups_flat18.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat20 = paren_groups_flat19.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat21 = paren_groups_flat20.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat22 = paren_groups_flat21.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat23 = paren_groups_flat22.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat24 = paren_groups_flat23.filterNot(_\
    \ == \"\\\\)\")\n        val paren_groups_flat25 = paren_groups_flat24.filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbc4u7b1m.scala:13:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat2\e[0m\
    \ = paren_groups_flat.filterNot(_ == \e[31m\")\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmpbc4u7b1m.scala:14:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat3\e[0m\
    \ = paren_groups_flat2.filterNot(_ == \e[31m\"(\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbc4u7b1m.scala:15:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat4\e[0m\
    \ = paren_groups_flat3.filterNot(_ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbc4u7b1m.scala:16:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat5\e[0m\
    \ = paren_groups_flat4.filterNot(_ == \e[31m\"\\\\(\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbc4u7b1m.scala:17:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_flat6\e[0m\
    \ = paren_groups_flat5.filterNot(_ == \e[31m\"\\\\)\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbc4u7b1m.scala:18:62 -----------------------------------------\e\
    ["
  stdout: ''
  timestamp: 1660013258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\").map(_.trim).toList\n        val paren_groups_with_spaces = paren_groups.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted\
    \ = paren_groups_with_spaces.sortBy(x => x)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\s+\", \" \"))\n\
    \        val paren_groups_with_spaces_sorted_with_spaces_sorted = paren_groups_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted.map(x => x.replaceAll(\"\
    \\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x =>\
    \ x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces.sortBy(x\
    \ => x)\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\s+\", \" \"))\n        val paren_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\
    \ = paren_groups_with_\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqng8u2yu.scala:23:141 -----------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted_with_spaces_sorted\e\
    [0m = paren_groups_with_\n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \                                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                          Not found: paren_groups_with_\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqng8u2yu.scala:24:5 ---------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013193
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_open_braces = paren_groups.map(x => x.replace(\"\
    )\", \"\").replace(\"(\", \"(\"))\n        val paren_groups_with_open_braces_without_spaces\
    \ = paren_groups_with_open_braces.map(x => x.replace(\"  \", \"\"))\n        val\
    \ paren_groups_with_open_braces_without_spaces_without_parens = paren_groups_with_open_braces_without_spaces.map(x\
    \ => x.replace(\"(\", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_parens_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_parens.map(x => x.replace(\"\
    \  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens\
    \ = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens\
    \ = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens\
    \ = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens.map(x\
    \ => x.replace(\"  \", \"\"))\n        val paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces\
    \ = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8imke3is.scala:19:149 --------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp8imke3is.scala:20:164 --------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens\e\
    [0m = paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"  \"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m\
    \   |\e[0m  paren_groups_with_open_braces_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens_without_spaces_without_parens\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8imke3is.scala:21:179 -----------"
  stdout: ''
  timestamp: 1660013258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.replace(\"\
    )\", \" ) \"))\n        val paren_groups_with_spaces_without_spaces = paren_groups_with_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces.map(x => x.replace(\"( \", \" (\"\
    ))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces.map(x => x.replace(\"\
    ( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(x\
    \ => x.replace(\"( \", \" (\"))\n        val paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\
    \ = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpx0y3qo75.scala:21:338 --------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpx0y3qo75.scala:16:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces.map(\e\
    [36mx\e[0m => x.replace(\e[31m\"( \"\e[0m, \e[31m\" (\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  paren_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpx0y3qo75.scala:17:114 --------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_without_spaces_without_spaces_without_spaces_without_spaces_without_spaces\e\
    [0m = paren_groups_with_spaces_without_"
  stdout: ''
  timestamp: 1659795441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_strings = paren_groups.map(paren_group => paren_group.split(\"\
    \\\\)\"))\n        paren_group_strings.map(paren_group_string => paren_group_string.mkString(\"\
    (\", \")\"))\n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnbgqi6dv.scala:13:82\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        paren_group_strings.map(\e\
    [36mparen_group_string\e[0m => paren_group_string.mkString(\e[31m\"(\"\e[0m, \e\
    [31m\")\"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                            Found:    (String, String)\n\e[31m\
    \   |\e[0m                                              Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_spaces = paren_groups.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n        val paren_groups_with_spaces_sorted = paren_groups_with_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted.map(x => x.replaceAll(\"\\\\(|\\\\)\", \"\"\
    ))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces = paren_groups_with_spaces_sorted_with_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted.map(x =>\
    \ x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces.sortWith((x,y)\
    \ => x.length <=> y.length)\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted.map(x\
    \ => x.replaceAll(\"\\\\(|\\\\)\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted\
    \ = paren_groups_with_spaces_sorted_with_spaces_without_spaces_\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(separateParenGroups((\"(()()) ((()))\
    \ () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\")).equals((List[String](\"\
    ()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf0u39atg.scala:13:98 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted\e\
    [0m = paren_groups_with_spaces.sortWith((\e[36mx\e[0m,\e[36my\e[0m) => x.length\
    \ <=> y.length)\n\e[31m\e[31m   |\e[0m                                       \
    \                                                  ^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 value <=> is not a member of Int - did you mean Int.<=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf0u39atg.scala:16:166 -----------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_without_spaces.sortWith((\e\
    [36mx\e[0m,\e[36my\e[0m) => x.length <=> y.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                                                                            \
    \ ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value <=> is not a member\
    \ of Int - did you mean Int.<=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf0u39atg.scala:19:234\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces_sorted\e\
    [0m = paren_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces.sortWith((\e\
    [36mx\e[0m,\e[36my\e[0m) => x.length <=> y.length)\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                                                                            \
    \                                                                     ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value <=> is not a member of Int - did you\
    \ mean Int.<=?\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpf0u39atg.scala:21:141\
    \ --------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mparen_groups_with_spaces_sorted_with_spaces_without_spaces_sorted_with_spaces_without_spaces"
  stdout: ''
  timestamp: 1660013259
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_group_counts = paren_groups.map(x => x.split(\"\\\\\
    )\").length).toList\n        val paren_group_counts_sum = paren_group_counts.sum\n\
    \        val paren_group_counts_average = paren_group_counts_sum / paren_groups.length\n\
    \        val paren_group_counts_min = paren_group_counts.min\n        val paren_group_counts_max\
    \ = paren_group_counts.max\n        val paren_group_counts_range = paren_group_counts_max\
    \ - paren_group_counts_min\n        val paren_group_counts_range_average = paren_group_counts_range\
    \ / paren_groups.length\n        val paren_group_counts_range_min = paren_group_counts_range\
    \ / paren_groups.length\n        val paren_group_counts_range_max = paren_group_counts_range\
    \ / paren_groups.length\n        val paren_group_counts_range_sum = paren_group_counts_range\
    \ * paren_groups.length\n        val paren_group_counts_range_sum_average = paren_group_counts_range_sum\
    \ / paren_groups.length\n        val paren_group_counts_range_sum_min = paren_group_counts_range_sum\
    \ / paren_groups.length\n        val paren_group_counts_range_sum_max = paren_group_counts_range_sum\
    \ / paren_groups.length\n        val paren_group_counts_range_sum_range = paren_group_counts_range_sum\
    \ * paren_groups.length\n        val paren_group_counts_range_sum_range_average\
    \ = paren_group_counts_range_sum_range / paren_groups.length\n        val paren_group_counts_range_sum_range_min\
    \ = paren_group_counts_range_sum_range / paren_groups.length\n        val paren_group_counts_range_sum_range_max\
    \ = paren_group_counts_range_sum_range / paren_groups.length\n        val paren_group_counts_range_sum_range_sum\
    \ = paren_group_counts_range_sum_range * paren_groups.length\n        val paren_group_counts_range_sum_range_sum_average\
    \ = paren_group_counts_range_sum_range_sum / paren_groups.length\n        val\
    \ paren_group_counts_range_sum_range_sum_min = paren_group_counts_range_sum_range_sum\
    \ / paren_groups.length\n        val paren_group_counts_range_sum_range_sum_max\
    \ = paren_group_counts_range_sum_range_sum / paren_groups.length\n        val\
    \ paren_group_counts_range_sum_range_sum_range = paren_group_counts_range_sum_range_sum\
    \ * paren_groups.length\n        val paren_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(separateParenGroups((\"(()()) ((())) () ((())()())\")).equals((List[String](\"\
    (()())\", \"((()))\", \"()\", \"((())()())\"))));\n    assert(separateParenGroups((\"\
    () (()) ((())) (((())))\")).equals((List[String](\"()\", \"(())\", \"((()))\"\
    , \"(((())))\"))));\n    assert(separateParenGroups((\"(()(())((())))\")).equals((List[String](\"\
    (()(())((())))\"))));\n    assert(separateParenGroups((\"( ) (( )) (( )( ))\"\
    )).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxv_43pwd.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxv_43pwd.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n    // separate those group into separate strings\
    \ and return the list of those.\n    // Separate groups are balanced (each open\
    \ brace is properly closed) and not nested within each other\n    // Ignore any\
    \ spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) ((\
    \ )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string\
    \ : String) : List[String] = {\n        val paren_groups = paren_string.split(\"\
    \\\\(\")\n        val paren_groups_with_paren = paren_groups.map(x => x.replace(\"\
    )\", \")(\"))\n        val paren_groups_with_paren_without_spaces = paren_groups_with_paren.map(x\
    \ => x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_commas\
    \ = paren_groups_with_paren_without_spaces.map(x => x.replaceAll(\",\", \"\"))\n\
    \        val paren_groups_with_paren_without_spaces_without_commas_and_parens\
    \ = paren_groups_with_paren_without_spaces_without_commas.map(x => x.replaceAll(\"\
    \\\\)\\\\(\", \")(\"))\n        val paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces\
    \ = paren_groups_with_paren_without_spaces_without_commas_and_parens.map(x =>\
    \ x.replaceAll(\"\\\\s+\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens\
    \ = paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens_without_spaces\
    \ = paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens_without_spaces_without_comma\
    \ = paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens_without_spaces_without_commas_and_parens.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens_without_spaces_without_commas_and_parens\
    \ = paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens_without_spaces_without_commas_and_parens_without_spaces.map(x\
    \ => x.replaceAll(\"\\\\)\", \"\"))\n        val paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens_without_spaces_without_commas_and_parens_without_spaces_without_comma\
    \ = paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens_without_spaces_without_commas_and_parens_without_spaces_without_commas_and_parens.map(x\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(separateParenGroups((\"\
    (()()) ((())) () ((())()())\")).equals((List[String](\"(()())\", \"((()))\", \"\
    ()\", \"((())()())\"))));\n    assert(separateParenGroups((\"() (()) ((())) (((())))\"\
    )).equals((List[String](\"()\", \"(())\", \"((()))\", \"(((())))\"))));\n    assert(separateParenGroups((\"\
    (()(())((())))\")).equals((List[String](\"(()(())((())))\"))));\n    assert(separateParenGroups((\"\
    ( ) (( )) (( )( ))\")).equals((List[String](\"()\", \"(())\", \"(()())\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwps0wseq.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwps0wseq.scala:20:150\
    \ -----------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens_without_spaces_without_commas_and_parens\e\
    [0m = paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens_without_spaces_without_commas_and_parens_without_spaces.map(\e\
    [36mx\e[0m => x.replaceAll(\e[31m\"\\\\)\"\e[0m, \e[31m\"\"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens_without_spaces_without_commas_and_parens_without_spaces\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwps0wseq.scala:21:179\
    \ -----------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mparen_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens_without_spaces_without_commas_and_parens_without_spaces_without_comma\e\
    [0m = paren_groups_with_paren_without_spaces_without_commas_and_parens_without_spaces_without_parens_without_spaces_without_commas_and_parens_without_spaces_without_commas_and_parens.map(x\
    \ \n\e[31m\e[31m   |\e[0m                                                    \
    \                                                                            \
    \                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013258
