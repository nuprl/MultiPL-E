language: scala
name: HumanEval_134_check_if_last_char_is_a_letter
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotWordAlpha = words.last.contains(lastChar)\
    \ && lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha\
    \ = words.last.contains(lastChar) && lastChar.toString.matches(\"[a-zA-Z]\")\n\
    \        val isLastCharNotWordAlpha = words.last.contains(lastChar) && lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val isLastCharNotWordAlpha = words.last.contains(lastChar)\
    \ && lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha\
    \ = words.last.contains(lastChar) && lastChar.toString.matches(\"[a-zA-Z]\")\n\
    \        val isLastCharNotWordAlpha = words.last.contains(lastChar) && lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val isLastCharNotWordAlpha = words.last.contains(lastChar)\
    \ && lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha\
    \ = words.last.contains(lastChar) && lastChar.toString.matches(\"[a-zA-Z]\")\n\
    \        val isLastCharNotWordAlpha = words.last.contains(lastChar) && lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val isLastCharNotWordAlpha = words.last.contains(lastChar)\
    \ && lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha\
    \ = words.last.contains(lastChar) && lastChar.toString.matches(\"[a-zA-Z]\")\n\
    \        val isLastCharNotWordAlpha = words.last.contains(lastChar) && lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val isLastCharNotWordAlpha = words.last.contains(lastChar)\
    \ && lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha\
    \ = words.last.contains(lastChar) && lastChar.toString.matches(\"[a-zA-Z]\")\n\
    \        val isLastCharNotWordAlpha = words.last.contains(lastChar) && lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val isLastCharNotWordAlpha = words.last.contains(lastChar)\
    \ && lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha\
    \ = words.last.contains(lastChar) && lastChar.toString.matches(\"[a-zA-Z]\")\n\
    \        val isLastCharNotWordAlpha = words.last.contains(lastChar) && lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val isLastCharNotWordAlpha = words.last.contains(\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphcervonx.scala:40:57 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = words.last.contains(\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmphcervonx.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = words.last.contains(lastChar) && lastChar.toString.matches(\e[31m\"[a-zA-Z]\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphcervonx.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = words.last.contains(lastChar) && lastChar.toString.matches(\e[31m\"[a-zA-Z]\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphcervonx.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = words.last.contains(lastChar) && lastChar.toString.matches(\e[31m\"[a-zA-Z]\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLast"
  stdout: ''
  timestamp: 1659793039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val lastCharIsALetter = lastChar.forall(Character.isLetter)\n        val\
    \ lastCharIsNotALetter = lastChar.forall(!Character.isLetter)\n        val lastCharIsNotALetterOrWord\
    \ = lastCharIsALetter && !lastCharIsNotALetter\n        val lastCharIsNotALetterOrWordOrEmpty\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastCharIsNotALetterOrWord\n\
    \        lastCharIsALetter || lastCharIsNotALetter || lastCharIsNotALetterOrWord\
    \ || lastCharIsNotALetterOrWordOrEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp690nr0eb.scala:21:62 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.forall(!Character.isLetter)\n\e[31m\e[31m   |\e[0m              \
    \                                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35misLetter\e[0m in \e\
    [33mobject\e[0m \e[35mCharacter\e[0m with types\n\e[31m   |\e[0m (x$0: Int): Boolean\n\
    \e[31m   |\e[0m (x$0: Char): Boolean\n\e[31m   |\e[0mmatch expected type ?{ unary_!\
    \ : ? }\n1 error found\n"
  stdout: ''
  timestamp: 1659793038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.toString.isLetter\n     \
    \   val isLastCharNotWord = lastChar.toString.isNotEmpty && !isLastCharAlpha\n\
    \        isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjf4a7yd5.scala:19:48 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjf4a7yd5.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.toString.isNotEmpty && !isLastCharAlpha\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue isNotEmpty is not a member of String - did you mean\
    \ String.isEmpty?\n2 errors found\n"
  stdout: ''
  timestamp: 1659793039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlphabetical = lastChar.toString.isLetter\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        isLastCharAlphabetical && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphvfxy6ni.scala:20:55 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlphabetical\e\
    [0m = lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                      \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ lastCharIsALetter = lastChar.toString.matches(\"[a-zA-Z]\")\n        val lastCharIsNotALetter\
    \ = lastChar.isEmpty || lastChar.isLetter\n        val lastCharIsNotALetterInWord\
    \ = words.lastOption.exists(_.contains(lastChar))\n        lastCharIsALetter &&\
    \ !lastCharIsNotALetter && !lastCharIsNotALetterInWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7gfk2gyp.scala:21:64 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.isEmpty || lastChar.isLetter\n\e[31m\e[31m   |\e[0m             \
    \                                          ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value isLetter is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == lastChar)\n        val\
    \ isNotALetterWord = words.lastOption.exists(word => word.contains(lastChar))\n\
    \        isLastCharALetter && !isNotALetterWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpl5sq5iy9.scala:19)\n\tat Problem$.main(tmpl5sq5iy9.scala:25)\n\
    \tat Problem.main(tmpl5sq5iy9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = txt.split(\" \").last.contains(lastChar)\n   \
    \     isLastCharAlpha && !isLastCharNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp921gaw_4.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n       \
    \ isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbir5gide.scala:25)\n\tat Problem.main(tmpbir5gide.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.lastOption.exists(_.contains(lastChar))\n        isLastCharAlpha &&\
    \ !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpnxjpn76u.scala:19)\n\tat Problem$.main(tmpnxjpn76u.scala:25)\n\
    \tat Problem.main(tmpnxjpn76u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.toString.isLetter\n     \
    \   val isLastCharNotAlpha = !lastChar.toString.isLetter\n        val isLastCharNotWord\
    \ = txt.last != \" \" && !txt.last.equals(\" \")\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n        val\
    \ isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha &&\
    \ !isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharAlpha && !isLastCharNotAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n        val\
    \ isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha &&\
    \ !isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharAlpha && !isLastCharNotAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n        val\
    \ isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha &&\
    \ !isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharAlpha && !isLastCharNotAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n        val\
    \ isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha &&\
    \ !isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_yueiqn3.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_yueiqn3.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_yueiqn3.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_yueiqn3.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val words = txt.split(\" \").filter(_.nonEmpty)\n      \
    \  val isLastCharALetter = lastChar != ' ' && lastChar.isLetter\n        val isLastCharNotWord\
    \ = words.last.last.isLetter\n        isLastCharALetter && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbmhbgn24.scala:26)\n\tat Problem.main(tmpbmhbgn24.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.isLetter\n        val isLastCharNotALetter\
    \ = lastChar.isNotLetter\n        val isLastCharNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val isLastCharNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrEnd\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEnd\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrEndOrNewLine = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isEnd || lastChar.isNewLine\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrEndOrNewLineOrNewLine = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isEnd || lastChar.isNewLine\
    \ || lastChar.isNewLine\n        val isLastCharNotALetterOrSpaceOrWordOrEndOrNewLineOrNewLineOrNewLine\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEnd\
    \ || lastChar.isNewLine || lastChar.isNewLine || lastChar.isNewLine || lastChar.isNewLine\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrEndOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEnd\
    \ || lastChar.isNewLine || lastChar.isNewLine || lastChar.isNewLine || lastChar.isNewLine\
    \ || lastChar.isNewLine\n        val isLastCharNotALetterOrSpaceOrWordOrEndOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEnd\
    \ || lastChar.isNewLine || lastChar.isNewLine || lastChar.isNewLine || lastChar.isNewLine\
    \ || lastChar.isNewLine || lastChar.isNewLine\n        val isLastCharNotALetterOrSpaceOrWordOrEndOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8grjaizn.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8grjaizn.scala:20:44\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetter\e[0m = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m  \
    \                                 ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                              value isNotLetter is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8grjaizn.scala:21:51 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpace\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace\n\e[31m\e[31m   |\e[0m        \
    \                                  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value isNotLetter is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8grjaizn.scala:22:57 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrWord\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8grjaizn.scala:23:62\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpaceOrWordOrEnd\e[0m = lastChar.isNotLetter || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isEnd\n\e[31m\e[31m   |\e[0m                \
    \                                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value isNotLetter is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8grjaizn.scala:24:71 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrWordOrEndOrNewLine\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.i"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp09qhqh72.scala:19)\n\tat Problem$.main(tmp09qhqh72.scala:25)\n\
    \tat Problem.main(tmp09qhqh72.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar.toString.isLetter\n        val isNotWord\
    \ = txt.split(\" \").last.contains(lastChar)\n        isAlpha && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9htfzmej.scala:19:40 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misAlpha\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      value isLetter is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotALetter\
    \ = lastChar.toString.matches(\"[a-zA-Z ]\")\n        val isLastCharNotALetter2\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+\")\n        val isLastCharNotALetter3\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter4\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter5\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter6\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter7\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter8\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter9\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter10\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter11\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter12\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter13\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter14\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter15\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter16\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter17\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter18\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter19\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter20\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter21\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter22\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpojeyi46m.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpojeyi46m.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = (lastChar >= 'a' && lastChar <= 'z') ||\
    \ (lastChar >= 'A' && lastChar <= 'Z')\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isALetter && !isNotWord\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsgerzeyi.scala:20:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659793039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetterOrDigit\n        val isLastCharNotSpace = lastChar.isLetterOrDigitOrSpace\n\
    \        val isLastCharNotUpper = lastChar.isLetterOrDigitOrSpaceOrUpper\n   \
    \     val isLastCharNotLower = lastChar.isLetterOrDigitOrSpaceOrLower\n      \
    \  val isLastCharNotDigit = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n  \
    \      val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2h1_d3hd.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m\
    \ = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0misLastCharNotAlpha is already defined as \e[33mvalue\e[0m \e[35misLastCharNotAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2h1_d3hd.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotAlpha is already defined as \e[33mvalue\e[0m\
    \ \e[35misLastCharNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2h1_d3hd.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m\
    \ = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0misLastCharNotAlpha is already defined as \e[33mvalue\e[0m \e[35misLastCharNotAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2h1_d3hd.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotAlpha is already defined as \e[33mvalue\e[0m\
    \ \e[35misLastCharNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all b"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val lastCharIsALetterOrSpace = lastChar.isLetter\
    \ || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val lastCharIsALetterOrWord\
    \ = lastChar.isLetter || lastChar.isWord || lastChar.isSpace\n        val lastCharIsNotALetterOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\n\
    \        val lastCharIsALetterOrWordOrSpace = lastChar.isLetter || lastChar.isWord\
    \ || lastChar.isSpace || lastChar.isNotLetter\n        val lastCharIsNotALetterOrWordOrSpaceOrWord\
    \ = lastChar.isNotLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\
    \ || lastChar.isWord\n        val lastCharIsALetterOrWordOrSpaceOrWord = lastChar.isLetter\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter || lastChar.isWord\
    \ || lastChar.isSpace\n        val lastCharIsNotALetterOrWordOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter || lastChar.isWord\
    \ || lastChar.isNotLetter\n        val lastCharIsALetterOrWordOrSpaceOrWord =\
    \ lastChar.isLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.isNotLetter\n        val lastCharIsNotALetterOrWordOrSpaceOrWord\
    \ = lastChar.isNotLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.isNotLetter\n        val lastCharIsALetterOrWordOrSpaceOrWord\
    \ = lastChar.isLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.is\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xuez_97.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrWordOrSpaceOrWord\e\
    [0m = lastChar.isNotLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrWordOrSpaceOrWord is already defined\
    \ as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrWordOrSpaceOrWord\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5xuez_97.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterOrWordOrSpaceOrWord\e[0m\
    \ = lastChar.isLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterOrWordOrSpaceOrWord is already defined as\
    \ \e[33mvalue\e[0m \e[35mlastCharIsALetterOrWordOrSpaceOrWord\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xuez_97.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsNotALetterOrWordOrSpaceOrWord\e[0m = lastChar.isNotLetter ||\
    \ lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter || lastChar.isWord\
    \ || lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.isLetter\n        val isNotWord = words.last.contains(lastChar)\n\
    \        isLastCharALetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprbgfzw7z.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659793039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val lastCharIsALetter = lastChar.toString.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isLetter\n        val lastCharIsNotALetterOrSpace = lastChar.isLetter\
    \ && !lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrEnd\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmpty = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd && !lastChar.isEmpty\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd && !lastChar.isEmpty\
    \ && !lastChar.isEmpty\n        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isEmpty && !lastChar.isEmpty\n        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isEmpty && !lastChar.isEmpty\n        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isEmpty && !lastChar.isEmpty\n        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isEmpty && !lastChar.isEmpty\n        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isEmpty && !lastChar.isEmpty\n        val lastCharIsNotALet\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pdhed6x.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pdhed6x.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\e[0m = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd && !lastChar.isEmpty\
    \ && !lastChar.isEmpty\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pdhed6x.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\e\
    [0m = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isEmpty && !lastChar.isEmpty\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pdhed6x.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\e\
    [0m = lastChar.isLetter && !lastChar.isSpace && "
  stdout: ''
  timestamp: 1659793040
