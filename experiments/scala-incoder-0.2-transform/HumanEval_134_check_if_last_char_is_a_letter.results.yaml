language: scala
name: HumanEval_134_check_if_last_char_is_a_letter
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotWordAlpha = words.last.contains(lastChar)\
    \ && lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha\
    \ = words.last.contains(lastChar) && lastChar.toString.matches(\"[a-zA-Z]\")\n\
    \        val isLastCharNotWordAlpha = words.last.contains(lastChar) && lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val isLastCharNotWordAlpha = words.last.contains(lastChar)\
    \ && lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha\
    \ = words.last.contains(lastChar) && lastChar.toString.matches(\"[a-zA-Z]\")\n\
    \        val isLastCharNotWordAlpha = words.last.contains(lastChar) && lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val isLastCharNotWordAlpha = words.last.contains(lastChar)\
    \ && lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha\
    \ = words.last.contains(lastChar) && lastChar.toString.matches(\"[a-zA-Z]\")\n\
    \        val isLastCharNotWordAlpha = words.last.contains(lastChar) && lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val isLastCharNotWordAlpha = words.last.contains(lastChar)\
    \ && lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha\
    \ = words.last.contains(lastChar) && lastChar.toString.matches(\"[a-zA-Z]\")\n\
    \        val isLastCharNotWordAlpha = words.last.contains(lastChar) && lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val isLastCharNotWordAlpha = words.last.contains(lastChar)\
    \ && lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha\
    \ = words.last.contains(lastChar) && lastChar.toString.matches(\"[a-zA-Z]\")\n\
    \        val isLastCharNotWordAlpha = words.last.contains(lastChar) && lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val isLastCharNotWordAlpha = words.last.contains(lastChar)\
    \ && lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha\
    \ = words.last.contains(lastChar) && lastChar.toString.matches(\"[a-zA-Z]\")\n\
    \        val isLastCharNotWordAlpha = words.last.contains(lastChar) && lastChar.toString.matches(\"\
    [a-zA-Z]\")\n        val isLastCharNotWordAlpha = words.last.contains(\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphcervonx.scala:40:57 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = words.last.contains(\n\e[31m\e[31m   |\e[0m                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmphcervonx.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = words.last.contains(lastChar) && lastChar.toString.matches(\e[31m\"[a-zA-Z]\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphcervonx.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = words.last.contains(lastChar) && lastChar.toString.matches(\e[31m\"[a-zA-Z]\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphcervonx.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = words.last.contains(lastChar) && lastChar.toString.matches(\e[31m\"[a-zA-Z]\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLast"
  stdout: ''
  timestamp: 1659793039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val lastCharIsALetter = lastChar.forall(Character.isLetter)\n        val\
    \ lastCharIsNotALetter = lastChar.forall(!Character.isLetter)\n        val lastCharIsNotALetterOrWord\
    \ = lastCharIsALetter && !lastCharIsNotALetter\n        val lastCharIsNotALetterOrWordOrEmpty\
    \ = lastCharIsALetter && !lastCharIsNotALetter && !lastCharIsNotALetterOrWord\n\
    \        lastCharIsALetter || lastCharIsNotALetter || lastCharIsNotALetterOrWord\
    \ || lastCharIsNotALetterOrWordOrEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp690nr0eb.scala:21:62 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.forall(!Character.isLetter)\n\e[31m\e[31m   |\e[0m              \
    \                                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35misLetter\e[0m in \e\
    [33mobject\e[0m \e[35mCharacter\e[0m with types\n\e[31m   |\e[0m (x$0: Int): Boolean\n\
    \e[31m   |\e[0m (x$0: Char): Boolean\n\e[31m   |\e[0mmatch expected type ?{ unary_!\
    \ : ? }\n1 error found\n"
  stdout: ''
  timestamp: 1659793038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.toString.isLetter\n     \
    \   val isLastCharNotWord = lastChar.toString.isNotEmpty && !isLastCharAlpha\n\
    \        isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjf4a7yd5.scala:19:48 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjf4a7yd5.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.toString.isNotEmpty && !isLastCharAlpha\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue isNotEmpty is not a member of String - did you mean\
    \ String.isEmpty?\n2 errors found\n"
  stdout: ''
  timestamp: 1659793039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlphabetical = lastChar.toString.isLetter\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        isLastCharAlphabetical && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphvfxy6ni.scala:20:55 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlphabetical\e\
    [0m = lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                      \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ lastCharIsALetter = lastChar.toString.matches(\"[a-zA-Z]\")\n        val lastCharIsNotALetter\
    \ = lastChar.isEmpty || lastChar.isLetter\n        val lastCharIsNotALetterInWord\
    \ = words.lastOption.exists(_.contains(lastChar))\n        lastCharIsALetter &&\
    \ !lastCharIsNotALetter && !lastCharIsNotALetterInWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7gfk2gyp.scala:21:64 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.isEmpty || lastChar.isLetter\n\e[31m\e[31m   |\e[0m             \
    \                                          ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value isLetter is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == lastChar)\n        val\
    \ isNotALetterWord = words.lastOption.exists(word => word.contains(lastChar))\n\
    \        isLastCharALetter && !isNotALetterWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpl5sq5iy9.scala:19)\n\tat Problem$.main(tmpl5sq5iy9.scala:25)\n\
    \tat Problem.main(tmpl5sq5iy9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = txt.split(\" \").last.contains(lastChar)\n   \
    \     isLastCharAlpha && !isLastCharNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp921gaw_4.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n       \
    \ isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbir5gide.scala:25)\n\tat Problem.main(tmpbir5gide.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.lastOption.exists(_.contains(lastChar))\n        isLastCharAlpha &&\
    \ !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpnxjpn76u.scala:19)\n\tat Problem$.main(tmpnxjpn76u.scala:25)\n\
    \tat Problem.main(tmpnxjpn76u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.toString.isLetter\n     \
    \   val isLastCharNotAlpha = !lastChar.toString.isLetter\n        val isLastCharNotWord\
    \ = txt.last != \" \" && !txt.last.equals(\" \")\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n        val\
    \ isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha &&\
    \ !isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharAlpha && !isLastCharNotAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n        val\
    \ isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha &&\
    \ !isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharAlpha && !isLastCharNotAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n        val\
    \ isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha &&\
    \ !isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && isLastCharAlpha && !isLastCharNotAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n        val\
    \ isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWord && isLastCharAlpha &&\
    \ !isLastCharNotAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_yueiqn3.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_yueiqn3.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_yueiqn3.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_yueiqn3.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && isLastCharAlpha && !isLastCharNotAlpha\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val words = txt.split(\" \").filter(_.nonEmpty)\n      \
    \  val isLastCharALetter = lastChar != ' ' && lastChar.isLetter\n        val isLastCharNotWord\
    \ = words.last.last.isLetter\n        isLastCharALetter && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbmhbgn24.scala:26)\n\tat Problem.main(tmpbmhbgn24.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.isLetter\n        val isLastCharNotALetter\
    \ = lastChar.isNotLetter\n        val isLastCharNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val isLastCharNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrEnd\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEnd\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrEndOrNewLine = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isEnd || lastChar.isNewLine\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrEndOrNewLineOrNewLine = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isEnd || lastChar.isNewLine\
    \ || lastChar.isNewLine\n        val isLastCharNotALetterOrSpaceOrWordOrEndOrNewLineOrNewLineOrNewLine\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEnd\
    \ || lastChar.isNewLine || lastChar.isNewLine || lastChar.isNewLine || lastChar.isNewLine\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrEndOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEnd\
    \ || lastChar.isNewLine || lastChar.isNewLine || lastChar.isNewLine || lastChar.isNewLine\
    \ || lastChar.isNewLine\n        val isLastCharNotALetterOrSpaceOrWordOrEndOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEnd\
    \ || lastChar.isNewLine || lastChar.isNewLine || lastChar.isNewLine || lastChar.isNewLine\
    \ || lastChar.isNewLine || lastChar.isNewLine\n        val isLastCharNotALetterOrSpaceOrWordOrEndOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8grjaizn.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8grjaizn.scala:20:44\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetter\e[0m = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m  \
    \                                 ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                              value isNotLetter is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8grjaizn.scala:21:51 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpace\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace\n\e[31m\e[31m   |\e[0m        \
    \                                  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value isNotLetter is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8grjaizn.scala:22:57 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrWord\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8grjaizn.scala:23:62\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpaceOrWordOrEnd\e[0m = lastChar.isNotLetter || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isEnd\n\e[31m\e[31m   |\e[0m                \
    \                                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value isNotLetter is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8grjaizn.scala:24:71 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrWordOrEndOrNewLine\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.i"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp09qhqh72.scala:19)\n\tat Problem$.main(tmp09qhqh72.scala:25)\n\
    \tat Problem.main(tmp09qhqh72.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar.toString.isLetter\n        val isNotWord\
    \ = txt.split(\" \").last.contains(lastChar)\n        isAlpha && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9htfzmej.scala:19:40 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misAlpha\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      value isLetter is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotALetter\
    \ = lastChar.toString.matches(\"[a-zA-Z ]\")\n        val isLastCharNotALetter2\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+\")\n        val isLastCharNotALetter3\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter4\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter5\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter6\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter7\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter8\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter9\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter10\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter11\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter12\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter13\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter14\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter15\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter16\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter17\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter18\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter19\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter20\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter21\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALetter22\
    \ = lastChar.toString.matches(\"[a-zA-Z ]+$\")\n        val isLastCharNotALet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpojeyi46m.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpojeyi46m.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = (lastChar >= 'a' && lastChar <= 'z') ||\
    \ (lastChar >= 'A' && lastChar <= 'Z')\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(_ != lastChar)\n        isALetter && !isNotWord\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsgerzeyi.scala:20:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ != lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659793039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetterOrDigit\n        val isLastCharNotSpace = lastChar.isLetterOrDigitOrSpace\n\
    \        val isLastCharNotUpper = lastChar.isLetterOrDigitOrSpaceOrUpper\n   \
    \     val isLastCharNotLower = lastChar.isLetterOrDigitOrSpaceOrLower\n      \
    \  val isLastCharNotDigit = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n  \
    \      val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2h1_d3hd.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m\
    \ = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0misLastCharNotAlpha is already defined as \e[33mvalue\e[0m \e[35misLastCharNotAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2h1_d3hd.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotAlpha is already defined as \e[33mvalue\e[0m\
    \ \e[35misLastCharNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2h1_d3hd.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m\
    \ = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0misLastCharNotAlpha is already defined as \e[33mvalue\e[0m \e[35misLastCharNotAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2h1_d3hd.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotAlpha is already defined as \e[33mvalue\e[0m\
    \ \e[35misLastCharNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all b"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val lastCharIsALetterOrSpace = lastChar.isLetter\
    \ || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val lastCharIsALetterOrWord\
    \ = lastChar.isLetter || lastChar.isWord || lastChar.isSpace\n        val lastCharIsNotALetterOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\n\
    \        val lastCharIsALetterOrWordOrSpace = lastChar.isLetter || lastChar.isWord\
    \ || lastChar.isSpace || lastChar.isNotLetter\n        val lastCharIsNotALetterOrWordOrSpaceOrWord\
    \ = lastChar.isNotLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\
    \ || lastChar.isWord\n        val lastCharIsALetterOrWordOrSpaceOrWord = lastChar.isLetter\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter || lastChar.isWord\
    \ || lastChar.isSpace\n        val lastCharIsNotALetterOrWordOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter || lastChar.isWord\
    \ || lastChar.isNotLetter\n        val lastCharIsALetterOrWordOrSpaceOrWord =\
    \ lastChar.isLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.isNotLetter\n        val lastCharIsNotALetterOrWordOrSpaceOrWord\
    \ = lastChar.isNotLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.isNotLetter\n        val lastCharIsALetterOrWordOrSpaceOrWord\
    \ = lastChar.isLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.is\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xuez_97.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrWordOrSpaceOrWord\e\
    [0m = lastChar.isNotLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrWordOrSpaceOrWord is already defined\
    \ as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrWordOrSpaceOrWord\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5xuez_97.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterOrWordOrSpaceOrWord\e[0m\
    \ = lastChar.isLetter || lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter\
    \ || lastChar.isWord || lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterOrWordOrSpaceOrWord is already defined as\
    \ \e[33mvalue\e[0m \e[35mlastCharIsALetterOrWordOrSpaceOrWord\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5xuez_97.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsNotALetterOrWordOrSpaceOrWord\e[0m = lastChar.isNotLetter ||\
    \ lastChar.isWord || lastChar.isSpace || lastChar.isNotLetter || lastChar.isWord\
    \ || lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.isLetter\n        val isNotWord = words.last.contains(lastChar)\n\
    \        isLastCharALetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprbgfzw7z.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659793039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val lastCharIsALetter = lastChar.toString.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isLetter\n        val lastCharIsNotALetterOrSpace = lastChar.isLetter\
    \ && !lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrEnd\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmpty = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd && !lastChar.isEmpty\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd && !lastChar.isEmpty\
    \ && !lastChar.isEmpty\n        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isEmpty && !lastChar.isEmpty\n        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isEmpty && !lastChar.isEmpty\n        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isEmpty && !lastChar.isEmpty\n        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isEmpty && !lastChar.isEmpty\n        val lastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isEmpty && !lastChar.isEmpty\n        val lastCharIsNotALet\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pdhed6x.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pdhed6x.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\e[0m = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd && !lastChar.isEmpty\
    \ && !lastChar.isEmpty\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pdhed6x.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\e\
    [0m = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isEmpty && !lastChar.isEmpty\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty is already\
    \ defined as \e[33mvalue\e[0m \e[35mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp0pdhed6x.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWordOrEndOrEmptyOrEmpty\e\
    [0m = lastChar.isLetter && !lastChar.isSpace && "
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastWord = words(words.length-1)\n        val\
    \ lastChar = lastWord.last\n        val isLastCharALetter = lastChar >= 'a' &&\
    \ lastChar <= 'z'\n        val isLastCharNotALetter = lastChar != 'a' && lastChar\
    \ != 'z'\n        val isLastCharNotALetterOrSpace = lastChar != 'a' && lastChar\
    \ != 'z' && lastChar != ' '\n        val isLastCharNotALetterOrSpaceOrNewLine\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar != ' ' && lastChar != '\\n'\n\
    \        val isLastCharNotALetterOrSpaceOrNewLineOrNewLine = lastChar != 'a' &&\
    \ lastChar != 'z' && lastChar != ' ' && lastChar != '\\n' && lastChar != '\\r'\n\
    \        val isLastCharNotALetterOrSpaceOrNewLineOrNewLineOrNewLine = lastChar\
    \ != 'a' && lastChar != 'z' && lastChar != ' ' && lastChar != '\\n' && lastChar\
    \ != '\\r' && lastChar != '\\r'\n        val isLastCharNotALetterOrSpaceOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar != ' ' && lastChar != '\\n'\
    \ && lastChar != '\\r' && lastChar != '\\r' && lastChar != '\\r'\n        val\
    \ isLastCharNotALetterOrSpaceOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine = lastChar\
    \ != 'a' && lastChar != 'z' && lastChar != ' ' && lastChar != '\\n' && lastChar\
    \ != '\\r' && lastChar != '\\r' && lastChar != '\\r' && lastChar != '\\r'\n  \
    \      val isLastCharNotALetterOrSpaceOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar != ' ' && lastChar != '\\n'\
    \ && lastChar != '\\r' && lastChar != '\\r' && lastChar != '\\r' && lastChar !=\
    \ '\\r' && lastChar != '\\r'\n        val isLastCharNotALetterOrSpaceOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplxha1xik.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978578
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        var isLastCharNotALetter\
    \ = false\n        for(i <- 0 until txt.length){\n            if(txt(i) == lastChar){\n\
    \                isLastCharALetter = false\n            }\n            else{\n\
    \                isLastCharALetter = true\n            }\n        }\n        return\
    \ isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8e8azlpk.scala:33)\n\tat Problem.main(tmp8e8azlpk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.toString.isLetter\n   \
    \     val isLastCharNotALetter = lastChar.toString.isNotLetter\n        val isLastCharNotALetterOrSpace\
    \ = lastChar.toString.isNotLetter || lastChar.toString.isSpace\n        isLastCharALetter\
    \ && !isLastCharNotALetter && !isLastCharNotALetterOrSpace\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpykdr3tzg.scala:19:50 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpykdr3tzg.scala:20:53 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m = lastChar.toString.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpykdr3tzg.scala:21:60\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpace\e[0m = lastChar.toString.isNotLetter || lastChar.toString.isSpace\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isNotLetter is not a member\
    \ of String\n3 errors found\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp09qhqh72.scala:19)\n\tat Problem$.main(tmp09qhqh72.scala:25)\n\
    \tat Problem.main(tmp09qhqh72.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val isLastCharNotALetter = lastChar != ' ' && lastChar != '\\n'\n   \
    \     isLastCharALetter && !isLastCharNotALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgfx4fr18.scala:25)\n\tat Problem.main(tmpgfx4fr18.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.matches(\"[a-zA-Z]\") &&\
    \ !lastChar.contains(\" \")\n        isLastCharALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbmehejpr.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m) && !lastChar.contains(\e[31m\" \"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value matches is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val words = txt.split(\" \").map(_.toLowerCase).toSet\n\
    \        val isLastCharALetter = lastChar.toLowerCase == lastChar\n        val\
    \ isLastCharNotWord = words.contains(lastChar)\n        isLastCharALetter && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphvjzqjmg.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toLowerCase == lastChar\n\e[31m\e[31m   |\e[0m                    \
    \            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toLowerCase is not a member of Char\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmphvjzqjmg.scala:21:47 --------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m = words.contains(lastChar)\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (lastChar\
    \ : Char)\n\e[31m   |\e[0m                                             Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val words = txt.split(\" \").filter(_.nonEmpty)\n      \
    \  val isLastCharALetter = lastChar.toString.toLowerCase == lastChar\n       \
    \ val isLastCharNotWord = words.contains(lastChar)\n        isLastCharALetter\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpluspcc9r.scala:20:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.toLowerCase == lastChar\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpluspcc9r.scala:21:47\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e\
    [0m = words.contains(lastChar)\n\e[31m\e[31m   |\e[0m                        \
    \                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                      Found:    (lastChar : Char)\n\e[31m   |\e[0m          \
    \                                   Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar.isLetter\n        val isNotWord\
    \ = lastChar.isLetterOrDigit && !txt.contains(lastChar)\n        isALetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8nt2fy_r.scala:24)\n\tat Problem.main(tmp8nt2fy_r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.matches(\"\\\\W\")\n        isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx8uwbbnc.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978578
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.forall(_.isLetter)\n        val isLastCharNotALetter\
    \ = lastChar.forall(!_.isLetter)\n        val isLastCharNotALetterOrLastCharIsALetter\
    \ = isLastCharNotALetter || isLastCharALetter\n        isLastCharNotALetterOrLastCharIsALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpyjd9suxp.scala:19)\n\tat Problem$.main(tmpyjd9suxp.scala:26)\n\
    \tat Problem.main(tmpyjd9suxp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ lastCharIsALetter = lastChar.toString.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isLetter\n        val lastCharIsNotWord = lastChar.isLetterOrDigit\n\
    \        val lastCharIsNotWordOrSpace = lastChar.isLetterOrDigitOrSpace\n    \
    \    val lastCharIsNotWordOrSpaceOrNewLine = lastChar.isLetterOrDigitOrSpaceOrNewLine\n\
    \        val lastCharIsNotWordOrNewLine = lastChar.isLetterOrDigitOrNewLine\n\
    \        val lastCharIsNotWordOrNewLineOrNewLine = lastChar.isLetterOrDigitOrNewLineOrNewLine\n\
    \        val lastCharIsNotWordOrNewLineOrNewLineOrNewLine = lastChar.isLetterOrDigitOrNewLineOrNewLineOrNewLine\n\
    \        val lastCharIsNotWordOrNewLineOrNewLineOrNewLineOrNewLine = lastChar.isLetterOrDigitOrNewLineOrNewLineOrNewLineOrNewLine\n\
    \        val lastCharIsNotWordOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine =\
    \ lastChar.isLetterOrDigitOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\n    \
    \    val lastCharIsNotWordOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.isLetterOrDigitOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\n\
    \        val lastCharIsNotWordOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.isLetterOrDigitOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\n\
    \        val lastCharIsNotWordOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.isLetterOrDigitOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\n\
    \        val lastCharIsNotWordOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.isLetterOrDigitOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp3uu0yyk4.scala:34:11 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3uu0yyk4.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp3uu0yyk4.scala:21:44 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m = lastChar.isLetter\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3uu0yyk4.scala:22:41\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotWord\e[0m = lastChar.isLetterOrDigit\n\e[31m\e[31m   |\e[0m \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         value isLetterOrDigit is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp3uu0yyk4.scala:23:48 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordOrSpace\e\
    [0m = lastChar.isLetterOrDigitOrSpace\n\e[31m\e[31m   |\e[0m                 \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                 value isLetterOrDigitOrSpace is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp3uu0yyk4.scala:24:57 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordOrSpaceOrNewLine\e\
    [0m = lastChar.isLetterOrDigitOrSpaceOrNewLine\n\e[31m\e[31m   |\e[0m        \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659978580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !isLastCharALetter\n        val isLastCharNotALetterOrLastCharIsALetter =\
    \ isLastCharNotALetter || isLastCharALetter\n        isLastCharNotALetterOrLastCharIsALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9o9h0cue.scala:25)\n\tat Problem.main(tmp9o9h0cue.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == lastChar)\n        val\
    \ isLastCharNotALetter = (lastChar.toString.toLowerCase != lastChar)\n       \
    \ val isLastCharNotALetterInWord = words.contains(lastChar)\n        val isLastCharNotALetterInWordButNotLastCharInWord\
    \ = words.contains(lastChar) && words.indexOf(lastChar) == words.length-1\n  \
    \      val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.contains(lastChar) && words.indexOf(lastChar) == words.length-1 && words.indexOf(lastChar)\
    \ == words.length-2\n        val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.contains(lastChar) && words.indexOf(lastChar) == words.length-1 && words.indexOf(lastChar)\
    \ == words.length-2 && words.indexOf(lastChar) == words.length-3\n        val\
    \ isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.contains(lastChar) && words.indexOf(lastChar) == words.length-1 && words.indexOf(lastChar)\
    \ == words.length-2 && words.indexOf(lastChar) == words.length-3 && words.indexOf(lastChar)\
    \ == words.length-4\n        val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.contains(lastChar) && words.indexOf(lastChar) == words.length-1 && words.indexOf(lastChar)\
    \ == words.length-2 && words.indexOf(lastChar) == words.length-3 && words.indexOf(lastChar)\
    \ == words.length-4 && words.indexOf(lastChar) == words.length-5\n        val\
    \ isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.contains(lastChar) && words.indexOf(lastChar) == words.length-1 && words.indexOf(lastChar)\
    \ == words.length-2 && words.indexOf(lastChar) == words.length-3 && words.indexOf(lastChar)\
    \ == words.length-4 && words.indexOf(lastChar) == words.length-5 && words.indexOf(lastChar)\
    \ == words.length-6\n        val isLastCharNotALetterInWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpupgue526.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpupgue526.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar.toChar.isLetter\n        val isLastCharNotALetter = words.last.last.isLetter\n\
    \        val isLastCharNotALetterInWord = words.last.last != lastChar\n      \
    \  val isLastCharNotALetterInWords = words.last.last != lastChar && words.last.last\
    \ != lastChar\n        val isLastCharNotALetterInWordsOrLastCharNotALetterInWords\
    \ = words.last.last != lastChar && words.last.last != lastChar && words.last.last\
    \ != lastChar\n        val isLastCharNotALetterInWordsOrLastCharNotALetterInWordsOrLastCharNotALetterInWords\
    \ = words.last.last != lastChar && words.last.last != lastChar && words.last.last\
    \ != lastChar && words.last.last != lastChar\n        val isLastCharNotALetterInWordsOrLastCharNotALetterInWordsOrLastCharNotALetterInWordsOrLastCharNotALetterInWords\
    \ = words.last.last != lastChar && words.last.last != lastChar && words.last.last\
    \ != lastChar && words.last.last != lastChar && words.last.last != lastChar\n\
    \        val isLastCharNotALetterInWordsOrLastCharNotALetterInWordsOrLastCharNotALetterInWordsOrLastCharNotALetterInWordsOrLastCharNotALetterInWords\
    \ = words.last.last != lastChar && words.last.last != lastChar && words.last.last\
    \ != lastChar && words.last.last != lastChar && words.last.last != lastChar &&\
    \ words.last.last != lastChar\n        val isLastCharNotALetterInWordsOrLastCharNotALetterInWordsOrLastCharNotALetterInWordsOrLastCharNotALetterInWordsOrLastCharNotALetterInWordsOrLastCharNotALetterInWords\
    \ = words.last.last != lastChar && words.last.last != lastChar && words.last.last\
    \ != lastChar && words.last.last != lastChar && words.last.last != lastChar &&\
    \ words.last.\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvi8cinrp.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvi8cinrp.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isALetter = lastChar.matches(\"[a-zA-Z]\")\n        !isALetter\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpuz0f4rii.scala:19)\n\tat Problem$.main(tmpuz0f4rii.scala:24)\n\
    \tat Problem.main(tmpuz0f4rii.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978578
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        !isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmppzvgcp9s.scala:19)\n\tat Problem$.main(tmppzvgcp9s.scala:25)\n\
    \tat Problem.main(tmppzvgcp9s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = (lastChar >= 'a' && lastChar <= 'z') ||\
    \ (lastChar >= 'A' && lastChar <= 'Z')\n        val isNotWord = txt.split(\" \"\
    ).map(_.last).contains(lastChar)\n        isALetter && !isNotWord\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpodbc5c6m.scala:25)\n\tat Problem.main(tmpodbc5c6m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.nonEmpty && !isLastCharAlpha\n        isLastCharNotWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi2lpnu_o.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar.nonEmpty && !isLastCharAlpha\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            value nonEmpty is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.isLetter\n        val isLastCharNotALetter\
    \ = lastChar.toString.isNotLetter\n        val isLastCharNotALetterInWord = words.last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWordButNotLastChar = words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar)\n        val isLastCharNotALetterInWordButNotLastCharInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && words.last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && words.last.contains(lastChar)\n       \
    \ val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && words.last.contains(lastChar) && !words.last.contains(lastChar)\n\
    \        val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && words.last.contains(lastChar) && !words.last.contains(lastChar)\
    \ && words.last.contains(lastChar)\n        val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && words.last.contains(lastChar) && !words.last.contains(lastChar)\
    \ && words.last.contains(lastChar) && !words.last.contains(lastChar)\n       \
    \ val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.last.contains(lastChar\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_s0g1kb7.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_s0g1kb7.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharALetter\e[0m = lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value isLetter is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_s0g1kb7.scala:21:53 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m\
    \ = lastChar.toString.isNotLetter\n\e[31m\e[31m   |\e[0m                     \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                  value isNotLetter is not a member of String\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp_s0g1kb7.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659978580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").lastOption match {\n            case Some(word)\
    \ => !word.contains(lastChar)\n            case None => false\n        }\n   \
    \     isALetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9i1ga58i.scala:27)\n\tat Problem.main(tmp9i1ga58i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978580
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isNotWordChar = txt.dropRight(1).forall(c\
    \ => !Character.isLetter(c))\n        isLastCharALetter && !isNotWordChar\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfyu15xek.scala:24)\n\tat Problem.main(tmpfyu15xek.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar.matches(\"[a-zA-Z]+\")\n        val\
    \ isNotWord = txt.split(\" \").last.contains(lastChar)\n        isAlpha && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprudjvhci.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value matches is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978578
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = (lastChar >= 'a' && lastChar <= 'z')\n \
    \       val isNotWord = txt.split(\" \").lastOption match {\n            case\
    \ Some(word) => !word.contains(lastChar)\n            case None => false\n   \
    \     }\n        isALetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp00tf83e8.scala:27)\n\tat Problem.main(tmp00tf83e8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]+\")\n\
    \        val isLastCharNotWord = txt.substring(txt.length-1, txt.length).split(\"\
    \ \").length == 0\n        isLastCharAlpha && !isLastCharNotWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp426umfxt.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.forall(x => x.isLetter)\n        val isLastCharNotWord\
    \ = words.last.forall(x => x.contains(lastChar))\n        !isLastCharAlpha &&\
    \ !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpig8n5w71.scala:21:57 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ words.last.forall(\e[36mx\e[0m => x.contains(lastChar))\n\e[31m\e[31m   |\e\
    [0m                                                       ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                  value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = txt.last != lastChar\n        isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwygg651b.scala:24)\n\tat Problem.main(tmpwygg651b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.toString.isLetter\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv8nqvn72.scala:20:48 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value isLetter is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978588
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar.isLetter\n        val isNotWord\
    \ = txt.split(\" \").lastOption.exists(!_.contains(lastChar))\n        isALetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyy_qzh0b.scala:24)\n\tat Problem.main(tmpyy_qzh0b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val isALetter = lastChar.matches(\"[a-zA-Z]+\")\n        !isALetter\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.checkIfLastCharIsALetter(tmps3vl60w2.scala:19)\n\tat Problem$.main(tmps3vl60w2.scala:24)\n\
    \tat Problem.main(tmps3vl60w2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").lastOption.exists(_.equals(lastChar))\n\
    \        isALetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt2rao81z.scala:24)\n\tat Problem.main(tmpt2rao81z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isALetter = lastChar.matches(\"[a-zA-Z]+\")\n        !isALetter\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmprnr5xk8f.scala:19)\n\tat Problem$.main(tmprnr5xk8f.scala:24)\n\
    \tat Problem.main(tmprnr5xk8f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = lastChar.matches(\"\\\\\
    W\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\n        val isLastCharNotWordNotAlpha\
    \ = !isLastCharNotWord && !isLastCharAlpha\n        val isLastCharNotWordNotAlpha\
    \ = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha\n        val\
    \ isLastCharNotWordNotAlpha = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha\
    \ && !isLastCharNotWord\n        val isLastCharNotWordNotAlpha = !isLastCharNotWord\
    \ && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord && !isLastCharNotWordNotAlpha\n\
    \        val isLastCharNotWordNotAlpha = !isLastCharNotWord && !isLastCharAlpha\
    \ && !isLastCharNotAlpha && !isLastCharNotWord && !isLastCharNotWordNotAlpha &&\
    \ !isLastCharNotWordNotAlpha\n        val isLastCharNotWordNotAlpha = !isLastCharNotWord\
    \ && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord && !isLastCharNotWordNotAlpha\
    \ && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha\n        val isLastCharNotWordNotAlpha\
    \ = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\
    \ && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha\
    \ && !isLastCharNotWordNotAlpha\n        val isLastCharNotWordNotAlpha = !isLastCharNotWord\
    \ && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord && !isLastCharNotWordNotAlpha\
    \ && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha\
    \ && !isLastCharNotWordNotAlpha\n        val isLastCharNotWordNotAlpha = !isLastCharNotWord\
    \ && !isLastCharAlpha && !isLastCharNotAlpha && !isLastChar\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphgb1sm6d.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordNotAlpha\e\
    [0m = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordNotAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphgb1sm6d.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordNotAlpha\e\
    [0m = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordNotAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphgb1sm6d.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordNotAlpha\e\
    [0m = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\
    \ && !isLastCharNotWordNotAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordNotAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphgb1sm6d.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36misLastC"
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !isLastCharALetter\n        isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwtlxgen6.scala:25)\n\tat Problem.main(tmpwtlxgen6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        var isLastCharNotALetter\
    \ = false\n        for(i <- 0 until txt.length){\n            if(txt(i) == lastChar){\n\
    \                isLastCharALetter = false\n            }\n            else{\n\
    \                isLastCharALetter = true\n            }\n        }\n        return\
    \ isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8e8azlpk.scala:33)\n\tat Problem.main(tmp8e8azlpk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978579
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == \"a\" || lastChar.toString.toLowerCase\
    \ == \"e\" || lastChar.toString.toLowerCase == \"i\" || lastChar.toString.toLowerCase\
    \ == \"o\" || lastChar.toString.toLowerCase == \"u\")\n        val isLastCharNotALetter\
    \ = (lastChar.toString.toLowerCase != \"a\" && lastChar.toString.toLowerCase !=\
    \ \"e\" && lastChar.toString.toLowerCase != \"i\" && lastChar.toString.toLowerCase\
    \ != \"o\" && lastChar.toString.toLowerCase != \"u\")\n        isLastCharALetter\
    \ && !isLastCharNotALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp_j4zsd_6.scala:19)\n\tat Problem$.main(tmp_j4zsd_6.scala:25)\n\
    \tat Problem.main(tmp_j4zsd_6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").lastOption match {\n            case None\
    \ => false\n            case Some(word) => !word.contains(lastChar)\n        }\n\
    \        isALetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbdz0zpuw.scala:27)\n\tat Problem.main(tmpbdz0zpuw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.dropRight(1).forall(_.isLetter)\n        isALetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj88u0soe.scala:27)\n\tat Problem.main(tmpj88u0soe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp4jc6z1eb.scala:19)\n\tat Problem$.main(tmp4jc6z1eb.scala:25)\n\
    \tat Problem.main(tmp4jc6z1eb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.matches(\"\\\\\
    w+\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxk5aprtz.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxk5aprtz.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxk5aprtz.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxk5aprtz.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxk5aprtz.scala:27:"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isNotWordChar = txt.last.contains(\"\
    \ \")\n        val isLastCharNotALetter = !isLastCharALetter\n        val isLastCharNotWordChar\
    \ = !isNotWordChar\n        isLastCharNotALetter && isLastCharNotWordChar\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkap8pfto.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misNotWordChar\e[0m = txt.last.contains(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value contains is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val isLastCharNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   val isLastCharNotALetterOrLastCharNotALetter = lastChar != 'a' && lastChar\
    \ != 'z' && lastChar != 'a'\n        val isLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetter\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar != 'a' && lastChar != 'z'\n\
    \        val isLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetter\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar != 'a' && lastChar != 'z' &&\
    \ lastChar != 'a'\n        val isLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetter\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar != 'a' && lastChar != 'z' &&\
    \ lastChar != 'a' && lastChar != 'z'\n        val isLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetter\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar != 'a' && lastChar != 'z' &&\
    \ lastChar != 'a' && lastChar != 'z' && lastChar != 'a' && lastChar != 'z'\n \
    \       val isLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetter\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar != 'a' && lastChar != 'z' &&\
    \ lastChar != 'a' && lastChar != 'z' && lastChar != 'a' && lastChar != 'z' &&\
    \ lastChar != 'a' && lastChar != 'z'\n        val isLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjnwgtei9.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjnwgtei9.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ lastCharIsALetter = lastChar.toString.toLowerCase match {\n            case\
    \ c if c.isLetter => true\n            case _ => false\n        }\n        val\
    \ lastCharIsNotALetter = lastChar.isLetter\n        val lastCharIsNotALetterAndNotWord\
    \ = lastCharIsALetter && !lastCharIsNotALetter\n        val lastCharIsNotALetterAndWord\
    \ = lastCharIsALetter && !lastCharIsNotALetterAndNotWord\n        val lastCharIsNotALetterAndNotWordAndNotLastChar\
    \ = lastCharIsALetter && !lastCharIsNotALetterAndNotWord && !lastCharIsNotALetter\n\
    \        val lastCharIsNotALetterAndNotWordAndNotLastCharAndNotLastChar = lastCharIsALetter\
    \ && !lastCharIsNotALetterAndNotWord && !lastCharIsNotALetter && !lastCharIsNotALetterAndNotLastChar\n\
    \        val lastCharIsNotALetterAndNotWordAndNotLastCharAndNotLastCharAndNotLastChar\
    \ = lastCharIsALetter && !lastCharIsNotALetterAndNotWord && !lastCharIsNotALetter\
    \ && !lastCharIsNotALetterAndNotLastChar && !lastCharIsNotALetterAndNotLastCharAndNotLastChar\n\
    \        val lastCharIsNotALetterAndNotWordAndNotLastCharAndNotLastCharAndNotLastCharAndNotLastChar\
    \ = lastCharIsALetter && !lastCharIsNotALetterAndNotWord && !lastCharIsNotALetter\
    \ && !lastCharIsNotALetterAndNotLastChar && !lastCharIsNotALetterAndNotLastCharAndNotLastChar\
    \ && !lastCharIsNotALetterAndNotLastCharAndNotLastCharAndNotLastChar\n       \
    \ val lastCharIsNotALetterAndNotWordAndNotLastCharAndNotLastCharAndNotLastCharAndNotLastCharAndNotLastChar\
    \ = lastCharIsALetter && !lastCharIsNotALetterAndNotWord && !lastCharIsNotALetter\
    \ && !lastCharIsNotALetterAndNotLastChar && !lastCharIsNotALetterAndNotLastCharAndNotLastChar\
    \ && !lastCharIsNotALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpij85lm8r.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m c \e[33mif\e[0m c.isLetter\
    \ => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value isLetter is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpij85lm8r.scala:24:44 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.isLetter\n\e[31m\e[31m   |\e[0m                                 \
    \  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ isLetter is not a member of String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpij85lm8r.scala:28:155\
    \ -----------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterAndNotWordAndNotLastCharAndNotLastChar\e[0m = lastCharIsALetter\
    \ && !lastCharIsNotALetterAndNotWord && !lastCharIsNotALetter && !lastCharIsNotALetterAndNotLastChar\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                           Not found: lastCharIsNotALetterAndNotLastChar\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpij85lm8r.scala:29:169\
    \ -----------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterAndNotWordAndNotLastCharAndNotLastCharAndNotLastChar\e\
    [0m = lastCharIsALetter && !lastCharIsNotALetterAndNotWord && !lastCharIsNotALetter\
    \ && !lastCharIsNotALetterAndNotLastChar && !lastCharIsNotALetterAndNotLastCharAndNotLastChar\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: lastCharIsNotALetterAnd"
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = txt.last != lastChar\n        isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwygg651b.scala:24)\n\tat Problem.main(tmpwygg651b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n      \
    \  !isALetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5wfpnrl8.scala:25)\n\tat Problem.main(tmp5wfpnrl8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.split(\" \").forall(_.isLetter)\n\
    \        isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_dkfk790.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ txt.last.split(\e[31m\" \"\e[0m).forall(_.isLetter)\n\e[31m\e[31m   |\e[0m \
    \                               ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                       value split is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.matches(\"\\\\W\")\n        val isLastCharNotAlpha = !isLastCharNotWord\n\
    \        val isLastCharNotSpace = lastChar.matches(\"\\\\s\")\n        val isLastCharNotUpper\
    \ = lastChar.matches(\"\\\\p{Upper}\")\n        val isLastCharNotLower = lastChar.matches(\"\
    \\\\p{Lower}\")\n        val isLastCharNotDigit = lastChar.matches(\"\\\\p{Digit}\"\
    )\n        val isLastCharNotAlpha = !isLastCharNotWord && !isLastCharNotAlpha\
    \ && !isLastCharNotSpace && !isLastCharNotUpper && !isLastCharNotLower && !isLastCharNotDigit\n\
    \        isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotSpace\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5fiddbo_.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m\
    \ = !isLastCharNotWord && !isLastCharNotAlpha && !isLastCharNotSpace && !isLastCharNotUpper\
    \ && !isLastCharNotLower && !isLastCharNotDigit\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotAlpha is already defined as \e[33mvalue\e[0m\
    \ \e[35misLastCharNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp5fiddbo_.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            value matches is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp5fiddbo_.scala:22:42 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotSpace\e[0m = lastChar.matches(\e\
    [31m\"\\\\s\"\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5fiddbo_.scala:23:42\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotUpper\e[0m = lastChar.matches(\e[31m\"\\\\p{Upper}\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value matches is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5fiddbo_.scala:24:42 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotLower\e[0m\
    \ = lastChar.matches(\e[31m\"\\\\p{Lower}\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659978591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6kwp6v6y.scala:24)\n\tat Problem.main(tmp6kwp6v6y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar.isLetter\n        val isNotWord =\
    \ txt.split(\" \").last.contains(lastChar)\n        isAlpha && !isNotWord\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpznyijdjg.scala:25)\n\tat Problem.main(tmpznyijdjg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = txt.split(\" \").last.contains(lastChar)\n   \
    \     isLastCharAlpha && !isLastCharNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp921gaw_4.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").lastOption match {\n            case Some(word)\
    \ => !word.contains(lastChar)\n            case None => false\n        }\n   \
    \     isALetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9i1ga58i.scala:27)\n\tat Problem.main(tmp9i1ga58i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        var isLastCharNotALetter\
    \ = false\n        while(lastChar != \" \") {\n            if(lastChar.matches(\"\
    [a-zA-Z]\")) {\n                isLastCharALetter = true\n            } else {\n\
    \                isLastCharNotALetter = true\n            }\n            lastChar\
    \ = txt.last\n        }\n        if(isLastCharALetter) {\n            return false\n\
    \        } else {\n            return true\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8mxv1nbn.scala:21:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mwhile\e[0m(lastChar != \e[31m\" \"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8mxv1nbn.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(lastChar.matches(\e[31m\"[a-zA-Z]\"\
    \e[0m)) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m               value matches is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.dropRight(1).forall(_.isLetter)\n        isAlpha && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpanrctae9.scala:27)\n\tat Problem.main(tmpanrctae9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == \"a\" || lastChar.toString.toLowerCase\
    \ == \"e\" || lastChar.toString.toLowerCase == \"i\" || lastChar.toString.toLowerCase\
    \ == \"o\" || lastChar.toString.toLowerCase == \"u\")\n        val isLastCharNotALetter\
    \ = (lastChar.toString.toLowerCase != \"a\" && lastChar.toString.toLowerCase !=\
    \ \"e\" && lastChar.toString.toLowerCase != \"i\" && lastChar.toString.toLowerCase\
    \ != \"o\" && lastChar.toString.toLowerCase != \"u\")\n        val isLastCharNotALetterOrLastCharIsALetter\
    \ = (lastChar.toString.toLowerCase != \"a\" && lastChar.toString.toLowerCase !=\
    \ \"e\" && lastChar.toString.toLowerCase != \"i\" && lastChar.toString.toLowerCase\
    \ != \"o\" && lastChar.toString.toLowerCase != \"u\" && isLastCharALetter)\n \
    \       val isLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetter = (lastChar.toString.toLowerCase\
    \ != \"a\" && lastChar.toString.toLowerCase != \"e\" && lastChar.toString.toLowerCase\
    \ != \"i\" && lastChar.toString.toLowerCase != \"o\" && lastChar.toString.toLowerCase\
    \ != \"u\" && isLastCharALetter && isLastCharALetter)\n        val isLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetter\
    \ = (lastChar.toString.toLowerCase != \"a\" && lastChar.toString.toLowerCase !=\
    \ \"e\" && lastChar.toString.toLowerCase != \"i\" && lastChar.toString.toLowerCase\
    \ != \"o\" && lastChar.toString.toLowerCase != \"u\" && isLastCharALetter && isLastCharALetter\
    \ && isLastCharALetter)\n        val isLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetter\
    \ = (lastChar.toString.toLowerCase != \"a\" && lastChar.toString.toLowerCase !=\
    \ \"e\" && lastChar.toString.toLowerCase != \"i\" && lastChar.toString.toLowerCase\
    \ != \"o\" && lastChar.toString.toLowerCase != \"u\" && isLastCharALetter && isLastCharALetter\
    \ && isLastCharALet\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprq35jdny.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprq35jdny.scala:25:354\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetter\e\
    [0m = (lastChar.toString.toLowerCase != \e[31m\"a\"\e[0m && lastChar.toString.toLowerCase\
    \ != \e[31m\"e\"\e[0m && lastChar.toString.toLowerCase != \e[31m\"i\"\e[0m &&\
    \ lastChar.toString.toLowerCase != \e[31m\"o\"\e[0m && lastChar.toString.toLowerCase\
    \ != \e[31m\"u\"\e[0m && isLastCharALetter && isLastCharALetter && isLastCharALet\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                      ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Not found:\
    \ isLastCharALet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprq35jdny.scala:26:5\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.matches(\"[a-zA-Z]+\")\n        val isLastCharNotALetter\
    \ = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+\")\n        val isLastCharNotALetter2\
    \ = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\")\n        val isLastCharNotALetter3\
    \ = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\")\n        val\
    \ isLastCharNotALetter4 = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\"\
    )\n        val isLastCharNotALetter5 = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\"\
    )\n        val isLastCharNotALetter6 = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\"\
    )\n        val isLastCharNotALetter7 = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\"\
    )\n        val isLastCharNotALetter8 = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\"\
    )\n        val isLastCharNotALetter9 = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\"\
    )\n        val isLastCharNotALetter10 = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\"\
    )\n        val isLastCharNotALetter11 = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\"\
    )\n        val isLastCharNotALetter12 = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\"\
    )\n        val isLastCharNotALetter13 = lastChar.matches(\"[a-zA-Z\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5pou1mfn.scala:33:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter13\e\
    [0m = lastChar.matches(\"[a-zA-Z\n\e[31m\e[31m   |\e[0m                      \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                            unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmp5pou1mfn.scala:35:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m35 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5pou1mfn.scala:34:5 ---------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp5pou1mfn.scala:35:4 -------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: [a-zA-Zdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659978598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]+\")\n\
    \        val isLastCharNotWord = lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\"\
    )\n        val isLastCharNotWord2 = lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\")\n        val isLastCharNotWord3 = lastChar.matches(\"[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n        val isLastCharNotWord4 =\
    \ lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\"\
    )\n        val isLastCharNotWord5 = lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n        val isLastCharNotWord6\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\\
    s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n        val isLastCharNotWord7 = lastChar.matches(\"\
    [a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n        val isLastCharNotWord8 = lastChar.matches(\"\
    [a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n        val isLastCharNotWord9 =\
    \ lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n    \
    \    val isLastCharNotWord10 = lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\\\
    s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\")\n        val isLastCharNotWord11 =\
    \ lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\")\n        val isLastCharNotWord12 = lastChar.matches(\"[a-zA-Z]+\\\
    \\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbzs0b6to.scala:31:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord12\e[0m\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\\
    s[a-zA-Z]+\\\\s[a-zA-Z]+\\\\\n\e[31m\e[31m   |\e[0m                          \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \                     unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpbzs0b6to.scala:33:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m33 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpbzs0b6to.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbzs0b6to.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"[a-zA-Z]+\\\\s[a-zA-Z]+\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbzs0b6to.scala:21:42\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord2\e[0m = lastChar.matches(\e[31m\"[a-zA-Z]+\\\\s[a-zA-Z]+\\\
    \\s[a-zA-Z]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbzs0b6to.scala:22:42\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord3\e[0m = lastChar.matches(\e[31m\"[a-zA-Z]+\\"
  stdout: ''
  timestamp: 1659978601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = txt.last != lastChar\n        isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwygg651b.scala:24)\n\tat Problem.main(tmpwygg651b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val isLastCharNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   val isLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetter\
    \ = \n            isLastCharNotALetter || isLastCharNotALetter || isLastCharNotALetter\
    \ || isLastCharNotALetter\n        val isLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetter\
    \ = \n            isLastCharNotALetter || isLastCharNotALetter || isLastCharNotALetter\
    \ || isLastCharNotALetter || isLastCharNotALetter\n        val isLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetter\
    \ = \n            isLastCharNotALetter || isLastCharNotALetter || isLastCharNotALetter\
    \ || isLastCharNotALetter || isLastCharNotALetter || isLastCharNotALetter\n  \
    \      val isLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetter\
    \ = \n            isLastCharNotALetter || isLastCharNotALetter || isLastCharNotALetter\
    \ || isLastCharNotALetter || isLastCharNotALetter || isLastCharNotALetter || isLastCharNotALetter\n\
    \        val isLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetterOrLastCharNotALetter\
    \ = \n            isLastCharNotALetter || isLastCharNotALetter || isLastCharNotALetter\
    \ || isLastCharNotALetter || isLastCharNotALetter || isLastCharNotALetter || isLastCharNotALetter\
    \ || isLastCharNotALetter\n        val isLastCharNotALetterOrLastCharNot\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv7vihgd5.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpv7vihgd5.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]+\")\n        val isLastCharNotWord\
    \ = words.lastOption.exists(_.contains(lastChar))\n        isLastCharAlpha &&\
    \ !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpcqocg1v8.scala:19)\n\tat Problem$.main(tmpcqocg1v8.scala:25)\n\
    \tat Problem.main(tmpcqocg1v8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = lastChar.trim.split(\"\
    \ \").length == 0\n        isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqkltjxil.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar.trim.split(\e[31m\" \"\e[0m).length == \e[31m0\e[0m\n\e[31m\e[31m \
    \  |\e[0m                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                               value trim is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.isLetter\n        val isLastCharNotALetter\
    \ = lastChar.isNotLetter\n        val isLastCharNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val isLastCharNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrDigit\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrDigitOrUppercase = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isDigit || lastChar.isUppercase\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrDigitOrUppercaseOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isDigit || lastChar.isUppercase\
    \ || lastChar.isSpace\n        val isLastCharNotALetterOrSpaceOrWordOrDigitOrUppercaseOrSpaceOrWord\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase || lastChar.isSpace || lastChar.isWord\n        val\
    \ isLastCharNotALetterOrSpaceOrWordOrDigitOrUppercaseOrSpaceOrWordOrDigit = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isDigit || lastChar.isUppercase\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\n        val isLastCharNotALetterOrSpaceOrWordOrDigitOrUppercaseOrSpaceOrWordOrDigitOrUppercase\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase\n        val isLastCharNotALetterOrSpaceOrWordOrDigitOrUppercaseOrSpaceOrWordOrDigitOrUppercaseOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqgyd43a6.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m\
    \ = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpqgyd43a6.scala:21:51 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpace\e[0m = lastChar.isNotLetter\
    \ || lastChar.isSpace\n\e[31m\e[31m   |\e[0m                                 \
    \         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpqgyd43a6.scala:22:57 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrWord\e[0m =\
    \ lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord\n\e[31m\e[31m  \
    \ |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqgyd43a6.scala:23:64\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpaceOrWordOrDigit\e[0m = lastChar.isNotLetter || lastChar.isSpace\
    \ || lastChar.isWord || lastChar.isDigit\n\e[31m\e[31m   |\e[0m              \
    \                                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                               value isNotLetter is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqgyd43a6.scala:24:75 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrWordOrDigitOrUppercase\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase\n\e[31m\e[31m   |\e[0m                             \
    \                                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            "
  stdout: ''
  timestamp: 1659978603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.toString.isLetter\n   \
    \     val lastCharIsNotALetter = lastChar.isLetter\n        val lastCharIsNotALetterOrSpace\
    \ = lastChar.isLetter && !lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrEnd\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrEndOrSpace = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd && !lastChar.isSpace\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrEndOrSpaceOrWord = lastChar.isLetter\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd && !lastChar.isSpace\
    \ && !lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrEndOrSpaceOrWordOrSpace\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWordOrEndOrSpaceOrWordOrSpaceOrEnd\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isSpace && !lastChar.isEnd\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrEndOrSpaceOrWordOrSpaceOrEndOrSpace\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isSpace && !lastChar.isEnd\
    \ && !lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWordOrEndOrSpaceOrWordOrSpaceOrEndOrSpaceOrSpace\
    \ = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord && !lastChar.isEnd\
    \ && !lastChar.isSpace && !lastChar.isWord && !lastChar.isSpace && !lastChar.isEnd\
    \ && !\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3la_ipva.scala:19:50 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp3la_ipva.scala:21:73 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpace\e[0m =\
    \ lastChar.isLetter && !lastChar.isSpace\n\e[31m\e[31m   |\e[0m              \
    \                                                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   value isSpace is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3la_ipva.scala:22:79 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWord\e\
    [0m = lastChar.isLetter && !lastChar.isSpace && !lastChar.isWord\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   value\
    \ isSpace is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3la_ipva.scala:22:100\
    \ -----------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterOrSpaceOrWord\e[0m = lastChar.isLetter && !lastChar.isSpace\
    \ && !lastChar.isWord\n\e[31m\e[31m   |\e[0m                                 \
    \                                                          ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    value isWord is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3la_ipva.scala:23:84\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterOrSpaceOrWordOrEnd\e[0m = lastChar.isLetter && !lastChar.isSpace\
    \ && !lastChar.isWord && !lastChar.isEnd\n\e[31m\e[31m   |\e[0m              \
    \                                                             ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    "
  stdout: ''
  timestamp: 1659978605
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        var isLastCharNotALetter\
    \ = false\n        while(lastChar != \" \") {\n            if(lastChar.equalsIgnoreCase(\"\
    a\") || lastChar.equalsIgnoreCase(\"e\") || lastChar.equalsIgnoreCase(\"i\") ||\
    \ lastChar.equalsIgnoreCase(\"o\") || lastChar.equalsIgnoreCase(\"u\")) {\n  \
    \              isLastCharALetter = true\n            } else {\n              \
    \  isLastCharNotALetter = true\n            }\n            lastChar = txt.last\n\
    \        }\n        return isLastCharALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp0xu7zqdx.scala:21:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mwhile\e[0m(lastChar != \e[31m\" \"\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp0xu7zqdx.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m(lastChar.equalsIgnoreCase(\e\
    [31m\"a\"\e[0m) || lastChar.equalsIgnoreCase(\e[31m\"e\"\e[0m) || lastChar.equalsIgnoreCase(\e\
    [31m\"i\"\e[0m) || lastChar.equalsIgnoreCase(\e[31m\"o\"\e[0m) || lastChar.equalsIgnoreCase(\e\
    [31m\"u\"\e[0m)) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value equalsIgnoreCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.nonEmpty && !isLastCharAlpha\n        isLastCharNotWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi2lpnu_o.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar.nonEmpty && !isLastCharAlpha\n\e[31m\e[31m   |\e[0m               \
    \                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            value nonEmpty is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978578
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        while(lastChar !=\
    \ \" \" && lastChar != \"\\n\" && lastChar != \"\\r\" && lastChar != \"\\t\")\
    \ {\n            lastChar = txt.last\n            isLastCharALetter = false\n\
    \        }\n        return isLastCharALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyr3cg348.scala:20:14 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mwhile\e[0m(lastChar != \e[31m\" \"\e[0m\
    \ && lastChar != \e[31m\"\\n\"\e[0m && lastChar != \e[31m\"\\r\"\e[0m && lastChar\
    \ != \e[31m\"\\t\"\e[0m) {\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpyr3cg348.scala:20:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mwhile\e[0m(lastChar != \e[31m\" \"\e[0m\
    \ && lastChar != \e[31m\"\\n\"\e[0m && lastChar != \e[31m\"\\r\"\e[0m && lastChar\
    \ != \e[31m\"\\t\"\e[0m) {\n\e[31m\e[31m   |\e[0m                            \
    \     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpyr3cg348.scala:20:53\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mwhile\e[0m(lastChar != \e[31m\" \"\e[0m && lastChar != \e[31m\"\\n\"\e\
    [0m && lastChar != \e[31m\"\\r\"\e[0m && lastChar != \e[31m\"\\t\"\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                                                     ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpyr3cg348.scala:20:73 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mwhile\e[0m(lastChar != \e[31m\" \"\e[0m\
    \ && lastChar != \e[31m\"\\n\"\e[0m && lastChar != \e[31m\"\\r\"\e[0m && lastChar\
    \ != \e[31m\"\\t\"\e[0m) {\n\e[31m\e[31m   |\e[0m                            \
    \                                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n4 errors found\n"
  stdout: ''
  timestamp: 1659978602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        !isLastCharALetter\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6kwp6v6y.scala:24)\n\tat Problem.main(tmp6kwp6v6y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978591
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val isALetter = lastChar.matches(\"[a-zA-Z]+\")\n        !isALetter\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.checkIfLastCharIsALetter(tmps3vl60w2.scala:19)\n\tat Problem$.main(tmps3vl60w2.scala:24)\n\
    \tat Problem.main(tmps3vl60w2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.toLowerCase == lastChar\n        val isNotWord\
    \ = words.lastOption.exists(word => word.contains(lastChar))\n        isLastCharALetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmptj7gte0_.scala:19)\n\tat Problem$.main(tmptj7gte0_.scala:25)\n\
    \tat Problem.main(tmptj7gte0_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.lastOption.exists(word => word.last.charAt(0) == lastChar.charAt(0))\n\
    \        isLastCharAlpha && !isLastCharNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyp3otp92.scala:21:74 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ words.lastOption.exists(\e[36mword\e[0m => word.last.charAt(\e[31m0\e[0m) ==\
    \ lastChar.charAt(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                      \
    \                                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                    value charAt is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978601
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.isLetter\n        val isNotWord = words.last.forall(_.toString.isLetter)\n\
    \        isLastCharALetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfzh1rn3w.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpfzh1rn3w.scala:21:53 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.toString.isLetter)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659978602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val isLastCharALetter = (lastChar.toString.toLowerCase == \"a\" || lastChar.toString.toLowerCase\
    \ == \"e\" || lastChar.toString.toLowerCase == \"i\" || lastChar.toString.toLowerCase\
    \ == \"o\" || lastChar.toString.toLowerCase == \"u\")\n        val isLastCharNotALetter\
    \ = (lastChar.toString.toLowerCase != \"a\" && lastChar.toString.toLowerCase !=\
    \ \"e\" && lastChar.toString.toLowerCase != \"i\" && lastChar.toString.toLowerCase\
    \ != \"o\" && lastChar.toString.toLowerCase != \"u\")\n        isLastCharALetter\
    \ && !isLastCharNotALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 4\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.checkIfLastCharIsALetter(tmp3rqzkpfc.scala:19)\n\tat Problem$.main(tmp3rqzkpfc.scala:25)\n\
    \tat Problem.main(tmp3rqzkpfc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.nonEmpty\n  \
    \      val isLastCharNotWordAlpha = !isLastCharNotWord\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLast\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf5tsn389.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf5tsn389.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36misLastCharNotWordAlpha\e[0m = !isLastCharNotWordAlpha\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e[0m \e\
    [35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpf5tsn389.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf5tsn389.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf5tsn389.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotW"
  stdout: ''
  timestamp: 1659978602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.toString.isLetter\n     \
    \   val isLastCharNotWord = txt.dropRight(1).forall(_.toString.isLetter)\n   \
    \     isLastCharAlpha && !isLastCharNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd2kna7mo.scala:19:48 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd2kna7mo.scala:20:67\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = txt.dropRight(\e[31m1\e[0m).forall(_.toString.isLetter)\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659978602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterAndNotWord = lastChar.isNotLetter\
    \ && !lastChar.isWord\n        val lastCharIsWord = lastChar.isWord\n        val\
    \ lastCharIsNotWord = lastChar.isNotWord\n        val lastCharIsNotWordAndNotLetter\
    \ = lastChar.isNotWord && !lastChar.isLetter\n        val lastCharIsLetter = lastChar.isLetter\n\
    \        val lastCharIsNotLetter = lastChar.isNotLetter\n        val lastCharIsNotLetterAndNotWord\
    \ = lastChar.isNotLetter && !lastChar.isWord\n        val lastCharIsWordAndNotLetter\
    \ = lastChar.isWord && !lastChar.isLetter\n        val lastCharIsLetterAndNotWord\
    \ = lastChar.isLetter && !lastChar.isWord\n        val lastCharIsWordAndNotLetter\
    \ = lastChar.isWord && !lastChar.isLetter\n        val lastCharIsLetterAndNotWordAndNotLetter\
    \ = lastChar.isLetter && !lastChar.isWord && !lastChar.isLetter\n        val lastCharIsWordAndNotLetterAndNotLetter\
    \ = lastChar.isWord && !lastChar.isLetter && !lastChar.isLetter\n        val lastCharIsWordAndNotLetterAndNotLetterAndNotWord\
    \ = lastChar.isWord && !lastChar.isLetter && !lastChar.isLetter && !lastChar.isWord\n\
    \        val lastCharIsWordAndNotLetterAndNotLetterAndNotWordAndNotLetter = lastChar.isWord\
    \ && !lastChar.isLetter && !lastChar.isLetter && !lastChar.isWord && !lastChar.isLetter\n\
    \        val lastCharIsWordAndNotLetterAndNotLetterAndNotWordAndNotLetterAndNotWord\
    \ = lastChar.isWord && !lastChar.isLetter && !lastChar.isLetter && !lastChar.isWord\
    \ && !lastChar.isLetter && !lastChar.isWord\n        val lastCharIsWordAndNotLetterAndNotLetterAndNotWordAndNotLetterAndNotWordAndNotLetter\
    \ = lastChar.isWord && !lastChar.isLetter && !lastChar.isLetter && !lastChar.isWord\
    \ && !lastChar.isLetter && !lastChar.isWord && !lastChar.isLetter\n        val\
    \ lastCharIsWordAndNotLetterAndNotLetterAndNotWordAndNotLetterAnd\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm9821um8.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm9821um8.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsWordAndNotLetter\e[0m = lastChar.isWord && !lastChar.isLetter\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsWordAndNotLetter is already defined as \e[33mvalue\e\
    [0m \e[35mlastCharIsWordAndNotLetter\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm9821um8.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpm9821um8.scala:21:54 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterAndNotWord\e[0m = lastChar.isNotLetter\
    \ && !lastChar.isWord\n\e[31m\e[31m   |\e[0m                                 \
    \            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpm9821um8.scala:22:38 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsWord\e[0m = lastChar.isWord\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             value isWord is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpm9821um8.scala:23:41 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m =\
    \ lastChar.isNotWord\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e"
  stdout: ''
  timestamp: 1659978604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   val lastCharIsNotALetterButLastCharIsALetter = lastChar != 'a' && lastChar\
    \ != 'z' && lastChar == 'a'\n        val lastCharIsALetterButLastCharIsNotALetter\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar == 'z'\n        val lastCharIsALetterButLastCharIsALetterButLastCharIsNotALetter\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar == 'a' && lastChar == 'z'\n\
    \        val lastCharIsALetterButLastCharIsNotALetterButLastCharIsALetter = lastChar\
    \ != 'a' && lastChar != 'z' && lastChar == 'z' && lastChar == 'a'\n        val\
    \ lastCharIsALetterButLastCharIsALetterButLastCharIsNotALetterButLastCharIsALetter\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar == 'a' && lastChar == 'z' &&\
    \ lastChar == 'z'\n        val lastCharIsALetterButLastCharIsNotALetterButLastCharIsALetterButLastCharIsNotALetter\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar == 'z' && lastChar == 'a' &&\
    \ lastChar == 'z'\n        val lastCharIsALetterButLastCharIsALetterButLastCharIsNotALetterButLastCharIsALetterButLastCharIsNotALetter\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar == 'a' && lastChar == 'z' &&\
    \ lastChar == 'z'\n        val lastCharIsALetterButLastCharIsNotALetterButLastCharIsALetterButLastCharIsNotALetterButLastCharIsALetter\
    \ = lastChar != 'a' && lastChar != 'z' && lastChar == 'z' && lastChar == 'a' &&\
    \ lastChar == 'z'\n        val lastCharIsALetterButLastCharIsALetterButLastCharIsNotALetterButLastCharIsALetterButLastCharIsNotALetterButLastCharIsALetter\
    \ = lastChar != 'a' && \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvnj0vsob.scala:29:156 --------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterButLastCharIsALetterButLastCharIsNotALetterButLastCharIsALetterButLastCharIsNotALetterButLastCharIsALetter\e\
    [0m = lastChar != \e[31m'a'\e[0m && \n\e[31m\e[31m   |\e[0m                  \
    \                                                                            \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvnj0vsob.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.matches(\"\\\\W\")\n        isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx8uwbbnc.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978578
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == lastChar)\n        val\
    \ isNotWordChar = words.last.forall(_.toString.toLowerCase != lastChar)\n    \
    \    isLastCharALetter && !isNotWordChar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpwb_qd6ed.scala:19)\n\tat Problem$.main(tmpwb_qd6ed.scala:25)\n\
    \tat Problem.main(tmpwb_qd6ed.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978604
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar.toString.isLetter\n        val\
    \ isNotWord = txt.dropRight(1).forall(_.toString.isLetter)\n        isALetter\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdh078e84.scala:19:42 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misALetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value isLetter is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdh078e84.scala:20:59 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.dropRight(\e\
    [31m1\e[0m).forall(_.toString.isLetter)\n\e[31m\e[31m   |\e[0m               \
    \                                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                              value isLetter is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978603
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isWord = txt.split(\" \").last.contains(lastChar)\n        !isAlpha &&\
    \ !isWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwz12zwz.scala:25)\n\tat Problem.main(tmpjwz12zwz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n        isAlpha\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu3ypbos7.scala:25)\n\tat Problem.main(tmpu3ypbos7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.isLetter\n        val isLastCharNotALetter\
    \ = lastChar.nonLetter\n        val isLastCharNotALetterOrSpace = lastChar.nonLetter.nonSpace\
    \ || lastChar.nonSpace == false\n        isLastCharALetter && !isLastCharNotALetter\
    \ && !isLastCharNotALetterOrSpace\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw3axpx2a.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m\
    \ = lastChar.nonLetter\n\e[31m\e[31m   |\e[0m                                \
    \   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ nonLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw3axpx2a.scala:21:51\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpace\e[0m = lastChar.nonLetter.nonSpace || lastChar.nonSpace\
    \ == \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                                 \
    \         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      value nonLetter is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.toString.isLetter\n   \
    \     val isLastCharNotALetter = lastChar.toString.isNotLetter\n        val isLastCharNotALetterOrWord\
    \ = lastChar.toString.isNotLetter || lastChar.toString.split(\" \").length ==\
    \ 1\n        val isLastCharNotALetterOrWordOrEmpty = lastChar.toString.isNotLetter\
    \ || lastChar.toString.split(\" \").length == 0 || txt.length == 0\n        val\
    \ isLastCharNotALetterOrWordOrEmptyOrEmpty = lastChar.toString.isNotLetter ||\
    \ lastChar.toString.split(\" \").length == 0 || txt.length == 0\n        val isLastCharNotALetterOrWordOrEmptyOrEmpty\
    \ = lastChar.toString.isNotLetter || lastChar.toString.split(\" \").length ==\
    \ 0 || txt.length == 0\n        val isLastCharNotALetterOrWordOrEmptyOrEmpty =\
    \ lastChar.toString.isNotLetter || lastChar.toString.split(\" \").length == 0\
    \ || txt.length == 0\n        val isLastCharNotALetterOrWordOrEmptyOrEmpty = lastChar.toString.isNotLetter\
    \ || lastChar.toString.split(\" \").length == 0 || txt.length == 0\n        val\
    \ isLastCharNotALetterOrWordOrEmptyOrEmpty = lastChar.toString.isNotLetter ||\
    \ lastChar.toString.split(\" \").length == 0 || txt.length == 0\n        val isLastCharNotALetterOrWordOrEmptyOrEmpty\
    \ = lastChar.toString.isNotLetter || lastChar.toString.split(\" \").length ==\
    \ 0 || txt.length == 0\n        val isLastCharNotALetterOrWordOrEmptyOrEmpty =\
    \ lastChar.toString.isNotLetter || lastChar.toString.split(\" \").length == 0\
    \ || txt.length == 0\n        val isLastCharNotALetterOrWordOrEmptyOrEmpty = lastChar.toString.isNotLetter\
    \ || lastChar.toString.split(\" \").length == 0 || txt.length == 0\n        val\
    \ isLastCharNotALetterOrWordOrEmptyOrEmpty = lastChar.toString.isNotLetter ||\
    \ lastChar.toString.split(\" \").length == 0 || txt.length == 0\n        val isLastCharNotALetterOrWordOrEmptyOrEmpty\
    \ = lastChar.toString.isNotLetter || lastChar.toString.split(\" \").length ==\
    \ 0 || txt.length == 0\n        val isLastCharNotALetterOrWordOrEmpty\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu56de58g.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu56de58g.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36misLastCharNotALetterOrWordOrEmptyOrEmpty\e[0m = lastChar.toString.isNotLetter\
    \ || lastChar.toString.split(\e[31m\" \"\e[0m).length == \e[31m0\e[0m || txt.length\
    \ == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterOrWordOrEmptyOrEmpty is already defined\
    \ as \e[33mvalue\e[0m \e[35misLastCharNotALetterOrWordOrEmptyOrEmpty\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu56de58g.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrWordOrEmptyOrEmpty\e\
    [0m = lastChar.toString.isNotLetter || lastChar.toString.split(\e[31m\" \"\e[0m).length\
    \ == \e[31m0\e[0m || txt.length == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterOrWordOrEmptyOrEmpty is already defined\
    \ as \e[33mvalue\e[0m \e[35misLastCharNotALetterOrWordOrEmptyOrEmpty\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu56de58g.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrWordOrEmptyOrEmpty\e\
    [0m = lastChar.toString.isNotLetter || lastChar.toString.split(\e[31m\" \"\e[0m).length\
    \ == \e[31m0\e[0m || txt.length == \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659978612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        var isLastCharNotALetter\
    \ = false\n        for(i <- 0 until txt.length){\n            if(txt(i) == lastChar){\n\
    \                lastChar = txt.last\n                isLastCharALetter = true\n\
    \            }\n            else{\n                isLastCharALetter = false\n\
    \            }\n        }\n        return isLastCharALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaq5l87k_.scala:33)\n\tat Problem.main(tmpaq5l87k_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlphabetic = lastChar.matches(\"[a-zA-Z]\") && !lastChar.matches(\"\
    \\\\w\")\n        val isLastCharNotWord = lastChar.matches(\"\\\\w\")\n      \
    \  return isLastCharAlphabetic && !isLastCharNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpzqmu8jh1.scala:19)\n\tat Problem$.main(tmpzqmu8jh1.scala:25)\n\
    \tat Problem.main(tmpzqmu8jh1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n        isAlpha\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu3ypbos7.scala:25)\n\tat Problem.main(tmpu3ypbos7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = txt.last != lastChar\n        val isLastCharNotALetterAndNotWord = txt.last\
    \ != lastChar && !txt.contains(\" \")\n        val isLastCharNotALetterAndNotWordAndNotLastCharIsALetter\
    \ = txt.last != lastChar && !txt.contains(\" \") && !isLastCharALetter\n     \
    \   val isLastCharNotALetterAndNotWordAndNotLastCharIsALetterAndNotLastCharIsALetter\
    \ = txt.last != lastChar && !txt.contains(\" \") && !isLastCharALetter && !isLastCharALetter\n\
    \        val isLastCharNotALetterAndNotWordAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetter\
    \ = txt.last != lastChar && !txt.contains(\" \") && !isLastCharALetter && !isLastCharALetter\
    \ && !isLastCharALetter\n        val isLastCharNotALetterAndNotWordAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetter\
    \ = txt.last != lastChar && !txt.contains(\" \") && !isLastCharALetter && !isLastCharALetter\
    \ && !isLastCharALetter && !isLastCharALetter && !isLastCharALetter\n        val\
    \ isLastCharNotALetterAndNotWordAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetter\
    \ = txt.last != lastChar && !txt.contains(\" \") && !isLastCharALetter && !isLastCharALetter\
    \ && !isLastCharALetter && !isLastCharALetter && !isLastCharALetter && !isLastCharALetter\
    \ && !isLastCharALetter\n        val isLastCharNotALetterAndNotWordAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNotLastCharIsALetterAndNot\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeoikq68g.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpeoikq68g.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlphabetical = lastChar.toString.isLetter\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        isLastCharAlphabetical && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphvfxy6ni.scala:20:55 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlphabetical\e\
    [0m = lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                      \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                   value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").lastOption.isEmpty\n        isALetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsrcehms2.scala:24)\n\tat Problem.main(tmpsrcehms2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val lastCharIsALetter = lastChar.forall(_.isLetter)\n        val lastCharIsNotALetter\
    \ = lastChar.forall(!_.isLetter)\n        val lastCharIsNotALetterButNotWord =\
    \ lastChar.forall(!_.isLetter && !_.isSpace)\n        val lastCharIsNotALetterButNotWordButNotSpace\
    \ = lastChar.forall(!_.isLetter && !_.isSpace && !_.isSpace)\n        val lastCharIsNotALetterButNotWordButNotSpaceButNotLastChar\
    \ = lastChar.forall(!_.isLetter && !_.isSpace && !_.isSpace && !_.isLetter &&\
    \ !_.isSpace)\n        val lastCharIsNotALetterButNotWordButNotSpaceButNotLastCharButNotLastChar\
    \ = lastChar.forall(!_.isLetter && !_.isSpace && !_.isSpace && !_.isLetter &&\
    \ !_.isSpace && !_.isLetter && !_.isSpace)\n        val lastCharIsNotALetterButNotWordButNotSpaceButNotLastCharButNotLastCharButNotLastChar\
    \ = lastChar.forall(!_.isLetter && !_.isSpace && !_.isSpace && !_.isLetter &&\
    \ !_.isSpace && !_.isLetter && !_.isSpace && !_.isLetter && !_.isSpace)\n    \
    \    val lastCharIsNotALetterButNotWordButNotSpaceButNotLastCharButNotLastCharButNotLastCharButNotLastChar\
    \ = lastChar.forall(!_.isLetter && !_.isSpace && !_.isSpace && !_.isLetter &&\
    \ !_.isSpace && !_.isLetter && !_.isSpace && !_.isLetter && !_.isSpace && !_.isLetter\
    \ && !_.isSpace)\n        val lastCharIsNotALetterButNotWordButNotSpaceButNotLastCharButNotLastCharButNotLastCharButNotLastCharButNotLastChar\
    \ = lastChar.forall(!_.isLetter && !_.isSpace && !_.isSpace && !_.isLetter &&\
    \ !_.isSpace && !_.isLetter && !_.isSpace && !_.isLetter && !_.isSpace && !_.isLetter\
    \ && !_.isSpace && !_.isLetter \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptvigzecy.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmptvigzecy.scala:22:61\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsNotALetterButNotWord\e[0m = lastChar.forall(!_.isLetter && !_.isSpace)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \         Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmptvigzecy.scala:23:72 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterButNotWordButNotSpace\e\
    [0m = lastChar.forall(!_.isLetter && !_.isSpace && !_.isSpace)\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                      Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmptvigzecy.scala:24:86 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterButNotWordButNotSpaceButNotLastChar\e\
    [0m = lastChar.forall(!_.isLetter && !_.isSpace && !_.isSpace && !_.isLetter &&\
    \ !_.isSpace)\n\e[31m\e[31m   |\e[0m                                         \
    \                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmptvigzecy.scala:25:100\
    \ --------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsNotALetterButNotWordButNotSpaceButNotLastCharButNotLastChar\e\
    [0m = lastChar.forall(!_.isLetter && !_.isSpace && !_.isSpace && !_.isLetter &&\
    \ !_.isSpace && !_.isLetter && !_.isSpace)\n\e[31m\e[31m   |\e[0m            \
    \                                                                         "
  stdout: ''
  timestamp: 1659978612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.matches(\"[a-zA-Z]+\")\n        val isLastCharNotALetter\
    \ = lastChar.matches(\"[a-zA-Z]+$\")\n        val isLastCharNotALetterOrSpace\
    \ = lastChar.matches(\"[a-zA-Z]+\\\\s+\")\n        val isLastCharNotALetterOrSpaceOrLastCharIsALetter\
    \ = isLastCharNotALetter || isLastCharIsALetter\n        val isLastCharNotALetterOrSpaceOrLastCharIsALetterOrSpace\
    \ = isLastCharNotALetter || isLastCharIsALetter || isLastCharNotALetterOrSpace\n\
    \        val isLastCharNotALetterOrSpaceOrLastCharIsALetterOrSpaceOrLastCharIsALetter\
    \ = isLastCharNotALetter || isLastCharIsALetter || isLastCharNotALetterOrSpace\
    \ || isLastCharIsALetterOrSpace\n        val isLastCharNotALetterOrSpaceOrLastCharIsALetterOrSpaceOrLastCharIsALetterOrSpace\
    \ = isLastCharNotALetter || isLastCharIsALetter || isLastCharNotALetterOrSpace\
    \ || isLastCharIsALetterOrSpace || isLastCharNotALetterOrSpace\n        val isLastCharNotALetterOrSpaceOrLastCharIsALetterOrSpaceOrLastCharIsALetterOrSpaceOrLastCharIsALetter\
    \ = isLastCharNotALetter || isLastCharIsALetter || isLastCharNotALetterOrSpace\
    \ || isLastCharIsALetterOrSpace || isLastCharNotALetterOrSpace || isLastCharIsALetterOrSpace\n\
    \        val isLastCharNotALetterOrSpaceOrLastCharIsALetterOrSpaceOrLastCharIsALetterOrSpaceOrLastCharIsALetterOrSpace\
    \ = isLastCharNotALetter || isLastCharIsALetter || isLastCharNotALetterOrSpace\
    \ || isLastCharIsALetterOrSpace || isLastCharNotALetterOrSpace || isLastCharIsALetterOrSpace\n\
    \        val isLastCharNotALetterOrSpaceOrLastCharIsALetterOrSpaceOrLastCharIsALetterOrSpaceOrLastCharIsALetterOrSpaceOrLastCharIsALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu4is0k4z.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu4is0k4z.scala:23:85\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpaceOrLastCharIsALetter\e[0m = isLastCharNotALetter\
    \ || isLastCharIsALetter\n\e[31m\e[31m   |\e[0m                              \
    \                                                       ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Not found: isLastCharIsALetter\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu4is0k4z.scala:24:92\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpaceOrLastCharIsALetterOrSpace\e[0m = isLastCharNotALetter\
    \ || isLastCharIsALetter || isLastCharNotALetterOrSpace\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                       Not found: isLastCharIsALetter\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpu4is0k4z.scala:25:111 -----------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrLastCharIsALetterOrSpaceOrLastCharIsALetter\e\
    [0m = isLastCharNotALetter || isLastCharIsALetter || isLastCharNotALetterOrSpace\
    \ || isLastCharIsALetterOrSpace\n\e[31m\e[31m   |\e[0m                       \
    \                                                                            \
    \            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                   Not found: isLastCharIsALetter\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpu4is0k4z.scala:25:165 -----------------------\e"
  stdout: ''
  timestamp: 1659978612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotALetter\
    \ = !isLastCharALetter\n        isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp3t10mhlb.scala:19)\n\tat Problem$.main(tmp3t10mhlb.scala:25)\n\
    \tat Problem.main(tmp3t10mhlb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   lastCharIsALetter && !lastCharIsNotALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp1jwycd0.scala:25)\n\tat Problem.main(tmpp1jwycd0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlphabetic = lastChar.isLetter\n        val\
    \ isLastCharNotWord = txt.split(\" \").last.contains(lastChar)\n        isLastCharAlphabetic\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvrcvas16.scala:25)\n\tat Problem.main(tmpvrcvas16.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.split(\" \").lastOption.exists(_ == lastChar)\n      \
    \  isAlpha && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppf8ggh76.scala:20:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.split(\e\
    [31m\" \"\e[0m).lastOption.exists(_ == lastChar)\n\e[31m\e[31m   |\e[0m      \
    \                                                   ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp09qhqh72.scala:19)\n\tat Problem$.main(tmp09qhqh72.scala:25)\n\
    \tat Problem.main(tmp09qhqh72.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.forall(x => x.isLetter)\n        val isLastCharNotWord\
    \ = words.last.forall(x => !x.contains(\" \"))\n        isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5onr9qwr.scala:21:58 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ words.last.forall(\e[36mx\e[0m => !x.contains(\e[31m\" \"\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                        ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value contains is not a\
    \ member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val\
    \ isNotWord = txt.split(\" \").lastOption match {\n            case Some(word)\
    \ => !word.contains(lastChar)\n            case None => false\n        }\n   \
    \     isAlpha && !isNotWord\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnxs9kjqx.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value matches is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978613
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.isLetter\n        val isLastCharNotALetter\
    \ = lastChar.isNotLetter\n        val isLastCharNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val isLastCharNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrNewline\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isNewline\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrNewlineOrNewline = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isNewline || lastChar.isNewline\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrNewlineOrNewlineOrNewline = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isNewline || lastChar.isNewline\
    \ || lastChar.isNewline\n        val isLastCharNotALetterOrSpaceOrWordOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isNewline\
    \ || lastChar.isNewline || lastChar.isNewline || lastChar.isNewline\n        val\
    \ isLastCharNotALetterOrSpaceOrWordOrNewlineOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isNewline\
    \ || lastChar.isNewline || lastChar.isNewline || lastChar.isNewline || lastChar.isNewline\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isNewline\
    \ || lastChar.isNewline || lastChar.isNewline || lastChar.isNewline || lastChar.isNewline\
    \ || lastChar.isNewline\n        val isLastCharNotALetterOrSpaceOrWordOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastChar.isNotLetter || lastChar.is\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpntbidh2k.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m\
    \ = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpntbidh2k.scala:21:51 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpace\e[0m = lastChar.isNotLetter\
    \ || lastChar.isSpace\n\e[31m\e[31m   |\e[0m                                 \
    \         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpntbidh2k.scala:22:57 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrWord\e[0m =\
    \ lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord\n\e[31m\e[31m  \
    \ |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpntbidh2k.scala:23:66\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpaceOrWordOrNewline\e[0m = lastChar.isNotLetter ||\
    \ lastChar.isSpace || lastChar.isWord || lastChar.isNewline\n\e[31m\e[31m   |\e\
    [0m                                                         ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpntbidh2k.scala:24:75\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpaceOrWordOrNewlineOrNewline\e[0m = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isNewline || lastChar.isNewline\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      "
  stdout: ''
  timestamp: 1659978615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   lastCharIsALetter && lastCharIsNotALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd7m8m3_4.scala:24)\n\tat Problem.main(tmpd7m8m3_4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.isLetter\n        val isNotWord = words.last.forall(_.toString.isLetter)\n\
    \        isLastCharALetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfzh1rn3w.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpfzh1rn3w.scala:21:53 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.toString.isLetter)\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659978602
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val isLastCharAlpha = lastChar.forall(_.isLetter)\n        val isLastCharNotWord\
    \ = words.last.forall(_.contains(lastChar))\n        isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvx7d_w5h.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z')\n        val lastCharIsNotALetter = (lastChar != 'a' && lastChar != 'z')\n\
    \        val lastCharIsNotALetterOrSpace = (lastCharIsALetter || lastCharIsNotALetter)\n\
    \        val lastCharIsNotALetterOrSpaceOrWord = (lastCharIsALetter || lastCharIsNotALetter\
    \ || lastCharIsNotALetterOrSpace)\n        val lastCharIsNotALetterOrSpaceOrWordOrEmpty\
    \ = (lastCharIsALetter || lastCharIsNotALetter || lastCharIsNotALetterOrSpace\
    \ || lastChar.isEmpty)\n        val lastCharIsNotALetterOrSpaceOrWordOrEmptyOrSpace\
    \ = (lastCharIsALetter || lastCharIsNotALetter || lastCharIsNotALetterOrSpace\
    \ || lastChar.isEmpty || lastChar.isSpace)\n        val lastCharIsNotALetterOrSpaceOrWordOrEmptyOrSpaceOrWord\
    \ = (lastCharIsALetter || lastCharIsNotALetter || lastCharIsNotALetterOrSpace\
    \ || lastChar.isEmpty || lastChar.isSpace || lastChar.isWord)\n        val lastCharIsNotALetterOrSpaceOrWordOrEmptyOrSpaceOrWordOrSpace\
    \ = (lastCharIsALetter || lastCharIsNotALetter || lastCharIsNotALetterOrSpace\
    \ || lastChar.isEmpty || lastChar.isSpace || lastChar.isWord || lastChar.isSpace)\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrEmptyOrSpaceOrWordOrSpaceOrWord\
    \ = (lastCharIsALetter || lastCharIsNotALetter || lastCharIsNotALetterOrSpace\
    \ || lastChar.isEmpty || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || lastChar.isWord)\n        val lastCharIsNotALetterOrSpaceOrWordOrEmptyOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = (lastCharIsALetter || lastCharIsNotALetter || lastCharIsNotALetterOrSpace\
    \ || lastChar.isEmpty || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3eznasty.scala:28:243 --------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWordOrEmptyOrSpaceOrWordOrSpaceOrWordOrSpace\e\
    [0m = (lastCharIsALetter || lastCharIsNotALetter || lastCharIsNotALetterOrSpace\
    \ || lastChar.isEmpty || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\
    \ || \n\e[31m\e[31m   |\e[0m                                                 \
    \                                                                            \
    \                                                                            \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3eznasty.scala:23:141\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterOrSpaceOrWordOrEmpty\e[0m = (lastCharIsALetter || lastCharIsNotALetter\
    \ || lastCharIsNotALetterOrSpace || lastChar.isEmpty)\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                                                       ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                   value isEmpty is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3eznasty.scala:24:148\
    \ -----------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterOrSpaceOrWordOrEmptyOrSpace\e[0m = (lastCharIsALetter\
    \ || lastCharIsNotALetter || lastCharIsNotALetterOrSpace || lastChar.isEmpty ||\
    \ lastChar.isSpace)\n\e[31m\e[31m   |\e[0m                                   \
    \                                                                            \
    \                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                         value isEmpty is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3eznasty.scala:24:168 -----------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m   "
  stdout: ''
  timestamp: 1659978616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val lastCharIsALetter = lastChar.forall(_.isLetter)\n        val lastCharIsNotALetter\
    \ = lastChar.forall(!_.isLetter)\n        val lastCharIsNotALetterButNotWord =\
    \ lastChar.forall(!_.isLetter && !_.isSpace)\n        val lastCharIsNotALetterButWord\
    \ = lastChar.forall(!_.isLetter && _.isSpace)\n        val lastCharIsALetterButNotWord\
    \ = lastChar.forall(_.isLetter && !_.isSpace)\n        val lastCharIsALetterButWord\
    \ = lastChar.forall(_.isLetter && _.isSpace)\n        val lastCharIsALetterButNotWordButNotSpace\
    \ = lastChar.forall(_.isLetter && !_.isSpace && !_.isLetter)\n        val lastCharIsALetterButNotWordButSpace\
    \ = lastChar.forall(_.isLetter && !_.isSpace && _.isLetter)\n        val lastCharIsALetterButWordButNotSpace\
    \ = lastChar.forall(_.isLetter && _.isSpace && !_.isLetter)\n        val lastCharIsALetterButWordButSpace\
    \ = lastChar.forall(_.isLetter && _.isSpace && _.isLetter)\n        val lastCharIsALetterButNotWordButNotSpace\
    \ = lastChar.forall(_.isLetter && !_.isSpace && !_.isLetter && !_.isSpace)\n \
    \       val lastCharIsALetterButNotWordButSpace = lastChar.forall(_.isLetter &&\
    \ !_.isSpace && _.isLetter && !_.isSpace)\n        val lastCharIsALetterButWordButNotSpace\
    \ = lastChar.forall(_.isLetter && _.isSpace && !_.isLetter && !_.isSpace)\n  \
    \      val lastCharIsALetterButWordButSpace = lastChar.forall(_.isLetter && _.isSpace\
    \ && _.isLetter && !_.isSpace)\n        val lastCharIsALetterButNotWordButNotSpace\
    \ = lastChar.forall(_.isLetter && !_.isSpace && !_.isLetter && _.isSpace)\n  \
    \      val lastCharIsALetterButNotWordButSpace\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpipxu_qtb.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipxu_qtb.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsALetterButNotWordButNotSpace\e[0m = lastChar.forall(_.isLetter\
    \ && !_.isSpace && !_.isLetter && !_.isSpace)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterButNotWordButNotSpace is already defined\
    \ as \e[33mvalue\e[0m \e[35mlastCharIsALetterButNotWordButNotSpace\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpipxu_qtb.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsALetterButNotWordButSpace\e[0m\
    \ = lastChar.forall(_.isLetter && !_.isSpace && _.isLetter && !_.isSpace)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterButNotWordButSpace is already defined as\
    \ \e[33mvalue\e[0m \e[35mlastCharIsALetterButNotWordButSpace\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipxu_qtb.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsALetterButWordButNotSpace\e[0m = lastChar.forall(_.isLetter\
    \ && _.isSpace && !_.isLetter && !_.isSpace)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsALetterButWordButNotSpace is already defined as\
    \ \e[33mvalue\e[0m \e[35mlastCharIsALetterButWordButNotSpace\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that o"
  stdout: ''
  timestamp: 1659978615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.split(\" \").forall(_.isLetter)\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWord\n        val isLastCharNotWordNotAlpha\
    \ = !isLastCharNotWord && !isLastCharAlpha\n        val isLastCharNotWordNotAlpha\
    \ = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha\n        val\
    \ isLastCharNotWordNotAlpha = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha\
    \ && !isLastCharNotWord\n        val isLastCharNotWordNotAlpha = !isLastCharNotWord\
    \ && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord && !isLastCharNotWordNotAlpha\n\
    \        val isLastCharNotWordNotAlpha = !isLastCharNotWord && !isLastCharAlpha\
    \ && !isLastCharNotAlpha && !isLastCharNotWord && !isLastCharNotWordNotAlpha &&\
    \ !isLastCharNotWordNotAlpha\n        val isLastCharNotWordNotAlpha = !isLastCharNotWord\
    \ && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord && !isLastCharNotWordNotAlpha\
    \ && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha\n        val isLastCharNotWordNotAlpha\
    \ = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\
    \ && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha\
    \ && !isLastCharNotWordNotAlpha\n        val isLastCharNotWordNotAlpha = !isLastCharNotWord\
    \ && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord && !isLastCharNotWordNotAlpha\
    \ && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha && !isLastCharNotWordNotAlpha\
    \ && !isLastCharNotWordNotAlpha\n        val isLastCharNotWordNotAlpha = !isLastCharNotWord\
    \ && !isLastCharAlpha && !isLastCharNotAlph\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps5cpj1i5.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordNotAlpha\e\
    [0m = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordNotAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps5cpj1i5.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordNotAlpha\e\
    [0m = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordNotAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps5cpj1i5.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordNotAlpha\e\
    [0m = !isLastCharNotWord && !isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\
    \ && !isLastCharNotWordNotAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordNotAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmps5cpj1i5.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36misLastC"
  stdout: ''
  timestamp: 1659978616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsLetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotWord = lastChar != ' ' && lastChar != '\\n'\n      \
    \  val lastCharIsNotSpace = lastChar != ' '\n        val lastCharIsNotNewline\
    \ = lastChar != '\\n'\n        val lastCharIsNotNewLineOrSpace = lastChar != '\\\
    n' && lastChar != ' '\n        val lastCharIsNotNewLineOrSpaceOrNewline = lastChar\
    \ != '\\n' && lastChar != ' ' && lastChar != '\\n'\n        val lastCharIsNotNewLineOrSpaceOrNewlineOrNewline\
    \ = lastChar != '\\n' && lastChar != ' ' && lastChar != '\\n' && lastChar != '\\\
    n'\n        val lastCharIsNotNewLineOrSpaceOrNewlineOrNewlineOrNewline = lastChar\
    \ != '\\n' && lastChar != ' ' && lastChar != '\\n' && lastChar != '\\n' && lastChar\
    \ != '\\n'\n        val lastCharIsNotNewLineOrSpaceOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastChar != '\\n' && lastChar != ' ' && lastChar != '\\n' && lastChar != '\\\
    n' && lastChar != '\\n' && lastChar != '\\n'\n        val lastCharIsNotNewLineOrSpaceOrNewlineOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastChar != '\\n' && lastChar != ' ' && lastChar != '\\n' && lastChar != '\\\
    n' && lastChar != '\\n' && lastChar != '\\n' && lastChar != '\\n'\n        val\
    \ lastCharIsNotNewLineOrSpaceOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastChar != '\\n' && lastChar != ' ' && lastChar != '\\n' && lastChar != '\\\
    n' && lastChar != '\\n' && lastChar != '\\n' && lastChar != '\\n' && lastChar\
    \ != '\\n'\n        val lastCharIsNotNewLineOrSpaceOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewlineOrNewline\
    \ = lastChar != '\\n' && lastChar != ' ' && lastChar != '\\n' && lastChar != '\\\
    n' && lastChar != '\\n' && lastChar != '\\n' && lastChar != '\\n' && lastChar\
    \ != '\\n'\n        val lastCharIsNotNewLineOrSpace\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa66ah4of.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpa66ah4of.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.toString.isLetter\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotWordAlpha = !isLastCharNotWord\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWordAlpha\n        val isLastCharNotWordAlpha\
    \ = !isLastCharNotWordAlpha\n        val isLastCharNotWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn3lc5sgc.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn3lc5sgc.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36misLastCharNotWordAlpha\e[0m = !isLastCharNotWordAlpha\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e[0m \e\
    [35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpn3lc5sgc.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn3lc5sgc.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn3lc5sgc.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWordAlpha\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotW"
  stdout: ''
  timestamp: 1659978616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.isLetterOrDigit\n        val isLastCharNotSpace = lastChar.isLetterOrDigitOrSpace\n\
    \        val isLastCharNotUpper = lastChar.isLetterOrDigitOrSpaceOrUpper\n   \
    \     val isLastCharNotLower = lastChar.isLetterOrDigitOrSpaceOrLower\n      \
    \  val isLastCharNotDigit = lastChar.isLetterOrDigitOrSpaceOrUpperOrLower\n  \
    \      val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\
    \        val isLastCharNotAlpha = last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx2bjxu95.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m\
    \ = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotAlpha is already defined as \e[33mvalue\e[0m\
    \ \e[35misLastCharNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx2bjxu95.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m\
    \ = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotAlpha is already defined as \e[33mvalue\e[0m\
    \ \e[35misLastCharNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx2bjxu95.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m\
    \ = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotAlpha is already defined as \e[33mvalue\e[0m\
    \ \e[35misLastCharNotAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx2bjxu95.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m\
    \ = lastChar.isLetterOrDigitOrSpaceOrUpperOrLowerOrDigit\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotAlpha is already defined as \e[33mvalue\e[0m\
    \ \e[35misLastCharNotAlpha\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659978624
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        if(lastChar.isLetter) {\n            val words = txt.split(\"\
    \ \").map(_.toUpperCase)\n            val lastWord = words.last\n            if(lastWord.contains(lastChar))\
    \ {\n                return false\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp02b92gzs.scala:29)\n\tat Problem.main(tmp02b92gzs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978624
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.split(\" \").lastOption match {\n            case Some(word)\
    \ => !word.contains(lastChar)\n            case None => false\n        }\n   \
    \     isAlpha && !isNotWord\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv8aqfnwt.scala:27)\n\tat Problem.main(tmpv8aqfnwt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978624
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.matches(\"[a-zA-Z]\") && !lastChar.matches(\"\\\
    \\w+\")\n        isLastCharALetter\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp9tfk2op8.scala:19)\n\tat Problem$.main(tmp9tfk2op8.scala:24)\n\
    \tat Problem.main(tmp9tfk2op8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"\\\\W\")\n        isLastCharAlpha\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu1bulatj.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu1bulatj.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value matches is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.last\n        val lastCharIsALetter\
    \ = lastChar.toString.isLetter\n        val lastCharIsNotALetter = lastChar.isLetter\n\
    \        val lastCharIsNotALetterInWord = words.last.contains(lastChar)\n    \
    \    val lastCharIsNotALetterInWordButNotLastCharInWord = words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar)\n        val lastCharIsNotALetterInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\n\
    \        val lastCharIsNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar)\n        val lastCharIsNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && !words.last.contains(lastChar)\n      \
    \  val lastCharIsNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\n\
    \        val lastCharIsNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar) && !words.last.contains(lastChar) && !words.last.contains(lastChar)\
    \ && !words.last.contains(lastChar)\n        val lastCharIsNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjr8bavk1.scala:29:180 --------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                            \
    \                                                        ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjr8bavk1.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsALetter\e[0m = lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value isLetter is not a member of String\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjr8bavk1.scala:30:5 ---------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n      \
    \  isALetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph2xxnz01.scala:25)\n\tat Problem.main(tmph2xxnz01.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        if(lastChar.isLetter) {\n            val words = txt.split(\"\
    \ \").filter(_.nonEmpty)\n            val lastWord = words.last\n            if(lastWord.last.isLetter)\
    \ {\n                return false\n            }\n        }\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8rn5as8a.scala:30)\n\tat Problem.main(tmp8rn5as8a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.last\n        val lastCharIsALetter\
    \ = lastChar.isLetter\n        val lastCharIsNotALetter = lastChar.isNotLetter\n\
    \        val lastCharIsNotWord = lastChar.isNotWord\n        val lastCharIsNotWordOrALetter\
    \ = lastCharIsNotWord || lastCharIsALetter\n        val lastCharIsNotWordOrNotALetter\
    \ = lastCharIsNotWord && !lastCharIsALetter\n        val lastCharIsNotWordOrNotALetterOrNotWord\
    \ = lastCharIsNotWord && !lastCharIsALetter && !lastCharIsNotWord\n        val\
    \ lastCharIsNotWordOrNotALetterOrNotWordOrALetter = lastCharIsNotWord && !lastCharIsALetter\
    \ && !lastCharIsNotWord && lastCharIsALetter\n        val lastCharIsNotWordOrNotALetterOrNotWordOrNotALetter\
    \ = lastCharIsNotWord && !lastCharIsALetter && !lastCharIsNotWord && !lastCharIsALetter\n\
    \        val lastCharIsNotWordOrNotALetterOrNotWordOrNotALetterOrNotWord = lastCharIsNotWord\
    \ && !lastCharIsALetter && !lastCharIsNotWord && !lastCharIsALetter && !lastCharIsNotWord\
    \ && !lastCharIsALetter\n        val lastCharIsNotWordOrNotALetterOrNotWordOrNotALetterOrNotWordOrALetter\
    \ = lastCharIsNotWord && !lastCharIsALetter && !lastCharIsNotWord && !lastCharIsALetter\
    \ && !lastCharIsNotWord && !lastCharIsALetter && !lastCharIsNotWord\n        val\
    \ lastCharIsNotWordOrNotALetterOrNotWordOrNotALetterOrNotWordOrNotALetter = lastCharIsNotWord\
    \ && !lastCharIsALetter && !lastCharIsNotWord && !lastCharIsALetter && !lastCharIsNotWord\
    \ && !lastCharIsALetter && !lastCharIsNotWord && !lastCharIsALetter\n        val\
    \ lastCharIsNotWordOrNotALetterOrNotWordOrNotALetterOrNotWordOrNotALetterOrNotWord\
    \ = lastCharIsNotWord && !lastCharIsALetter && !last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe3s81q47.scala:21:44 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpe3s81q47.scala:22:41 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m = lastChar.isNotWord\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isNotWord is not a member\
    \ of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe3s81q47.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotWord\
    \ = lastChar.matches(\"\\\\W\")\n        val isLastCharNotAlpha = !isLastCharNotWord\n\
    \        val isLastCharNotWordAlpha = !isLastCharNotWord && !isLastCharAlpha\n\
    \        isLastCharNotWordAlpha && isLastCharAlpha\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4ccu6tom.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                  ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar.matches(\"[a-zA-Z]+\")\n        val\
    \ isNotWord = txt.split(\" \").lastOption match {\n            case None => false\n\
    \            case Some(word) => !word.contains(lastChar)\n        }\n        isAlpha\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_451tcq.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value matches is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar.toString.isLetter\n        val isNotWord\
    \ = txt.splitAt(txt.length-1)\n            .filter(_ != \" \")\n            .exists(_\
    \ == lastChar)\n        !isLetter && !isNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeku5r64s.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       value isLetter is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeku5r64s.scala:21:13 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.splitAt(txt.length-\e\
    [31m1\e[0m)\n\e[31m21 |\e[0m            .filter(_ != \e[31m\" \"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       value filter is not a member of (String, String)\n2 errors found\n"
  stdout: ''
  timestamp: 1659978625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = (lastChar >= 'a' && lastChar <= 'z') ||\
    \ (lastChar >= 'A' && lastChar <= 'Z')\n        !isALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkg3jzfwg.scala:24)\n\tat Problem.main(tmpkg3jzfwg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == \"a\" || lastChar.toString.toLowerCase\
    \ == \"e\" || lastChar.toString.toLowerCase == \"i\" || lastChar.toString.toLowerCase\
    \ == \"o\" || lastChar.toString.toLowerCase == \"u\")\n        val isLastCharNotALetter\
    \ = !isLastCharALetter\n        val isLastCharNotALetterWord = words.last.contains(lastChar)\n\
    \        val isLastCharNotALetterWordOrNotLastCharNotALetterWord = isLastCharNotALetter\
    \ || isLastCharNotALetterWord\n        val isLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWord\
    \ = isLastCharNotALetterWord || isLastCharNotALetterWordOrNotLastCharNotALetterWord\n\
    \        val isLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWord\
    \ = isLastCharNotALetterWordOrNotLastCharNotALetterWord || isLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWord\n\
    \        val isLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWord\
    \ = isLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWord\
    \ || isLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWord\n\
    \        val isLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWord\
    \ = isLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWord\
    \ || isLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86ophd6a.scala:27:256 -----------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWord\e\
    [0m = isLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWord\
    \ || isLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOr\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: isLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOrNotLastCharNotALetterWordOr\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp86ophd6a.scala:28:5\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterAndNotWord = lastChar.isNotLetter\
    \ && !lastChar.isWord\n        val lastCharIsWord = lastChar.isWord\n        val\
    \ lastCharIsNotWord = lastChar.isNotWord\n        val lastCharIsNotWordAndNotLetter\
    \ = lastChar.isNotWord && !lastChar.isLetter\n        val lastCharIsNotWordAndNotLetterAndNotWord\
    \ = lastChar.isNotWord && !lastChar.isLetter && !lastChar.isWord\n        val\
    \ lastCharIsNotWordAndNotLetterAndNotWord = lastChar.isNotWord && !lastChar.isLetter\
    \ && !lastChar.isWord && !lastChar.isLetter\n        val lastCharIsNotWordAndNotLetterAndNotWord\
    \ = lastChar.isNotWord && !lastChar.isLetter && !lastChar.isWord && !lastChar.isLetter\
    \ && !lastChar.isWord\n        val lastCharIsNotWordAndNotLetterAndNotWord = lastChar.isNotWord\
    \ && !lastChar.isLetter && !lastChar.isWord && !lastChar.isLetter && !lastChar.isWord\
    \ && !lastChar.isLetter\n        val lastCharIsNotWordAndNotLetterAndNotWord =\
    \ lastChar.isNotWord && !lastChar.isLetter && !lastChar.isWord && !lastChar.isLetter\
    \ && !lastChar.isWord && !lastChar.isLetter && !lastChar.isWord\n        val lastCharIsNotWordAndNotLetterAndNotWord\
    \ = lastChar.isNotWord && !lastChar.isLetter && !lastChar.isWord && !lastChar.isLetter\
    \ && !lastChar.isWord && !lastChar.isLetter && !lastChar.isWord && !lastChar.isLetter\n\
    \        val lastCharIsNotWordAndNotLetterAndNotWord = lastChar.isNotWord && !lastChar.isLetter\
    \ && !lastChar.isWord && !lastChar.isLetter && !lastChar.isWord && !lastChar.isLetter\
    \ && !lastChar.isWord && !lastChar.isLetter && !lastChar.isWord\n        val lastCharIsNotWordAndNotLetterAndNotWord\
    \ = lastChar.isNotWord && !lastChar.isLetter && !lastChar.isWord && !lastChar.isLetter\
    \ && !lastChar.isWord && !lastChar.isLetter && !\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplwlli529.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordAndNotLetterAndNotWord\e\
    [0m = lastChar.isNotWord && !lastChar.isLetter && !lastChar.isWord && !lastChar.isLetter\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotWordAndNotLetterAndNotWord is already defined\
    \ as \e[33mvalue\e[0m \e[35mlastCharIsNotWordAndNotLetterAndNotWord\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmplwlli529.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordAndNotLetterAndNotWord\e\
    [0m = lastChar.isNotWord && !lastChar.isLetter && !lastChar.isWord && !lastChar.isLetter\
    \ && !lastChar.isWord\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotWordAndNotLetterAndNotWord is already defined\
    \ as \e[33mvalue\e[0m \e[35mlastCharIsNotWordAndNotLetterAndNotWord\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmplwlli529.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWordAndNotLetterAndNotWord\e\
    [0m = lastChar.isNotWord && !lastChar.isLetter && !lastChar.isWord && !lastChar.isLetter\
    \ && !lastChar.isWord && !lastChar.isLetter\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotWordAndNotLetterAndNotWord is already defined\
    \ as \e[33mvalue\e[0m \e[35mlastCharIsNotWordAndNotLetterAndNotWo"
  stdout: ''
  timestamp: 1659978627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val lastCharIsNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val lastCharIsNotALetterOrSpaceOrWordOrDigit\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercase = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isDigit || lastChar.isUppercase\n\
    \        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercaseOrUpper = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isDigit || lastChar.isUppercase\
    \ || lastChar.isUpper\n        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercaseOrUpperOrUpper\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase || lastChar.isUpper || lastChar.isUpper\n        val\
    \ lastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercaseOrUpperOrUpperOrUpper = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isDigit || lastChar.isUppercase\
    \ || lastChar.isUpper || lastChar.isUpper || lastChar.isUpper\n        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercaseOrUpperOrUpperOrUpperOrUpper\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase || lastChar.isUpper || lastChar.isUpper || lastChar.isUpper\
    \ || lastChar.isUpper\n        val lastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercaseOrUpperOrUpperOrUpperOrUpperOrUpper\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase || \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprm6zaiyd.scala:29:207 --------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWordOrDigitOrUppercaseOrUpperOrUpperOrUpperOrUpperOrUpper\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isDigit\
    \ || lastChar.isUppercase || \n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \                                                                            \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmprm6zaiyd.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmprm6zaiyd.scala:21:51 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpace\e[0m = lastChar.isNotLetter\
    \ || lastChar.isSpace\n\e[31m\e[31m   |\e[0m                                 \
    \         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \      value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmprm6zaiyd.scala:22:57 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrSpaceOrWord\e[0m =\
    \ lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord\n\e[31m\e[31m  \
    \ |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprm6zaiyd.scala:23:64\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mlastChar"
  stdout: ''
  timestamp: 1659978627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ lastCharIsALetter = lastChar.forall(_.isLetter)\n        val lastCharIsNotALetter\
    \ = lastChar.forall(!_.isLetter)\n        val lastCharIsNotALetterOrNotWord =\
    \ lastCharIsALetter || lastCharIsNotALetter\n        val lastCharIsNotALetterOrNotWordOrEmpty\
    \ = lastCharIsALetter || lastCharIsNotALetter || lastChar.isEmpty\n        lastCharIsALetter\
    \ && lastCharIsNotALetter && lastCharIsNotALetterOrNotWord && lastCharIsNotALetterOrNotWordOrEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpfaoy407m.scala:19)\n\tat Problem$.main(tmpfaoy407m.scala:27)\n\
    \tat Problem.main(tmpfaoy407m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ lastCharIsALetter = lastChar.forall(_.isLetter)\n        val lastCharIsNotALetter\
    \ = lastChar.forall(!_.isLetter)\n        val lastCharIsNotALetterOrWord = lastChar.forall(!_.isLetter\
    \ && !_.isSpace)\n        val lastCharIsNotALetterOrWordOrSpace = lastChar.forall(!_.isLetter\
    \ && !_.isSpace && !_.isWhitespace)\n        val lastCharIsNotALetterOrWordOrSpaceOrNewLine\
    \ = lastChar.forall(!_.isLetter && !_.isSpace && !_.isWhitespace && !_.isNewLine)\n\
    \        val lastCharIsNotALetterOrWordOrSpaceOrNewLineOrNewLine = lastChar.forall(!_.isLetter\
    \ && !_.isSpace && !_.isWhitespace && !_.isNewLine && !_.isNewLine)\n        val\
    \ lastCharIsNotALetterOrWordOrSpaceOrNewLineOrNewLineOrNewLine = lastChar.forall(!_.isLetter\
    \ && !_.isSpace && !_.isWhitespace && !_.isNewLine && !_.isNewLine && !_.isNewLine)\n\
    \        val lastCharIsNotALetterOrWordOrSpaceOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.forall(!_.isLetter && !_.isSpace && !_.isWhitespace && !_.isNewLine\
    \ && !_.isNewLine && !_.isNewLine && !_.isNewLine)\n        val lastCharIsNotALetterOrWordOrSpaceOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.forall(!_.isLetter && !_.isSpace && !_.isWhitespace && !_.isNewLine\
    \ && !_.isNewLine && !_.isNewLine && !_.isNewLine && !_.isNewLine)\n        val\
    \ lastCharIsNotALetterOrWordOrSpaceOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastChar.forall(!_.isLetter && !_.isSpace && !_.isWhitespace && !_.isNewLine\
    \ && !_.isNewLine && !_.isNewLine && !_.isNewLine && !_.isNewLine && !_.isNewLine)\n\
    \        val lastCharIsNotALetterOr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzjb_1dqq.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzjb_1dqq.scala:22:57\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsNotALetterOrWord\e[0m = lastChar.forall(!_.isLetter && !_.isSpace)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \     Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmpzjb_1dqq.scala:23:64 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrWordOrSpace\e[0m =\
    \ lastChar.forall(!_.isLetter && !_.isSpace && !_.isWhitespace)\n\e[31m\e[31m\
    \   |\e[0m                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzjb_1dqq.scala:24:73\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsNotALetterOrWordOrSpaceOrNewLine\e[0m = lastChar.forall(!_.isLetter\
    \ && !_.isSpace && !_.isWhitespace && !_.isNewLine)\n\e[31m\e[31m   |\e[0m   \
    \                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpzjb_1dqq.scala:25:82\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlastCharIsNotALetterOrWordOrSpaceOrNewLineOrNewLine\e[0m = lastChar.forall(!_.isLetter\
    \ && !_.isSpace && !_.isWhitespace && !_.isNewLine && !_.isNewLine)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659978627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.matches(\"[a-zA-Z]+\")\n        val isNotLastCharALetter\
    \ = lastChar.matches(\"[a-zA-Z]+$\")\n        val isLastCharNotALetter = lastChar.matches(\"\
    [a-zA-Z]+[^a-zA-Z]+\")\n        val isLastCharALetterButNotLastCharALetter = lastChar.matches(\"\
    [a-zA-Z]+[^a-zA-Z]+$\")\n        val isLastCharALetterButNotLastCharNotALetter\
    \ = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\")\n        val isLastCharALetterButNotLastCharALetterButNotLastCharNotALetter\
    \ = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\")\n        val\
    \ isLastCharALetterButNotLastCharALetterButNotLastCharNotALetterButNotLastCharNotALetter\
    \ = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\")\n\
    \        val isLastCharALetterButNotLastCharALetterButNotLastCharNotALetterButNotLastCharALetterButNotLastCharNotALetter\
    \ = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\"\
    )\n        val isLastCharALetterButNotLastCharALetterButNotLastCharNotALetterButNotLastCharALetterButNotLastCharNotALetterButNotLastCharNotALetter\
    \ = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\"\
    )\n        val isLastCharALetterButNotLastCharALetterButNotLastCharNotALetterButNotLastCharALetterButNotLastCharNotALetterButNotLastCharALetterButNotLastCharNotALetterButNotLastCharNotALetter\
    \ = lastChar.matches(\"[a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+[^a-zA-Z]+\"\
    )\n        val isLastCharALetterButNotLastCharALetterButNotLastCharNotALetterButNotLastCharALetterButNotLastCharNotALetterButNotLastCharALetterButNotLastCharNotALetterButNotLastCharNotAL\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_a8dn15j.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_a8dn15j.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = txt.last\n        val isLastCharALetter\
    \ = lastChar.toString.toLowerCase == lastChar\n        val isLastCharNotALetter\
    \ = words.lastOption.map(_.toString.toLowerCase == lastChar).getOrElse(false)\n\
    \        isLastCharALetter && !isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptq3nqmsj.scala:20:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.toLowerCase == lastChar\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmptq3nqmsj.scala:21:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m\
    \ = words.lastOption.map(_.toString.toLowerCase == lastChar).getOrElse(\e[31mfalse\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1659978627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.toLowerCase match {\n            case\
    \ c if c.isLetter => true\n            case _ => false\n        }\n        !isLastCharALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplr0x65oh.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m c \e[33mif\e[0m c.isLetter\
    \ => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value isLetter is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val words = txt.split(\" \").map(_.toLowerCase)\n      \
    \  val isLastCharALetter = lastChar != null && !words.contains(lastChar)\n   \
    \     isLastCharALetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpks0t3_td.scala:20:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar != \e[31mnull\e[0m && !words.contains(lastChar)\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \      Values of types Char and Null cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpks0t3_td.scala:20:68 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar != \e[31mnull\e[0m && !words.contains(lastChar)\n\e[31m\e[31m   |\e\
    [0m                                                                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (lastChar\
    \ : Char)\n\e[31m   |\e[0m                                             Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        !isLastCharAlpha && !isLastCharNotWordAlpha\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmp7wgz22kw.scala:19)\n\tat Problem$.main(tmp7wgz22kw.scala:26)\n\
    \tat Problem.main(tmp7wgz22kw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isAlpha = lastChar >= 'a' && lastChar <= 'z'\n     \
    \   val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n        isAlpha\
    \ && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu3ypbos7.scala:25)\n\tat Problem.main(tmpu3ypbos7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978612
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val isLastCharALetter = lastChar.toString.isLetter\n        val isLastCharNotALetter\
    \ = lastChar.toString.isNotLetter\n        val isLastCharNotALetterInWord = words.contains(lastChar)\n\
    \        val isLastCharNotALetterInWordButNotLastCharInWord = words.contains(lastChar)\
    \ && !words.contains(lastChar)\n        val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.contains(lastChar) && !words.contains(lastChar) && !words.contains(lastChar)\n\
    \        val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.contains(lastChar) && !words.contains(lastChar) && !words.contains(lastChar)\
    \ && !words.contains(lastChar)\n        val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.contains(lastChar) && !words.contains(lastChar) && !words.contains(lastChar)\
    \ && !words.contains(lastChar) && !words.contains(lastChar)\n        val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.contains(lastChar) && !words.contains(lastChar) && !words.contains(lastChar)\
    \ && !words.contains(lastChar) && !words.contains(lastChar) && !words.contains(lastChar)\n\
    \        val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.contains(lastChar) && !words.contains(lastChar) && !words.contains(lastChar)\
    \ && !words.contains(lastChar) && !words.contains(lastChar) && !words.contains(lastChar)\
    \ && !words.contains(lastChar)\n        val isLastCharNotALetterInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWordButNotLastCharInWord\
    \ = words.contains(lastChar) && !words.contains(lastChar) && !words.contains(lastChar)\
    \ && !words.contains(lastChar) && !words.contains(lastChar) && !words.contains(lastChar)\
    \ && !words.contains(lastChar) && !words.contains(lastChar)\n        val isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsfr_318j.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsfr_318j.scala:20:50\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharALetter\e[0m = lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value isLetter is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpsfr_318j.scala:21:53 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m\
    \ = lastChar.toString.isNotLetter\n\e[31m\e[31m   |\e[0m                     \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                  value isNotLetter is not a member of String\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsfr_318j.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659978635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar.toString.isLetter\n        val\
    \ isNotWord = txt.split(\" \").map(_.trim).filter(_.nonEmpty).map(_.last).contains(lastChar)\n\
    \        isALetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4r84mnk5.scala:19:42 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misALetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value isLetter is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978633
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.matches(\"[a-zA-Z]\") && !lastChar.matches(\"\\\
    \\W\")\n        return isLastCharALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpofwl1vwr.scala:19)\n\tat Problem$.main(tmpofwl1vwr.scala:24)\n\
    \tat Problem.main(tmpofwl1vwr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978634
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !isLastCharALetter\n        isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwtlxgen6.scala:25)\n\tat Problem.main(tmpwtlxgen6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        if(lastChar.isLetter) {\n            val words = txt.split(\"\
    \ \").filter(_.nonEmpty)\n            val lastWord = words(words.length-1)\n \
    \           val lastWordChar = lastWord.last\n            if(lastWordChar.isLetter)\
    \ {\n                return false\n            } else {\n                return\
    \ true\n            }\n        } else {\n            return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppjjmsvy9.scala:34)\n\tat Problem.main(tmppjjmsvy9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        if(lastChar.isLetter) {\n            val words = txt.split(\"\
    \ \").filter(_.nonEmpty)\n            val lastWord = words(words.length-1)\n \
    \           val lastWordChar = lastWord.last\n            if(lastWordChar.isLetter)\
    \ {\n                return false\n            } else {\n                return\
    \ true\n            }\n        } else {\n            return false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppjjmsvy9.scala:34)\n\tat Problem.main(tmppjjmsvy9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n \
    \       val isLastCharNotWord = lastChar.matches(\"\\\\W\")\n        isLastCharAlpha\
    \ && !isLastCharNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu1bulatj.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu1bulatj.scala:20:41\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value matches is not a member of Char\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978623
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == lastChar)\n        val\
    \ isLastCharNotALetter = (lastChar.toString.toLowerCase != lastChar)\n       \
    \ val isLastCharNotALetterWord = words.lastOption.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterWordOrEmpty = words.lastOption.exists(word =>\
    \ word.isEmpty || word.contains(lastChar))\n        val isLastCharNotALetterWordOrEmptyOrLastCharNotALetterWord\
    \ = words.lastOption.exists(word => word.isEmpty || word.contains(lastChar) ||\
    \ word.contains(lastChar))\n        val isLastCharNotALetterWordOrEmptyOrLastCharNotALetterWordOrLastCharNotALetterWord\
    \ = words.lastOption.exists(word => word.isEmpty || word.contains(lastChar) ||\
    \ word.contains(lastChar) || word.contains(lastChar))\n        val isLastCharNotALetterWordOrEmptyOrLastCharNotALetterWordOrLastCharNotALetterWordOrLastCharNotALetterWord\
    \ = words.lastOption.exists(word => word.isEmpty || word.contains(lastChar) ||\
    \ word.contains(lastChar) || word.contains(lastChar) || word.contains(lastChar)\
    \ || word.contains(lastChar))\n        val isLastCharNotALetterWordOrEmptyOrLastCharNotALetterWordOrLastCharNotALetterWordOrLastCharNotALetterWordOrLastCharNotALetterWord\
    \ = words.lastOption.exists(word => word.isEmpty || word.contains(lastChar) ||\
    \ word.contains(lastChar) || word.contains(lastChar) || word.contains(lastChar)\
    \ || word.contains(lastChar) || word.contains(lastChar) || word.contains(lastChar))\n\
    \        val isLastCharNotALetterWordOrEmptyOrLastCharNotALetterWordOrLastCharNotALetterWordOrLastCharNotALetterWordOrLastCharNotALetterWordOrLastCharNotALetterWord\
    \ = words.lastOption.exists(word => word.isEmpty || word.contains(lastChar) ||\
    \ word.contains(lastChar) || word.contains(lastChar) || word.contains(lastChar)\
    \ || word.contains(lastChar) || word.contains(lastChar) || word.contains(lastChar)\
    \ || word.contains(lastChar))\n        val isLastCharNotALetterWordOrEmptyOrLastCharNotALetterWordOrLastCharNotALetterWordOrLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwq0biebx.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwq0biebx.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.isLetter\n        val isLastCharNotALetter\
    \ = lastChar.isNotLetter\n        val isLastCharNotALetterOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace\n        val isLastCharNotALetterOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrEmpty\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEmpty\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrEmptyOrSpace = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isEmpty || lastChar.isSpace\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrEmptyOrSpaceOrWord = lastChar.isNotLetter\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isEmpty || lastChar.isSpace\
    \ || lastChar.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrEmptyOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEmpty\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace\n        val isLastCharNotALetterOrSpaceOrWordOrEmptyOrSpaceOrWordOrSpaceOrWord\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEmpty\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\n\
    \        val isLastCharNotALetterOrSpaceOrWordOrEmptyOrSpaceOrWordOrSpaceOrWord\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEmpty\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isWord\n        val isLastCharNotALetterOrSpaceOrWordOrEmptyOrSpaceOrWordOrSpaceOrWordOrSpace\
    \ = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEmpty\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isSpace \n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph8418knc.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterOrSpaceOrWordOrEmptyOrSpaceOrWordOrSpaceOrWord\e\
    [0m = lastChar.isNotLetter || lastChar.isSpace || lastChar.isWord || lastChar.isEmpty\
    \ || lastChar.isSpace || lastChar.isWord || lastChar.isSpace || lastChar.isWord\
    \ || lastChar.isWord\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterOrSpaceOrWordOrEmptyOrSpaceOrWordOrSpaceOrWord\
    \ is already defined as \e[33mvalue\e[0m \e[35misLastCharNotALetterOrSpaceOrWordOrEmptyOrSpaceOrWordOrSpaceOrWord\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmph8418knc.scala:20:44 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m = lastChar.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph8418knc.scala:21:51\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpace\e[0m = lastChar.isNotLetter || lastChar.isSpace\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isNotLetter is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph8418knc.scala:22:57\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotALetterOrSpaceOrWord\e[0m = lastChar.isNotLetter || lastChar.isSpace\
    \ || lastChar.isWord\n\e[31m\e[31m   |\e[0m                                  \
    \              ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659978636
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !isLastCharALetter\n        isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwtlxgen6.scala:25)\n\tat Problem.main(tmpwtlxgen6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastWord = words(words.length-1)\n        val\
    \ lastChar = lastWord.last\n        val isLastCharALetter = lastChar.isLetter\n\
    \        val isLastCharNotALetter = lastChar.matches(\"\\\\W\")\n        isLastCharALetter\
    \ && !isLastCharNotALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxja_44jv.scala:22:44 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m\
    \ = lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                       ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                    value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        for(i <- 0 until txt.length){\n\
    \            if(txt(i) == lastChar){\n                isLastCharALetter = false\n\
    \            }\n        }\n        return isLastCharALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6lgrh15g.scala:29)\n\tat Problem.main(tmp6lgrh15g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = lastChar.toString.isLetter\n        val isNotLastCharALetter\
    \ = lastChar.toString.isNotLetter\n        val isNotLastCharALetterOrWord = lastChar.toString.isNotLetter\
    \ || words(txt.length-1).toString.isLetter\n        val isNotLastCharALetterOrWordOrEmpty\
    \ = lastChar.toString.isNotLetter || words(txt.length-1).toString.isLetter ||\
    \ txt.length==0\n        val isLastCharALetterOrWord = lastChar.toString.isLetter\
    \ || words(txt.length-1).toString.isLetter\n        val isLastCharALetterOrWordOrEmpty\
    \ = lastChar.toString.isLetter || words(txt.length-1).toString.isLetter || txt.length==0\n\
    \        val isLastCharALetterOrWordOrEmptyOrEmpty = lastChar.toString.isLetter\
    \ || words(txt.length-1).toString.isLetter || txt.length==0 || txt.length==0\n\
    \        val isLastCharALetterOrWordOrEmptyOrEmpty = lastChar.toString.isLetter\
    \ || words(txt.length-1).toString.isLetter || txt.length==0 || txt.length==0\n\
    \        val isLastCharALetterOrWordOrEmptyOrEmpty = lastChar.toString.isLetter\
    \ || words(txt.length-1).toString.isLetter || txt.length==0 || txt.length==0\n\
    \        val isLastCharALetterOrWordOrEmptyOrEmpty = lastChar.toString.isLetter\
    \ || words(txt.length-1).toString.isLetter || txt.length==0 || txt.length==0\n\
    \        val isLastCharALetterOrWordOrEmptyOrEmpty = lastChar.toString.isLetter\
    \ || words(txt.length-1).toString.isLetter || txt.length==0 || txt.length==0\n\
    \        val isLastCharALetterOrWordOrEmptyOrEmpty = lastChar.toString.isLetter\
    \ || words(txt.length-1).toString.isLetter || txt.length==0 || txt.length==0\n\
    \        val isLastCharALetterOrWordOrEmptyOrEmpty = lastChar.toString.isLetter\
    \ || words(txt.length-1).toString.isLetter || txt.length==0 || txt.length==0\n\
    \        val isLastCharALetterOrWordOrEmptyOrEmpty = lastChar.toString.isLetter\
    \ || words(txt.length-1).toString.isLetter || txt.length==0 || \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqdsd2vn1.scala:33:139 --------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetterOrWordOrEmptyOrEmpty\e\
    [0m = lastChar.toString.isLetter || words(txt.length-\e[31m1\e[0m).toString.isLetter\
    \ || txt.length==\e[31m0\e[0m || \n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                            expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqdsd2vn1.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36misLastCharALetterOrWordOrEmptyOrEmpty\e[0m = lastChar.toString.isLetter\
    \ || words(txt.length-\e[31m1\e[0m).toString.isLetter || txt.length==\e[31m0\e\
    [0m || txt.length==\e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharALetterOrWordOrEmptyOrEmpty is already defined as\
    \ \e[33mvalue\e[0m \e[35misLastCharALetterOrWordOrEmptyOrEmpty\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqdsd2vn1.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36misLastCharALetterOrWordOrEmptyOrEmpty\e[0m = lastChar.toString.isLetter\
    \ || words(txt.length-\e[31m1\e[0m).toString.isLetter || txt.length==\e[31m0\e\
    [0m || txt.length==\e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharALetterOrWordOrEmptyOrEmpty is already defined as\
    \ \e[33mvalue\e[0m \e[35misLastCharALetterOrWordOrEmptyOrEmpty\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded met"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val words = txt.split(\" \").filter(_.nonEmpty)\n      \
    \  val isLastCharALetter = lastChar.toString.isLetter\n        val isLastCharNotALetter\
    \ = words.last.last.isLetter\n        isLastCharALetter && !isLastCharNotALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpidbjf4tn.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978635
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !isLastCharALetter\n        isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwtlxgen6.scala:25)\n\tat Problem.main(tmpwtlxgen6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\") &&\
    \ !lastChar.matches(\"\\\\W\")\n        val isLastCharNotAlpha = !lastChar.matches(\"\
    [a-zA-Z]\") && !lastChar.matches(\"\\\\W\")\n        isLastCharAlpha && isLastCharNotAlpha\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp95cpc71u.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]\"\e[0m) && !lastChar.matches(\e[31m\"\\\\W\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value matches is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp95cpc71u.scala:20:43 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotAlpha\e[0m\
    \ = !lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m) && !lastChar.matches(\e[31m\"\\\
    \\W\"\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value matches is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotALetter = lastChar != 'a' && lastChar != 'z'\n        isALetter\
    \ && !isNotALetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfnvaxu5n.scala:25)\n\tat Problem.main(tmpfnvaxu5n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == \"a\" || lastChar.toString.toLowerCase\
    \ == \"e\" || lastChar.toString.toLowerCase == \"i\" || lastChar.toString.toLowerCase\
    \ == \"o\" || lastChar.toString.toLowerCase == \"u\")\n        val isLastCharNotALetter\
    \ = (lastChar.toString.toLowerCase != \"a\" && lastChar.toString.toLowerCase !=\
    \ \"e\" && lastChar.toString.toLowerCase != \"i\" && lastChar.toString.toLowerCase\
    \ != \"o\" && lastChar.toString.toLowerCase != \"u\")\n        val isLastCharNotALetterOrLastCharIsALetter\
    \ = (isLastCharNotALetter || isLastCharALetter)\n        val isLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetter\
    \ = (isLastCharNotALetter || isLastCharALetter || isLastCharALetter)\n       \
    \ val isLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetter\
    \ = (isLastCharNotALetter || isLastCharALetter || isLastCharALetter || isLastCharALetter\
    \ || isLastCharALetter || isLastCharALetter)\n        val isLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetter\
    \ = (isLastCharNotALetter || isLastCharALetter || isLastCharALetter || isLastCharALetter\
    \ || isLastCharALetter || isLastCharALetter || isLastCharALetter || isLastCharALetter)\n\
    \        val isLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetter\
    \ = (isLastCharNotALetter || isLastCharALetter || isLastCharALetter || isLastCharALetter\
    \ || isLastCharALetter || isLastCharALetter || isLastCharALetter || isLastCharALetter\
    \ || isLastCharALetter || isLastCharALetter)\n        val isLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw3xk22yg.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpw3xk22yg.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar.isLetter\n        val lastCharIsNotALetter\
    \ = lastChar.isNotLetter\n        val lastCharIsNotALetterButNotWord = lastChar.isNotLetter\
    \ && !lastChar.isLetterOrDigit\n        val lastCharIsWord = lastChar.isLetterOrDigit\n\
    \        val lastCharIsNotWord = lastChar.isNotLetterOrDigit\n        val lastCharIsNotWordButNotALetter\
    \ = lastChar.isNotLetterOrDigit && !lastChar.isLetter\n        val lastCharIsALetterButNotWord\
    \ = lastChar.isLetter && !lastChar.isLetterOrDigit\n        val lastCharIsNotALetterButNotWord\
    \ = lastChar.isNotLetter && !lastChar.isLetterOrDigit\n        val lastCharIsALetterAndNotWord\
    \ = lastChar.isLetter && !lastChar.isLetterOrDigit\n        val lastCharIsNotALetterAndNotWord\
    \ = lastChar.isNotLetter && !lastChar.isLetterOrDigit\n        val lastCharIsALetterAndNotWordButNotWord\
    \ = lastChar.isLetter && !lastChar.isLetterOrDigit && !lastChar.isLetterOrDigit\n\
    \        val lastCharIsNotALetterAndNotWordButNotWord = lastChar.isNotLetter &&\
    \ !lastChar.isLetterOrDigit && !lastChar.isLetterOrDigit\n        val lastCharIsALetterAndNotWordButNotWordButNotALetter\
    \ = lastChar.isLetter && !lastChar.isLetterOrDigit && !lastChar.isLetterOrDigit\
    \ && !lastChar.isLetter\n        val lastCharIsNotALetterAndNotWordButNotWordButNotALetter\
    \ = lastChar.isNotLetter && !lastChar.isLetterOrDigit && !lastChar.isLetterOrDigit\
    \ && !lastChar.isLetter\n        val lastCharIsALetterAndNotWordButNotWordButNotALetterButNotWord\
    \ = lastChar.isLetter && !lastChar.isLetterOrDigit && !lastChar.isLetterOrDigit\
    \ && !lastChar.isLetterOrDigit && !lastChar.isLetter\n        val lastCharIsNotALetterAndNotWordButNotWordButNotALetterButNotWord\
    \ = lastChar.isNotLetter && !lastChar.isLetterOrDigit && !lastChar.isLetterOrDigit\
    \ && !lastChar.isLetterOrDigit && !lastChar.isLetter\n        val \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpi2u7a2n8.scala:35:11 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpi2u7a2n8.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterButNotWord\e\
    [0m = lastChar.isNotLetter && !lastChar.isLetterOrDigit\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotALetterButNotWord is already defined as \e[33mvalue\e\
    [0m \e[35mlastCharIsNotALetterButNotWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi2u7a2n8.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetter\e[0m\
    \ = lastChar.isNotLetter\n\e[31m\e[31m   |\e[0m                              \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \  value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpi2u7a2n8.scala:21:54 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterButNotWord\e[0m = lastChar.isNotLetter\
    \ && !lastChar.isLetterOrDigit\n\e[31m\e[31m   |\e[0m                        \
    \                     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                  value isNotLetter is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpi2u7a2n8.scala:23:41 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotWord\e[0m = lastChar.isNotLetterOrDigit\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value isNotLetterOrDigit is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi2u7a2n8.scala:24"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val lastCharIsALetter = lastChar.forall(_.isLetter)\n        val lastCharIsNotALetter\
    \ = lastChar.forall(!_.isLetter)\n        val lastCharIsNotALetterOrWord = lastCharIsALetter\
    \ || lastCharIsNotALetter\n        val lastCharIsNotALetterOrWordOrEmpty = lastCharIsALetter\
    \ || lastCharIsNotALetter || lastChar.isEmpty\n        val lastCharIsNotALetterOrWordOrEmptyOrSpace\
    \ = lastCharIsALetter || lastCharIsNotALetter || lastChar.isEmpty || lastChar.forall(_.isSpace)\n\
    \        val lastCharIsNotALetterOrWordOrEmptyOrSpaceOrNewLine = lastCharIsALetter\
    \ || lastCharIsNotALetter || lastChar.isEmpty || lastChar.forall(_.isSpace) ||\
    \ lastChar.forall(_.isNewLine)\n        val lastCharIsNotALetterOrWordOrEmptyOrSpaceOrNewLineOrNewLine\
    \ = lastCharIsALetter || lastCharIsNotALetter || lastChar.isEmpty || lastChar.forall(_.isSpace)\
    \ || lastChar.forall(_.isNewLine) || lastChar.forall(_.isNewLine)\n        val\
    \ lastCharIsNotALetterOrWordOrEmptyOrSpaceOrNewLineOrNewLineOrNewLine = lastCharIsALetter\
    \ || lastCharIsNotALetter || lastChar.isEmpty || lastChar.forall(_.isSpace) ||\
    \ lastChar.forall(_.isNewLine) || lastChar.forall(_.isNewLine) || lastChar.forall(_.isNewLine)\n\
    \        val lastCharIsNotALetterOrWordOrEmptyOrSpaceOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastCharIsALetter || lastCharIsNotALetter || lastChar.isEmpty || lastChar.forall(_.isSpace)\
    \ || lastChar.forall(_.isNewLine) || lastChar.forall(_.isNewLine) || lastChar.forall(_.isNewLine)\
    \ || lastChar.forall(_.isNewLine)\n        val lastCharIsNotALetterOrWordOrEmptyOrSpaceOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = lastCharIs\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcdq7ztuo.scala:24:138 -----------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrWordOrEmptyOrSpace\e\
    [0m = lastCharIsALetter || lastCharIsNotALetter || lastChar.isEmpty || lastChar.forall(_.isSpace)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   value isSpace\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcdq7ztuo.scala:25:147\
    \ -----------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterOrWordOrEmptyOrSpaceOrNewLine\e[0m = lastCharIsALetter\
    \ || lastCharIsNotALetter || lastChar.isEmpty || lastChar.forall(_.isSpace) ||\
    \ lastChar.forall(_.isNewLine)\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   value isSpace is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpcdq7ztuo.scala:25:177 -----------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotALetterOrWordOrEmptyOrSpaceOrNewLine\e\
    [0m = lastCharIsALetter || lastCharIsNotALetter || lastChar.isEmpty || lastChar.forall(_.isSpace)\
    \ || lastChar.forall(_.isNewLine)\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                                                                            \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value isNewLine\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcdq7ztuo.scala:26:156\
    \ -----------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mlastCharIsNotALetterOrWordOrEmptyOrSpaceOrNewLineOrNewLine\e[0m = lastCharIsALetter\
    \ || lastCharIsNotALetter || lastChar.isEmpty || lastChar.forall(_.isSpace) ||\
    \ lastChar.forall(_.isNewLi"
  stdout: ''
  timestamp: 1659978640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharAlpha = true\n        var isLastCharAlpha\
    \ = false\n        var isLastCharAlpha = false\n        var isLastCharAlpha =\
    \ false\n        var isLastCharAlpha = false\n        var isLastCharAlpha = false\n\
    \        var isLastCharAlpha = false\n        var isLastCharAlpha = false\n  \
    \      var isLastCharAlpha = false\n        var isLastCharAlpha = false\n    \
    \    var isLastCharAlpha = false\n        var isLastCharAlpha = false\n      \
    \  var isLastCharAlpha = false\n        var isLastCharAlpha = false\n        var\
    \ isLastCharAlpha = false\n        var isLastCharAlpha = false\n        var isLastCharAlpha\
    \ = false\n        var isLastCharAlpha = false\n        var isLastCharAlpha =\
    \ false\n        var isLastCharAlpha = false\n        var isLastCharAlpha = false\n\
    \        var isLastCharAlpha = false\n        var isLastCharAlpha = false\n  \
    \      var isLastCharAlpha = false\n        var isLastCharAlpha = false\n    \
    \    var isLastCharAlpha = false\n        var isLastCharAlpha = false\n      \
    \  var isLastCharAlpha = false\n        var isLastCharAlpha = false\n        var\
    \ isLastCharAlpha = false\n        var isLastCharAlpha = false\n        var isLastCharAlpha\
    \ = false\n        var isLastCharAlpha = false\n        var isLastCharAlpha =\
    \ false\n        var isLastCharAlpha = false\n        var isLastCharAlpha = false\n\
    \        var isLastCharAlpha = false\n        var isLastCharAlpha = false\n  \
    \      var isLastCharAlpha = false\n        var isLastCharAlpha = false\n    \
    \    var isLastCharAlpha = false\n        var isLastCharAlpha = false\n      \
    \  var isLastCharAlpha = false\n        var isLastCharAlpha = false\n        var\
    \ isLastCharAlpha = false\n        var isLastCharAlpha = false\n        var isLastCharAlpha\
    \ = false\n        var isLastCharAlpha = false\n        var isLastCharAlpha =\
    \ false\n        var isLastCharAlpha = false\n        var isLastCharAlpha = false\n\
    \        var isLastCharAlpha = false\n        var isLastCharAlpha = false\n  \
    \      var isLastCharAlpha = false\n        var isLastCharAlpha = false\n    \
    \    var isLastCharAlpha = false\n        var isLastCharAlpha = false\n      \
    \  var isLastCharAlpha = false\n        var isLastCharAlpha = false\n        var\
    \ isLastCharAlpha = false\n        var isLastCharAlpha = false\n        var isLastCharAlpha\
    \ = false\n        var isLastCharAlpha = false\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkjr45xbb.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e\
    [31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0misLastCharAlpha is already defined as \e[33mvariable\e[0m \e[35misLastCharAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkjr45xbb.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharAlpha is already defined as \e[33mvariable\e[0m \e[35misLastCharAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkjr45xbb.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharAlpha is already defined as \e[33mvariable\e[0m \e[35misLastCharAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkjr45xbb.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharAlpha is already defined as \e[33mvariable\e[0m \e[35misLastCharAlpha\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkjr45xbb.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mvar\e[0m \e[36misLastCharAlpha\e[0m = \e[31mfalse\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0misLastCharAlpha is alr"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLetter = lastChar.forall(_.isLetter)\n        val isNotWord = words.last.forall(_.forall(_.isLetter))\n\
    \        isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc1xyvzxt.scala:21:44 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = words.last.forall(_.forall(_.isLetter))\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    value forall is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = (lastChar >= 'a' && lastChar <= 'z') ||\
    \ (lastChar >= 'A' && lastChar <= 'Z')\n        !isALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkg3jzfwg.scala:24)\n\tat Problem.main(tmpkg3jzfwg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n       \
    \ isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbir5gide.scala:25)\n\tat Problem.main(tmpbir5gide.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val isLastCharAlpha = lastChar.forall(_.isLetter)\n        val isLastCharNotWord\
    \ = words.last.forall(_.contains(lastChar))\n        isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvx7d_w5h.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978614
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        var lastChar\
    \ = txt.last\n        var isLastCharALetter = true\n        var isLastCharALetterWord\
    \ = false\n        var isLastCharALetterSpace = false\n        var isLastCharALetterNonWord\
    \ = false\n        var isLastCharALetterNonSpace = false\n        var isLastCharALetterNonWordSpace\
    \ = false\n        var isLastCharALetterNonSpaceWord = false\n        var isLastCharALetterNonSpaceWordSpace\
    \ = false\n        var isLastCharALetterNonSpaceWordSpaceSpace = false\n     \
    \   var isLastCharALetterNonSpaceWordSpaceSpace = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace\
    \ = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n\
    \        var isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n        var\
    \ isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace\
    \ = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n\
    \        var isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n        var\
    \ isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace\
    \ = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n\
    \        var isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n        var\
    \ isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace\
    \ = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n\
    \        var isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n        var\
    \ isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace\
    \ = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n\
    \        var isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n        var\
    \ isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace\
    \ = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n\
    \        var isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n        var\
    \ isLastCharALetterNonSpaceWordSpaceSpaceSpace = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace\
    \ = false\n        var isLastCharALetterNonSpaceWordSpaceSpaceSpace\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbt7i4if5.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbt7i4if5.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m\
    \ \e[36misLastCharALetterNonSpaceWordSpaceSpace\e[0m = \e[31mfalse\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0misLastCharALetterNonSpaceWordSpaceSpace is already defined as \e\
    [33mvariable\e[0m \e[35misLastCharALetterNonSpaceWordSpaceSpace\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbt7i4if5.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mvar\e[0m \e[36misLastCharALetterNonSpaceWordSpaceSpaceSpace\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharALetterNonSpaceWordSpaceSpaceSpace is already defined\
    \ as \e[33mvariable\e[0m \e[35misLastCharALetterNonSpaceWordSpaceSpaceSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbt7i4if5.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mvar\e[0m \e[36misLastCharALetterNonSpaceWordSpaceSpaceSpace\e\
    [0m = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharALetterNonSpaceWordSpaceSpaceSpace is already defined\
    \ as \e[33mvariable\e[0m \e[35misLastCharALetterNonSpaceWordSpaceSpaceSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbt7i4if5.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mvar\e[0m \e[36misLastCharALetterNonSpaceWordSpaceSpaceSpace\e\
    [0m = \e[31m"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = (lastChar >= 'a' && lastChar <= 'z') ||\
    \ (lastChar >= 'A' && lastChar <= 'Z')\n        val isNotWord = txt.split(\" \"\
    ).lastOption.exists(!_.contains(lastChar))\n        isALetter && !isNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4bw0ki38.scala:24)\n\tat Problem.main(tmp4bw0ki38.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == \"a\" || lastChar.toString.toLowerCase\
    \ == \"e\" || lastChar.toString.toLowerCase == \"i\" || lastChar.toString.toLowerCase\
    \ == \"o\" || lastChar.toString.toLowerCase == \"u\")\n        val isLastCharNotALetter\
    \ = (lastChar.toString.toLowerCase != \"a\" && lastChar.toString.toLowerCase !=\
    \ \"e\" && lastChar.toString.toLowerCase != \"i\" && lastChar.toString.toLowerCase\
    \ != \"o\" && lastChar.toString.toLowerCase != \"u\")\n        val isLastCharNotALetterOrLastCharIsALetter\
    \ = (isLastCharNotALetter || isLastCharALetter)\n        val isLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetter\
    \ = (isLastCharNotALetter || isLastCharALetter || isLastCharALetter)\n       \
    \ val isLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetter\
    \ = (isLastCharNotALetter || isLastCharALetter || isLastCharALetter || isLastCharALetter\
    \ || isLastCharALetter)\n        val isLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetter\
    \ = (isLastCharNotALetter || isLastCharALetter || isLastCharALetter || isLastCharALetter\
    \ || isLastCharALetter || isLastCharALetter || isLastCharALetter)\n        val\
    \ isLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetter\
    \ = (isLastCharNotALetter || isLastCharALetter || isLastCharALetter || isLastCharALetter\
    \ || isLastCharALetter || isLastCharALetter || isLastCharALetter || isLastCharALetter\
    \ || isLastCharALetter)\n        val isLastCharNotALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIsALetterOrLastCharIs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2amf980h.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2amf980h.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar.isLetter\n        val isNotALetter\
    \ = lastChar.isNotLetter\n        val isNotWord = txt.split(\" \").last.contains(lastChar)\n\
    \        val isWord = txt.split(\" \").last.contains(lastChar) && !txt.split(\"\
    \ \").last.contains(lastChar)\n        val isNotWord2 = txt.split(\" \").last.contains(lastChar)\
    \ && !txt.split(\" \").last.contains(lastChar)\n        val isWord2 = txt.split(\"\
    \ \").last.contains(lastChar) && txt.split(\" \").last.contains(lastChar)\n  \
    \      val isNotWord3 = txt.split(\" \").last.contains(lastChar) && !txt.split(\"\
    \ \").last.contains(lastChar)\n        val isWord3 = txt.split(\" \").last.contains(lastChar)\
    \ && txt.split(\" \").last.contains(lastChar)\n        val isNotWord4 = txt.split(\"\
    \ \").last.contains(lastChar) && !txt.split(\" \").last.contains(lastChar)\n \
    \       val isWord4 = txt.split(\" \").last.contains(lastChar) && txt.split(\"\
    \ \").last.contains(lastChar)\n        val isNotWord5 = txt.split(\" \").last.contains(lastChar)\
    \ && !txt.split(\" \").last.contains(lastChar)\n        val isWord5 = txt.split(\"\
    \ \").last.contains(lastChar) && txt.split(\" \").last.contains(lastChar)\n  \
    \      val isNotWord6 = txt.split(\" \").last.contains(lastChar) && !txt.split(\"\
    \ \").last.contains(lastChar)\n        val isWord6 = txt.split(\" \").last.contains(lastChar)\
    \ && txt.split(\" \").last.contains(lastChar)\n        val isNotWord7 = txt.split(\"\
    \ \").last.contains(lastChar) && !txt.split(\" \").last.contains(lastChar)\n \
    \       val isWord7 = txt.split(\" \").last.contains(lastChar) && txt.split(\"\
    \ \").last.contains(lastChar)\n        val isNotWord8 = txt.split(\" \").last.contains(lastChar)\
    \ && !txt.split(\" \").last.contains(lastChar)\n        val isWord8 = txt.split(\"\
    \ \").last.contains(lastChar) && txt.split(\" \").last.contains(lastChar)\n  \
    \      val isNotWord9 = txt.split(\" \").last.contains(lastChar) && !txt.split(\"\
    \ \").last.contains(lastChar)\n        val isWord9 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6ozfkgaj.scala:38:21 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36misWord9\e[0m = \n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                    \
    \ expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp6ozfkgaj.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misNotALetter\e[0m = lastChar.isNotLetter\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           value isNotLetter is not a member of Char\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ozfkgaj.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659978640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isALetter = lastChar.matches(\"[a-zA-Z]\") && !lastChar.matches(\"\\\\w\")\n\
    \        return isALetter\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmpfbmzc_4q.scala:19)\n\tat Problem$.main(tmpfbmzc_4q.scala:24)\n\
    \tat Problem.main(tmpfbmzc_4q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !(isLastCharALetter)\n        isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_7je34lm.scala:25)\n\tat Problem.main(tmp_7je34lm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastChar = words(txt.length-1)\n    \
    \    val isLastCharAlpha = lastChar.forall(_.isLetter)\n        val isLastCharNotWord\
    \ = words.last.forall(_.contains(lastChar))\n        isLastCharAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvx7d_w5h.scala:21:52 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ words.last.forall(_.contains(lastChar))\n\e[31m\e[31m   |\e[0m             \
    \                                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                           value contains is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").lastOption match {\n            case Some(word)\
    \ => !word.contains(lastChar)\n            case None => false\n        }\n   \
    \     isALetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9i1ga58i.scala:27)\n\tat Problem.main(tmp9i1ga58i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978580
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.matches(\"[a-zA-Z]+\")\n\
    \        val isLastCharNotWord = txt.lastIndexOfAny(\" \") != txt.length - 1\n\
    \        isLastCharAlpha && !isLastCharNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_qb9v6hv.scala:19:39 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharAlpha\e[0m = lastChar.matches(\e\
    [31m\"[a-zA-Z]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              value matches is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_qb9v6hv.scala:20:36\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36misLastCharNotWord\e[0m = txt.lastIndexOfAny(\e[31m\" \"\e[0m) != txt.length\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue lastIndexOfAny is not a member of String - did you mean\
    \ txt.lastIndexOf?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \").toList\n        val lastWord = words(words.length-1)\n  \
    \      val lastChar = lastWord.last\n        val isLastCharALetter = lastChar.isLetter\n\
    \        val isLastCharNotALetter = lastChar.matches(\"[a-zA-Z]\")\n        isLastCharALetter\
    \ && !isLastCharNotALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaj3es0xb.scala:22:44 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m\
    \ = lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                       value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharAlpha = lastChar.isLetter\n        val isLastCharNotAlpha\
    \ = !lastChar.isLetter\n        val isLastCharNotWord = txt.last.split(\" \").length\
    \ == 0\n        isLastCharAlpha && !isLastCharNotAlpha && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ojlsffo.scala:21:41 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWord\e[0m =\
    \ txt.last.split(\e[31m\" \"\e[0m).length == \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                          value split is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.dropRight(1).forall(_.isLetter)\n        isALetter &&\
    \ !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj88u0soe.scala:27)\n\tat Problem.main(tmpj88u0soe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharALetter = (lastChar.toString.toLowerCase == lastChar)\n        val\
    \ isLastCharNotALetter = (lastChar.toString.toLowerCase != lastChar)\n       \
    \ val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = words.exists(word => word.contains(lastChar))\n\
    \        val isLastCharNotALetterInWord = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpscr_hrl_.scala:42:40 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterInWord\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpscr_hrl_.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36misLastCharNotALetterInWord\e[0m = words.exists(\e[36mword\e[0m => word.contains(lastChar))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterInWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpscr_hrl_.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterInWord\e\
    [0m = words.exists(\e[36mword\e[0m => word.contains(lastChar))\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterInWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpscr_hrl_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetterInWord\e\
    [0m = words.exists(\e[36mword\e[0m => word.contains(lastChar))\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotALetterInWord is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotALetterInWord\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded m"
  stdout: ''
  timestamp: 1659978644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar >= 'a' && lastChar <= 'z'\n   \
    \     val isNotWord = txt.split(\" \").lastOption match {\n            case None\
    \ => false\n            case Some(word) => !word.contains(lastChar)\n        }\n\
    \        isALetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbdz0zpuw.scala:27)\n\tat Problem.main(tmpbdz0zpuw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastWord = words(words.length-1)\n        val\
    \ lastChar = lastWord.last\n        val isLastCharALetter = lastChar.isLetter\n\
    \        val isLastCharNotALetter = lastChar.matches(\"[a-zA-Z]+\")\n        !isLastCharALetter\
    \ && !isLastCharNotALetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvo_uzgqa.scala:22:44 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m\
    \ = lastChar.matches(\e[31m\"[a-zA-Z]+\"\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                        value matches is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLetter = lastChar >= 'a' && lastChar <= 'z'\n    \
    \    val isNotWord = txt.split(\" \").map(_.last).contains(lastChar)\n       \
    \ isLetter && !isNotWord\n    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbir5gide.scala:25)\n\tat Problem.main(tmpbir5gide.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = (lastChar >= 'a' && lastChar <=\
    \ 'z') || (lastChar >= 'A' && lastChar <= 'Z')\n        val isLastCharNotALetter\
    \ = !(isLastCharALetter)\n        isLastCharNotALetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_7je34lm.scala:25)\n\tat Problem.main(tmp_7je34lm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isLastCharALetter = lastChar.matches(\"[a-zA-Z]+\")\n\
    \        val isLastCharNotALetter = lastChar != lastChar.toLowerCase\n       \
    \ isLastCharALetter && !isLastCharNotALetter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph5q56gym.scala:19:41 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.matches(\e[31m\"[a-zA-Z]+\"\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \                      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                value matches is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmph5q56gym.scala:20:56 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotALetter\e[0m = lastChar\
    \ != lastChar.toLowerCase\n\e[31m\e[31m   |\e[0m                             \
    \                  ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               value toLowerCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsLetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotWord = lastChar != ' ' && lastChar != '\\t'\n      \
    \  lastCharIsLetter && lastCharIsNotWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkIfLastCharIsALetter((\"apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pi e\")) == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiegd8ren.scala:24)\n\tat Problem.main(tmpiegd8ren.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val isALetter = lastChar.toString.isLetter\n        val\
    \ isNotWord = txt.splitAt(txt.length-1)\n            .filter(_ != \" \")\n   \
    \         .forall(_.toString.isLetter)\n        isALetter && !isNotWord\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk2wd0_ar.scala:19:42 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misALetter\e[0m = lastChar.toString.isLetter\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value isLetter is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk2wd0_ar.scala:21:13 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misNotWord\e[0m = txt.splitAt(txt.length-\e\
    [31m1\e[0m)\n\e[31m21 |\e[0m            .filter(_ != \e[31m\" \"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       value filter is not a member of (String, String)\n2 errors found\n"
  stdout: ''
  timestamp: 1659978644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotAlpha\
    \ = !lastChar.matches(\"[a-zA-Z]+\")\n        isLastCharAlpha && !isLastCharNotAlpha\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmps8j3dh5z.scala:19)\n\tat Problem$.main(tmps8j3dh5z.scala:25)\n\
    \tat Problem.main(tmps8j3dh5z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.toString.matches(\"[a-zA-Z]\")\n        val isLastCharNotAlpha\
    \ = !lastChar.toString.matches(\"[a-zA-Z]+\")\n        isLastCharAlpha && !isLastCharNotAlpha\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 1\n\tat Problem$.checkIfLastCharIsALetter(tmphf53krvk.scala:19)\n\tat Problem$.main(tmphf53krvk.scala:25)\n\
    \tat Problem.main(tmphf53krvk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val words\
    \ = txt.split(\" \")\n        val lastChar = words(txt.length-1)\n        val\
    \ isLastCharAlpha = lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNotWord\
    \ && lastChar.matches(\"[a-zA-Z]\")\n        val isLastCharNotWordAlpha = !isLastCharNot\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpve775ac4.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpve775ac4.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpve775ac4.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordAlpha is already defined as \e[33mvalue\e\
    [0m \e[35misLastCharNotWordAlpha\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpve775ac4.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36misLastCharNotWordAlpha\e\
    [0m = !isLastCharNotWord && lastChar.matches(\e[31m\"[a-zA-Z]\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misLastCharNotWordA"
  stdout: ''
  timestamp: 1659978645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val lastCharIsALetter = lastChar >= 'a' && lastChar <= 'z'\n\
    \        val lastCharIsNotALetter = lastChar != 'a' && lastChar != 'z'\n     \
    \   val lastCharIsNotALetterOrSpace = lastCharIsNotALetter || lastChar == ' '\n\
    \        lastCharIsALetterOrSpace && lastCharIsNotALetterOrSpace\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"apple\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\")) == (true));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie \")) ==\
    \ (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin pie 1\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pie\"\
    )) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e \")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcdyigg__.scala:22:8 -------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        lastCharIsALetterOrSpace && lastCharIsNotALetterOrSpace\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Not found: lastCharIsALetterOrSpace\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that returns True if the last character\n    //\
    \ of a given string is an alphabetical character and is not\n    // a part of\
    \ a word, and False otherwise.\n    // Note: \"word\" is a group of characters\
    \ separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"\
    apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi\
    \ e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n\
    \    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n\
    \    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar\
    \ = txt.last\n        val words = txt.split(\" \").filter(_.nonEmpty)\n      \
    \  val isLastCharALetter = lastChar.toString.isLetter\n        val isLastCharNotWord\
    \ = words.last.contains(lastChar)\n        !isLastCharALetter && !isLastCharNotWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkIfLastCharIsALetter((\"\
    apple\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\"))\
    \ == (true));\n    assert(checkIfLastCharIsALetter((\"eeeee\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"A\")) == (true));\n    assert(checkIfLastCharIsALetter((\"\
    Pumpkin pie \")) == (false));\n    assert(checkIfLastCharIsALetter((\"Pumpkin\
    \ pie 1\")) == (false));\n    assert(checkIfLastCharIsALetter((\"\")) == (false));\n\
    \    assert(checkIfLastCharIsALetter((\"eeeee e \")) == (false));\n    assert(checkIfLastCharIsALetter((\"\
    apple pie\")) == (false));\n    assert(checkIfLastCharIsALetter((\"apple pi e\
    \ \")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprrkv6n_k.scala:20:50 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36misLastCharALetter\e[0m =\
    \ lastChar.toString.isLetter\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \          value isLetter is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978645
