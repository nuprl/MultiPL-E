{
  "language": "scala",
  "name": "HumanEval_17_parse_music",
  "results": [
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val restLength = rest.length\n            val restNote = rest(0)\n            val restRest = rest(1)\n            val restRestLength = restRest.length\n            val restRestNote = restRest(0)\n            val restRestRest = restRest(1)\n            val restRestRestLength = restRestRest.length\n            val restRestRestNote = restRestRest(0)\n            val restRestRestRest = restRestRest(1)\n            val restRestRestRestLength = restRestRestRest.length\n            val restRestRestRestNote = restRestRestRest(0)\n            val restRestRestRestRest = restRestRestRest(1)\n            val restRestRestRestRestLength = restRestRestRestRest.length\n            val restRestRestRestRestNote = restRestRestRestRest(0)\n            val restRestRestRestRestRest = restRestRestRestRest(1)\n            val restRestRestRestRestRestLength = restRestRestRestRestRest.length\n            val restRestRestRestRestRestNote = restRestRestRestRestRest(0)\n            val restRestRestRestRestRestRest = restRestRestRestRestRestRest(1)\n            val restRestRestRestRestRestRestLength = restRestRestRestRestRestRestRest.length\n            val restRestRestRestRestRestRestNote = restRestRestRestRestRestRest(0)\n            val restRestRestRestRestRestRestRest = restRestRestRestRestRestRestRest(1)\n            val restRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRest.length\n            val restRestRestRestRestRestRestRestNote = restRestRestRestRestRestRestRest(0)\n            val restRestRestRestRestRestRestRest = restRestRestRestRestRestRestRestRest(1)\n            val restRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRestRest.length\n            val restRestRestRestRestRestRestRestRestNote = restRestRestRestRestRestRestRestRestRest(0)\n            val restRestRestRestRestRestRestRestRest = restRestRestRestRestRestRestRestRestRest(1)\n            val restRestRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRestRestRest.length\n            val restRestRestRestRestRestRestRestRestRestNote = restRestRestRestRestRestRest\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpubx0588h.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpubx0588h.scala:56:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpubx0588h.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestRestLength\u001b[0m = restRest.length\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value length is not a member of Char\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpubx0588h.scala:21:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestRestNote\u001b[0m = restRest(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mvalue\u001b[0m \u001b[35mrestRest\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpubx0588h.scala:22:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestRestRest\u001b[0m = restRest(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mvalue\u001b[0m \u001b[35mrestRest\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpubx0588h.scala:43:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestRestRestRestRestRestRestRestRest\u001b[0m = restRestRestRestRestRestRestRestRestRest(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not fou",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase())\n        val notes_count = notes.count\n        val notes_beats = notes.map(n => n.length.toLong).sum\n        val notes_last_beats = notes_beats - notes_count\n        val notes_last_beats_count = notes_last_beats / 4\n        val notes_last_beats_count_2 = notes_last_beats_count * 2\n        val notes_last_beats_count_3 = notes_last_beats_count_2 * 2\n        val notes_last_beats_count_4 = notes_last_beats_count_3 * 2\n        val notes_last_beats_count_5 = notes_last_beats_count_4 * 2\n        val notes_last_beats_count_6 = notes_last_beats_count_5 * 2\n        val notes_last_beats_count_7 = notes_last_beats_count_6 * 2\n        val notes_last_beats_count_8 = notes_last_beats_count_7 * 2\n        val notes_last_beats_count_9 = notes_last_beats_count_8 * 2\n        val notes_last_beats_count_10 = notes_last_beats_count_9 * 2\n        val notes_last_beats_count_11 = notes_last_beats_count_10 * 2\n        val notes_last_beats_count_12 = notes_last_beats_count_11 * 2\n        val notes_last_beats_count_13 = notes_last_beats_count_12 * 2\n        val notes_last_beats_count_14 = notes_last_beats_count_13 * 2\n        val notes_last_beats_count_15 = notes_last_beats_count_14 * 2\n        val notes_last_beats_count_16 = notes_last_beats_count_15 * 2\n        val notes_last_beats_count_17 = notes_last_beats_count_16 * 2\n        val notes_last_beats_count_18 = notes_last_beats_count_17 * 2\n        val notes_last_beats_count_19 = notes_last_beats_count_18 * 2\n        val notes_last_beats_count_20 = notes_last_beats_count_19 * 2\n        val notes_last_beats_count_21 = notes_last_beats_count_20 * 2\n        val notes_last_beats_count_22 = notes_last_beats_count_21 * 2\n        val notes_last_beats_count_23 = notes_last_beats_count_22 * 2\n        val notes_last_beats_count_24 = notes_last_beats_count_23 * \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpv0hb138_.scala:41:67 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_count_24\u001b[0m = notes_last_beats_count_23 * \n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpv0hb138_.scala:17:43 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats\u001b[0m = notes_beats - notes_count\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m-\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Double\n\u001b[31m   |\u001b[0m (x: Float): Float\n\u001b[31m   |\u001b[0m (x: Long): Long\n\u001b[31m   |\u001b[0m (x: Int): Long\n\u001b[31m   |\u001b[0m (x: Char): Long\n\u001b[31m   |\u001b[0m (x: Short): Long\n\u001b[31m   |\u001b[0m (x: Byte): Long\n\u001b[31m   |\u001b[0mmatch arguments ((notes_count : (String => Boolean) => Int))\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv0hb138_.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val music_note = music_string.charAt(0)\n            val music_length = music_string.substring(1).length\n            val music_beats = music_length.toLong\n            val music_last_beat = music_beats - music_note.length.toLong\n            music_last_beat\n        }).distinct\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo81c14_z.scala:18:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_last_beat\u001b[0m = music_beats - music_note.length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value length is not a member of Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmpo81c14_z.scala:20:10 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        }).distinct\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m          where:    B is a type variable\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_count = notes.length\n        val notes_array = notes.map(x => x.toInt)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x => x \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyaxke8hr.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyaxke8hr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.filter(\u001b[36mx\u001b[0m => x != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyaxke8hr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.map(\u001b[36mx\u001b[0m => x.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyaxke8hr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.filter(\u001b[36mx\u001b[0m => x != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyaxke8hr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.map(\u001b[36mx\u001b[0m => x.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded m",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\").map(_.toInt).toList\n        val notes = music_list.zipWithIndex.filter(_._1 == 0).map(_._2)\n        val notes_length = notes.map(_.toString.length).sum\n        val notes_last_beat = notes.map(_.toString).map(_.last).toList\n        val notes_last_beats = notes_last_beat.map(_.toString.length).sum\n        val notes_last_beats_length = notes_last_beats.map(_.toString.length).sum\n        val notes_last_beats_last_beat = notes_last_beats.map(_.last).toList\n        val notes_last_beats_last_beats_length = notes_last_beats_last_beat.map(_.toString.length).sum\n        val notes_last_beats_last_beats_last_beat = notes_last_beats_last_beat.map(_.last).toList\n        val notes_last_beats_last_beats_last_beats_length = notes_last_beats_last_beats_last_beat.map(_.toString.length).sum\n        val notes_last_beats_last_beats_last_beats_last_beat = notes_last_beats_last_beats_last_beat.map(_.last).toList\n        val notes_last_beats_last_beats_last_beats_last_beats_length = notes_last_beats_last_beats_last_beats_last_beat.map(_.toString.length).sum\n        val notes_last_beats_last_beats_last_beats_last_beats_last_beat = notes_last_beats_last_beats_last_beats_last_beat.map(_.last).toList\n        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_length = notes_last_beats_last_beats_last_beats_last_beats_last_beat.map(_.toString.length).sum\n        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beat = notes_last_beats_last_beats_last_beats_last_beats_last_beat.map(_.last).toList\n        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_length = notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beat.map(_.toString.length).sum\n        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_last_beat = notes_last_beats_last_beats_last_beats_last_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp79r29j5g.scala:19:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_length\u001b[0m = notes_last_beats.map(_.toString.length).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value map is not a member of Int\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp79r29j5g.scala:20:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_last_beat\u001b[0m = notes_last_beats.map(_.last).toList\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        value map is not a member of Int\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp79r29j5g.scala:30:96 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_last_beat\u001b[0m = notes_last_beats_last_beats_last_beats_last_\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Not found: notes_last_beats_last_beats_last_beats_last_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp79r29j5g.scala:31:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659800152
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length() > 0)\n        val music_list_size = music_list.size\n        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole = music_list_size.toLong\n        val music_list_size_quarter2 = music_list_size_quarter / 2\n        val music_list_size_quarter4 = music_list_size_quarter / 4\n        val music_list_size_whole2 = music_list_size_whole / 2\n        val music_list_size_whole4 = music_list_size_whole / 4\n        val music_list_size_whole8 = music_list_size_whole / 8\n        val music_list_size_whole16 = music_list_size_whole / 16\n        val music_list_size_whole32 = music_list_size_whole / 32\n        val music_list_size_whole64 = music_list_size_whole / 64\n        val music_list_size_whole128 = music_list_size_whole / 128\n        val music_list_size_whole256 = music_list_size_whole / 256\n        val music_list_size_whole512 = music_list_size_whole / 512\n        val music_list_size_whole1024 = music_list_size_whole / 1024\n        val music_list_size_whole2048 = music_list_size_whole / 2048\n        val music_list_size_whole4096 = music_list_size_whole / 4096\n        val music_list_size_whole8192 = music_list_size_whole / 8192\n        val music_list_size_whole16384 = music_list_size_whole / 16384\n        val music_list_size_whole32768 = music_list_size_whole / 32768\n        val music_list_size_whole65536 = music_list_size_whole / 65536\n        val music_list_size_whole131072 = music_list_size_whole / 131072\n        val music_list_size_whole262144 = music_list_size_whole / 262144\n        val music_list_size_whole524288 = music_list_size_whole / 524288\n        val music_list_size_whole1048576 = music_list_size_whole / 1048576\n        val music_list_size_whole2097152 = music_list_size_whole / 2097152\n        \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbsqfg977.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val restLength = rest.length\n            val restNote = rest(0)\n            val restRest = rest(1)\n            val restRestLength = restRest.length\n            val restRestNote = restRest(0)\n            val restRestRest = restRest(1)\n            val restRestRestLength = restRestRest.length\n            val restRestRestNote = restRestRest(0)\n            val restRestRestRest = restRestRest(1)\n            val restRestRestRestLength = restRestRestRest.length\n            val restRestRestRestNote = restRestRestRest(0)\n            val restRestRestRestRest = restRestRestRest(1)\n            val restRestRestRestRestLength = restRestRestRestRest.length\n            val restRestRestRestRestNote = restRestRestRestRest(0)\n            val restRestRestRestRestRest = restRestRestRestRest(1)\n            val restRestRestRestRestRestLength = restRestRestRestRestRest.length\n            val restRestRestRestRestRestNote = restRestRestRestRestRest(0)\n            val restRestRestRestRestRestRest = restRestRestRestRestRestRest(1)\n            val restRestRestRestRestRestRestLength = restRestRestRestRestRestRestRest.length\n            val restRestRestRestRestRestRestNote = restRestRestRestRestRestRest(0)\n            val restRestRestRestRestRestRestRest = restRestRestRestRestRestRestRest(1)\n            val restRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRest.length\n            val restRestRestRestRestRestRestRestNote = restRestRestRestRestRestRestRest(0)\n            val restRestRestRestRestRestRestRest = restRestRestRestRestRestRestRestRest(1)\n            val restRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRestRest.length\n            val restRestRestRestRestRestRestRestRestNote = restRestRestRestRestRestRestRestRestRest(0)\n            val restRestRestRestRestRestRestRestRest = restRestRestRestRestRestRestRestRestRest(1)\n            val restRestRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRestRestRest.length\n            val restRestRestRestRestRestRestRestRestRestNote = restRestRestRestRestRestRest\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpubx0588h.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpubx0588h.scala:56:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpubx0588h.scala:20:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestRestLength\u001b[0m = restRest.length\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value length is not a member of Char\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpubx0588h.scala:21:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestRestNote\u001b[0m = restRest(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mvalue\u001b[0m \u001b[35mrestRest\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpubx0588h.scala:22:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestRestRest\u001b[0m = restRest(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mvalue\u001b[0m \u001b[35mrestRest\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpubx0588h.scala:43:55 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestRestRestRestRestRestRestRestRest\u001b[0m = restRestRestRestRestRestRestRestRestRest(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not fou",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val music_note = music_string.charAt(0)\n            val music_type = music_string.charAt(1)\n            val music_length = music_string.charAt(2)\n            val music_beats = music_string.charAt(3)\n            val music_rest = music_string.substring(4)\n            val music_rest2 = music_rest.split(\"\").map(music_rest => {\n                val music_rest3 = music_rest.charAt(0)\n                val music_rest4 = music_rest.charAt(1)\n                val music_rest5 = music_rest.charAt(2)\n                val music_rest6 = music_rest.charAt(3)\n                val music_rest7 = music_rest.charAt(4)\n                val music_rest8 = music_rest.charAt(5)\n                val music_rest9 = music_rest.charAt(6)\n                val music_rest10 = music_rest.charAt(7)\n                val music_rest11 = music_rest.charAt(8)\n                val music_rest12 = music_rest.charAt(9)\n                val music_rest13 = music_rest.charAt(10)\n                val music_rest14 = music_rest.charAt(11)\n                val music_rest15 = music_rest.charAt(12)\n                val music_rest16 = music_rest.charAt(13)\n                val music_rest17 = music_rest.charAt(14)\n                val music_rest18 = music_rest.charAt(15)\n                val music_rest19 = music_rest.charAt(16)\n                val music_rest20 = music_rest.charAt(17)\n                val music_rest21 = music_rest.charAt(18)\n                val music_rest22 = music_rest.charAt(19)\n                val music_rest23 = music_rest.charAt(20)\n                val music_rest24 = music_rest.charAt(21)\n                val music_rest25 = music_rest.charAt(22)\n                val music_rest26 = music_rest.charAt(23)\n                val music_rest27 = music_rest.charAt(24)\n                val music_rest28 = music_rest.charAt(25)\n                val music_rest29 = music_rest.charAt(26)\n                val music_rest30 = music_rest.charAt(27)\n                val music_rest31 = music_rest.charAt(28)\n                val music_rest32 = music_rest.charAt(29)\n                val music_rest33 = music_rest.charAt(30)\n                val music_rest34 = music_rest.charAt(31)\n                val music_rest35 = music_rest.\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy5p34vni.scala:54:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy5p34vni.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy5p34vni.scala:64:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1659800147
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\").map(music_string => {\n                val note = music_string.split(\"o\").map(music_string => {\n                    val beats = music_string.split(\"|\").map(music_string => {\n                        val beat = music_string.split(\".\").map(music_string => {\n                            music_string.toLong\n                        }).sum\n                        beat.asInstanceOf[Long]\n                    }).sum\n                    beat.asInstanceOf[Long]\n                }).sum\n                note.asInstanceOf[Long]\n            }).sum\n            notes.asInstanceOf[Long]\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcb270dxt.scala:23:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                    beat.asInstanceOf[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: beat\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcb270dxt.scala:24:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                }).sum\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                  where:    B is a type variable\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcb270dxt.scala:26:14 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            }).sum\n\u001b[31m\u001b[31m   |\u001b[0m              ^\u001b[0m\n\u001b[31m   |\u001b[0m              No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m              where:    B is a type variable\n\u001b[31m\u001b[31m-- Error: /tmp/tmpcb270dxt.scala:28:10 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        }).sum\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m          where:    B is a type variable\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_notes = music_string.split(\"\\\\|\")\n        val music_notes_length = music_notes.length\n        val music_notes_beats = music_notes.map(music_note => music_note.split(\"o\"))\n        val music_notes_beats_length = music_notes_beats.length\n        val music_notes_beats_beats = music_notes_beats.map(music_notes_beat => music_notes_beat.length)\n        val music_notes_beats_beats_length = music_notes_beats_beats.length\n        val music_notes_beats_beats_beats = music_notes_beats_beats.map(music_notes_beats_beat => music_notes_beats_beat.length)\n        val music_notes_beats_beats_beats_length = music_notes_beats_beats_beats.length\n        val music_notes_beats_beats_beats_beats = music_notes_beats_beats_beats.map(music_notes_beats_beats_beat => music_notes_beats_beats_beat.length)\n        val music_notes_beats_beats_beats_beats_length = music_notes_beats_beats_beats_beats.length\n        val music_notes_beats_beats_beats_beats_beats = music_notes_beats_beats_beats_beats.map(music_notes_beats_beats_beats_beat => music_notes_beats_beats_beats_beat.length)\n        val music_notes_beats_beats_beats_beats_beats_length = music_notes_beats_beats_beats_beats_beats.length\n        val music_notes_beats_beats_beats_beats_beats_beats = music_notes_beats_beats_beats_beats_beats.map(music_notes_beats_beats_beats_beats_beat => music_notes_beats_beats_beats_beats_beat.length)\n        val music_notes_beats_beats_beats_beats_beats_beats_length = music_notes_beats_beats_beats_beats_beats_beats_beats.length\n        val music_notes_beats_beats_beats_beats_beats_beats_beats = music_notes_beats_beats_beats_beats_beats_beats_beats.map(music_notes_beats_beats_beats_beats_beats_beats_beat => music_notes_beat\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp491oats4.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp491oats4.scala:20:121 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_beats_beats\u001b[0m = music_notes_beats_beats.map(\u001b[36mmusic_notes_beats_beat\u001b[0m => music_notes_beats_beat.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value length is not a member of Int\n\u001b[31m\u001b[31m-- Error: /tmp/tmp491oats4.scala:20:128 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_beats_beats\u001b[0m = music_notes_beats_beats.map(\u001b[36mmusic_notes_beats_beat\u001b[0m => music_notes_beats_beat.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp491oats4.scala:28:68 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_beats_beats_beats_beats_beats_beats\u001b[0m = music_notes_beats_beats_beats_beats_beats_beats_beats.map(\u001b[36mmusic_notes_beats_beats_beats_beats_beats_beats_beat\u001b[0m => music_notes_beat\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_beats_beats_beats_beats_beats_beats_beats\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp491oats4.scala:29:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n        val music_list_beats = music_list.map(music_string => music_string.split(\"o|\"))\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_length = music_list_beats_length / 2\n        val music_list_beats_length = music_list_beats_length.toInt\n        val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length * music_list_length\n        val music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length * music_list_length\n        val music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length * music_list_length\n        val music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length * music_list_length\n        val music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length * music_list_length\n        val music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length * music_list_length\n        val music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length * music_list_length\n        val music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length * music_list_length\n        val music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length * music_list_length\n        val music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length * music_list_length\n        val music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfyq0nhc7.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_length\u001b[0m = music_list_beats_length / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfyq0nhc7.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_length\u001b[0m = music_list_beats_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfyq0nhc7.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_length\u001b[0m = music_list_beats_length * \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfyq0nhc7.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_length\u001b[0m = music_list_beats_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of tople",
      "stdout": "",
      "timestamp": 1659800150
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val beats = rest.split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1, music_string.length)\n                beat.toLong * rest.split(\"o\").length\n            }).sum\n            note -> beats\n        }).groupBy(music_string => {\n            music_string._1\n        }).values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8www5fu7.scala:25:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m, music_string.length)\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = rest.split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m18 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeat\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m19 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m, music_string.length)\n\u001b[31m20 |\u001b[0m                beat.toLong * rest.split(\u001b[31m\"o\"\u001b[0m).length\n\u001b[31m21 |\u001b[0m            }).sum\n\u001b[31m22 |\u001b[0m            note -> beats\n\u001b[31m23 |\u001b[0m        }).groupBy(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m24 |\u001b[0m            music_string._1\n\u001b[31m25 |\u001b[0m        }).values.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    List[\u001b[1m\u001b[31mArray\u001b[0m\u001b[1m\u001b[31m[\u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mLong\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m]\u001b[0m]\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_count = notes.length\n        val notes_beats = notes.map(_.length.toLong)\n        val notes_beats_count = notes_beats.sum\n        val notes_beats_count_without_last_note = notes_beats_count - notes_beats(notes_count - 1)\n        val notes_beats_count_without_last_note = notes_beats_count_without_last_note.toLong\n        val notes_beats_count_without_last_note_without_last_note = notes_beats_count_without_last_note - notes_beats(notes_count - 2)\n        val notes_beats_count_without_last_note_without_last_note = notes_beats_count_without_last_note_without_last_note.toLong\n        val notes_beats_count_without_last_note_without_last_note_without_last_note = notes_beats_count_without_last_note_without_last_note - notes_beats(notes_count - 3)\n        val notes_beats_count_without_last_note_without_last_note_without_last_note = notes_beats_count_without_last_note_without_last_note_without_last_note.toLong\n        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrhexng0.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_count_without_last_note\u001b[0m = notes_beats_count_without_last_note.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_beats_count_without_last_note is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_count_without_last_note\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrhexng0.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_count_without_last_note_without_last_note\u001b[0m = notes_beats_count_without_last_note_without_last_note.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_beats_count_without_last_note_without_last_note is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_count_without_last_note_without_last_note\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwrhexng0.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_count_without_last_note_without_last_note_without_last_note\u001b[0m = notes_beats_count_without_last_note_without_last_note_without_last_note.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_beats_count_without_last_note_without_last_note_without_last_note is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_count_without_last_note_without_last_note_without_last_note\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in th",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n        val music_list_size = music_list.size\n        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole = music_list_size.toLong\n        val music_list_size_whole_half = music_list_size_whole / 2\n        val music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole = music_list_size_whole / 8\n        val music_list_size_whole_whole_half = music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0g8g9idh.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whole_whole_half\u001b[0m = music_list_size_whole_whole_whole_whole / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_whole_whole_whole_whole_half is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_whole_whole_whole_whole_half\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0g8g9idh.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whole_whole_quarter\u001b[0m = music_list_size_whole_whole_whole_whole / \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_whole_whole_whole_whole_quarter is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_whole_whole_whole_whole_quarter\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0g8g9idh.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whole_whole_whole\u001b[0m = music_list_size_whole_whole_whole_whole / \u001b[31m8\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_whole_whole_whole_whole_whole is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_whole_whole_whole_whole_whole\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0g8g9idh.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_length = music_list.length\n        val music_notes = music_list.map(music_note => music_note.split(\"o\"))\n        val music_notes_length = music_notes.length\n        val music_notes_length = music_notes_length / 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_notes_length = music_notes_length * 4\n        val music_notes_length = music_notes_length.toInt\n        val music_note\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprsuayfk0.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprsuayfk0.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_length\u001b[0m = music_notes_length / \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprsuayfk0.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_length\u001b[0m = music_notes_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprsuayfk0.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_length\u001b[0m = music_notes_length * \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmprsuayfk0.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_length\u001b[0m = music_notes_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote t",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase())\n        val notes_count = notes.map(n => n.length).sum\n        val notes_count_per_beat = notes_count / 4\n        val notes_count_per_half_beat = notes_count_per_beat * 2\n        val notes_count_per_quater_beat = notes_count_per_beat * 4\n        val notes_count_per_whole_note = notes_count_per_beat * 8\n        val notes_count_per_half_note = notes_count_per_half_beat * 2\n        val notes_count_per_quater_note = notes_count_per_quater_beat * 4\n        val notes_count_per_whole_note_2 = notes_count_per_whole_note * 2\n        val notes_count_per_half_note_2 = notes_count_per_half_note * 2\n        val notes_count_per_quater_note_2 = notes_count_per_quater_note * 4\n        val notes_count_per_whole_note_3 = notes_count_per_whole_note_2 * 3\n        val notes_count_per_half_note_3 = notes_count_per_half_note_2 * 3\n        val notes_count_per_quater_note_3 = notes_count_per_quater_note_2 * 4\n        val notes_count_per_whole_note_4 = notes_count_per_whole_note_3 * 4\n        val notes_count_per_half_note_4 = notes_count_per_half_note_3 * 4\n        val notes_count_per_quater_note_4 = notes_count_per_quater_note_3 * 4\n        val notes_count_per_whole_note_5 = notes_count_per_whole_note_4 * 5\n        val notes_count_per_half_note_5 = notes_count_per_half_note_4 * 5\n        val notes_count_per_quater_note_5 = notes_count_per_quater_note_4 * 5\n        val notes_count_per_whole_note_6 = notes_count_per_whole_note_5 * 6\n        val notes_count_per_half_note_6 = notes_count_per_half_note_5 * 6\n        val notes_count_per_quater_note_6 = notes_count_per_quater_note_5 * 6\n        val notes_count_per_whole_note_7 = notes_count_per_whole_note_6 * 7\n        val notes_count_per_half_note_7 = notes_count_per_half_note_6 * 7\n        val notes_count_per_quater_note_7 = notes_count_per_quater_note_6 * 7\n        val notes_count_per_whole_note_8 = notes_count_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp11do7cly.scala:40:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_count_per_whole_note_8\u001b[0m = notes_count_\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: notes_count_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp11do7cly.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n                beat.toLong * rest.length\n            }).sum\n            note.toLong * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjadz4yn9.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m17 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeat\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m18 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m)\n\u001b[31m19 |\u001b[0m                beat.toLong * rest.length\n\u001b[31m20 |\u001b[0m            }).sum\n\u001b[31m21 |\u001b[0m            note.toLong * beats\n\u001b[31m22 |\u001b[0m        }).sum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659799849
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val beats = rest.split(\"|\").map(_.toLong)\n            val wholeNote = beats.map(_.toLong).sum\n            val halfNote = beats.map(_.toLong).take(2).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi7htjoxn.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi7htjoxn.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi7htjoxn.scala:57:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi7htjoxn.scala:21:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mwholeNote\u001b[0m = beats.map(_.toLong).sum\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mwholeNote is already defined as \u001b[33mvalue\u001b[0m \u001b[35mwholeNote\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi7htjoxn.scala:22:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mquarterNote\u001b[0m = beats.map(_.toLong).take(\u001b[31m3\u001b[0m).sum\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mquarterNote is already defined as \u001b[33mvalue\u001b[0m \u001b[35mquarterNote\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpi7htjoxn.scala:23:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mwholeNote\u001b[0m = beats.map(_.toLong).sum\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mwholeNote is already defined as \u001b[33mvalue\u001b[0m \u001b[35mwholeNote\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m",
      "stdout": "",
      "timestamp": 1659800150
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1).trim\n            val beats = rest.split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1).trim\n                beat.charAt(0).toLong * 12 + beat.charAt(1).toLong\n            }).sum\n            note match {\n                case \"o\" => List(beats)\n                case \"o|\" => List(beats / 2, beats)\n                case \".|\" => List(beats / 4)\n                case _ => throw new Exception(\"Invalid music string: \" + music_string)\n            }\n        }).flatten.distinct\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmn9r73h5.scala:28:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).trim\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = rest.split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m18 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeat\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m19 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).trim\n\u001b[31m20 |\u001b[0m                beat.charAt(\u001b[31m0\u001b[0m).toLong * \u001b[31m12\u001b[0m + beat.charAt(\u001b[31m1\u001b[0m).toLong\n\u001b[31m21 |\u001b[0m            }).sum\n\u001b[31m22 |\u001b[0m            note \u001b[33mmatch\u001b[0m {\n\u001b[31m23 |\u001b[0m                \u001b[33mcase\u001b[0m \u001b[31m\"o\"\u001b[0m => List(beats)\n\u001b[31m24 |\u001b[0m                \u001b[33mcase\u001b[0m \u001b[31m\"o|\"\u001b[0m => List(beats / \u001b[31m2\u001b[0m, beats)\n\u001b[31m25 |\u001b[0m                \u001b[33mcase\u001b[0m \u001b[31m\".|\"\u001b[0m => List(beats / \u001b[31m4\u001b[0m)\n\u001b[31m26 |\u001b[0m                \u001b[33mcase\u001b[0m _ => \u001b[33mthrow\u001b[0m \u001b[33mnew\u001b[0m \u001b[35mException\u001b[0m(\u001b[31m\"Invalid music string: \"\u001b[0m + music_string)\n\u001b[31m27 |\u001b[0m            }\n\u001b[31m28 |\u001b[0m        }).flatten.distinct\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mArray\u001b[0m[Long]\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659800150
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val beats = rest.split(\"|\").map(_.toLong).sum\n            beats * note.toLong\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ghlgdui.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m, music_string.length)\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = rest.split(\u001b[31m\"|\"\u001b[0m).map(_.toLong).sum\n\u001b[31m18 |\u001b[0m            beats * note.toLong\n\u001b[31m19 |\u001b[0m        }).sum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n        val music_notes = music_list.filter(x => x != \"O\" && x != \"|\" && x != \".\")\n        val music_notes_length = music_notes.length\n        val music_notes_beats = music_notes.map(x => music_notes_length.toDouble / x.toDouble).toList\n        val music_notes_beats_length = music_notes_beats.length\n        val music_notes_beats_length = music_notes_beats_length.toInt\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toDouble\n        val music_notes_beats_length = music_notes_beats_length.toInt\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toDouble\n        val music_notes_beats_length = music_notes_beats_length.toInt\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toDouble\n        val music_notes_beats_length = music_notes_beats_length.toInt\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toDouble\n        val music_notes_beats_length = music_notes_beats_length.toInt\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toDouble\n        val music_notes_beats_length = music_notes_beats_length.toInt\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toDouble\n        val music_notes_beats_length = music_notes_beats_length.toInt\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toDouble\n        val music_notes_beats_length = music_note\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplqp1126w.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplqp1126w.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplqp1126w.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length.toDouble\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplqp1126w.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the",
      "stdout": "",
      "timestamp": 1660028951
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_size_int = music_list_size.toInt\n        val music_list_size_long = music_list_size_int.toLong\n        val music_list_size_long2 = music_list_size_long * music_list_size_long\n        val music_list_size_long3 = music_list_size_long2 * music_list_size_long\n        val music_list_size_long4 = music_list_size_long3 * music_list_size_long\n        val music_list_size_long5 = music_list_size_long4 * music_list_size_long\n        val music_list_size_long6 = music_list_size_long5 * music_list_size_long\n        val music_list_size_long7 = music_list_size_long6 * music_list_size_long\n        val music_list_size_long8 = music_list_size_long7 * music_list_size_long\n        val music_list_size_long9 = music_list_size_long8 * music_list_size_long\n        val music_list_size_long10 = music_list_size_long9 * music_list_size_long\n        val music_list_size_long11 = music_list_size_long10 * music_list_size_long\n        val music_list_size_long12 = music_list_size_long11 * music_list_size_long\n        val music_list_size_long13 = music_list_size_long12 * music_list_size_long\n        val music_list_size_long14 = music_list_size_long13 * music_list_size_long\n        val music_list_size_long15 = music_list_size_long14 * music_list_size_long\n        val music_list_size_long16 = music_list_size_long15 * music_list_size_long\n        val music_list_size_long17 = music_list_size_long16 * music_list_size_long\n        val music_list_size_long18 = music_list_size_long17 * music_list_size_long\n        val music_list_size_long19 = music_list_size_long18 * music_list_size_long\n        val music_list_size_long20 = music_list_size_long19 * music_list_size_long\n        val music_list_size_long21 = music_list_size_long20 * music_list_size_long\n        val music_list_size_long22 = music_list_size_long21 * music_list_size_long\n        val music_list_size_long23 = music_list_size_long\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprvgg8yf_.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028949
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\")\n            val beats = notes.map(note => {\n                val notes = note.split(\"o\")\n                val beats = notes.map(note => {\n                    val notes = note.split(\"|\")\n                    val beats = notes.map(note => {\n                        val notes = note.split(\"o|\")\n                        val beats = notes.map(note => {\n                            val notes = note.split(\"o|\")\n                            val beats = notes.map(note => {\n                                val notes = note.split(\"o|\")\n                                val beats = notes.map(note => {\n                                    val notes = note.split(\"o|\")\n                                    val beats = notes.map(note => {\n                                        val notes = note.split(\"o|\")\n                                        val beats = notes.map(note => {\n                                            val notes = note.split(\"o|\")\n                                            val beats = notes.map(note => {\n                                                val notes = note.split(\"o|\")\n                                                val beats = notes.map(note => {\n                                                    val notes = note.split(\"o|\")\n                                                    val beats = notes.map(note => {\n                                                        val notes = note.split(\"o|\")\n                                                        val beats = notes.map(note => {\n                                                            val notes = note.split(\"o|\")\n                                                            val beats = notes.map(note => {\n                                                                val notes = note.split(\"o|\")\n                                                                val beats = notes.map(note => {\n                                                                    val notes = note.split(\"o|\")\n                                                                    val beats = notes.map(note => {\n                                                                        val notes = note.split(\"o|\")\n                                                                        val beats = notes.map(note => {\n                                                                            val notes = note.split(\"o|\")\n                                                                            val beats = notes.map(note => {\n                                                                                val notes = note.split(\"o|\")\n                                                                                val beats = notes.map(note => {\n                                                                                    val notes = note.split(\"o|\")\n                                                                                    val beats = notes.map(note => {\n                                                                                        val notes = note.split(\"o|\")\n                                                                                        val beats = notes.map(note => {\n                                                                                            val notes = note.split(\"o|\")\n                                                                                            val beats = notes.map(note => {\n                                                                                                val notes = note.split(\"o|\")\n                                                                                                val beats = notes.map(note => {\n                                                                                                    val notes = note.split(\"o|\")\n                                                                                                    val beats = notes.map(note => {\n\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpaceiabpe.scala:63:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpaceiabpe.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\").map(_.toUpperCase).map(x => x.toInt)\n        val notes_length = notes.map(x => x.toLong).sum\n        val notes_last_beat = notes.map(x => x.toLong).takeRight(notes_length).sum\n        val notes_last_beats = notes.map(x => x.toLong).takeRight(notes_length).map(x => x.toLong).sum\n        val notes_last_beats_2 = notes.map(x => x.toLong).takeRight(notes_length).map(x => x.toLong).takeRight(notes_length).sum\n        val notes_last_beats_3 = notes.map(x => x.toLong).takeRight(notes_length).map(x => x.toLong).takeRight(notes_length).takeRight(notes_length).sum\n        val notes_last_beats_4 = notes.map(x => x.toLong).takeRight(notes_length).map(x => x.toLong).takeRight(notes_length).takeRight(notes_length).takeRight(notes_length).sum\n        val notes_last_beats_5 = notes.map(x => x.toLong).takeRight(notes_length).map(x => x.toLong).takeRight(notes_length).takeRight(notes_length).takeRight(notes_length).takeRight(notes_length).sum\n        val notes_last_beats_6 = notes.map(x => x.toLong).takeRight(notes_length).map(x => x.toLong).takeRight(notes_length).takeRight(notes_length).takeRight(notes_length).takeRight(notes_length).takeRight(notes_length).sum\n        val notes_last_beats_7 = notes.map(x => x.toLong).takeRight(notes_length).map(x => x.toLong).takeRight(notes_length).takeRight(notes_length).takeRight(notes_length).takeRight(notes_length).takeRight(notes_length).takeRight(notes_length).sum\n        val notes_last_beats_8 = notes.map(x => x.toLong).takeRight(notes_length).map(x => x.toLong).takeRight(notes_length).takeRight(notes_length).takeRight(notes_length).takeRight(notes_length).takeRight(notes_length).takeRight(note\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi9ebmnux.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi9ebmnux.scala:16:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beat\u001b[0m = notes.map(\u001b[36mx\u001b[0m => x.toLong).takeRight(notes_length).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    (notes_length : Long)\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi9ebmnux.scala:17:66 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats\u001b[0m = notes.map(\u001b[36mx\u001b[0m => x.toLong).takeRight(notes_length).map(\u001b[36mx\u001b[0m => x.toLong).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    (notes_length : Long)\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi9ebmnux.scala:18:68 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_2\u001b[0m = notes.map(\u001b[36mx\u001b[0m => x.toLong).takeRight(notes_length).map(\u001b[36mx\u001b[0m => x.toLong).takeRight(notes_length).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    (notes_length : Long)\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi9ebmnux.scala:18:111 ------",
      "stdout": "",
      "timestamp": 1660028955
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.nonEmpty)\n        val music_list = music_list.map(music_string => {\n            val music_notes = music_string.split(\"|\")\n            val music_notes_length = music_notes.length\n            val music_notes_beats = music_notes.map(music_note => {\n                val music_note_length = music_note.length\n                val music_note_beats = music_note.split(\"o\").map(music_note => {\n                    val music_note_beats = music_note.length\n                    music_note_beats\n                })\n                music_note_beats\n            })\n            music_notes_beats\n        })\n        val music_notes_length = music_list.length\n        val music_notes_beats = music_list.map(music_notes => {\n            val music_notes_length = music_notes.length\n            val music_notes_beats = music_notes.map(music_note => {\n                val music_note_length = music_note.length\n                val music_note_beats = music_note.split(\"o\").map(music_note => {\n                    val music_note_beats = music_note.length\n                    music_note_beats\n                })\n                music_note_beats\n            })\n            music_notes_beats\n        })\n        val music_notes_length = music_list.length\n        val music_notes_beats = music_list.map(music_notes => {\n            val music_notes_length = music_notes.length\n            val music_notes_beats = music_notes.map(music_note => {\n                val music_note_length = music_note.length\n                val music_note_beats = music_note.split(\"o\").map(music_note => {\n                    val music_note_beats = music_note.length\n                    music_note_beats\n                })\n                music_note_beats\n            })\n            music_notes_beats\n        })\n        val music_notes_length = music_list.length\n        val music_notes_beats = music_list.map(music_notes => {\n            val music_notes_length = music_notes.length\n            val music_notes_beats = music_notes.map(music_note => {\n                val music_note_length = music_note.length\n                val music_note_beats = music_note.split(\"o\").map(music_note => {\n                    val music_note_beats = music_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3zxw26cq.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3zxw26cq.scala:71:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3zxw26cq.scala:15:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list\u001b[0m = music_list.map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_notes\u001b[0m = music_string.split(\u001b[31m\"|\"\u001b[0m)\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_notes_length\u001b[0m = music_notes.length\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats\u001b[0m = music_notes.map(\u001b[36mmusic_note\u001b[0m => {\n\u001b[31m19 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmusic_note_length\u001b[0m = music_note.length\n\u001b[31m20 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmusic_note_beats\u001b[0m = music_note.split(\u001b[31m\"o\"\u001b[0m).map(\u001b[36mmusic_note\u001b[0m => {\n\u001b[31m21 |\u001b[0m                    \u001b[33mval\u001b[0m \u001b[36mmusic_note_beats\u001b[0m = music_note.length\n\u001b[31m22 |\u001b[0m                    music_note_beats\n\u001b[31m23 |\u001b[0m                })\n\u001b[31m24 |\u001b[0m                music_note_beats\n\u001b[31m25 |\u001b[0m            })\n\u001b[31m26 |\u001b[0m            music_notes_beats\n\u001b[31m27 |\u001b[0m        })\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3zxw26cq.scala:41:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_length\u001b[0m = music_list.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_length\u001b",
      "stdout": "",
      "timestamp": 1660028951
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \")\n        val music_list_size = music_list.size\n        val music_list_size_long = music_list_size.asInstanceOf[Long]\n        val music_list_size_long2 = music_list_size_long.toInt\n        val music_list_size_long3 = music_list_size_long2.toInt\n        val music_list_size_long4 = music_list_size_long3.toInt\n        val music_list_size_long5 = music_list_size_long4.toInt\n        val music_list_size_long6 = music_list_size_long5.toInt\n        val music_list_size_long7 = music_list_size_long6.toInt\n        val music_list_size_long8 = music_list_size_long7.toInt\n        val music_list_size_long9 = music_list_size_long8.toInt\n        val music_list_size_long10 = music_list_size_long9.toInt\n        val music_list_size_long11 = music_list_size_long10.toInt\n        val music_list_size_long12 = music_list_size_long11.toInt\n        val music_list_size_long13 = music_list_size_long12.toInt\n        val music_list_size_long14 = music_list_size_long13.toInt\n        val music_list_size_long15 = music_list_size_long14.toInt\n        val music_list_size_long16 = music_list_size_long15.toInt\n        val music_list_size_long17 = music_list_size_long16.toInt\n        val music_list_size_long18 = music_list_size_long17.toInt\n        val music_list_size_long19 = music_list_size_long18.toInt\n        val music_list_size_long20 = music_list_size_long19.toInt\n        val music_list_size_long21 = music_list_size_long20.toInt\n        val music_list_size_long22 = music_list_size_long21.toInt\n        val music_list_size_long23 = music_list_size_long22.toInt\n        val music_list_size_long24 = music_list_size_long23.toInt\n        val music_list_size_long25 = music_list_size_long24.toInt\n        val music_list_size_long26 = music_list_size_long25.toInt\n        val music_list_size_long27 = music_list_size_long26.toInt\n        val music_list_size_long28 = music_list_size_long27.to\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmplvw3lxm7.scala:43:60 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long28\u001b[0m = music_list_size_long27.to\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mto\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichInt\u001b[0m with types\n\u001b[31m   |\u001b[0m (end: Int, step: Int): scala.collection.immutable.Range.Inclusive\n\u001b[31m   |\u001b[0m (end: Int): scala.collection.immutable.Range.Inclusive\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplvw3lxm7.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028950
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\").map(_.toUpperCase)\n        val notes_count = notes.map(n => n.length).sum\n        val notes_array = notes.map(n => n.toChar)\n        val notes_array = notes_array.map(n => n.toInt)\n        val notes_array = notes_array.map(n => n.toLong)\n        val notes_array = notes_array.map(n => n.toDouble)\n        val notes_array = notes_array.map(n => n.toFloat)\n        val notes_array = notes_array.map(n => n.toInt)\n        val notes_array = notes_array.map(n => n.toLong)\n        val notes_array = notes_array.map(n => n.toDouble)\n        val notes_array = notes_array.map(n => n.toFloat)\n        val notes_array = notes_array.map(n => n.toInt)\n        val notes_array = notes_array.map(n => n.toLong)\n        val notes_array = notes_array.map(n => n.toDouble)\n        val notes_array = notes_array.map(n => n.toFloat)\n        val notes_array = notes_array.map(n => n.toInt)\n        val notes_array = notes_array.map(n => n.toLong)\n        val notes_array = notes_array.map(n => n.toDouble)\n        val notes_array = notes_array.map(n => n.toFloat)\n        val notes_array = notes_array.map(n => n.toInt)\n        val notes_array = notes_array.map(n => n.toLong)\n        val notes_array = notes_array.map(n => n.toDouble)\n        val notes_array = notes_array.map(n => n.toFloat)\n        val notes_array = notes_array.map(n => n.toInt)\n        val notes_array = notes_array.map(n => n.toLong)\n        val notes_array = notes_array.map(n => n.toDouble)\n        val notes_array = notes_array.map(n => n.toFloat)\n        val notes_array = notes_array.map(n => n.toInt)\n        val notes_array = notes_array.map(n => n.toLong)\n        val notes_array = notes_array.map(n => n.toDouble)\n        val notes_array = notes_array.map(n => n.toFloat)\n        val notes_array = notes_array.map(n => n.toInt)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5issh6kf.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.map(\u001b[36mn\u001b[0m => n.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5issh6kf.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.map(\u001b[36mn\u001b[0m => n.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5issh6kf.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.map(\u001b[36mn\u001b[0m => n.toDouble)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5issh6kf.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.map(\u001b[36mn\u001b[0m => n.toFloat)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5issh6kf.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mno",
      "stdout": "",
      "timestamp": 1660028952
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val music_notes = music_string.split(\"o\").map(music_string => {\n                val music_note = music_string.trim\n                val beats = music_note.split(\"|\").map(music_note => {\n                    val beat = music_note.trim\n                    val note = beat.charAt(0).toInt\n                    val length = beat.charAt(1).toInt\n                    val rest = length - note\n                    val rests = rest.toLong * 4\n                    val rests_string = rests.toString\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    val rests_string = rests_string.substring(0, rests_length - 1)\n                    val rests_length = rests_string.length\n                    \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmmgwmp62.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmmgwmp62.scala:68:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmmgwmp62.scala:25:24 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                    \u001b[33mval\u001b[0m \u001b[36mrests_string\u001b[0m = rests_string.substring(\u001b[31m0\u001b[0m, rests_length - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrests_string is already defined as \u001b[33mvalue\u001b[0m \u001b[35mrests_string\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmmgwmp62.scala:26:24 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                    \u001b[33mval\u001b[0m \u001b[36mrests_length\u001b[0m = rests_string.length\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrests_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mrests_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmmgwmp62.scala:27:24 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                    \u001b[33mval\u001b[0m \u001b[36mrests_string\u001b[0m = rests_string.substring(\u001b[31m0\u001b[0m, rests_length - \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrests_string is already defined as \u001b[33mvalue\u001b[0m \u001b[35mrests_string\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmmgwm",
      "stdout": "",
      "timestamp": 1660028946
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n            val beats = rest.split(\"|\").map(_.toLong).sum\n            beats * note\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphtuwf8f7.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.charAt(\u001b[31m0\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).trim\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = rest.split(\u001b[31m\"|\"\u001b[0m).map(_.toLong).sum\n\u001b[31m18 |\u001b[0m            beats * note\n\u001b[31m19 |\u001b[0m        }).sum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028950
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).filter(x => x != \"O\" && x != \"|\")\n        val music_list_length = music_list.length\n        val music_list_beats = music_list.map(x => x.split(\"|\").length).sum\n        val music_list_beats_length = music_list_beats / music_list_length\n        val music_list_beats_length_rounded = music_list_beats_length.toInt\n        val music_list_beats_length_rounded_with_zeros = music_list_beats_length_rounded + music_list_beats_length_rounded % 2\n        val music_list_beats_length_rounded_with_zeros_with_remainder = music_list_beats_length_rounded_with_zeros + 1\n        val music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder = music_list_beats_length_rounded_with_zeros_with_remainder + music_list_beats_length_rounded_with_zeros_with_remainder % 2\n        val music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder_with_remainder = music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder + music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder % 2\n        val music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder_with_remainder_with_remainder = music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder_with_remainder + music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder_with_remainder % 2\n        val music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder_with_remainder_with_remainder_with_remainder = music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder_with_remainder_with_remainder + music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder_with_remainder_with_remainder % 2\n        val music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder_with_remainder_with_remainder_with_remainder_with_remainder = music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder_with_remainder_with_re\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpl7olpm92.scala:25:147 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_length_rounded_with_zeros_with_remainder_with_remainder_with_remainder_with_remainder_with_remainder_with_remainder\u001b[0m = music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder_with_remainder_with_re\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: music_list_beats_length_rounded_with_zeros_with_remainder_with_remainder_with_remainder_with_re\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl7olpm92.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028950
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(_.toInt)\n            beats.map(beat => if (note == \"o\") 4L else 2L * beat)\n        }).flatten.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmpoymmp6mj.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpoymmp6mj.scala:18)\n\tat Problem$.main(tmpoymmp6mj.scala:21)\n\tat Problem.main(tmpoymmp6mj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660028952
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).filter(_.length>0).map(_.toInt)\n        val notes = music_list.sliding(music_list.length/4)\n        val notes_count = notes.map(_.length).sum\n        val notes_last_beats = notes.map(_.last).toList\n        val notes_last_beats_count = notes_last_beats.map(_.length).sum\n        val notes_last_beats_count_with_note = notes_last_beats_count + notes.last.length\n        val notes_last_beats_count_with_note_without_note = notes_last_beats_count_with_note - notes.last.length\n        val notes_last_beats_count_with_note_without_note_with_note = notes_last_beats_count_with_note_without_note - notes.last.length\n        val notes_last_beats_count_with_note_without_note_with_note_without_note = notes_last_beats_count_with_note_without_note_with_note - notes.last.length\n        val notes_last_beats_count_with_note_without_note_with_note_without_note_with_note = notes_last_beats_count_with_note_without_note_with_note_without_note - notes.last.length\n        val notes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note = notes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note - notes.last.length\n        val notes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note_with_note = notes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note_with_note - notes.last.length\n        val notes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note_with_note_without_note = notes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note_with_note_without_note_with_note - notes.last.length\n        val notes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note_with_note_without_note_with_note = notes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note_with_note_without_note_with_note_without_note_with_note - notes.last.length\n        val notes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note_with_note_without_note_with_note_without_note = notes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note_with_note_without_note_with_note_without_note_with_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3hn12wj2.scala:18:60 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_count\u001b[0m = notes_last_beats.map(_.length).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value length is not a member of Int\n\u001b[31m\u001b[31m-- Error: /tmp/tmp3hn12wj2.scala:18:71 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_count\u001b[0m = notes_last_beats.map(_.length).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances: both \u001b[33mobject\u001b[0m \u001b[35mIntIsIntegral\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mNumeric\u001b[0m and \u001b[33mobject\u001b[0m \u001b[35mBigIntIsIntegral\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mNumeric\u001b[0m match type Numeric[B] of parameter num of \u001b[33mmethod\u001b[0m \u001b[35msum\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mIterableOnceOps\u001b[0m\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp3hn12wj2.scala:24:106 --------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note\u001b[0m = notes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note - notes.last.length\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  notes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp3hn12wj2.scala:25:116 --------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_count_with_note_without_note_with_note_without_note_with_note_without_note_with_note\u001b[0m = notes_last_beats_count_with_note_without_note_with_note_without_no",
      "stdout": "",
      "timestamp": 1660028951
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_count = notes.length\n        val notes_array = notes.map(x => x.toInt).toArray\n        val notes_array = notes_array.map(x => if (x == 0) 0 else x)\n        val notes_array = notes_array.map(x => if (x == 1) 1 else x)\n        val notes_array = notes_array.map(x => if (x == 2) 2 else x)\n        val notes_array = notes_array.map(x => if (x == 3) 3 else x)\n        val notes_array = notes_array.map(x => if (x == 4) 4 else x)\n        val notes_array = notes_array.map(x => if (x == 5) 5 else x)\n        val notes_array = notes_array.map(x => if (x == 6) 6 else x)\n        val notes_array = notes_array.map(x => if (x == 7) 7 else x)\n        val notes_array = notes_array.map(x => if (x == 8) 8 else x)\n        val notes_array = notes_array.map(x => if (x == 9) 9 else x)\n        val notes_array = notes_array.map(x => if (x == 10) 10 else x)\n        val notes_array = notes_array.map(x => if (x == 11) 11 else x)\n        val notes_array = notes_array.map(x => if (x == 12) 12 else x)\n        val notes_array = notes_array.map(x => if (x == 13) 13 else x)\n        val notes_array = notes_array.map(x => if (x == 14) 14 else x)\n        val notes_array = notes_array.map(x => if (x == 15) 15 else x)\n        val notes_array = notes_array.map(x => if (x == 16) 16 else x)\n        val notes_array = notes_array.map(x => if (x == 17) 17 else x)\n        val notes_array = notes_array.map(x => if (x == 18) 18 else x)\n        val notes_array = notes_array.map(x => if (x == 19) 19 else x)\n        val notes_array = notes_array.map(x => if (x == 20) 20 else x)\n        val notes_array = notes_array.map(x => if (x == 21) 21 else x)\n        val notes_array = notes_array.map(x => if (x == 22) 22 else x)\n        val notes_array = notes_array.map(x => if (x == 23) 23 else x)\n        val notes_array = notes_array.map(x => if (x == 24) 24 else x)\n        val notes_array = notes_array.\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpj2j3hvjd.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj2j3hvjd.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x == \u001b[31m0\u001b[0m) \u001b[31m0\u001b[0m \u001b[33melse\u001b[0m x)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj2j3hvjd.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x == \u001b[31m1\u001b[0m) \u001b[31m1\u001b[0m \u001b[33melse\u001b[0m x)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj2j3hvjd.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x == \u001b[31m2\u001b[0m) \u001b[31m2\u001b[0m \u001b[33melse\u001b[0m x)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpj2j3hvjd.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x == \u001b[31m3\u001b[0m) \u001b[31m3\u001b[0m \u001b[33melse\u001b[0",
      "stdout": "",
      "timestamp": 1660028951
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val notes = music_string.split(\"\\\\ \").map(music_string => {\n                val note = music_string.charAt(0).toLowerCase\n                val beats = music_string.substring(1).toLong\n                beats\n            }).toList\n            notes.sum\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2zv9l4_q.scala:16:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.charAt(\u001b[31m0\u001b[0m).toLowerCase\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value toLowerCase is not a member of Char\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028950
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase()).filterNot(_.isEmpty)\n        val notes_count = notes.map(n => n.length).sum\n        val beats_count = notes.map(n => n.take(notes_count).length)\n        val beats = beats_count.zip(notes_count).map(n => n._1 - n._2)\n        val beats_sum = beats.sum\n        val notes_sum = notes.sum\n        val notes_count = notes.map(_.length).sum\n        val notes_sum = notes.sum\n        val notes_count_2 = notes.map(_.take(notes_count).length).sum\n        val notes_sum_2 = notes.sum\n        val notes_count_3 = notes.map(_.take(notes_count_2).length).sum\n        val notes_sum_3 = notes.sum\n        val notes_count_4 = notes.map(_.take(notes_count_3).length).sum\n        val notes_sum_4 = notes.sum\n        val notes_count_5 = notes.map(_.take(notes_count_4).length).sum\n        val notes_sum_5 = notes.sum\n        val notes_count_6 = notes.map(_.take(notes_count_5).length).sum\n        val notes_sum_6 = notes.sum\n        val notes_count_7 = notes.map(_.take(notes_count_6).length).sum\n        val notes_sum_7 = notes.sum\n        val notes_count_8 = notes.map(_.take(notes_count_7).length).sum\n        val notes_sum_8 = notes.sum\n        val notes_count_9 = notes.map(_.take(notes_count_8).length).sum\n        val notes_sum_9 = notes.sum\n        val notes_count_10 = notes.map(_.take(notes_count_9).length).sum\n        val notes_sum_10 = notes.sum\n        val notes_count_11 = notes.map(_.take(notes_count_10).length).sum\n        val notes_sum_11 = notes.sum\n        val notes_count_12 = notes.map(_.take(notes_count_11).length).sum\n        val notes_sum_12 = notes.sum\n        val notes_count_13 = notes.map(_.take(notes_count_12).length).sum\n        val notes_sum_13 = notes.sum\n        val notes_count_14 = notes.map(_.take(notes_count_13).length).sum\n        val notes_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5ow_5hyi.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5ow_5hyi.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_count\u001b[0m = notes.map(_.length).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_count is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_count\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5ow_5hyi.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_sum\u001b[0m = notes.sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_sum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_sum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ow_5hyi.scala:17:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = beats_count.zip(notes_count).map(\u001b[36mn\u001b[0m => n._1 - n._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (notes_count : Int)\n\u001b[31m   |\u001b[0m                                    Required: IterableOnce[Any]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp5ow_5hyi.scala:17:63 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = beats_count.zip(notes_count).map(\u001b[36mn\u001b[0m => n._1 - n._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m-\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Double\n\u001b[31m   |",
      "stdout": "",
      "timestamp": 1660028953
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_size_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnjkk66h1.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjkk66h1.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028950
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length>0).map(_.toInt)\n        val notes = music_list.map(music_note => music_note match {\n            case 0 => 0\n            case 1 => 1\n            case 2 => 2\n            case 3 => 3\n            case 4 => 4\n            case 5 => 5\n            case 6 => 6\n            case 7 => 7\n            case 8 => 8\n            case 9 => 9\n            case 10 => 10\n            case 11 => 11\n            case 12 => 12\n            case 13 => 13\n            case 14 => 14\n            case 15 => 15\n            case 16 => 16\n            case 17 => 17\n            case 18 => 18\n            case 19 => 19\n            case 20 => 20\n            case 21 => 21\n            case 22 => 22\n            case 23 => 23\n            case 24 => 24\n            case 25 => 25\n            case 26 => 26\n            case 27 => 27\n            case 28 => 28\n            case 29 => 29\n            case 30 => 30\n            case 31 => 31\n            case 32 => 32\n            case 33 => 33\n            case 34 => 34\n            case 35 => 35\n            case 36 => 36\n            case 37 => 37\n            case 38 => 38\n            case 39 => 39\n            case 40 => 40\n            case 41 => 41\n            case 42 => 42\n            case 43 => 43\n            case 44 => 44\n            case 45 => 45\n            case 46 => 46\n            case 47 => 47\n            case 48 => 48\n            case 49 => 49\n            case 50 => 50\n            case 51 => 51\n            case 52 => 52\n            case 53 => 53\n            case 54 => 54\n            case 55 => 55\n            case 56 => 56\n            case 57 => 57\n            case 58 => 58\n            case 59 => 59\n            case 60 => 60\n            case 61 => 61\n            case 62 => 62\n            case 63 => 63\n            case 64 => 64\n            case 65 => 65\n            case 66 => 66\n            case 67 => 67\n            case 68 => 68\n            case 69 => 69\n            case 70 => 70\n            case 71 => 71\n            case 72 => 72\n            case 73 => 73\n            case 74 => 74\n            case 75 => 75\n            case 76 => 76\n            case 77 => 77\n            case 78 => 78\n            case 79 => 79\n            case 80 => 80\n            case 81 => 81\n            case 82 => 82\n            case 83 => 83\n            case 84 => 84\n            case 85\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpynb6sqa0.scala:102:4 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m102 |\u001b[0m    }\n\u001b[31m\u001b[31m    |\u001b[0m    ^\u001b[0m\n\u001b[31m    |\u001b[0m    '=>' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpynb6sqa0.scala:103:4 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m103 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m    |\u001b[0m    ^^^\u001b[0m\n\u001b[31m    |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpynb6sqa0.scala:112:0 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m112 |\u001b[0m\n\u001b[31m\u001b[31m    |\u001b[0m^\u001b[0m\n\u001b[31m    |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynb6sqa0.scala:111:1 --------------------\u001b[0m\u001b[0m\n\u001b[31m111 |\u001b[0m}\n\u001b[31m\u001b[31m    |\u001b[0m ^\u001b[0m\n\u001b[31m    |\u001b[0m Found:    Unit\n\u001b[31m    |\u001b[0m Required: List[Long]\n\u001b[31m    |\u001b[0m\n\u001b[31m    |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660028951
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\").map(_.toInt).toList\n        val music_length = music_list.size\n        val music_beats = music_list.map(music_length /).sum\n        val music_notes = music_list.map(music_length % ).sum\n        val music_notes_beats = music_notes * (music_beats / music_length)\n        val music_notes_beats_length = music_notes_beats.toLong\n        val music_notes_beats_length = music_notes_beats_length / music_length\n        val music_notes_beats_length = music_notes_beats_length % music_length\n        val music_notes_beats_length = music_notes_beats_length * music_length\n        val music_notes_beats_length = music_notes_beats_length / music_length\n        val music_notes_beats_length = music_notes_beats_length % music_length\n        val music_notes_beats_length = music_notes_beats_length * music_length\n        val music_notes_beats_length = music_notes_beats_length / music_length\n        val music_notes_beats_length = music_notes_beats_length % music_length\n        val music_notes_beats_length = music_notes_beats_length * music_length\n        val music_notes_beats_length = music_notes_beats_length / music_length\n        val music_notes_beats_length = music_notes_beats_length % music_length\n        val music_notes_beats_length = music_notes_beats_length * music_length\n        val music_notes_beats_length = music_notes_beats_length / music_length\n        val music_notes_beats_length = music_notes_beats_length % music_length\n        val music_notes_beats_length = music_notes_beats_length * music_length\n        val music_notes_beats_length = music_notes_beats_length / music_length\n        val music_notes_beats_length = music_notes_beats_length % music_length\n        val music_notes_beats_length = music_notes_beats_length * music_length\n        val music_notes_beats_length = music_notes_beats_length / music_length\n        val music_notes_beats_length = music_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp75sun1l3.scala:16:55 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_beats\u001b[0m = music_list.map(music_length /).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m')'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp75sun1l3.scala:17:56 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes\u001b[0m = music_list.map(music_length % ).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m')'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp75sun1l3.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length / music_length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp75sun1l3.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length % music_length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp75sun1l3.scala:22:12 ---",
      "stdout": "",
      "timestamp": 1660028951
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val beats = rest.split(\"|\").map(rest => {\n                val beat = rest.substring(0, 1)\n                val rest = rest.substring(1, rest.length)\n                val restLength = rest.length\n                val restString = rest.substring(0,restLength)\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val restString = restString.toUpperCase\n                val \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpb22im02o.scala:69:19 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m                \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                   pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb22im02o.scala:71:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb22im02o.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n                beat.toLong * 4\n            }).sum\n            note.toLong * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt_x1lsvg.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m17 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeat\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m18 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m)\n\u001b[31m19 |\u001b[0m                beat.toLong * \u001b[31m4\u001b[0m\n\u001b[31m20 |\u001b[0m            }).sum\n\u001b[31m21 |\u001b[0m            note.toLong * beats\n\u001b[31m22 |\u001b[0m        }).sum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028949
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_length = music_list_size / 4\n        val music_list_remainder = music_list_size % 4\n        val music_list_last_beat = music_list_length - music_list_remainder\n        val music_list_last_beat_length = music_list_last_beat * 4\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpsaj89yco.scala:42:41 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_last_beat_length\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsaj89yco.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_last_beat_length\u001b[0m = music_list_last_beat_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_last_beat_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_last_beat_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsaj89yco.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_last_beat_length\u001b[0m = music_list_last_beat_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_last_beat_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_last_beat_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsaj89yco.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_last_beat_length\u001b[0m = music_list_last_beat_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_last_beat_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_last_beat_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m--",
      "stdout": "",
      "timestamp": 1660028950
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val beats = rest.split(\"|\").map(_.toLong).sum\n            beats.toLong\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmpnd0me9qo.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpnd0me9qo.scala:19)\n\tat Problem$.main(tmpnd0me9qo.scala:22)\n\tat Problem.main(tmpnd0me9qo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660028953
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\")\n            val beats = notes.map(note => {\n                val note = note.trim()\n                note.charAt(0).toInt\n            }).sum\n            beats\n        }).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8sd8yum5.scala:17:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = note.trim()\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mnote\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8sd8yum5.scala:19:14 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            }).sum\n\u001b[31m\u001b[31m   |\u001b[0m              ^\u001b[0m\n\u001b[31m   |\u001b[0m              No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m              where:    B is a type variable\n\u001b[31m\u001b[31m-- Error: /tmp/tmp8sd8yum5.scala:21:10 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        }).sorted\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m          where:    B is a type variable\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028950
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val music_note = music_string.substring(0, 1)\n            val music_rest = music_string.substring(1, music_string.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1, music_rest.length)\n            val music_rest = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpf1k5uqo1.scala:49:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_rest\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf1k5uqo1.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpf1k5uqo1.scala:60:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf1k5uqo1.scala:17:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_rest\u001b[0m = music_rest.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_rest is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_rest\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf1k5uqo1.scala:18:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_rest\u001b[0m = music_rest.substring(\u001b[31m1\u001b[0m, music_rest.length)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_rest is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_rest\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf1k5uqo1.scala:19:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_rest\u001b[0m = music_rest.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m       ",
      "stdout": "",
      "timestamp": 1660028956
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\").map(_.toInt)\n        val music_list_size = music_list.size\n        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole = music_list_size.toLong\n        val music_list_size_whole_half = music_list_size_whole / 2\n        val music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole = music_list_size_whole / 8\n        val music_list_size_whole_whole_half = music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole / 16\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole / 64\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole / 32\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp0qu6vcn.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whole_whole_half\u001b[0m = music_list_size_whole_whole_whole_whole / \u001b[31m16\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_whole_whole_whole_whole_half is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_whole_whole_whole_whole_half\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp0qu6vcn.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whole_whole_quarter\u001b[0m = music_list_size_whole_whole_whole_whole / \u001b[31m32\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_whole_whole_whole_whole_quarter is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_whole_whole_whole_whole_quarter\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp0qu6vcn.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whole_whole_whole\u001b[0m = music_list_size_whole_whole_whole_whole / \u001b[31m64\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_whole_whole_whole_whole_whole is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_whole_whole_whole_whole_whole\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpp0qu6vcn.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33",
      "stdout": "",
      "timestamp": 1660028960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\").map(_.toInt).toList\n        val note_count = music_list.count(_ == 0)\n        val note_list = music_list.take(note_count).toList\n        val note_counts = note_list.count(_ != 0)\n        val note_counts_map = note_list.groupBy(_ != 0).mapValues(_.size)\n        val note_counts_map_sorted = note_counts_map.toSeq.sortBy(_._2).reverse\n        val note_counts_map_sorted_with_zero = note_counts_map_sorted.map(_._1).padTo(note_count, 0).toList\n        val note_counts_map_sorted_with_zero_with_zero = note_counts_map_sorted_with_zero.map(_ + 0).toList\n        val note_counts_map_sorted_with_zero_with_zero_with_zero = note_counts_map_sorted_with_zero_with_zero.map(_ + 0).toList\n        val note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero = note_counts_map_sorted_with_zero_with_zero_with_zero.map(_ + 0).toList\n        val note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero = note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero.map(_ + 0).toList\n        val note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero = note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_ + 0).toList\n        val note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero = note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_ + 0).toList\n        val note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero = note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_ + 0).toList\n        val note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero = note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_ + 0).toList\n        val note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero = note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_ + 0).toList\n        val note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero = note_counts_map_sorted_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzhhq5w55.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnote_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\u001b[0m = note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero.map(_ + \u001b[31m0\u001b[0m).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnote_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzhhq5w55.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnote_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\u001b[0m = note_counts_map_sorted_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnote_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  note_counts_map_sorted_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzhhq5w55.scala:21:96 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnote_counts_map_sorted_with_zero_",
      "stdout": "",
      "timestamp": 1660028967
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\")\n            val beats = notes.map(note => {\n                val notes = note.split(\"o\")\n                notes.map(note => {\n                    val notes = note.split(\"|\")\n                    notes.map(note => {\n                        val notes = note.split(\"o\")\n                        notes.map(note => {\n                            val notes = note.split(\"|\")\n                            notes.map(note => {\n                                val notes = note.split(\"o\")\n                                notes.map(note => {\n                                    val notes = note.split(\"|\")\n                                    notes.map(note => {\n                                        val notes = note.split(\"o\")\n                                        notes.map(note => {\n                                            val notes = note.split(\"|\")\n                                            notes.map(note => {\n                                                val notes = note.split(\"o\")\n                                                notes.map(note => {\n                                                    val notes = note.split(\"|\")\n                                                    notes.map(note => {\n                                                        val notes = note.split(\"o\")\n                                                        notes.map(note => {\n                                                            val notes = note.split(\"|\")\n                                                            notes.map(note => {\n                                                                val notes = note.split(\"o\")\n                                                                notes.map(note => {\n                                                                    val notes = note.split(\"|\")\n                                                                    notes.map(note => {\n                                                                        val notes = note.split(\"o\")\n                                                                        notes.map(note => {\n                                                                            val notes = note.split(\"|\")\n                                                                            notes.map(note => {\n                                                                                val notes = note.split(\"o\")\n                                                                                notes.map(note => {\n                                                                                    val notes = note.split(\"|\")\n                                                                                    notes.map(note => {\n                                                                                        val notes = note.split(\"o\")\n                                                                                        notes.map(note => {\n                                                                                            val notes = note.split(\"|\")\n                                                                                            notes.map(note => {\n                                                                                                val notes = note.split(\"o\")\n                                                                                                notes.map(note => {\n                                                                                                    val notes = note.split(\"|\")\n                                                                                                    notes.map(note => {\n                                                                                                        val notes = note.split(\"o\")\n                                                                                                        notes.map(note => {\n                                                                                                            val notes = note.split(\"|\")\n                                                                                                            notes.map(note => {\n                                                                                                                val notes = note.split(\"o\")\n                                                                                                                notes.map(note => {\n                                                                                                                    val notes = note.split(\"|\")\n                                                                                                                    notes.map(note => {\n                                                                                                                        val notes = note.split(\"o\")\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgoyze0tl.scala:71:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgoyze0tl.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028960
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1, music_string.length).split(\"|\").map(_.toLong)\n            beats.map(beat => if (note == \"o\") 4l else beat.toLong)\n        }).flatten.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmp6apdxtun.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmp6apdxtun.scala:18)\n\tat Problem$.main(tmp6apdxtun.scala:21)\n\tat Problem.main(tmp6apdxtun.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660028965
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n        val music_list_size = music_list.size\n        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole = music_list_size.toLong\n        val music_list_size_quarter2 = music_list_size_quarter / 2\n        val music_list_size_quarter4 = music_list_size_quarter / 4\n        val music_list_size_whole2 = music_list_size_whole / 2\n        val music_list_size_whole4 = music_list_size_whole / 4\n        val music_list_size_whole8 = music_list_size_whole / 8\n        val music_list_size_whole16 = music_list_size_whole / 16\n        val music_list_size_whole32 = music_list_size_whole / 32\n        val music_list_size_whole64 = music_list_size_whole / 64\n        val music_list_size_whole128 = music_list_size_whole / 128\n        val music_list_size_whole256 = music_list_size_whole / 256\n        val music_list_size_whole512 = music_list_size_whole / 512\n        val music_list_size_whole1024 = music_list_size_whole / 1024\n        val music_list_size_whole2048 = music_list_size_whole / 2048\n        val music_list_size_whole4096 = music_list_size_whole / 4096\n        val music_list_size_whole8192= music_list_size_whole / 8192\n        val music_list_size_whole16384= music_list_size_whole / 16384\n        val music_list_size_whole32768= music_list_size_whole / 32768\n        val music_list_size_whole65536= music_list_size_whole / 65536\n        val music_list_size_whole131072= music_list_size_whole / 131072\n        val music_list_size_whole262144= music_list_size_whole / 262144\n        val music_list_size_whole524288= music_list_size_whole / 524288\n        val music_list_size_whole1048576= music_list_size_whole / 1048576\n        val music_list_size_whole2097152= music_list_size_whole / 2097152\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpw9ruhv0s.scala:42:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw9ruhv0s.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028962
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, 2)\n            val beats = rest.split(\"|\").map(_.toLong).sum\n            beats.toLong\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmpip4tnxjf.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpip4tnxjf.scala:19)\n\tat Problem$.main(tmpip4tnxjf.scala:22)\n\tat Problem.main(tmpip4tnxjf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660028966
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n        val notes = music_list.filter(_ != \"o\")\n        val notes_length = notes.length\n        val beats = notes_length / 4\n        val notes_last_beats = notes.takeRight(notes_length).map(_.toLong).sum\n        val notes_last_beats_length = notes_last_beats / 4\n        val notes_last_beats_remainder = notes_last_beats % 4\n        val notes_last_beats_remainder_length = notes_last_beats_remainder / 4\n        val notes_last_beats_remainder_remainder = notes_last_beats_remainder % 4\n        val notes_last_beats_remainder_remainder_length = notes_last_beats_remainder_remainder / 4\n        val notes_last_beats_remainder_remainder_remainder = notes_last_beats_remainder_remainder % 4\n        val notes_last_beats_remainder_remainder_remainder_length = notes_last_beats_remainder_remainder_remainder / 4\n        val notes_last_beats_remainder_remainder_remainder_remainder = notes_last_beats_remainder_remainder_remainder % 4\n        val notes_last_beats_remainder_remainder_remainder_remainder_length = notes_last_beats_remainder_remainder_remainder_remainder / 4\n        val notes_last_beats_remainder_remainder_remainder_remainder_remainder = notes_last_beats_remainder_remainder_remainder_remainder % 4\n        val notes_last_beats_remainder_remainder_remainder_remainder_remainder = notes_last_beats_remainder_remainder_remainder_remainder % 4\n        val notes_last_beats_remainder_remainder_remainder_remainder_remainder = notes_last_beats_remainder_remainder_remainder_remainder % 4\n        val notes_last_beats_remainder_remainder_remainder_remainder_remainder = notes_last_beats_remainder_remainder_remainder_remainder_remainder % 4\n        val notes_last_beats_remainder_remainder_remainder_remainder_remainder_length = notes_last_beats_remainder_remainder_remainder_remainder_remainder_remainder / 4\n        val notes_last_beats_remainder_remainder_remainder_remainder_remainder_remainder = notes_last_beats_remainder_remainder_remainder_remainder_remainder_remainder % 4\n        val notes_last_beats_remainder_remainder_remainder_remainder_remainder_remain\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7jqw1rm6.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7jqw1rm6.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_remainder_remainder_remainder_remainder_remainder\u001b[0m = notes_last_beats_remainder_remainder_remainder_remainder % \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_last_beats_remainder_remainder_remainder_remainder_remainder is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_last_beats_remainder_remainder_remainder_remainder_remainder\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7jqw1rm6.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_remainder_remainder_remainder_remainder_remainder\u001b[0m = notes_last_beats_remainder_remainder_remainder_remainder % \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_last_beats_remainder_remainder_remainder_remainder_remainder is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_last_beats_remainder_remainder_remainder_remainder_remainder\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7jqw1rm6.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_remainder_remainder_remainder_remainder_remainder\u001b[0m = notes_last_beats_remainder_remainder_remainder_remainder_remainder % \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660028962
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(x => x.toInt)\n        val music_list_size = music_list.size\n        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole = music_list_size.toLong\n        val music_list_size_quarter_whole = music_list_size_quarter / 2\n        val music_list_size_half_whole = music_list_size_half / 2\n        val music_list_size_quarter_half_whole = music_list_size_quarter_whole / 2\n        val music_list_size_half_quarter_whole = music_list_size_half_whole / 2\n        val music_list_size_quarter_half_quarter_whole = music_list_size_quarter_half_whole / 4\n        val music_list_size_half_quarter_half_quarter_whole = music_list_size_half_quarter_whole / 8\n        val music_list_size_half_quarter_half_quarter_quarter_whole = music_list_size_half_quarter_half_whole / 16\n        val music_list_size_half_quarter_half_quarter_quarter_quarter_whole = music_list_size_half_quarter_half_quarter_whole / 32\n        val music_list_size_half_quarter_half_quarter_quarter_quarter_quarter_whole = music_list_size_half_quarter_half_quarter_quarter_whole / 64\n        val music_list_size_half_quarter_half_quarter_quarter_quarter_quarter_whole = music_list_size_half_quarter_half_quarter_quarter_whole / 128\n        val music_list_size_half_quarter_half_quarter_quarter_quarter_quarter_quarter_whole = music_list_size_half_quarter_half_quarter_quarter_quarter_whole / 256\n        val music_list_size_half_quarter_half_quarter_quarter_quarter_quarter_quarter_quarter_whole = music_list_size_half_quarter_half_quarter_quarter_quarter_quarter_whole / 512\n        val music_list_size_half_quarter_half_quarter_quarter_quarter_quarter_quarter_quarter_quarter_whole = music_list_size_half_quarter_half_quarter_quarter_quarter_quarter_whole\n        val music_list_size_half_quarter_half_quarter_quarter_quarter_quarter_quarter_quarter_quarter_quarter_whole = music_list_size_half_quarter_half_quar\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxgixtikp.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_half_quarter_half_quarter_quarter_quarter_quarter_whole\u001b[0m = music_list_size_half_quarter_half_quarter_quarter_whole / \u001b[31m128\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_half_quarter_half_quarter_quarter_quarter_quarter_whole is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_half_quarter_half_quarter_quarter_quarter_quarter_whole\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxgixtikp.scala:25:70 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_half_quarter_half_quarter_quarter_whole\u001b[0m = music_list_size_half_quarter_half_whole / \u001b[31m16\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: music_list_size_half_quarter_half_whole\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxgixtikp.scala:32:118 -----------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_half_quarter_half_quarter_quarter_quarter_quarter_quarter_quarter_quarter_quarter_whole\u001b[0m = music_list_size_half_quarter_half_quar\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: music_list_size_half_quarter_half_quar\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxgixtikp.scala:33:5 -",
      "stdout": "",
      "timestamp": 1660028962
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).filter(_.length == 1).map(x => x.toInt).toList\n        val music_list_length = music_list.length\n        val music_list_without_lasts = music_list.filterNot(x => x == music_list.length)\n        val music_list_without_lasts_length = music_list_without_lasts.length\n        val music_list_without_lasts_without_lasts = music_list_without_lasts.filterNot(x => x == music_list_without_lasts_length)\n        val music_list_without_lasts_without_lasts_without_lasts = music_list_without_lasts_without_lasts.filterNot(x => x == music_list_without_lasts_without_lasts_length)\n        val music_list_without_lasts_without_lasts_without_lasts_without_lasts = music_list_without_lasts_without_lasts_without_lasts.filterNot(x => x == music_list_without_lasts_without_lasts_without_lasts_length)\n        val music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts = music_list_without_lasts_without_lasts_without_lasts_without_lasts.filterNot(x => x == music_list_without_lasts_without_lasts_without_lasts_without_lasts_length)\n        val music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts = music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts.filterNot(x => x == music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_length)\n        val music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts = music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts.filterNot(x => x == music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_length)\n        val music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts = music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts.filterNot(x => x == music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_length)\n        val music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts = music_list_without_lasts_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdoptwy31.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts\u001b[0m = music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts.filterNot(\u001b[36mx\u001b[0m => x == music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_length)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdoptwy31.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts\u001b[0m = music_list_without_lasts_\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  music_list_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts_without_lasts\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in ",
      "stdout": "",
      "timestamp": 1660028964
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val notes = music_string.split(\"o\").map(music_string => {\n                val note = music_string.trim\n                val beats = note.split(\"|\").map(music_string => {\n                    val beat = music_string.trim\n                    beat.split(\"\\\\|\").map(music_string => {\n                        val beat = music_string.trim\n                        beat.split(\"\\\\|\").map(music_string => {\n                            val beat = music_string.trim\n                            beat.split(\"\\\\|\").map(music_string => {\n                                val beat = music_string.trim\n                                beat.split(\"\\\\|\").map(music_string => {\n                                    val beat = music_string.trim\n                                    beat.split(\"\\\\|\").map(music_string => {\n                                        val beat = music_string.trim\n                                        beat.split(\"\\\\|\").map(music_string => {\n                                            val beat = music_string.trim\n                                            beat.split(\"\\\\|\").map(music_string => {\n                                                val beat = music_string.trim\n                                                beat.split(\"\\\\|\").map(music_string => {\n                                                    val beat = music_string.trim\n                                                    beat.split(\"\\\\|\").map(music_string => {\n                                                        val beat = music_string.trim\n                                                        beat.split(\"\\\\|\").map(music_string => {\n                                                            val beat = music_string.trim\n                                                            beat.split(\"\\\\|\").map(music_string => {\n                                                                val beat = music_string.trim\n                                                                beat.split(\"\\\\|\").map(music_string => {\n                                                                    val beat = music_string.trim\n                                                                    beat.split(\"\\\\|\").map(music_string => {\n                                                                        val beat = music_string.trim\n                                                                        beat.split(\"\\\\|\").map(music_string => {\n                                                                            val beat = music_string.trim\n                                                                            beat.split(\"\\\\|\").map(music_string => {\n                                                                                val beat = music_string.trim\n                                                                                beat.split(\"\\\\|\").map(music_string => {\n                                                                                    val beat = music_string.trim\n                                                                                    beat.split(\"\\\\|\").map(music_string => {\n                                                                                        val beat = music_string.trim\n                                                                                        beat.split(\"\\\\|\").map(music_string => {\n                                                                                            val beat = music_string.trim\n                                                                                            beat.split(\"\\\\|\").map(music_string => {\n                                                                                                val beat = music_string.trim\n                                                                                                beat.split(\"\\\\|\").map(music_string => {\n                                                                                                    \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp30cdj8bm.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp30cdj8bm.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028961
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val music_notes = music_string.split(\"|\")\n            val music_notes_length = music_notes.length\n            val music_notes_beats = music_notes.map(music_note => {\n                val music_note_length = music_note.length\n                val music_note_beats = music_note.split(\"o\").map(music_note => {\n                    val music_note_beats = music_note.length\n                    music_note_beats\n                }).toList\n                music_note_beats\n            }).toList\n            music_notes_beats\n        }).flatten.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkkd0nyaw.scala:26:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_notes\u001b[0m = music_string.split(\u001b[31m\"|\"\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_notes_length\u001b[0m = music_notes.length\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats\u001b[0m = music_notes.map(\u001b[36mmusic_note\u001b[0m => {\n\u001b[31m18 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmusic_note_length\u001b[0m = music_note.length\n\u001b[31m19 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmusic_note_beats\u001b[0m = music_note.split(\u001b[31m\"o\"\u001b[0m).map(\u001b[36mmusic_note\u001b[0m => {\n\u001b[31m20 |\u001b[0m                    \u001b[33mval\u001b[0m \u001b[36mmusic_note_beats\u001b[0m = music_note.length\n\u001b[31m21 |\u001b[0m                    music_note_beats\n\u001b[31m22 |\u001b[0m                }).toList\n\u001b[31m23 |\u001b[0m                music_note_beats\n\u001b[31m24 |\u001b[0m            }).toList\n\u001b[31m25 |\u001b[0m            music_notes_beats\n\u001b[31m26 |\u001b[0m        }).flatten.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    List[List[Int]]\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028964
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val notes = music_string.split(\"\\\\ \").map(music_string => {\n                val note = music_string.charAt(0).toLowerCase\n                val beats = music_string.substring(1).toLong\n                beats\n            })\n            notes.sum\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphtqgampr.scala:16:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.charAt(\u001b[31m0\u001b[0m).toLowerCase\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value toLowerCase is not a member of Char\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028964
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.nonEmpty).toList\n        val notes = music_list.map(music_note => {\n            val note = music_note.split(\"|\")(0)\n            val beats = music_note.split(\"|\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).split(\"\\\\.\")(1).\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv2pd7l9b.scala:18:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv2pd7l9b.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv2pd7l9b.scala:28:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv2pd7l9b.scala:27:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660028964
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_count = notes.length\n        val notes_beats = notes.map(x => x.split(\"o\")).map(x => x.length)\n        val notes_beats_count = notes_beats.sum\n        val notes_beats_count_2 = notes_beats_count.toInt\n        val notes_beats_count_3 = notes_beats_count_2.toInt\n        val notes_beats_count_4 = notes_beats_count_3.toInt\n        val notes_beats_count_5 = notes_beats_count_4.toInt\n        val notes_beats_count_6 = notes_beats_count_5.toInt\n        val notes_beats_count_7 = notes_beats_count_6.toInt\n        val notes_beats_count_8 = notes_beats_count_7.toInt\n        val notes_beats_count_9 = notes_beats_count_8.toInt\n        val notes_beats_count_10 = notes_beats_count_9.toInt\n        val notes_beats_count_11 = notes_beats_count_10.toInt\n        val notes_beats_count_12 = notes_beats_count_11.toInt\n        val notes_beats_count_13 = notes_beats_count_12.toInt\n        val notes_beats_count_14 = notes_beats_count_13.toInt\n        val notes_beats_count_15 = notes_beats_count_14.toInt\n        val notes_beats_count_16 = notes_beats_count_15.toInt\n        val notes_beats_count_17 = notes_beats_count_16.toInt\n        val notes_beats_count_18 = notes_beats_count_17.toInt\n        val notes_beats_count_19 = notes_beats_count_18.toInt\n        val notes_beats_count_20 = notes_beats_count_19.toInt\n        val notes_beats_count_21 = notes_beats_count_20.toInt\n        val notes_beats_count_22 = notes_beats_count_21.toInt\n        val notes_beats_count_23 = notes_beats_count_22.toInt\n        val notes_beats_count_24 = notes_beats_count_23.toInt\n        val notes_beats_count_25 = notes_beats_count_24.toInt\n        val notes_beats_count_26 = notes_beats_count_25.toInt\n        val notes_beats_count_27 = notes_beats_count_26.toInt\n        \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhifq6hc.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028964
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n        val notes_beats = notes.map(_.length.toInt)\n        val notes_beats_length = notes_beats.sum\n        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5d638c1u.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length\u001b[0m = notes_beats_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5d638c1u.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length\u001b[0m = notes_beats_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5d638c1u.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length\u001b[0m = notes_beats_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5d638c1u.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length\u001b[0m = notes_beats_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5d638c1u.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m  ",
      "stdout": "",
      "timestamp": 1660028965
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_count = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_last_beat = notes_array.last\n        val notes_last_beats = notes_last_beat.toLong\n        val notes_last_beats_array = notes_last_beats.toArray\n        val notes_last_beats_array_length = notes_last_beats_array.length\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        val notes_last_beats_array_length = notes_last_beats_array_length.toInt\n        \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_y70mytg.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_array_length\u001b[0m = notes_last_beats_array_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_last_beats_array_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_last_beats_array_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_y70mytg.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_array_length\u001b[0m = notes_last_beats_array_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_last_beats_array_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_last_beats_array_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_y70mytg.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_array_length\u001b[0m = notes_last_beats_array_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_last_beats_array_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_last_beats_array_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_y70mytg.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_last_beats_array_length\u001b[0m = notes_last_beats_array_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_last_beats_array_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnote",
      "stdout": "",
      "timestamp": 1660028965
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\")\n            val beats = notes.map(note => {\n                val note = note.trim\n                val note = note.charAt(0)\n                val beats = note.charAt(1).toInt\n                beats\n            })\n            beats.sum\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5kl18d56.scala:18:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = note.charAt(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnote is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnote\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5kl18d56.scala:21:14 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            })\n\u001b[31m\u001b[31m   |\u001b[0m              ^\u001b[0m\n\u001b[31m   |\u001b[0m              No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m              where:    B is a type variable\n\u001b[31m\u001b[31m-- Error: /tmp/tmp5kl18d56.scala:23:10 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        })\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m          where:    B is a type variable\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028966
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_length = music_list.length\n        val music_list_beats = music_list.map(music_string => {\n            val music_string_length = music_string.length\n            val music_string_beats = music_string.split(\"o\").length\n            music_string_beats * music_string_length\n        }).toList\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_length = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_length\n        val music_list_beats_length = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_length\n        val music_list_beats_length = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_length\n        val music_list_beats_length = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_length\n        val music_list_beats_length = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_length\n        val music_list_beats_length = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_length\n        val music_list_beats_length = music_list_beats_length / 4\n        val music_list_beats_length = music_list_beats_length * 4\n        val music_list_beats_length = music_list_beats_length + music_list_beats_length\n        val music_list_beats_length = music_list_beats_length / 4\n        val music_list_beats_length = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpunifm91r.scala:44:37 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_length\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                     expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpunifm91r.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_length\u001b[0m = music_list_beats_length / \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpunifm91r.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_length\u001b[0m = music_list_beats_length * \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpunifm91r.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_length\u001b[0m = music_list_beats_length + music_list_beats_length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpunifm9",
      "stdout": "",
      "timestamp": 1660028965
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_size_str = music_list_size.toString\n        val music_list_size_int = music_list_size_str.asInstanceOf[Int]\n        val music_list_size_long = music_list_size_int.toLong\n        val music_list_size_long2 = music_list_size_long * music_list_size_long\n        val music_list_size_long3 = music_list_size_long2 * music_list_size_long\n        val music_list_size_long4 = music_list_size_long3 * music_list_size_long\n        val music_list_size_long5 = music_list_size_long4 * music_list_size_long\n        val music_list_size_long6 = music_list_size_long5 * music_list_size_long\n        val music_list_size_long7 = music_list_size_long6 * music_list_size_long\n        val music_list_size_long8 = music_list_size_long7 * music_list_size_long\n        val music_list_size_long9 = music_list_size_long8 * music_list_size_long\n        val music_list_size_long10 = music_list_size_long9 * music_list_size_long\n        val music_list_size_long11 = music_list_size_long10 * music_list_size_long\n        val music_list_size_long12 = music_list_size_long11 * music_list_size_long\n        val music_list_size_long13 = music_list_size_long12 * music_list_size_long\n        val music_list_size_long14 = music_list_size_long13 * music_list_size_long\n        val music_list_size_long15 = music_list_size_long14 * music_list_size_long\n        val music_list_size_long16 = music_list_size_long15 * music_list_size_long\n        val music_list_size_long17 = music_list_size_long16 * music_list_size_long\n        val music_list_size_long18 = music_list_size_long17 * music_list_size_long\n        val music_list_size_long19 = music_list_size_long18 * music_list_size_long\n        val music_list_size_long20 = music_list_size_long19 * music_list_size_long\n        val music_list_size_long21 = music_list_size_long20 * music_list_size_long\n        val music_list_size_long22 = music_list_size_long21 * music_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa247u4l4.scala:39:62 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long22\u001b[0m = music_list_size_long21 * music_\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: music_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa247u4l4.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028965
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, 2)\n            val restLength = rest.length\n            val restLength = if (restLength == 0) 4 else restLength\n            val restLength = if (restLength == 0) 2 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val restLength = if (restLength == 0) 1 else restLength\n            val rest\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe_ngzx69.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe_ngzx69.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpe_ngzx69.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpe_ngzx69.scala:18:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestLength\u001b[0m = \u001b[33mif\u001b[0m (restLength == \u001b[31m0\u001b[0m) \u001b[31m4\u001b[0m \u001b[33melse\u001b[0m restLength\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrestLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mrestLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpe_ngzx69.scala:19:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestLength\u001b[0m = \u001b[33mif\u001b[0m (restLength == \u001b[31m0\u001b[0m) \u001b[31m2\u001b[0m \u001b[33melse\u001b[0m restLength\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrestLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mrestLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpe_ngzx69.scala:20:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestLength\u001b[0m = \u001b[33mif\u001b[0m (restLength == \u001b[31m0\u001b[0m) \u001b[31m1\u001b[0m \u001b[33melse\u001b[0m restLength\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrestLength is already de",
      "stdout": "",
      "timestamp": 1660028963
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\").map(music_string => {\n                val note = music_string.split(\"o\").map(music_string => {\n                    val beats = music_string.split(\"|\").map(music_string => {\n                        val beat = music_string.split(\".\").map(music_string => {\n                            music_string.toLong\n                        }).head\n                        beat\n                    }).head\n                    beats\n                }).head\n                note\n            }).head\n            notes\n        }).head\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj8vbtl3s.scala:28:11 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnotes\u001b[0m = music_string.split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.split(\u001b[31m\"o\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m17 |\u001b[0m                    \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = music_string.split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m18 |\u001b[0m                        \u001b[33mval\u001b[0m \u001b[36mbeat\u001b[0m = music_string.split(\u001b[31m\".\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m19 |\u001b[0m                            music_string.toLong\n\u001b[31m20 |\u001b[0m                        }).head\n\u001b[31m21 |\u001b[0m                        beat\n\u001b[31m22 |\u001b[0m                    }).head\n\u001b[31m23 |\u001b[0m                    beats\n\u001b[31m24 |\u001b[0m                }).head\n\u001b[31m25 |\u001b[0m                note\n\u001b[31m26 |\u001b[0m            }).head\n\u001b[31m27 |\u001b[0m            notes\n\u001b[31m28 |\u001b[0m        }).head\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028967
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val beats = notes.map(_.length.toLong)\n        val notes_without_beats = notes.map(_.drop(1))\n        val notes_without_beats_without_dots = notes_without_beats.map(_.drop(1))\n        val notes_without_beats_without_dots_without_o = notes_without_beats_without_dots.map(_.drop(1))\n        val notes_without_beats_without_dots_without_o_without_o = notes_without_beats_without_dots_without_o.map(_.drop(1))\n        val notes_without_beats_without_dots_without_o_without_o_without_o = notes_without_beats_without_dots_without_o_without_o.map(_.drop(1))\n        val notes_without_beats_without_dots_without_o_without_o_without_o_without_o = notes_without_beats_without_dots_without_o_without_o_without_o.map(_.drop(1))\n        val notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o = notes_without_beats_without_dots_without_o_without_o_without_o_without_o.map(_.drop(1))\n        val notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o = notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o.map(_.drop(1))\n        val notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o = notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o.map(_.drop(1))\n        val notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o = notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o.map(_.drop(1))\n        val notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o_without_o = notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o_without_o.map(_.drop(1))\n        val notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o_without_o_without_o = notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o_without_o.map(_.drop(1))\n        val notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk6rcfwrc.scala:29:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk6rcfwrc.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o\u001b[0m = notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o.map(_.drop(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpk6rcfwrc.scala:26:127 --------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o_without_o\u001b[0m = notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o_without_o.map(_.drop(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  notes_without_beats_without_dots_without_o_without_o_without_o_without_o_without_o_without_o_without_o_without_o\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compi",
      "stdout": "",
      "timestamp": 1660028969
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n                beat.toLong * rest.length.toLong\n            }).sum\n            note.toLong * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwjyr00e1.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m17 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeat\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m18 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m)\n\u001b[31m19 |\u001b[0m                beat.toLong * rest.length.toLong\n\u001b[31m20 |\u001b[0m            }).sum\n\u001b[31m21 |\u001b[0m            note.toLong * beats\n\u001b[31m22 |\u001b[0m        }).sum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028970
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val notes = music_string.split(\"o\").map(music_string => {\n                val note = music_string.trim\n                val beats = note.split(\"|\").map(music_string => {\n                    val beat = music_string.trim\n                    beat.split(\"\\\\|\").map(music_string => {\n                        val beat = music_string.trim\n                        beat.split(\"\\\\|\").map(music_string => {\n                            val beat = music_string.trim\n                            beat.split(\"\\\\|\").map(music_string => {\n                                val beat = music_string.trim\n                                beat.split(\"\\\\|\").map(music_string => {\n                                    val beat = music_string.trim\n                                    beat.split(\"\\\\|\").map(music_string => {\n                                        val beat = music_string.trim\n                                        beat.split(\"\\\\|\").map(music_string => {\n                                            val beat = music_string.trim\n                                            beat.split(\"\\\\|\").map(music_string => {\n                                                val beat = music_string.trim\n                                                beat.split(\"\\\\|\").map(music_string => {\n                                                    val beat = music_string.trim\n                                                    beat.split(\"\\\\|\").map(music_string => {\n                                                        val beat = music_string.trim\n                                                        beat.split(\"\\\\|\").map(music_string => {\n                                                            val beat = music_string.trim\n                                                            beat.split(\"\\\\|\").map(music_string => {\n                                                                val beat = music_string.trim\n                                                                beat.split(\"\\\\|\").map(music_string => {\n                                                                    val beat = music_string.trim\n                                                                    beat.split(\"\\\\|\").map(music_string => {\n                                                                        val beat = music_string.trim\n                                                                        beat.split(\"\\\\|\").map(music_string => {\n                                                                            val beat = music_string.trim\n                                                                            beat.split(\"\\\\|\").map(music_string => {\n                                                                                val beat = music_string.trim\n                                                                                beat.split(\"\\\\|\").map(music_string => {\n                                                                                    val beat = music_string.trim\n                                                                                    beat.split(\"\\\\|\").map(music_string => {\n                                                                                        val beat = music_string.trim\n                                                                                        beat.split(\"\\\\|\").map(music_string => {\n                                                                                            val beat = music_string.trim\n                                                                                            beat.split(\"\\\\|\").map(music_string => {\n                                                                                                val beat = music_string.trim\n                                                                                                beat.split(\"\\\\|\").map(music_string => {\n                                                                                                    \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp30cdj8bm.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp30cdj8bm.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028961
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_beats = music_list.map(music_string => {\n            val music_notes = music_string.split(\"\\\\o\")\n            val music_notes_length = music_notes.length\n            val music_notes_beats = music_notes.map(music_note => {\n                val music_note_length = music_note.length\n                val music_note_beats = music_note.map(music_note_char => {\n                    val music_note_char_length = music_note_char.length\n                    val music_note_char_beats = music_note_char.map(music_note_char_char => {\n                        val music_note_char_char_length = music_note_char_char.length\n                        val music_note_char_char_beats = music_note_char_char.map(music_note_char_char_char => {\n                            val music_note_char_char_char_length = music_note_char_char_char.length\n                            val music_note_char_char_char_beats = music_note_char_char_char.map(music_note_char_char_char_char => {\n                                val music_note_char_char_char_char_length = music_note_char_char_char_char.length\n                                val music_note_char_char_char_char_beats = music_note_char_char_char_char.map(music_note_char_char_char_char_char => {\n                                    val music_note_char_char_char_char_char_length = music_note_char_char_char_char_char.length\n                                    val music_note_char_char_char_char_char_beats = music_note_char_char_char_char_char.map(music_note_char_char_char_char_char_char => {\n                                        val music_note_char_char_char_char_char_char_length = music_note_char_char_char_char_char_char.length\n                                        val music_note_char_char_char_char_char_char_beats = music_note_char_char_char_char_char_char.map(music_note_char_char_char_char_char_char_char => {\n                                            val music_note_char_char_char_char_char_char_char_length = music_note_char_char_char_char_char_char_char.length\n                                            val music_note_char_char_char_char_char_char_char_beats = music_note_char_char_char_char_char_char_char_char.map(music_note_char_char_char_char_char_char_char_char_char_char => {\n                                                val music_note_char_char_char_char_char_char_char_char_char_length = music_note_char_char_char_char_char_char_char_char_char_char.length\n                                                val music_note_char_char_char_char_char_char_char_char_char_char_beats = music_note_char_char_char_char_char_char_char_char_char_char_char.map(music_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpri66h7fj.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpri66h7fj.scala:38:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpri66h7fj.scala:47:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpri66h7fj.scala:21:65 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    \u001b[33mval\u001b[0m \u001b[36mmusic_note_char_length\u001b[0m = music_note_char.length\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    value length is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpri66h7fj.scala:22:64 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    \u001b[33mval\u001b[0m \u001b[36mmusic_note_char_beats\u001b[0m = music_note_char.map(\u001b[36mmusic_note_char_char\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       value map is not a member of Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpri66h7fj.scala:46:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n6 errors found\n",
      "stdout": "",
      "timestamp": 1660028975
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length == 1)\n        val music_list_size = music_list.size\n        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole = music_list_size.toLong\n        val music_list_size_quarter_whole = music_list_size_quarter / 4\n        val music_list_size_half_whole = music_list_size_half / 2\n        val music_list_size_quarter_half_whole = music_list_size_quarter_whole / 4\n        val music_list_size_whole_whole = music_list_size_whole / 4\n        val music_list_size_quarter_whole_whole = music_list_size_quarter_whole/ 4\n        val music_list_size_half_whole_whole = music_list_size_half_whole/ 2\n        val music_list_size_quarter_half_whole_whole = music_list_size_quarter_half_whole/ 4\n        val music_list_size_whole_whole_whole = music_list_size_whole_whole/ 4\n        val music_list_size_quarter_whole_whole_whole = music_list_size_quarter_whole_whole/ 4\n        val music_list_size_half_whole_whole_whole = music_list_size_half_whole_whole/ 2\n        val music_list_size_quarter_half_whole_whole_whole = music_list_size_quarter_half_whole_whole/ 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole/ 4\n        val music_list_size_quarter_whole_whole_whole_whole = music_list_size_quarter_whole_whole_whole/ 4\n        val music_list_size_half_whole_whole_whole_whole = music_list_size_half_whole_whole_whole/ 2\n        val music_list_size_quarter_half_whole_whole_whole_whole = music_list_size_quarter_half_whole_whole_whole_whole/ 4\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole_whole/ 4\n        val music_list_size_quarter_whole_whole_whole_whole_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqnyu3mbe.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqnyu3mbe.scala:33:67 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_quarter_half_whole_whole_whole_whole\u001b[0m = music_list_size_quarter_half_whole_whole_whole_whole/ \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_quarter_half_whole_whole_whole_whole\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqnyu3mbe.scala:34:60 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whole_whole_whole\u001b[0m = music_list_size_whole_whole_whole_whole_whole/ \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_whole_whole_whole_whole_whole\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqnyu3mbe.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660028974
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(music_string => music_string.charAt(0).toInt)\n        val music_list_size = music_list.length\n        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole = music_list_size.toLong\n        val music_list_size_half_whole = music_list_size_half * music_list_size_whole\n        val music_list_size_quarter_whole = music_list_size_quarter * music_list_size_whole\n        val music_list_size_half_quarter = music_list_size_half * music_list_size_quarter\n        val music_list_size_quarter_quarter = music_list_size_quarter * music_list_size_quarter\n        val music_list_size_half_whole_quarter = music_list_size_half_whole * music_list_size_quarter_whole\n        val music_list_size_quarter_whole_quarter = music_list_size_quarter_whole * music_list_size_quarter_whole\n        val music_list_size_half_quarter_quarter = music_list_size_half_quarter * music_list_size_quarter_whole\n        val music_list_size_half_whole_quarter_quarter = music_list_size_half_whole_quarter * music_list_size_quarter_quarter\n        val music_list_size_quarter_whole_quarter_quarter = music_list_size_quarter_whole_quarter * music_list_size_quarter_quarter\n        val music_list_size_half_quarter_whole_quarter_quarter = music_list_size_half_quarter_quarter * music_list_size_quarter_whole_quarter\n        val music_list_size_whole_quarter_whole_quarter_quarter = music_list_size_whole_quarter_whole_quarter * music_list_size_quarter_whole_quarter\n        val music_list_size_quarter_whole_quarter_whole_quarter_quarter = music_list_size_quarter_whole_quarter_whole_quarter * music_list_size_quarter_whole_quarter_quarter\n        val music_list_size_whole_quarter_whole_quarter_whole_quarter_quarter = music_list_size_whole_quarter_whole_quarter_whole_quarter * music_list_size_quarter_whole_quarter_whole_quarter\n        val music_list_size_quarter_whole_quarter_whole_quarter_whole_quarter = music_list_size_quarter_whole_quarter_who\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9yhcpu5_.scala:29:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_quarter_whole_quarter_quarter\u001b[0m = music_list_size_whole_quarter_whole_quarter * music_list_size_quarter_whole_quarter\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Not found: music_list_size_whole_quarter_whole_quarter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9yhcpu5_.scala:30:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_quarter_whole_quarter_whole_quarter_quarter\u001b[0m = music_list_size_quarter_whole_quarter_whole_quarter * music_list_size_quarter_whole_quarter_quarter\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Not found: music_list_size_quarter_whole_quarter_whole_quarter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9yhcpu5_.scala:31:80 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_quarter_whole_quarter_whole_quarter_quarter\u001b[0m = music_list_size_whole_quarter_whole_quarter_whole_quarter * music_list_size_quarter_whole_quarter_whole_quarter\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: music_list_size_whole_quarter_whole_quarter_whole_quarter\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9yhcpu5_.scala:32:80 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_quarter_whole_quarter_whol",
      "stdout": "",
      "timestamp": 1660028974
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length != 0).map(music_char => {\n            val music_char = music_char.toLowerCase // convert char to lower case\n            val music_note = music_char match {\n                case \"o\" => 1\n                case \"o|\" => 2\n                case \".|\" => 4\n                case _ => 0\n            }\n            music_note * 4\n        })\n        music_list.sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpr06y7jqi.scala:15:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_char\u001b[0m = music_char.toLowerCase \u001b[34m// convert char to lower case\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35mmusic_char\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr06y7jqi.scala:24:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        music_list.sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Int\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028975
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_size_int = music_list_size.toInt\n        val music_list_size_long = music_list_size_int.toLong\n        val music_list_size_long_int = music_list_size_long.toInt\n        val music_list_size_long_long = music_list_size_long_int.toLong\n        val music_list_size_long_long_int = music_list_size_long_long.toInt\n        val music_list_size_long_long_long = music_list_size_long_long_int.toLong\n        val music_list_size_long_long_long_int = music_list_size_long_long_long.toInt\n        val music_list_size_long_long_long_long = music_list_size_long_long_long_int.toLong\n        val music_list_size_long_long_long_long_int = music_list_size_long_long_long_long.toInt\n        val music_list_size_long_long_long_long_long = music_list_size_long_long_long_long_int.toLong\n        val music_list_size_long_long_long_long_long_int = music_list_size_long_long_long_long_long.toInt\n        val music_list_size_long_long_long_long_long_long = music_list_size_long_long_long_long_long_int.toLong\n        val music_list_size_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long.toInt\n        val music_list_size_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_int.toLong\n        val music_list_size_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long.toInt\n        val music_list_size_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_long_int.toLong\n        val music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long.toInt\n        val music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_long.toInt\n        val music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_int.toLong\n        val music_list_size_long_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_long_int.toLong\n        val music_list_size_long_long_long_long_long_long_long_long_long_int = music_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgwdykt_8.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long_long_long_long_long_long\u001b[0m = music_list_size_long_long_long_long_long_long_int.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_long_long_long_long_long_long is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_long_long_long_long_long_long\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgwdykt_8.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long_long_long_long_long_long_int\u001b[0m = music_list_size_long_long_long_long_long_long_long.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_long_long_long_long_long_long_int is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_long_long_long_long_long_long_int\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgwdykt_8.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long_long_long_long_long_long_long_int\u001b[0m = music_list_size_long_long_long_long_long_long_long_long_long.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_long_long_long_long_long_long_long_int is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_long_long_long_long_long_long_long_int\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-",
      "stdout": "",
      "timestamp": 1660028975
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val music_notes = music_string.split(\"|\").map(music_note => {\n                val note = music_note.charAt(0).toLowerCase\n                val beats = music_note.substring(1).toInt\n                note match {\n                    case \"o\" => 4l.toLong\n                    case \"o|\" => 2l.toLong\n                    case \".|\" => 1l.toLong\n                    case _ => throw new Exception(\"Invalid music note: \" + music_note)\n                }\n            }).toList\n            music_notes.foldLeft(0l) { (sum, note) => sum + note }\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjze9so8_.scala:16:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_note.charAt(\u001b[31m0\u001b[0m).toLowerCase\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value toLowerCase is not a member of Char\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028976
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\").map(music_string => {\n                val note = music_string.split(\"o\").head\n                val beats = music_string.split(\"o|\").head\n                val rest = music_string.split(\".|\").head\n                val rest = music_string.split(\".|\").tail\n                val rest = music_string.split(\".|\").dropRight(1)\n                val rest = music_string.split(\".|\").dropRight(2)\n                val rest = music_string.split(\".|\").dropRight(3)\n                val rest = music_string.split(\".|\").dropRight(4)\n                val rest = music_string.split(\".|\").dropRight(5)\n                val rest = music_string.split(\".|\").dropRight(6)\n                val rest = music_string.split(\".|\").dropRight(7)\n                val rest = music_string.split(\".|\").dropRight(8)\n                val rest = music_string.split(\".|\").dropRight(9)\n                val rest = music_string.split(\".|\").dropRight(10)\n                val rest = music_string.split(\".|\").dropRight(11)\n                val rest = music_string.split(\".|\").dropRight(12)\n                val rest = music_string.split(\".|\").dropRight(13)\n                val rest = music_string.split(\".|\").dropRight(14)\n                val rest = music_string.split(\".|\").dropRight(15)\n                val rest = music_string.split(\".|\").dropRight(16)\n                val rest = music_string.split(\".|\").dropRight(17)\n                val rest = music_string.split(\".|\").dropRight(18)\n                val rest = music_string.split(\".|\").dropRight(19)\n                val rest = music_string.split(\".|\").dropRight(20)\n                val rest = music_string.split(\".|\").dropRight(21)\n                val rest = music_string.split(\".|\").dropRight(22)\n                val rest = music_string.split(\".|\").dropRight(23)\n                val rest = music_string.split(\".|\").dropRight(24)\n                val rest = music_string.split(\".|\").dropRight(25)\n                val rest = music_string.split(\".|\").dropRight(26)\n                val rest = music_string.split(\".|\").dropRight(27)\n                \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbffyobp6.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpbffyobp6.scala:58:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbffyobp6.scala:19:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.split(\u001b[31m\".|\"\u001b[0m).tail\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrest is already defined as \u001b[33mvalue\u001b[0m \u001b[35mrest\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbffyobp6.scala:20:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.split(\u001b[31m\".|\"\u001b[0m).dropRight(\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrest is already defined as \u001b[33mvalue\u001b[0m \u001b[35mrest\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbffyobp6.scala:21:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.split(\u001b[31m\".|\"\u001b[0m).dropRight(\u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrest is already defined as \u001b[33mvalue\u001b[0m \u001b[35mrest\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpbffyobp6.scala:22:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music",
      "stdout": "",
      "timestamp": 1660028973
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(_.toLong).sum\n            beats\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmpcmr74svj.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpcmr74svj.scala:18)\n\tat Problem$.main(tmpcmr74svj.scala:21)\n\tat Problem.main(tmpcmr74svj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660028979
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\").map(_.toInt).toList\n        val music_length = music_list.length\n        val music_beats = music_list.map(music_length % _).sum\n        val music_notes = music_list.map(music_length % _).map(music_length % _).sum\n        val music_last_note = music_list.last\n        val music_last_beat = music_list.last\n        val music_last_beats = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        val music_last_beats_length = music_list.last\n        \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpno8y7f9g.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_last_beats_length\u001b[0m = music_list.last\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_last_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_last_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpno8y7f9g.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_last_beats_length\u001b[0m = music_list.last\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_last_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_last_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpno8y7f9g.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_last_beats_length\u001b[0m = music_list.last\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_last_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_last_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpno8y7f9g.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_last_beats_length\u001b[0m = music_list.last\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_last_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_last_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpno8y7f9g.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |",
      "stdout": "",
      "timestamp": 1660028976
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1)\n            val beats = rest.split(\"|\").map(rest => rest.split(\"o\").length.toLong)\n            beats.sum\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmptf9lap92.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmptf9lap92.scala:19)\n\tat Problem$.main(tmptf9lap92.scala:22)\n\tat Problem.main(tmptf9lap92.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660028980
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length() > 0)\n        val music_length = music_list.length\n        val music_beats = music_list.map(music_length % _ == 0).sum\n        val music_notes = music_list.map(music_length % _ == 1).sum\n        val music_rests = music_list.map(music_length % _ == 2).sum\n        val music_notes_rests = music_notes + music_rests\n        val music_notes_rests_beats = music_notes_rests * 4\n        val music_notes_rests_beats_rests = music_notes_rests_beats * 2\n        val music_notes_rests_beats_rests_rests = music_notes_rests_beats_rests * 1\n        val music_notes_rests_beats_rests_rests_rests = music_notes_rests_beats_rests_rests * 4\n        val music_notes_rests_beats_rests_rests_rests_rests = music_notes_rests_beats_rests_rests_rests * 2\n        val music_notes_rests_beats_rests_rests_rests_rests_rests = music_notes_rests_beats_rests_rests_rests_rests * 1\n        val music_notes_rests_beats_rests_rests_rests_rests_rests_rests = music_notes_rests_beats_rests_rests_rests_rests_rests * 4\n        val music_notes_rests_beats_rests_rests_rests_rests_rests_rests_rests = music_notes_rests_beats_rests_rests_rests_rests_rests_rests * 2\n        val music_notes_rests_beats_rests_rests_rests_rests_rests_rests_rests_rests = music_notes_rests_beats_rests_rests_rests_rests_rests_rests_rests * 1\n        val music_notes_rests_beats_rests_rests_rests_rests_rests_rests_rests_rests_rests = music_notes_rests_beats_rests_rests_rests_rests_rests_rests_rests_rests * 4\n        val music_notes_rests_beats_rests_rests_rests_rests_rests_rests_rests_rests_rests_rests = music_notes_rests_beats_rests_rests_rests_rests_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpp9am7boq.scala:16:54 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_beats\u001b[0m = music_list.map(music_length % _ == \u001b[31m0\u001b[0m).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m%\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Double\n\u001b[31m   |\u001b[0m  (x: Float): Float\n\u001b[31m   |\u001b[0m  (x: Long): Long\n\u001b[31m   |\u001b[0m  (x: Int): Int\n\u001b[31m   |\u001b[0m  (x: Char): Int\n\u001b[31m   |\u001b[0m  (x: Short): Int\n\u001b[31m   |\u001b[0m  (x: Byte): Int\n\u001b[31m   |\u001b[0m match arguments ((_$3 : String))\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp9am7boq.scala:16:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_beats\u001b[0m = music_list.map(music_length % _ == \u001b[31m0\u001b[0m).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpp9am7boq.scala:17:54 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes\u001b[0m = music_list.map(music_length % _ == \u001b[31m1\u001b[0m).sum\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m None of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m%\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mInt\u001b[0m with types\n\u001b[31m   |\u001b[0m  (x: Double): Double\n\u001b[31m   |\u001b[0m  (x: Float): Float\n\u001b[31m   |\u001b[0m  (x: Long): Long\n\u001b[31m   |\u001b[0m  (x: Int): Int\n\u001b[31m   |\u001b[0m  (x: Char): Int\n\u001b[31m   |\u001b[0m  (x: Short): Int\n\u001b[31m   |\u001b[0m  (x: Byte): Int\n\u001b[31m   |\u001b[0m match arguments ((_$4 : String))\n\u001b[31m\u001b[31m-- Error: /tmp/tmpp9am7boq.scala:17:63 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes\u001b[0m = music_list.map(music_length % _ == \u001b[31m1\u001b[0m).sum\n\u001b[31m\u001b[31m   |\u001b[0m",
      "stdout": "",
      "timestamp": 1660028978
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).to\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5ukqa019.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length\u001b[0m = notes_array.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5ukqa019.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes.map(_.toInt).toArray\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5ukqa019.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length\u001b[0m = notes_array.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5ukqa019.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes.map(_.toInt).toArray\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5ukqa019.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length\u001b[0m = notes_array.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660028978
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(_.toLong)\n            beats.map(beat => if (note == \"o\") 4l else 2l).sum\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmpplt8g5yt.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpplt8g5yt.scala:18)\n\tat Problem$.main(tmpplt8g5yt.scala:21)\n\tat Problem.main(tmpplt8g5yt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660028980
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1, music_string.length).trim\n            val beats_as_long = beats.toLong\n            val beats_as_int = beats_as_long.toInt\n            val beats_as_string = beats.toString.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string.toString\n            val beats_as_string = beats_as_string.toInt\n            val beats_as_string = beats_as_string\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpefgzvw9x.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpefgzvw9x.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpefgzvw9x.scala:20:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats_as_string\u001b[0m = beats_as_string.toString\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbeats_as_string is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbeats_as_string\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpefgzvw9x.scala:21:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats_as_string\u001b[0m = beats_as_string.toInt\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbeats_as_string is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbeats_as_string\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpefgzvw9x.scala:22:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats_as_string\u001b[0m = beats_as_string.toString\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mbeats_as_string is already defined as \u001b[33mvalue\u001b[0m \u001b[35mbeats_as_string\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpefgzvw9x.scala:23:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats_as_string\u001b[0m = bea",
      "stdout": "",
      "timestamp": 1660028973
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val music_note = music_string.substring(0, 1)\n            val music_length = music_string.substring(1).split(\"|\").map(music_string => {\n                val music_beats = music_string.substring(0, 1)\n                val music_rest = music_string.substring(1)\n                val music_note = music_note.toInt\n                val music_length = music_beats.toInt\n                val music_rest = music_rest.toInt\n                music_note * music_length * music_rest\n            }).sum\n            music_note.toLong * music_length.toLong * music_rest.toLong\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf5iwqkm9.scala:21:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmusic_rest\u001b[0m = music_rest.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_rest is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_rest\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf5iwqkm9.scala:23:14 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            }).sum\n\u001b[31m\u001b[31m   |\u001b[0m              ^\u001b[0m\n\u001b[31m   |\u001b[0m              No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m              where:    B is a type variable\n\u001b[31m\u001b[31m-- Error: /tmp/tmpf5iwqkm9.scala:25:10 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        }).sum\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m          where:    B is a type variable\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028978
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length() > 0)\n        val music_list_with_beats = music_list.zipWithIndex.map { case (music_note, index) => (music_note, index) }\n        val music_list_with_beats_sorted = music_list_with_beats.sortBy(_._1)\n        val music_list_with_beats_sorted_with_beats = music_list_with_beats_sorted.map { case (music_note, index) => (music_note, index.toLong) }\n        val music_list_with_beats_sorted_with_beats_sorted = music_list_with_beats_sorted_with_beats.sortBy(_._2)\n        val music_list_with_beats_sorted_with_beats_sorted_with_beats = music_list_with_beats_sorted_with_beats_sorted.map { case (music_note, index) => (music_note, index.toLong) }\n        val music_list_with_beats_sorted_with_beats_sorted_with_beats_sorted = music_list_with_beats_sorted_with_beats_sorted_with_beats.sortBy(_._2)\n        val music_list_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats = music_list_with_beats_sorted_with_beats_sorted_with_beats_sorted.map { case (music_note, index) => (music_note, index.toLong) }\n        val music_list_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted = music_list_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted.map { case (music_note, index) => (music_note, index.toLong) }\n        val music_list_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats = music_list_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted.map { case (music_note, index) => (music_note, index.toLong) }\n        val music_list_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted = music_list_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted.map { case (music_note, index) => (music_note, index.toLong) }\n        val music_list_with_beats_sorted_with_beats_sorted_with_beats_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwdfmphxf.scala:26:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwdfmphxf.scala:22:97 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted\u001b[0m = music_list_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted.map { \u001b[33mcase\u001b[0m (music_note, index) => (music_note, index.toLong) }\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  music_list_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwdfmphxf.scala:24:115 --------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted\u001b[0m = music_list_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted.map { \u001b[33mcase\u001b[0m (music_note, index) => (music_note, index.toLong) }\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  music_list_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted_with_beats_sorted\n\u001b[31m   |\u001b[0m\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwdfmphxf.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explana",
      "stdout": "",
      "timestamp": 1660028979
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \")\n        val music_list_size = music_list.size\n        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_size_33 = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjyj30zde.scala:47:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_33\u001b[0m = musi\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: musi\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjyj30zde.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028979
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\")\n            val beats = notes.map(note => {\n                val notes = note.split(\"o\")\n                notes.map(note => {\n                    val notes = note.split(\"|\")\n                    notes.map(note => {\n                        val notes = note.split(\"o\")\n                        notes.map(note => {\n                            val notes = note.split(\"|\")\n                            notes.map(note => {\n                                val notes = note.split(\"o\")\n                                notes.map(note => {\n                                    val notes = note.split(\"|\")\n                                    notes.map(note => {\n                                        val notes = note.split(\"o\")\n                                        notes.map(note => {\n                                            val notes = note.split(\"|\")\n                                            notes.map(note => {\n                                                val notes = note.split(\"o\")\n                                                notes.map(note => {\n                                                    val notes = note.split(\"|\")\n                                                    notes.map(note => {\n                                                        val notes = note.split(\"o\")\n                                                        notes.map(note => {\n                                                            val notes = note.split(\"|\")\n                                                            notes.map(note => {\n                                                                val notes = note.split(\"o\")\n                                                                notes.map(note => {\n                                                                    val notes = note.split(\"|\")\n                                                                    notes.map(note => {\n                                                                        val notes = note.split(\"o\")\n                                                                        notes.map(note => {\n                                                                            val notes = note.split(\"|\")\n                                                                            notes.map(note => {\n                                                                                val notes = note.split(\"o\")\n                                                                                notes.map(note => {\n                                                                                    val notes = note.split(\"|\")\n                                                                                    notes.map(note => {\n                                                                                        val notes = note.split(\"o\")\n                                                                                        notes.map(note => {\n                                                                                            val notes = note.split(\"|\")\n                                                                                            notes.map(note => {\n                                                                                                val notes = note.split(\"o\")\n                                                                                                notes.map(note => {\n                                                                                                    val notes = note.split(\"|\")\n                                                                                                    notes.map(note => {\n                                                                                                        val notes = note.split(\"o\")\n                                                                                                        notes.map(note => {\n                                                                                                            val notes = note.split(\"|\")\n                                                                                                            notes.map(note => {\n                                                                                                                val notes = note.split(\"o\")\n                                                                                                                notes.map(note => {\n                                                                                                                    val notes = note.split(\"|\")\n                                                                                                                    notes.map(note => {\n                                                                                                                        val notes = note.split(\"o\")\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgoyze0tl.scala:71:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m71 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgoyze0tl.scala:80:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m80 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\" \").map(x => x.toUpperCase().charAt(0).toInt)\n        val notes_count = music_string.split(\" \").map(x => x.toUpperCase().charAt(0).toInt).length\n        val beats = music_string.split(\" \").map(x => x.toUpperCase().charAt(1).toInt).length\n        val notes_last_beats = music_string.split(\" \").map(x => x.toUpperCase().charAt(1).toInt).take(notes_count).sum\n        val notes_last_beats_count = music_string.split(\" \").map(x => x.toUpperCase().charAt(1).toInt).take(notes_count).length\n        val notes_last_beats_count_2 = music_string.split(\" \").map(x => x.toUpperCase().charAt(1).toInt).take(notes_count).take(notes_count).sum\n        val notes_last_beats_count_3 = music_string.split(\" \").map(x => x.toUpperCase().charAt(1).toInt).take(notes_count).take(notes_count).take(notes_count).sum\n        val notes_last_beats_count_4 = music_string.split(\" \").map(x => x.toUpperCase().charAt(1).toInt).take(notes_count).take(notes_count).take(notes_count).take(notes_count).sum\n        val notes_last_beats_count_5 = music_string.split(\" \").map(x => x.toUpperCase().charAt(1).toInt).take(notes_count).take(notes_count).take(notes_count).take(notes_count).take(notes_count).sum\n        val notes_last_beats_count_6 = music_string.split(\" \").map(x => x.toUpperCase().charAt(1).toInt).take(notes_count).take(notes_count).take(notes_count).take(notes_count).take(notes_count).take(notes_count).sum\n        val notes_last_beats_count_7 = music_string.split(\" \").map(x => x.toUpperCase().charAt(1).toInt).take(notes_count).take(notes_count).take(notes_count).take(notes_count).take(notes_count).take(notes_count).take(notes_count).sum\n        val notes_last_beats_count_8 = music_string.split(\" \").map(x => x.toUpperCase().charAt(1).toInt).take(notes_count).take(notes_count).take(notes_count).take(notes_count).take(notes_count).take(notes_count).take(notes_count).sum\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpb85ohizu.scala:26:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb85ohizu.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028980
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\").map(music_string => {\n                val note = music_string.split(\"o\").head\n                val beats = music_string.split(\"o|\").head\n                val rest = music_string.split(\".|\").head\n                val rest2 = music_string.split(\".|\").tail.head\n                val rest3 = music_string.split(\".|\").tail.tail.head\n                val rest4 = music_string.split(\".|\").tail.tail.tail.head\n                val rest5 = music_string.split(\".|\").tail.tail.tail.tail.head\n                val rest6 = music_string.split(\".|\").tail.tail.tail.tail.tail.head\n                val rest7 = music_string.split(\".|\").tail.tail.tail.tail.tail.tail.head\n                val rest8 = music_string.split(\".|\").tail.tail.tail.tail.tail.tail.tail.head\n                val rest9 = music_string.split(\".|\").tail.tail.tail.tail.tail.tail.tail.tail.head\n                val rest10 = music_string.split(\".|\").tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n                val rest11 = music_string.split(\".|\").tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n                val rest12 = music_string.split(\".|\").tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n                val rest13 = music_string.split(\".|\").tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n                val rest14 = music_string.split(\".|\").tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n                val rest15 = music_string.split(\".|\").tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n                val rest16 = music_string.split(\".|\").tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx8z5l0ge.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx8z5l0ge.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx8z5l0ge.scala:44:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028978
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, 2)\n            val beats = rest.split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1, 2)\n                val rest2 = rest.split(\"|\").map(music_string => {\n                    val rest = music_string.substring(0, 1)\n                    val rest2 = music_string.substring(1, 2)\n                    val rest3 = rest.split(\"|\").map(music_string => {\n                        val rest = music_string.substring(0, 1)\n                        val rest2 = music_string.substring(1, 2)\n                        val rest3 = music_string.substring(2, 3)\n                        val rest4 = rest.split(\"|\").map(music_string => {\n                            val rest = music_string.substring(0, 1)\n                            val rest2 = music_string.substring(1, 2)\n                            val rest3 = music_string.substring(2, 3)\n                            val rest4 = music_string.substring(3, 4)\n                            val rest5 = rest.split(\"|\").map(music_string => {\n                                val rest = music_string.substring(0, 1)\n                                val rest2 = music_string.substring(1, 2)\n                                val rest3 = music_string.substring(2, 3)\n                                val rest4 = music_string.substring(3, 4)\n                                val rest5 = music_string.substring(4, 5)\n                                val rest6 = rest.split(\"|\").map(music_string => {\n                                    val rest = music_string.substring(0, 1)\n                                    val rest2 = music_string.substring(1, 2)\n                                    val rest3 = music_string.substring(2, 3)\n                                    val rest4 = music_string.substring(3, 4)\n                                    val rest5 = music_string.substring(4, 5)\n                                    val rest6 = music_string.substring(5, 6)\n                                    val rest7 = rest.split(\"|\").map(music_string => {\n                                        val rest = music_string.substring(0, 1)\n                                        val rest2 = music_string.substring(1, 2)\n                                        val rest3 = music_string.substring(2, 3)\n                                        val rest4 = music_string.substring(3, 4)\n                                        val rest5 = music_string.substring(4, 5)\n                                        val rest6 = music_string.substring(5, 6)\n                                        val rest7 = music_string.substring(6, 7)\n                                        val rest8 = rest.split(\"|\").map(music_string => {\n                                            val rest = music_string.substring(0, 1)\n                                            val rest2 = music_string.substring(1, 2)\n                                            val rest3 = music_string.substring(2, 3)\n                                            val rest4 = music_string.substring(3, 4)\n                                            val rest5 = music_string.substring(4, 5)\n                                            val rest6 = music_string.substring(5, \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3yg77z1h.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3yg77z1h.scala:61:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3yg77z1h.scala:70:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028977
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n        val notes = music_list.filterNot(_ == \"O\")\n        val notes_length = notes.length\n        val notes_beats = notes.map(n => n.length.toLong)\n        val notes_beats_length = notes_beats.length\n        val notes_beats_sum = notes_beats.sum\n        val notes_beats_average = notes_beats_sum / notes_beats_length\n        val notes_beats_averages = notes_beats.map(n => n.toDouble / notes_beats_average)\n        val notes_beats_averages_length = notes_beats_averages.length\n        val notes_beats_averages_sum = notes_beats_averages.sum\n        val notes_beats_averages_average = notes_beats_averages_sum / notes_beats_averages_length\n        val notes_beats_averages_averages = notes_beats_averages.map(n => n.toDouble / notes_beats_averages_average)\n        val notes_beats_averages_averages_length = notes_beats_averages_averages.length\n        val notes_beats_averages_averages_sum = notes_beats_averages_averages.sum\n        val notes_beats_averages_averages_average = notes_beats_averages_averages_sum / notes_beats_averages_averages_length\n        val notes_beats_averages_averages_averages = notes_beats_averages_averages.map(n => n.toDouble / notes_beats_averages_averages_average)\n        val notes_beats_averages_averages_averages_length = notes_beats_averages_averages_averages.length\n        val notes_beats_averages_averages_averages_sum = notes_beats_averages_averages_averages.sum\n        val notes_beats_averages_averages_averages_average = notes_beats_averages_averages_averages_sum / notes_beats_averages_averages_averages_length\n        val notes_beats_averages_averages_averages_averages = notes_beats_averages_averages_averages_averages.map(n => n.toDouble / notes_beats_averages_averages_averages_average)\n        val notes_beats_averages_averages_averages_averages_length = notes_beats_averages_averages_averages_averages.length\n        val notes_beats_averages_averages_averages_averages_sum = note\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpgrw6hs7s.scala:33:62 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_averages_averages_averages_averages\u001b[0m = notes_beats_averages_averages_averages_averages.map(\u001b[36mn\u001b[0m => n.toDouble / notes_beats_averages_averages_averages_average)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_averages_averages_averages_averages\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgrw6hs7s.scala:35:66 ------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_averages_averages_averages_averages_sum\u001b[0m = note\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: note\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrw6hs7s.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028980
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val beats = rest.split(\"|\").map(rest => {\n                val beat = rest.substring(0, 1)\n                val rest2 = rest.substring(1, rest.length)\n                val rest3 = rest2.substring(0, 1)\n                val rest4 = rest2.substring(1, rest2.length)\n                val rest5 = rest3.substring(0, 1)\n                val rest6 = rest3.substring(1, rest3.length)\n                val rest7 = rest4.substring(0, 1)\n                val rest8 = rest4.substring(1, rest4.length)\n                val rest9 = rest5.substring(0, 1)\n                val rest10 = rest5.substring(1, rest5.length)\n                val rest11 = rest6.substring(0, 1)\n                val rest12 = rest6.substring(1, rest6.length)\n                val rest13 = rest7.substring(0, 1)\n                val rest14 = rest7.substring(1, rest7.length)\n                val rest15 = rest8.substring(0, 1)\n                val rest16 = rest8.substring(1, rest8.length)\n                val rest17 = rest9.substring(0, 1)\n                val rest18 = rest9.substring(1, rest9.length)\n                val rest19 = rest10.substring(0, 1)\n                val rest20 = rest10.substring(1, rest10.length)\n                val rest21 = rest11.substring(0, 1)\n                val rest22 = rest11.substring(1, rest11.length)\n                val rest23 = rest12.substring(0, 1)\n                val rest24 = rest12.substring(1, rest12.length)\n                val rest25 = rest13.substring(0, 1)\n                val rest26 = rest13.substring(1, rest13.length)\n                val rest27 = rest14.substring(0, 1)\n                val rest28 = rest14.substring(1, rest14.length)\n                val rest29 = rest15.substring(0, 1)\n                val rest30 = rest15.substring(1, rest15.length)\n                val rest31 = rest16.substring(0, 1)\n                val rest32 = rest16.substring(1, rest16.length)\n                val rest33 = rest17.substring(0, 1)\n                val rest34 = rest17.substring(1, rest17.length)\n                val rest35 = rest18.substring(0, 1)\n                val rest36 = rest18.substring(1, rest18.length)\n                val rest37 = rest19.substring(0, 1)\n                val rest38 = rest19.substring(1, rest19.length)\n                val rest39 = rest20.substring(0, 1)\n                val rest40 = rest20.substring(1, rest20.length)\n                \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi0_4ypbb.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpi0_4ypbb.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028980
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val notes = music_string.split(\"\\\\ \").map(music_string => {\n                val note = music_string.split(\"\\\\ \").map(music_string => {\n                    music_string.split(\"\\\\ \").map(music_string => {\n                        music_string.split(\"\\\\ \").map(music_string => {\n                            music_string.split(\"\\\\ \").map(music_string => {\n                                music_string.split(\"\\\\ \").map(music_string => {\n                                    music_string.split(\"\\\\ \").map(music_string => {\n                                        music_string.split(\"\\\\ \").map(music_string => {\n                                            music_string.split(\"\\\\ \").map(music_string => {\n                                                music_string.split(\"\\\\ \").map(music_string => {\n                                                    music_string.split(\"\\\\ \").map(music_string => {\n                                                        music_string.split(\"\\\\ \").map(music_string => {\n                                                            music_string.split(\"\\\\ \").map(music_string => {\n                                                                music_string.split(\"\\\\ \").map(music_string => {\n                                                                    music_string.split(\"\\\\ \").map(music_string => {\n                                                                        music_string.split(\"\\\\ \").map(music_string => {\n                                                                            music_string.split(\"\\\\ \").map(music_string => {\n                                                                                music_string.split(\"\\\\ \").map(music_string => {\n                                                                                    music_string.split(\"\\\\ \").map(music_string => {\n                                                                                        music_string.split(\"\\\\ \").map(music_string => {\n                                                                                            music_string.split(\"\\\\ \").map(music_string => {\n                                                                                                music_string.split(\"\\\\ \").map(music_string => {\n                                                                                                    music_string.split(\"\\\\ \").map(music_string => {\n                                                                                                        music_string.split(\"\\\\ \").map(music_string => {\n                                                                                                            music_string.split(\"\\\\ \").map(music_string => {\n                                                                                                                music_string.split(\"\\\\ \").map(music_string => {\n                                                                                                                    music_string.split(\"\\\\ \").map(music_string => {\n                                                                                                                        music_string.split(\"\\\\ \").map(music_string => {\n                                                                                                                            music_string.split(\"\\\\ \").map(music_string => {\n                                                                                                                                music_string.split(\"\\\\ \").map(music_string => {\n                                                                                                                                    music_string.split(\"\\\\ \").map(music_string => {\n                                                                                                                                        music_string.split(\"\\\\ \").map(music_string => {\n                                                                                                                                            music_string.split(\"\\\\ \").map(music_string => {\n                                                                                                                                                music_string.split(\"\\\\\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp_2guoyvq.scala:48:163 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m                                                                                                                                                music_string.split(\"\\\\\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_2guoyvq.scala:50:34 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  ')' expected, but '=' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_2guoyvq.scala:59:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_2guoyvq.scala:50:13 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m         too many arguments for \u001b[33mconstructor\u001b[0m \u001b[35mmain\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mmain\u001b[0m: (): main\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_2guoyvq.scala:56:5 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m     where:    B is a type variable\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_2guoyvq.scala:58:1 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m No ClassTag available for Array[B]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m where:    B is a type variable\n6 errors found\n",
      "stdout": "",
      "timestamp": 1660028985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val notes = music_string.split(\"\\\\ \").map(music_string => {\n                val note = music_string.substring(0, 1)\n                val beats = music_string.substring(1).toInt\n                note.toLong * beats\n            })\n            notes.sum\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpblj5yegv.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\"\\\\|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mArray\u001b[0m[Long]\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m[Long]\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnotes\u001b[0m = music_string.split(\u001b[31m\"\\\\ \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m17 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).toInt\n\u001b[31m18 |\u001b[0m                note.toLong * beats\n\u001b[31m19 |\u001b[0m            })\n\u001b[31m20 |\u001b[0m            notes.sum\n\u001b[31m21 |\u001b[0m        })\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028987
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).toArray\n        val notes_length = notes_array.length\n        val notes_array = notes.map(_.toInt).to\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5ukqa019.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length\u001b[0m = notes_array.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5ukqa019.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes.map(_.toInt).toArray\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5ukqa019.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length\u001b[0m = notes_array.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5ukqa019.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes.map(_.toInt).toArray\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5ukqa019.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length\u001b[0m = notes_array.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660028978
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n                beat.toLong * rest.length\n            }).sum\n            note -> beats\n        }).groupBy(music_string => {\n            music_string._1\n        }).values.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsr94mcch.scala:24:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m17 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeat\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m18 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m)\n\u001b[31m19 |\u001b[0m                beat.toLong * rest.length\n\u001b[31m20 |\u001b[0m            }).sum\n\u001b[31m21 |\u001b[0m            note -> beats\n\u001b[31m22 |\u001b[0m        }).groupBy(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m23 |\u001b[0m            music_string._1\n\u001b[31m24 |\u001b[0m        }).values.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    List[\u001b[1m\u001b[31mArray\u001b[0m\u001b[1m\u001b[31m[\u001b[0m\u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mString\u001b[0m\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0mLong\u001b[1m\u001b[31m)\u001b[0m\u001b[1m\u001b[31m]\u001b[0m]\n\u001b[31m   |\u001b[0m        Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028987
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n        val music_list_length = music_list.length\n        val music_list_length_half = music_list_length / 2\n        val music_list_length_quarter = music_list_length_half / 4\n        val music_list_length_whole = music_list_length_quarter * 4\n        val music_list_length_whole_2 = music_list_length_whole / 2\n        val music_list_length_whole_3 = music_list_length_whole_2 / 2\n        val music_list_length_whole_4 = music_list_length_whole_3 / 2\n        val music_list_length_whole_5 = music_list_length_whole_4 / 2\n        val music_list_length_whole_6 = music_list_length_whole_5 / 2\n        val music_list_length_whole_7 = music_list_length_whole_6 / 2\n        val music_list_length_whole_8 = music_list_length_whole_7 / 2\n        val music_list_length_whole_9 = music_list_length_whole_8 / 2\n        val music_list_length_whole_10 = music_list_length_whole_9 / 2\n        val music_list_length_whole_11 = music_list_length_whole_10 / 2\n        val music_list_length_whole_12 = music_list_length_whole_11 / 2\n        val music_list_length_whole_13 = music_list_length_whole_12 / 2\n        val music_list_length_whole_14 = music_list_length_whole_13 / 2\n        val music_list_length_whole_15 = music_list_length_whole_14 / 2\n        val music_list_length_whole_16 = music_list_length_whole_15 / 2\n        val music_list_length_whole_17 = music_list_length_whole_16 / 2\n        val music_list_length_whole_18 = music_list_length_whole_17 / 2\n        val music_list_length_whole_19 = music_list_length_whole_18 / 2\n        val music_list_length_whole_20 = music_list_length_whole_19 / 2\n        val music_list_length_whole_21 = music_list_length_whole_20 / 2\n        val music_list_length_whole_22 = music_list_length_whole_21 / 2\n        val music_list_length_whole_23 = music_list_length_whole_22 / 2\n        val music_list_length_whole_24 = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp7pi46zdl.scala:41:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_length_whole_24\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7pi46zdl.scala:42:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028986
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(_.toInt)\n            beats.map(beat => if (note == \"o\") 4l else beat.toLong)\n        }).flatten.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmp0fjve45z.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmp0fjve45z.scala:18)\n\tat Problem$.main(tmp0fjve45z.scala:21)\n\tat Problem.main(tmp0fjve45z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n            val beats = rest.split(\"|\").map(rest => rest.charAt(0).toLong)\n            beats.sum\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem$.parseMusic$$anonfun$1(tmp7m5n1ysl.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmp7m5n1ysl.scala:19)\n\tat Problem$.main(tmp7m5n1ysl.scala:22)\n\tat Problem.main(tmp7m5n1ysl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n        val music_list_size = music_list.size\n        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole = music_list_size.toLong\n        val music_list_size_whole_half = music_list_size_whole / 2\n        val music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole = music_list_size_whole / 8\n        val music_list_size_whole_whole_half = music_list_size_whole_whole / 2\n        val music_list_size_whole_whole_quarter = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole = music_list_size_whole_whole / 8\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole / 8\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0g8g9idh.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whole_whole_half\u001b[0m = music_list_size_whole_whole_whole_whole / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_whole_whole_whole_whole_half is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_whole_whole_whole_whole_half\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0g8g9idh.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whole_whole_quarter\u001b[0m = music_list_size_whole_whole_whole_whole / \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_whole_whole_whole_whole_quarter is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_whole_whole_whole_whole_quarter\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0g8g9idh.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whole_whole_whole\u001b[0m = music_list_size_whole_whole_whole_whole / \u001b[31m8\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_whole_whole_whole_whole_whole is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_whole_whole_whole_whole_whole\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0g8g9idh.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[",
      "stdout": "",
      "timestamp": 1659800151
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n                beat.toLong * rest.length\n            }).sum\n            note.toLong * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjadz4yn9.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m17 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeat\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m18 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m)\n\u001b[31m19 |\u001b[0m                beat.toLong * rest.length\n\u001b[31m20 |\u001b[0m            }).sum\n\u001b[31m21 |\u001b[0m            note.toLong * beats\n\u001b[31m22 |\u001b[0m        }).sum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659799849
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val music_notes = music_string.split(\"|\")\n            val music_notes_length = music_notes.length\n            val music_notes_beats = music_notes.map(music_note => {\n                val music_note_length = music_note.length\n                val music_note_beats = music_note.split(\"o\").length\n                music_note_beats * music_note_length\n            }).sum\n            music_notes_beats * music_notes_length\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_xbtrw9p.scala:23:11 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_notes\u001b[0m = music_string.split(\u001b[31m\"|\"\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_notes_length\u001b[0m = music_notes.length\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats\u001b[0m = music_notes.map(\u001b[36mmusic_note\u001b[0m => {\n\u001b[31m18 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmusic_note_length\u001b[0m = music_note.length\n\u001b[31m19 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmusic_note_beats\u001b[0m = music_note.split(\u001b[31m\"o\"\u001b[0m).length\n\u001b[31m20 |\u001b[0m                music_note_beats * music_note_length\n\u001b[31m21 |\u001b[0m            }).sum\n\u001b[31m22 |\u001b[0m            music_notes_beats * music_notes_length\n\u001b[31m23 |\u001b[0m        }).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    List[\u001b[1m\u001b[31mInt\u001b[0m]\n\u001b[31m   |\u001b[0m        Required: List[\u001b[1m\u001b[32mLong\u001b[0m]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028987
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(music_string => music_string.charAt(0).toInt)\n        val music_list_size = music_list.length\n        val music_list_beats = music_list.map(music_string => music_string.length.toLong)\n        val music_list_beats_size = music_list_beats.map(music_string => music_string.length)\n        val music_list_beats_sum = music_list_beats.map(music_string => music_string.sum)\n        val music_list_beats_sum_length = music_list_beats_sum.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n        val music_list_beats_sum_length = music_list_beats_sum_length.map(music_string => music_string.length)\n\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxgyhz5g4.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_sum_length\u001b[0m = music_list_beats_sum_length.map(\u001b[36mmusic_string\u001b[0m => music_string.length)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_sum_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_sum_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxgyhz5g4.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_sum_length\u001b[0m = music_list_beats_sum_length.map(\u001b[36mmusic_string\u001b[0m => music_string.length)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_sum_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_sum_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxgyhz5g4.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_sum_length\u001b[0m = music_list_beats_sum_length.map(\u001b[36mmusic_string\u001b[0m => music_string.length)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_sum_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_sum_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxgyhz5g4.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_sum_length\u001b[0m = music_list_beats_sum_length.",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_notes = music_string.split(\"\\\\|\")\n        val music_notes_length = music_notes.length\n        val music_notes_beats = music_notes.map(music_note => music_note.length.toLong)\n        val music_notes_beats_length = music_notes_beats.sum\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length / 2\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length / 1\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beats_length = music_notes_beats_length / 4\n        val music_notes_beat\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphqzbyskm.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphqzbyskm.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphqzbyskm.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length / \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphqzbyskm.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphqzbyskm.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val notes = music_string.split(\"\\\\ \").map(music_string => {\n                val note = music_string.charAt(0).toLowerCase\n                val beats = music_string.substring(1).toInt\n                beats\n            })\n            notes.sum\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7sznzf_f.scala:16:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.charAt(\u001b[31m0\u001b[0m).toLowerCase\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value toLowerCase is not a member of Char\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028989
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \")\n        val music_list_size = music_list.size\n        val music_list_size_long = music_list_size.toLong\n        val music_list_size_long2 = music_list_size_long * music_list_size\n        val music_list_size_long3 = music_list_size_long2 * music_list_size\n        val music_list_size_long4 = music_list_size_long3 * music_list_size\n        val music_list_size_long5 = music_list_size_long4 * music_list_size\n        val music_list_size_long6 = music_list_size_long5 * music_list_size\n        val music_list_size_long7 = music_list_size_long6 * music_list_size\n        val music_list_size_long8 = music_list_size_long7 * music_list_size\n        val music_list_size_long9 = music_list_size_long8 * music_list_size\n        val music_list_size_long10 = music_list_size_long9 * music_list_size\n        val music_list_size_long11 = music_list_size_long10 * music_list_size\n        val music_list_size_long12 = music_list_size_long11 * music_list_size\n        val music_list_size_long13 = music_list_size_long12 * music_list_size\n        val music_list_size_long14 = music_list_size_long13 * music_list_size\n        val music_list_size_long15 = music_list_size_long14 * music_list_size\n        val music_list_size_long16 = music_list_size_long15 * music_list_size\n        val music_list_size_long17 = music_list_size_long16 * music_list_size\n        val music_list_size_long18 = music_list_size_long17 * music_list_size\n        val music_list_size_long19 = music_list_size_long18 * music_list_size\n        val music_list_size_long20 = music_list_size_long19 * music_list_size\n        val music_list_size_long21 = music_list_size_long20 * music_list_size\n        val music_list_size_long22 = music_list_size_long21 * music_list_size\n        val music_list_size_long23 = music_list_size_long22 * music_list_size\n        val music_list_size_long24 = music_list_size_long23 * music_list_size\n        val music_list_size_long25 = music_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr07_32xk.scala:40:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long25\u001b[0m = music_\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: music_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr07_32xk.scala:41:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\" \").map(_.toUpperCase())\n        val notes_count = notes.count\n        val notes_beats = notes.map(n => n.length.toLong)\n        val notes_beats_count = notes_beats.count\n        val notes_beats_count_to_beats = notes_beats.map(n => n.toLong / notes_count)\n        val notes_beats_count_to_beats_count = notes_beats_count_to_beats.count\n        val notes_beats_count_to_beats_count_to_beats = notes_beats_count_to_beats.map(n => n.toLong / notes_beats_count)\n        val notes_beats_count_to_beats_count_to_beats_count = notes_beats_count_to_beats_count_to_beats.map(n => n.toLong / notes_beats_count_to_beats)\n        val notes_beats_count_to_beats_count_to_beats_count_to_beats = notes_beats_count_to_beats_count_to_beats_count_to_beats.map(n => n.toLong / notes_beats_count_to_beats_count)\n        val notes_beats_count_to_beats_count_to_beats_count_to_beats_count = notes_beats_count_to_beats_count_to_beats_count_to_beats_count.map(n => n.toLong / notes_beats_count_to_beats_count_to_beats)\n        val notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats = notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats.map(n => n.toLong / notes_beats_count_to_beats_count_to_beats_count)\n        val notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count = notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count.map(n => n.toLong / notes_beats_count_to_beats_count_to_beats_count_to_beats)\n        val notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats = notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats_count_to_beats.map(n => n.toLong / notes_beats_count_to_beats_count_to_beats_count_to_beats_count)\n        val notes_beats_count_to_beats_count_to_beats_count_to_beats_count_to_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnpluiib7.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnpluiib7.scala:18:71 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_count_to_beats\u001b[0m = notes_beats.map(\u001b[36mn\u001b[0m => n.toLong / notes_count)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35m/\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mLong\u001b[0m with types\n\u001b[31m   |\u001b[0m (x: Double): Double\n\u001b[31m   |\u001b[0m (x: Float): Float\n\u001b[31m   |\u001b[0m (x: Long): Long\n\u001b[31m   |\u001b[0m (x: Int): Long\n\u001b[31m   |\u001b[0m (x: Char): Long\n\u001b[31m   |\u001b[0m (x: Short): Long\n\u001b[31m   |\u001b[0m (x: Byte): Long\n\u001b[31m   |\u001b[0mmatch arguments ((notes_count : (String => Boolean) => Int))\n\u001b[31m\u001b[31m-- Error: /tmp/tmpnpluiib7.scala:18:85 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_count_to_beats\u001b[0m = notes_beats.map(\u001b[36mn\u001b[0m => n.toLong / notes_count)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    B is a type variable\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpnpluiib7.scala:22:71 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_count_to_beats_count_to_beats_count_to_beats\u001b[0m = notes_beats_count_to_beats_count_to_beats_count_to_beats.map(\u001b[36mn\u001b[0m => n.toLong / notes_beats_count_to_beats_count)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_count_to_beats_count_to_beats_count_to_beats\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with ",
      "stdout": "",
      "timestamp": 1660028991
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_size_str = music_list_size.mkString\n        val music_list_size_int = music_list_size_str.parseInt\n        val music_list_size_long = music_list_size_int * 1l.toLong\n        val music_list_size_long_str = music_list_size_long.toString\n        val music_list_size_long_int = music_list_size_long_int * 1l.toInt\n        val music_list_size_long_long_str = music_list_size_long_long.toString\n        val music_list_size_long_long_int = music_list_size_long_long_int * 1l.toLong\n        val music_list_size_long_long_long_str = music_list_size_long_long_long.toString\n        val music_list_size_long_long_long_int = music_list_size_long_long_long_int * 1l.toLong\n        val music_list_size_long_long_long_long_str = music_list_size_long_long_long_long.toString\n        val music_list_size_long_long_long_long_int = music_list_size_long_long_long_long_int * 1l.toLong\n        val music_list_size_long_long_long_long_long_str = music_list_size_long_long_long_long_long.toString\n        val music_list_size_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_int * 1l.toLong\n        val music_list_size_long_long_long_long_long_long_str = music_list_size_long_long_long_long_long_long.toString\n        val music_list_size_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_int * 1l.toLong\n        val music_list_size_long_long_long_long_long_long_long_str = music_list_size_long_long_long_long_long_long_long_long.toString\n        val music_list_size_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_long_int * 1l.toLong\n        val music_list_size_long_long_long_long_long_long_long_long_str = music_list_size_long_long_long_long_long_long_long_long_long_long.toString\n        val music_list_size_long_long_long_long_long_long_long_long_int = music_list_size_long_long_long_long_long_long_long_long_long_long_int * 1l.toLong\n        val music_list_size_long_long_long_long_long_long_long_long_long_str = music_list_size_long_long_long_long_long_long_long_long_long_long_long.toString\n        val music_list_size_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdyjpiqu7.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdyjpiqu7.scala:16:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_str\u001b[0m = music_list_size.mkString\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue mkString is not a member of Int - did you mean music_list_size.toString?\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpdyjpiqu7.scala:20:39 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long_int\u001b[0m = music_list_size_long_int * \u001b[31m1l\u001b[0m.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Recursive \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_long_int\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdyjpiqu7.scala:21:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long_long_str\u001b[0m = music_list_size_long_long.toString\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: music_list_size_long_long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpdyjpiqu7.scala:22:44 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long_long_int\u001b[0m = music_list_size_long_long_int * \u001b[31m1l\u001b[0m.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                Recursive \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_long_long_int\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdyjpiqu7.scala:23:49 ",
      "stdout": "",
      "timestamp": 1660028992
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \")\n        val music_list_size = music_list.size\n        val music_list_beats = music_list_size / 4\n        val music_list_beats_size = music_list_beats * 4\n        val music_list_beats_size_2 = music_list_beats_size * 2\n        val music_list_beats_size_3 = music_list_beats_size_2 * 2\n        val music_list_beats_size_4 = music_list_beats_size_3 * 2\n        val music_list_beats_size_5 = music_list_beats_size_4 * 2\n        val music_list_beats_size_6 = music_list_beats_size_5 * 2\n        val music_list_beats_size_7 = music_list_beats_size_6 * 2\n        val music_list_beats_size_8 = music_list_beats_size_7 * 2\n        val music_list_beats_size_9 = music_list_beats_size_8 * 2\n        val music_list_beats_size_10 = music_list_beats_size_9 * 2\n        val music_list_beats_size_11 = music_list_beats_size_10 * 2\n        val music_list_beats_size_12 = music_list_beats_size_11 * 2\n        val music_list_beats_size_13 = music_list_beats_size_12 * 2\n        val music_list_beats_size_14 = music_list_beats_size_13 * 2\n        val music_list_beats_size_15 = music_list_beats_size_14 * 2\n        val music_list_beats_size_16 = music_list_beats_size_15 * 2\n        val music_list_beats_size_17 = music_list_beats_size_16 * 2\n        val music_list_beats_size_18 = music_list_beats_size_17 * 2\n        val music_list_beats_size_19 = music_list_beats_size_18 * 2\n        val music_list_beats_size_20 = music_list_beats_size_19 * 2\n        val music_list_beats_size_21 = music_list_beats_size_20 * 2\n        val music_list_beats_size_22 = music_list_beats_size_21 * 2\n        val music_list_beats_size_23 = music_list_beats_size_22 * 2\n        val music_list_beats_size_24 = music_list_beats_size_23 * 2\n        val music_list_beats_size_25 = music_list_beats_size_24 * 2\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpendv5boz.scala:42:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpendv5boz.scala:43:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028992
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(_.toInt).sum\n            beats * note.toLong\n        }).sortBy(_).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E081] Type Error: /tmp/tmpfe2_uz3y.scala:18:18 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        }).sortBy(_).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0mMissing parameter type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mI could not infer the type of the parameter _$2 of expanded function:\n\u001b[31m   |\u001b[0m_$2 => \n\u001b[31m   |\u001b[0m  music_string.split(\u001b[32m\" \"\u001b[0m).map(\n\u001b[31m   |\u001b[0m    music_string => \n\u001b[31m   |\u001b[0m      {\n\u001b[31m   |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(0, 1)\n\u001b[31m   |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = \n\u001b[31m   |\u001b[0m          music_string.substring(1).split(\u001b[32m\"|\"\u001b[0m).map(_$1 => _$1.toInt).sum\n\u001b[31m   |\u001b[0m        beats * note.toLong\n\u001b[31m   |\u001b[0m      }\n\u001b[31m   |\u001b[0m  ).sortBy(_$2).reverse.\n\u001b[31m\u001b[31m-- Error: /tmp/tmpfe2_uz3y.scala:18:20 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        }).sortBy(_).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances: both \u001b[33mobject\u001b[0m \u001b[35mByte\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m and \u001b[33mobject\u001b[0m \u001b[35mDeprecatedFloatOrdering\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m match type Ordering[B] of parameter ord of \u001b[33mmethod\u001b[0m \u001b[35msortBy\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mArrayOps\u001b[0m\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028989
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, 2)\n            val rest2 = music_string.substring(2, 3)\n            val rest3 = music_string.substring(3, 4)\n            val rest4 = music_string.substring(4, 5)\n            val rest5 = music_string.substring(5, 6)\n            val rest6 = music_string.substring(6, 7)\n            val rest7 = music_string.substring(7, 8)\n            val rest8 = music_string.substring(8, 9)\n            val rest9 = music_string.substring(9, 10)\n            val rest10 = music_string.substring(10, 11)\n            val rest11 = music_string.substring(11, 12)\n            val rest12 = music_string.substring(12, 13)\n            val rest13 = music_string.substring(13, 14)\n            val rest14 = music_string.substring(14, 15)\n            val rest15 = music_string.substring(15, 16)\n            val rest16 = music_string.substring(16, 17)\n            val rest17 = music_string.substring(17, 18)\n            val rest18 = music_string.substring(18, 19)\n            val rest19 = music_string.substring(19, 20)\n            val rest20 = music_string.substring(20, 21)\n            val rest21 = music_string.substring(21, 22)\n            val rest22 = music_string.substring(22, 23)\n            val rest23 = music_string.substring(23, 24)\n            val rest24 = music_string.substring(24, 25)\n            val rest25 = music_string.substring(25, 26)\n            val rest26 = music_string.substring(26, 27)\n            val rest27 = music_string.substring(27, 28)\n            val rest28 = music_string.substring(28, 29)\n            val rest29 = music_string.substring(29, 30)\n            val rest30 = music_string.substring(30, 31)\n            val rest31 = music_string.substring(31, 32)\n            val rest32 = music_string.substring(32, 33)\n            val rest33 = music_string.substring(33, 34)\n            val rest34 = music_string.substring(34, 35)\n            val rest35 = music_string.substring(35, 36)\n            val rest36 = music_string.substring(36, 37)\n            val rest37 = music_string.substring(37, 38)\n            val rest38 = music_string.substring(38, 39)\n            val rest39 = music_string.substring(39, 40)\n            val rest40 = music_string.substring(40, 41)\n            val rest41 = music_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphz74wdd4.scala:58:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphz74wdd4.scala:67:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m67 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphz74wdd4.scala:56:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrest41\u001b[0m = music_\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: music_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028988
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\").map(_.toInt).toList\n        val music_list_size = music_list.size\n        val music_list_beats = music_list.map(x => x/music_list_size).toList\n        val music_list_beats_size = music_list_beats.size\n        val music_list_beats_sum = music_list_beats.map(x => x*music_list_beats_size).toList\n        val music_list_beats_sum_sum = music_list_beats_sum.sum\n        val music_list_beats_sum_sum_sum = music_list_beats_sum_sum.sum\n        val music_list_beats_sum_sum_sum_sum = music_list_beats_sum_sum_sum.sum\n        val music_list_beats_sum_sum_sum_sum_sum = music_list_beats_sum_sum_sum_sum.sum\n        val music_list_beats_sum_sum_sum_sum_sum_sum = music_list_beats_sum_sum_sum_sum_sum.sum\n        val music_list_beats_sum_sum_sum_sum_sum_sum_sum = music_list_beats_sum_sum_sum_sum_sum_sum.sum\n        val music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum = music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum.sum\n        val music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum = music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum.sum\n        val music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum.sum\n        val music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum.sum\n        val music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum.sum\n        val music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum.sum\n        val music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum.sum\n        val music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwkhfmxvp.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwkhfmxvp.scala:20:68 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_sum_sum_sum\u001b[0m = music_list_beats_sum_sum.sum\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        value sum is not a member of Int\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwkhfmxvp.scala:25:63 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_sum_sum_sum_sum_sum_sum_sum_sum\u001b[0m = music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum.sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_sum_sum_sum_sum_sum_sum_sum_sum\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwkhfmxvp.scala:31:87 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\u001b[0m = music_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum.sum\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwkhfmxvp.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n5 errors found\n",
      "stdout": "",
      "timestamp": 1660028992
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n        val notes_beats = notes.map(_.length.toLong).sum\n        val notes_beats_length = notes_beats * notes_length\n        val notes_beats_length_length = notes_beats_length.toLong\n        val notes_beats_length_length_length = notes_beats_length_length.toLong\n        val notes_beats_length_length_length_length = notes_beats_length_length_length.toLong\n        val notes_beats_length_length_length_length_length = notes_beats_length_length_length_length.toLong\n        val notes_beats_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length.toLong\n        val notes_beats_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length.toLong\n        val notes_beats_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length.toLong\n        val notes_beats_length_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length_length.toLong\n        val notes_beats_length_length_length_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length_length_length.toLong\n        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length_length_length_length.toLong\n        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length_length_length_length_length.toLong\n        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length.toLong\n        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length.toLong\n        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length.toLong\n        val notes_beats_length_length_length_length_length_length_length_length_length_length_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqu9b7n5c.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqu9b7n5c.scala:22:68 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length_length_length_length_length_length\u001b[0m = notes_beats_length_length_length_length_length_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_length_length_length_length_length_length\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqu9b7n5c.scala:23:75 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length_length_length_length_length_length_length\u001b[0m = notes_beats_length_length_length_length_length_length_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_length_length_length_length_length_length_length\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqu9b7n5c.scala:24:82 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length_length_length_length_length_length_length_length\u001b[0m = notes_beats_length_length_length_length_length_length_length_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_length_length_length_length_length_length_length_length\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpqu9b7n5c.scala:25:89 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        ",
      "stdout": "",
      "timestamp": 1660028992
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n        val notes = music_list.filterNot(_.equals(\".\")).filterNot(_.equals(\"o\")).filterNot(_.equals(\"O\"))\n        val beats = music_list.filterNot(_.equals(\".\")).filterNot(_.equals(\"|\")).filterNot(_.equals(\"|\"))\n        val notes_beats = notes.zip(beats)\n        val notes_beats_count = notes_beats.map(x => (x._1, x._2.toLong)).toMap\n        val notes_beats_count_sorted = notes_beats_count.sortBy(_._1)\n        val notes_beats_count_sorted_list = notes_beats_count_sorted.toList\n        val notes_beats_count_sorted_list_count = notes_beats_count_sorted_list.map(x => (x._1, x._2.toLong)).toMap\n        val notes_beats_count_sorted_list_count_sorted = notes_beats_count_sorted_list_count.sortBy(_._1)\n        val notes_beats_count_sorted_list_count_sorted_list = notes_beats_count_sorted_list_count_sorted.toList\n        val notes_beats_count_sorted_list_count_sorted_list_count = notes_beats_count_sorted_list_count_sorted_list.map(x => (x._1, x._2.toLong)).toMap\n        val notes_beats_count_sorted_list_count_sorted_list_count_sorted = notes_beats_count_sorted_list_count_sorted_list_count.sortBy(_._1)\n        val notes_beats_count_sorted_list_count_sorted_list_count_sorted_list = notes_beats_count_sorted_list_count_sorted_list_count_sorted.toList\n        val notes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count = notes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count.map(x => (x._1, x._2.toLong)).toMap\n        val notes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count_sorted = notes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count_sorted.sortBy(_._1)\n        val notes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count_sorted_list = notes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count_sorted.toList\n        val notes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count_sorted_list_count = notes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count_sorted_list_count.map(x => (x._1, x._\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3obsiclf.scala:30:212 --------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count_sorted_list_count\u001b[0m = notes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count_sorted_list_count.map(\u001b[36mx\u001b[0m => (x._1, x._\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   an identifier expected, but '_' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3obsiclf.scala:19:57 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_count_sorted\u001b[0m = notes_beats_count.sortBy(_._1)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value sortBy is not a member of Map[String, Long]\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp3obsiclf.scala:27:86 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count\u001b[0m = notes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count.map(\u001b[36mx\u001b[0m => (x._1, x._2.toLong)).toMap\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp3obsiclf.scala:28:93 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_count_sorted_list_count_sorted_list_count_sorted_list_count_sorted\u001b[0m = notes_beats_count_sorted_list",
      "stdout": "",
      "timestamp": 1660028994
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \")\n        val music_list_size = music_list.size\n        val music_list_size_long = music_list_size.asInstanceOf[Long]\n        val music_list_size_long2 = music_list_size_long.toInt\n        val music_list_size_long3 = music_list_size_long2.toInt\n        val music_list_size_long4 = music_list_size_long3.toInt\n        val music_list_size_long5 = music_list_size_long4.toInt\n        val music_list_size_long6 = music_list_size_long5.toInt\n        val music_list_size_long7 = music_list_size_long6.toInt\n        val music_list_size_long8 = music_list_size_long7.toInt\n        val music_list_size_long9 = music_list_size_long8.toInt\n        val music_list_size_long10 = music_list_size_long9.toInt\n        val music_list_size_long11 = music_list_size_long10.toInt\n        val music_list_size_long12 = music_list_size_long11.toInt\n        val music_list_size_long13 = music_list_size_long12.toInt\n        val music_list_size_long14 = music_list_size_long13.toInt\n        val music_list_size_long15 = music_list_size_long14.toInt\n        val music_list_size_long16 = music_list_size_long15.toInt\n        val music_list_size_long17 = music_list_size_long16.toInt\n        val music_list_size_long18 = music_list_size_long17.toInt\n        val music_list_size_long19 = music_list_size_long18.toInt\n        val music_list_size_long20 = music_list_size_long19.toInt\n        val music_list_size_long21 = music_list_size_long20.toInt\n        val music_list_size_long22 = music_list_size_long21.toInt\n        val music_list_size_long23 = music_list_size_long22.toInt\n        val music_list_size_long24 = music_list_size_long23.toInt\n        val music_list_size_long25 = music_list_size_long24.toInt\n        val music_list_size_long26 = music_list_size_long25.toInt\n        val music_list_size_long27 = music_list_size_long26.toInt\n        val music_list_size_long28 = music_list_size_long27.to\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E051] Reference Error: /tmp/tmplvw3lxm7.scala:43:60 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long28\u001b[0m = music_list_size_long27.to\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mAmbiguous overload. The overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mto\u001b[0m in \u001b[33mclass\u001b[0m \u001b[35mRichInt\u001b[0m with types\n\u001b[31m   |\u001b[0m (end: Int, step: Int): scala.collection.immutable.Range.Inclusive\n\u001b[31m   |\u001b[0m (end: Int): scala.collection.immutable.Range.Inclusive\n\u001b[31m   |\u001b[0mboth match expected type <?>\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplvw3lxm7.scala:44:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028950
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_count = notes.length\n        val notes_beats = notes.map(n => n.length.toLong)\n        val notes_beats_count = notes_beats.sum\n        val notes_beats_count_2 = notes_beats_count.toLong\n        val notes_beats_count_3 = notes_beats_count_2.toLong\n        val notes_beats_count_4 = notes_beats_count_3.toLong\n        val notes_beats_count_5 = notes_beats_count_4.toLong\n        val notes_beats_count_6 = notes_beats_count_5.toLong\n        val notes_beats_count_7 = notes_beats_count_6.toLong\n        val notes_beats_count_8 = notes_beats_count_7.toLong\n        val notes_beats_count_9 = notes_beats_count_8.toLong\n        val notes_beats_count_10 = notes_beats_count_9.toLong\n        val notes_beats_count_11 = notes_beats_count_10.toLong\n        val notes_beats_count_12 = notes_beats_count_11.toLong\n        val notes_beats_count_13 = notes_beats_count_12.toLong\n        val notes_beats_count_14 = notes_beats_count_13.toLong\n        val notes_beats_count_15 = notes_beats_count_14.toLong\n        val notes_beats_count_16 = notes_beats_count_15.toLong\n        val notes_beats_count_17 = notes_beats_count_16.toLong\n        val notes_beats_count_18 = notes_beats_count_17.toLong\n        val notes_beats_count_19 = notes_beats_count_18.toLong\n        val notes_beats_count_20 = notes_beats_count_19.toLong\n        val notes_beats_count_21 = notes_beats_count_20.toLong\n        val notes_beats_count_22 = notes_beats_count_21.toLong\n        val notes_beats_count_23 = notes_beats_count_22.toLong\n        val notes_beats_count_24 = notes_beats_count_23.toLong\n        val notes_beats_count_25 = notes_beats_count_24.toLong\n        val notes_beats_count_26 = notes_beats_count_25.toLong\n        val notes_beats_count_27 = notes_beats_count_26.toLong\n        val notes_beats_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpl_2cjepa.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl_2cjepa.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028993
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length>0)\n        val notes = music_list.map(music_note => music_note.split(\"|\").map(_.toUpperCase()).filter(_.length>0))\n        val notes_count = notes.map(music_note => music_note.size)\n        val notes_count_sum = notes_count.sum\n        val notes_count_average = notes_count_sum / notes_count.size\n        val notes_count_average_rounded = notes_count_average.toString.toDouble\n        val notes_count_average_rounded_rounded = math.round(notes_count_average_rounded)\n        val notes_count_average_rounded_rounded_rounded = math.round(notes_count_average_rounded_rounded)\n        val notes_count_average_rounded_rounded_rounded_rounded = math.round(notes_count_average_rounded_rounded_rounded)\n        val notes_count_average_rounded_rounded_rounded_rounded_rounded = math.round(notes_count_average_rounded_rounded_rounded_rounded)\n        val notes_count_average_rounded_rounded_rounded_rounded_rounded_rounded = math.round(notes_count_average_rounded_rounded_rounded_rounded_rounded)\n        val notes_count_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded = math.round(notes_count_average_rounded_rounded_rounded_rounded_rounded_rounded)\n        val notes_count_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded = math.round(notes_count_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n        val notes_count_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded = math.round(notes_count_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n        val notes_count_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded = math.round(notes_count_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n        val notes_count_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded = math.round(notes_count_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n        val notes_count_average_rounded_rounded_rounded_roun\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp6jpkclev.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6jpkclev.scala:29:141 -----------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_count_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\u001b[0m = math.round(notes_count_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: notes_count_average_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6jpkclev.scala:31:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028994
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(music_string => music_string.charAt(0).toInt)\n        val music_list_size = music_list.size\n        val music_list_beats = music_list.map(music_string => music_string.length.toLong)\n        val music_list_beats_size = music_list_beats.size\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_average = music_list_beats_sum / music_list_beats_size\n        val music_list_beats_average_size = music_list_beats_average.size\n        val music_list_beats_average_sum = music_list_beats_average.sum\n        val music_list_beats_average_average = music_list_beats_average_sum / music_list_beats_average_size\n        val music_list_beats_average_average_size = music_list_beats_average_average.size\n        val music_list_beats_average_average_sum = music_list_beats_average_average.sum\n        val music_list_beats_average_average_average = music_list_beats_average_average_sum / music_list_beats_average_average_size\n        val music_list_beats_average_average_average_size = music_list_beats_average_average_average.size\n        val music_list_beats_average_average_average_sum = music_list_beats_average_average_average.sum\n        val music_list_beats_average_average_average_average = music_list_beats_average_average_average_sum / music_list_beats_average_average_average_size\n        val music_list_beats_average_average_average_average = music_list_beats_average_average_average_average.size\n        val music_list_beats_average_average_average_average_size = music_list_beats_average_average_average_average.sum\n        val music_list_beats_average_average_average_average_average = music_list_beats_average_average_average_average_average.size\n        val music_list_beats_average_average_average_average_average_size = music_list_beats_average_average_average_average_average.sum\n        val music_list_beats_average_average_average_average_average_average = music_list_beats_average_average_average_average_average_average.size\n        val music_list_beats_average_average_average_average_average_average_size = music_list_beats_average_average_average_average_average_average.sum\n        val music_list_beats_average_average_average_average_average_average_average = music_list_beats_average_average_average_average_average_average_average.size\n        val music_list_beats_average_average_average_average_average_average_average = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp9tr_sz94.scala:36:86 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_average_average_average_average_average_average_average\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9tr_sz94.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_average_average_average_average\u001b[0m = music_list_beats_average_average_average_average.size\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_average_average_average_average is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_average_average_average_average\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9tr_sz94.scala:16:75 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats\u001b[0m = music_list.map(\u001b[36mmusic_string\u001b[0m => music_string.length.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value length is not a member of Int\n\u001b[31m\u001b[31m-- Error: /tmp/tmp9tr_sz94.scala:16:89 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats\u001b[0m = music_list.map(\u001b[36mmusic_string\u001b[0m => music_string.length.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m     ",
      "stdout": "",
      "timestamp": 1660028994
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"|\").map(music_string => {\n                val beat = music_string.charAt(0)\n                val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                    val rest = music_string.charAt(0)\n                    val rest2 = music_string.substring(1).split(\".\").map(music_string => {\n                        val rest2 = music_string.charAt(0)\n                        val rest3 = music_string.substring(1).split(\"|\").map(music_string => {\n                            val rest3 = music_string.charAt(0)\n                            val rest4 = music_string.substring(1).split(\"o\").map(music_string => {\n                                val rest4 = music_string.charAt(0)\n                                val rest5 = music_string.substring(1).split(\".\").map(music_string => {\n                                    val rest5 = music_string.charAt(0)\n                                    val rest6 = music_string.substring(1).split(\"|\").map(music_string => {\n                                        val rest6 = music_string.charAt(0)\n                                        val rest7 = music_string.substring(1).split(\"o\").map(music_string => {\n                                            val rest7 = music_string.charAt(0)\n                                            val rest8 = music_string.substring(1).split(\".\").map(music_string => {\n                                                val rest8 = music_string.charAt(0)\n                                                val rest9 = music_string.substring(1).split(\"|\").map(music_string => {\n                                                    val rest9 = music_string.charAt(0)\n                                                    val rest10 = music_string.substring(1).split(\"o\").map(music_string => {\n                                                        val rest10 = music_string.charAt(0)\n                                                        val rest11 = music_string.substring(1).split(\".\").map(music_string => {\n                                                            val rest11 = music_string.charAt(0)\n                                                            val rest12 = music_string.substring(1).split(\"|\").map(music_string => {\n                                                                val rest12 = music_string.charAt(0)\n                                                                val rest13 = music_string.substring(1).split(\"o\").map(music_string => {\n                                                                    val rest13 = music_string.charAt(0)\n                                                                    val rest14 = music_string.substring(1).split(\".\").map(music_string => {\n                                                                        val rest14 = music_string.charAt(0)\n                                                                        val rest15 = music_string.substring(1).split(\"|\").map(music_string => {\n                                                                            val rest15 = music_string.charAt(0)\n                                                                            val rest16 = music_string.substring(1).split(\"o\").map(music_string => {\n                                                                                val rest16 = music_string.charAt(\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpzpunxcpl.scala:49:113 --------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m                                                                                \u001b[33mval\u001b[0m \u001b[36mrest16\u001b[0m = music_string.charAt(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzpunxcpl.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzpunxcpl.scala:60:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028991
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_notes = music_string.split(\"\\\\|\")\n        val music_notes_length = music_notes.length\n        val music_notes_beats = music_notes.map(music_note => music_note.length.toLong)\n        val music_notes_beats_length = music_notes_beats.length\n        val music_notes_beats_sum = music_notes_beats.sum\n        val music_notes_beats_average = music_notes_beats_sum / music_notes_length\n        val music_notes_beats_average_length = music_notes_beats_average.toInt\n        val music_notes_beats_average_length_length = music_notes_beats_average_length.toInt\n        val music_notes_beats_average_length_length_length = music_notes_beats_average_length_length.toInt\n        val music_notes_beats_average_length_length_length_length = music_notes_beats_average_length_length_length.toInt\n        val music_notes_beats_average_length_length_length_length_length_length = music_notes_beats_average_length_length_length_length.toInt\n        val music_notes_beats_average_length_length_length_length_length_length_length = music_notes_beats_average_length_length_length_length_length.toInt\n        val music_notes_beats_average_length_length_length_length_length_length_length_length = music_notes_beats_average_length_length_length_length_length_length.toInt\n        val music_notes_beats_average_length_length_length_length_length_length_length_length_length = music_notes_beats_average_length_length_length_length_length_length_length.toInt\n        val music_notes_beats_average_length_length_length_length_length_length_length_length_length_length = music_notes_beats_average_length_length_length_length_length_length_length_length_length.toInt\n        val music_notes_beats_average_length_length_length_length_length_length_length_length_length_length_length_length = music_notes_beats_average_length_length_length_length_length_length_length_length_length_length.toInt\n        val music_notes_beats_average_length_length_length_length_length_length_length_length_length_length_length_length_length = music_notes_beats_average_length_length_length_length_length_length_length_length_length_length_length.toInt\n        val music_notes_beats_average_length_length_length_length_length_length_length_length_length_length_length_length_length_length = music_notes_beats_average_length_length_length_length_length_length_length_length_length_length_length_length.toInt\n        val music_notes_beats_average_length_length_length_length_length_length_length_length_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvroccche.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvroccche.scala:25:89 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_average_length_length_length_length_length_length_length\u001b[0m = music_notes_beats_average_length_length_length_length_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m Not found: music_notes_beats_average_length_length_length_length_length\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvroccche.scala:30:131 -----------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_average_length_length_length_length_length_length_length_length_length_length_length_length_length\u001b[0m = music_notes_beats_average_length_length_length_length_length_length_length_length_length_length_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: music_notes_beats_average_length_length_length_length_length_length_length_length_length_length_length\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvroccche.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660028998
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\")\n            val notes_length = notes.length\n            val notes_last_beat = notes(notes_length-1)\n            val notes_last_beat = notes_last_beat.toInt\n            val notes_last_beat = notes_last_beat * 4\n            notes_last_beat\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp49vqoonb.scala:18:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnotes_last_beat\u001b[0m = notes_last_beat.toInt\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_last_beat is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_last_beat\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp49vqoonb.scala:19:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnotes_last_beat\u001b[0m = notes_last_beat * \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_last_beat is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_last_beat\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028996
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_beats = music_list.map(music_string => music_string.split(\"o\"))\n        val music_list_beats_size = music_list_beats.size\n        val music_list_beats_size = music_list_beats_size.toInt\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val music_list_beats_size = music_list_beats_size * 4\n        val musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphvnfm5zn.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphvnfm5zn.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_size\u001b[0m = music_list_beats_size.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_size is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_size\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphvnfm5zn.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_size\u001b[0m = music_list_beats_size * \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_size is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_size\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphvnfm5zn.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_size\u001b[0m = music_list_beats_size * \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_size is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_size\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphvnfm5zn.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_size\u001b[0m = music_list_beats_size * \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_size is already defined as \u001b[",
      "stdout": "",
      "timestamp": 1660029000
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.charAt(0).toLowerCase\n            val beats = music_string.substring(1).split(\"|\").map(music_string => {\n                val beat = music_string.charAt(0).toLowerCase\n                val length = music_string.substring(1).split(\"o\").map(music_string => {\n                    val length = music_string.charAt(0).toLowerCase\n                    val rest = music_string.substring(1).split(\".\").map(music_string => {\n                        val length = music_string.charAt(0).toLowerCase\n                        val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                            val length = music_string.charAt(0).toLowerCase\n                            val rest = music_string.substring(1).split(\".\").map(music_string => {\n                                val length = music_string.charAt(0).toLowerCase\n                                val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                                    val length = music_string.charAt(0).toLowerCase\n                                    val rest = music_string.substring(1).split(\".\").map(music_string => {\n                                        val length = music_string.charAt(0).toLowerCase\n                                        val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                                            val length = music_string.charAt(0).toLowerCase\n                                            val rest = music_string.substring(1).split(\".\").map(music_string => {\n                                                val length = music_string.charAt(0).toLowerCase\n                                                val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                                                    val length = music_string.charAt(0).toLowerCase\n                                                    val rest = music_string.substring(1).split(\".\").map(music_string => {\n                                                        val length = music_string.charAt(0).toLowerCase\n                                                        val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                                                            val length = music_string.charAt(0).toLowerCase\n                                                            val rest = music_string.substring(1).split(\".\").map(music_string => {\n                                                                val length = music_string.charAt(0).toLowerCase\n                                                                val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                                                                    val length = music_string.charAt(0).toLowerCase\n                                                                    val rest = music_string.substring(1).split(\".\").map(music_string => {\n                                                                        val length = music_string.charAt(0).toLowerCase\n                                                                        val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                                                                            val length = music_string.charAt(0).toLowerCase\n                                                                            val rest = music_string.substring(1).split(\".\").map(music_string => {\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgd88xydq.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgd88xydq.scala:59:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgd88xydq.scala:15:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.charAt(\u001b[31m0\u001b[0m).toLowerCase\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgd88xydq.scala:17:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeat\u001b[0m = music_string.charAt(\u001b[31m0\u001b[0m).toLowerCase\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgd88xydq.scala:19:56 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    \u001b[33mval\u001b[0m \u001b[36mlength\u001b[0m = music_string.charAt(\u001b[31m0\u001b[0m).toLowerCase\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgd88xydq.scala:21:60 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                        \u001b[33mval\u001b[0m \u001b[36mlength\u001b[0m = music_string.charAt(\u001b[31m0\u001b[0m).toLowerCase\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgd88xydq.scala:23:64 ------------------------\u001b[0m\u001b[0m\n\u001b[3",
      "stdout": "",
      "timestamp": 1660029004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_size_int = music_list_size.toInt\n        val music_list_size_long = music_list_size_int.toLong\n        val music_list_size_long_long = music_list_size_long.toLong\n        val music_list_size_long_long_long = music_list_size_long_long.toLong\n        val music_list_size_long_long_long_long = music_list_size_long_long_long.toLong\n        val music_list_size_long_long_long_long_long = music_list_size_long_long_long_long.toLong\n        val music_list_size_long_long_long_long_long_long = music_list_size_long_long_long_long_long.toLong\n        val music_list_size_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long.toLong\n        val music_list_size_long_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_long.toLong\n        val music_list_size_long_long_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_long_long_long.toLong\n        val music_list_size_long_long_long_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_long_long_long_long.toLong\n        val music_list_size_long_long_long_long_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_long_long_long_long.toLong\n        val music_list_size_long_long_long_long_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_long_long_long_long_long.toLong\n        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long.toLong\n        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_long.toLong\n        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long.toLong\n        val music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_long = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7gy_54ba.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long\u001b[0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp7gy_54ba.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long\u001b[0m = music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  music_list_size_long_long_long_long_long_long_long_long_long_long_long_long_long\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp7gy_54ba.scala:25:75 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long_long_long_long_long_long_long_long_long\u001b[0m = music_list_size_long_long_long_long_long_long_long_long_long.toLong\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ",
      "stdout": "",
      "timestamp": 1660029000
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n        val notes_beats = notes.map(_.length.toLong)\n        val notes_beats_length = notes_beats.sum\n        val notes_beats_length_half = notes_beats_length / 2\n        val notes_beats_length_quarter = notes_beats_length / 4\n        val notes_beats_length_whole = notes_beats_length\n        val notes_beats_length_whole_half = notes_beats_length_whole / 2\n        val notes_beats_length_whole_quarter = notes_beats_length_whole / 4\n        val notes_beats_length_whole_whole = notes_beats_length_whole\n        val notes_beats_length_whole_whole_half = notes_beats_length_whole_whole / 2\n        val notes_beats_length_whole_whole_quarter = notes_beats_length_whole_whole / 4\n        val notes_beats_length_whole_whole_whole = notes_beats_length_whole_whole_half / 2\n        val notes_beats_length_whole_whole_whole_quarter = notes_beats_length_whole_whole_half / 4\n        val notes_beats_length_whole_whole_whole_whole = notes_beats_length_whole_whole_whole_quarter * 4\n        val notes_beats_length_whole_whole_whole_whole_half = notes_beats_length_whole_whole_whole_whole_whole / 2\n        val notes_beats_length_whole_whole_whole_whole_quarter = notes_beats_length_whole_whole_whole_whole_half / 4\n        val notes_beats_length_whole_whole_whole_whole_whole = notes_beats_length_whole_whole_whole_whole_quarter * 4\n        val notes_beats_length_whole_whole_whole_whole_whole_half = notes_beats_length_whole_whole_whole_whole_whole_whole / 2\n        val notes_beats_length_whole_whole_whole_whole_whole_quarter = notes_beats_length_whole_whole_whole_whole_whole_half / 4\n        val notes_beats_length_whole_whole_whole_whole_whole_whole = notes_beats_length_whole_whole_whole_whole_whole_quarter * 4\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpaklk_m38.scala:35:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpaklk_m38.scala:30:65 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length_whole_whole_whole_whole_quarter\u001b[0m = notes_beats_length_whole_whole_whole_whole_half / \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_length_whole_whole_whole_whole_half\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpaklk_m38.scala:33:71 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length_whole_whole_whole_whole_whole_quarter\u001b[0m = notes_beats_length_whole_whole_whole_whole_whole_half / \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                                       ^\u001b[0m\n\u001b[31m   |\u001b[0mRecursive \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_length_whole_whole_whole_whole_whole_half\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaklk_m38.scala:36:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029001
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val music_notes = music_string.split(\"o\").map(music_note => {\n                val note = music_note.trim\n                val beats = note.split(\"|\").map(beat => {\n                    val beat = beat.trim\n                    val beats = beat.split(\"|\").map(beat_string => {\n                        val beat = beat_string.trim\n                        val beats = beat.split(\"|\").map(beat_string => {\n                            val beat = beat_string.trim\n                            val beats = beat.split(\"|\").map(beat_string => {\n                                val beat = beat_string.trim\n                                val beats = beat.split(\"|\").map(beat_string => {\n                                    val beat = beat_string.trim\n                                    val beats = beat.split(\"|\").map(beat_string => {\n                                        val beat = beat_string.trim\n                                        val beats = beat.split(\"|\").map(beat_string => {\n                                            val beat = beat_string.trim\n                                            val beats = beat.split(\"|\").map(beat_string => {\n                                                val beat = beat_string.trim\n                                                val beats = beat.split(\"|\").map(beat_string => {\n                                                    val beat = beat_string.trim\n                                                    val beats = beat.split(\"|\").map(beat_string => {\n                                                        val beat = beat_string.trim\n                                                        val beats = beat.split(\"|\").map(beat_string => {\n                                                            val beat = beat_string.trim\n                                                            val beats = beat.split(\"|\").map(beat_string => {\n                                                                val beat = beat_string.trim\n                                                                val beats = beat.split(\"|\").map(beat_string => {\n                                                                    val beat = beat_string.trim\n                                                                    val beats = beat.split(\"|\").map(beat_string => {\n                                                                        val beat = beat_string.trim\n                                                                        val beats = beat.split(\"|\").map(beat_string => {\n                                                                            val beat = beat_string.trim\n                                                                            val beats = beat.split(\"|\").map(beat_string => {\n                                                                                val beat = beat_string.trim\n                                                                                val beats = beat.split(\"|\").map(beat_string => {\n                                                                                    val beat = beat_string.trim\n                                                                                    val beats = beat.split(\"|\").map(beat_string => {\n                                                                                        val beat = beat_string.trim\n                                                                                        val beats = beat.split(\"|\").map(beat_string => {\n                                                                                            val beat = beat_string.trim\n                                                                                            val \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpqjxlhhal.scala:55:95 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m                                                                                            \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqjxlhhal.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqjxlhhal.scala:66:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m66 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028999
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val beats = rest.length / 4\n            val rest2 = rest.substring(music_string.length)\n            val note2 = rest2.substring(0, 1)\n            val rest3 = rest2.substring(1, rest2.length)\n            val beats2 = rest3.length / 4\n            val rest4 = rest3.substring(rest3.length)\n            val note3 = rest4.substring(0, 1)\n            val rest5 = rest4.substring(1, rest4.length)\n            val beats3 = rest5.length / 4\n            val rest6 = rest5.substring(rest5.length)\n            val note4 = rest6.substring(0, 1)\n            val rest7 = rest6.substring(1, rest6.length)\n            val beats4 = rest7.length / 4\n            val rest8 = rest7.substring(rest7.length)\n            val note5 = rest8.substring(0, 1)\n            val rest9 = rest8.substring(1, rest8.length)\n            val beats5 = rest9.length / 4\n            val rest10 = rest9.substring(rest9.length)\n            val note6 = rest10.substring(0, 1)\n            val rest11 = rest10.substring(1, rest10.length)\n            val beats6 = rest11.length / 4\n            val rest12 = rest11.substring(rest11.length)\n            val note7 = rest12.substring(0, 1)\n            val rest13 = rest12.substring(1, rest12.length)\n            val beats7 = rest13.length / 4\n            val rest14 = rest13.substring(rest13.length)\n            val note8 = rest14.substring(0, 1)\n            val rest15 = rest14.substring(1, rest14.length)\n            val beats8 = rest15.length / 4\n            val rest16 = rest15.substring(rest15.length)\n            val note9 = rest16.substring(0, 1)\n            val rest17 = rest16.substring(1, rest16.length)\n            val beats9 = rest17.length / 4\n            val rest18 = rest17.substring(rest17.length)\n            val note10 = rest18.substring(0, 1)\n            val rest19 = rest18.substring(1, rest18.length)\n            val beats10 = rest19.length / 4\n            val rest20 = rest19.substring(rest19.length)\n            val note11 = rest20.substring(0, 1)\n            val rest21 = rest20.substring(1, rest20.length)\n            val beats11 = rest21.length / 4\n            val \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmp0orhsm5g.scala:58:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m            \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0orhsm5g.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0orhsm5g.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660028999
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \")\n        val music_list_size = music_list.size\n        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_size_33 = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjyj30zde.scala:47:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_33\u001b[0m = musi\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: musi\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjyj30zde.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028979
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole = music_list_size\n        val music_list_size_last_four = music_list_size_whole - 4\n        val music_list_size_last_two = music_list_size_whole - 2\n        val music_list_size_last_one = music_list_size_whole - 1\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_size_last_three = music_list_size_whole - 3\n        val music_list_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpptdfhmib.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpptdfhmib.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_last_three\u001b[0m = music_list_size_whole - \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_last_three is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_last_three\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpptdfhmib.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_last_three\u001b[0m = music_list_size_whole - \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_last_three is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_last_three\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpptdfhmib.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_last_three\u001b[0m = music_list_size_whole - \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_last_three is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_last_three\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpptdfhmib.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_last_three\u001b[0m = music_list_size_whole - \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(music_string => music_string.charAt(0).toInt)\n        val music_list_size = music_list.size\n        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole = music_list_size.toLong\n        val music_list_size_quarter_whole = music_list_size_quarter.toLong\n        val music_list_size_half_whole = music_list_size_half.toLong\n        val music_list_size_whole_whole = music_list_size_whole.toLong\n        val music_list_size_quarter_whole_whole = music_list_size_quarter_whole.toLong\n        val music_list_size_half_whole_whole = music_list_size_half_whole.toLong\n        val music_list_size_whole_half_whole = music_list_size_whole_whole.toLong\n        val music_list_size_quarter_whole_half_whole = music_list_size_quarter_whole_whole.toLong\n        val music_list_size_half_whole_half_whole = music_list_size_half_whole_whole.toLong\n        val music_list_size_whole_quarter_whole_half_whole = music_list_size_whole_whole.toLong\n        val music_list_size_quarter_whole_quarter_whole_whole = music_list_size_quarter_whole_whole.toLong\n        val music_list_size_half_whole_quarter_whole_quarter_whole = music_list_size_half_whole_whole.toLong\n        val music_list_size_whole_quarter_whole_quarter_whole_quarter_whole = music_list_size_whole_whole.toLong\n        val music_list_size_quarter_whole_quarter_whole_quarter_whole_quarter_whole = music_list_size_quarter_whole_whole.toLong\n        val music_list_size_half_whole_quarter_whole_quarter_whole_quarter_whole_quarter_whole = music_list_size_half_whole_whole.toLong\n        val music_list_size_whole_quarter_whole_quarter_whole_quarter_whole_quarter_whole_quarter_whole = music_list_size_whole_whole.toLong\n        val music_list_size_quarter_whole_quarter_whole_quarter_whole_quarter_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgy7dtk20.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgy7dtk20.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_size_long = music_list_size.map(_.toLong)\n        val music_list_size_long_reverse = music_list_size_long.reverse\n        val music_list_size_long_reverse_sum = music_list_size_long_reverse.sum\n        val music_list_size_long_reverse_sum_long = music_list_size_long_reverse_sum.toLong\n        val music_list_size_long_reverse_sum_long_long = music_list_size_long_reverse_sum_long.toLong\n        val music_list_size_long_reverse_sum_long_long_long = music_list_size_long_reverse_sum_long_long.toLong\n        val music_list_size_long_reverse_sum_long_long_long_long = music_list_size_long_reverse_sum_long_long_long.toLong\n        val music_list_size_long_reverse_sum_long_long_long_long_long = music_list_size_long_reverse_sum_long_long_long_long.toLong\n        val music_list_size_long_reverse_sum_long_long_long_long_long_long = music_list_size_long_reverse_sum_long_long_long_long_long.toLong\n        val music_list_size_long_reverse_sum_long_long_long_long_long_long_long = music_list_size_long_reverse_sum_long_long_long_long_long_long.toLong\n        val music_list_size_long_reverse_sum_long_long_long_long_long_long_long_long = music_list_size_long_reverse_sum_long_long_long_long_long_long.toLong\n        val music_list_size_long_reverse_sum_long_long_long_long_long_long_long_long_long = music_list_size_long_reverse_sum_long_long_long_long_long_long_long.toLong\n        val music_list_size_long_reverse_sum_long_long_long_long_long_long_long_long_long_long = music_list_size_long_reverse_sum_long_long_long_long_long_long_long_long_long.toLong\n        val music_list_size_long_reverse_sum_long_long_long_long_long_long_long_long_long_long_long = music_list_size_long_reverse_sum_long_long_long_long_long_long_long_long_long_long.toLong\n        val music_list_size_long_reverse_sum_long_long_long_long_long_long_long_long_long_long_long = music_list_size_long_reverse_sum_long_long_long_long_long_long_long_long_long_long.toLong\n        val music_list_size_long_reverse_sum_long_long_long_long_long_long_long_long_long_long_long_long = music_list_size_long_re\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5nk1rqgp.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long_reverse_sum_long_long_long_long_long_long_long_long_long_long_long\u001b[0m = music_list_size_long_reverse_sum_long_long_long_long_long_long_long_long_long_long.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_long_reverse_sum_long_long_long_long_long_long_long_long_long_long_long is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  music_list_size_long_reverse_sum_long_long_long_long_long_long_long_long_long_long_long\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5nk1rqgp.scala:16:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long\u001b[0m = music_list_size.map(_.toLong)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value map is not a member of Int\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5nk1rqgp.scala:31:107 -----------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long_reverse_sum_long_long_long_long_long_long_long_long_long_long_long_long\u001b[0m = music_list_size_long_re\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Not found: music_list_size_long_re\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5nk1rqgp.scala:32:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   ",
      "stdout": "",
      "timestamp": 1660029003
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val beats = rest.split(\"|\").map(_.toLong).sum\n            beats\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmp1fkp8_fa.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmp1fkp8_fa.scala:19)\n\tat Problem$.main(tmp1fkp8_fa.scala:22)\n\tat Problem.main(tmp1fkp8_fa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n        val beats = music_list.foldLeft(List[Long]())((acc, note) => {\n            val note = note.split(\"|\").map(_.toUpperCase).head\n            val beats = note.split(\"o\").map(_.toUpperCase).head\n            acc :+ beats.toLong\n        })\n        beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmplnzu9hus.scala:16:23 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = note.split(\u001b[31m\"|\"\u001b[0m).map(_.toUpperCase).head\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Recursive \u001b[33mvalue\u001b[0m \u001b[35mnote\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029000
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length != 0).map(music_char => {\n            val music_char_list = music_char.split(\"|\").map(music_char => music_char.toInt).toList\n            val music_char_list = music_char_list.filter(music_char => music_char != 0)\n            val music_char_list = music_char_list.map(music_char => music_char * 4)\n            val music_char_list = music_char_list.map(music_char => music_char + music_char_list.last)\n            music_char_list.map(music_char => music_char.toLong)\n        })\n        music_list.flatten.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmurzp0_3.scala:16:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_char_list\u001b[0m = music_char_list.filter(\u001b[36mmusic_char\u001b[0m => music_char != \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_char_list is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_char_list\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmurzp0_3.scala:17:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_char_list\u001b[0m = music_char_list.map(\u001b[36mmusic_char\u001b[0m => music_char * \u001b[31m4\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_char_list is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_char_list\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmurzp0_3.scala:18:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_char_list\u001b[0m = music_char_list.map(\u001b[36mmusic_char\u001b[0m => music_char + music_char_list.last)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_char_list is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_char_list\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val notes = music_string.split(\"\\\\ \").map(music_string => {\n                val note = music_string.charAt(0).toLowerCase\n                val beats = music_string.substring(1).toLong\n                beats\n            }).toList\n            notes.sum\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2zv9l4_q.scala:16:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.charAt(\u001b[31m0\u001b[0m).toLowerCase\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value toLowerCase is not a member of Char\n1 error found\n",
      "stdout": "",
      "timestamp": 1660028950
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, 2)\n            val restLength = rest.length\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = restLength.toLong\n            val restLength = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpsiq9kzn5.scala:70:28 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m70 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestLength\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                            ^\u001b[0m\n\u001b[31m   |\u001b[0m                            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsiq9kzn5.scala:72:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsiq9kzn5.scala:81:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m81 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsiq9kzn5.scala:18:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestLength\u001b[0m = restLength.toLong\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrestLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mrestLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsiq9kzn5.scala:19:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestLength\u001b[0m = restLength.toLong\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrestLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mrestLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsiq9kzn5.scala:20:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrestLength\u001b[0m = restLength.toLong\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrestLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mrestLength\u001b[",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val music_note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"|\").map(music_string => {\n                val beat = music_string.charAt(0)\n                val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                    val rest = music_string.charAt(0)\n                    val rest2 = music_string.substring(1).split(\".\").map(music_string => {\n                        val rest2 = music_string.charAt(0)\n                        val rest3 = music_string.substring(1).split(\"|\").map(music_string => {\n                            val rest3 = music_string.charAt(0)\n                            val rest4 = music_string.substring(1).split(\"o\").map(music_string => {\n                                val rest4 = music_string.charAt(0)\n                                val rest5 = music_string.substring(1).split(\".\").map(music_string => {\n                                    val rest5 = music_string.charAt(0)\n                                    val rest6 = music_string.substring(1).split(\"|\").map(music_string => {\n                                        val rest6 = music_string.charAt(0)\n                                        val rest7 = music_string.substring(1).split(\"o\").map(music_string => {\n                                            val rest7 = music_string.charAt(0)\n                                            val rest8 = music_string.substring(1).split(\".\").map(music_string => {\n                                                val rest8 = music_string.charAt(0)\n                                                val rest9 = music_string.substring(1).split(\"|\").map(music_string => {\n                                                    val rest9 = music_string.charAt(0)\n                                                    val rest10 = music_string.substring(1).split(\"o\").map(music_string => {\n                                                        val rest10 = music_string.charAt(0)\n                                                        val rest11 = music_string.substring(1).split(\".\").map(music_string => {\n                                                            val rest11 = music_string.charAt(0)\n                                                            val rest12 = music_string.substring(1).split(\"|\").map(music_string => {\n                                                                val rest12 = music_string.charAt(0)\n                                                                val rest13 = music_string.substring(1).split(\"o\").map(music_string => {\n                                                                    val rest13 = music_string.charAt(0)\n                                                                    val rest14 = music_string.substring(1).split(\".\").map(music_string => {\n                                                                        val rest14 = music_string.charAt(0)\n                                                                        val rest15 = music_string.substring(1).split(\"|\").map(music_string => {\n                                                                            val rest15 = music_string.charAt(0)\n                                                                            val rest16 = music_string.substring(1).split(\"o\").map(music_string => {\n                                                                                val rest16 = music_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz1kzct45.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz1kzct45.scala:60:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz1kzct45.scala:49:93 ------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m                                                                                \u001b[33mval\u001b[0m \u001b[36mrest16\u001b[0m = music_\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                             ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                       Not found: music_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029003
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n                val beats = rest.split(\"o\").map(music_string => {\n                    val beat = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n                    val beats = rest.split(\".\").map(music_string => {\n                        val beat = music_string.substring(0, 1)\n                        val rest = music_string.substring(1)\n                        val beats = rest.split(\"|\").map(music_string => {\n                            val beat = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n                            val beats = rest.split(\"o\").map(music_string => {\n                                val beat = music_string.substring(0, 1)\n                                val rest = music_string.substring(1)\n                                val beats = rest.split(\".\").map(music_string => {\n                                    val beat = music_string.substring(0, 1)\n                                    val rest = music_string.substring(1)\n                                    val beats = rest.split(\"|\").map(music_string => {\n                                        val beat = music_string.substring(0, 1)\n                                        val rest = music_string.substring(1)\n                                        val beats = rest.split(\"o\").map(music_string => {\n                                            val beat = music_string.substring(0, 1)\n                                            val rest = music_string.substring(1)\n                                            val beats = rest.split(\".\").map(music_string => {\n                                                val beat = music_string.substring(0, 1)\n                                                val rest = music_string.substring(1)\n                                                val beats = rest.split(\"|\").map(music_string => {\n                                                    val beat = music_string.substring(0, 1)\n                                                    val rest = music_string.substring(1)\n                                                    val beats = rest.split(\"o\").map(music_string => {\n                                                        val beat = music_string.substring(0, 1)\n                                                        val rest = music_string.substring(1)\n                                                        val beats = rest.split(\".\").map(music_string => {\n                                                            val beat = music_string.substring(0, 1)\n                                                            val rest = music_string.substring(1)\n                                                            val beats = rest.split(\"|\").map(music_string => {\n                                                                val beat = music_string.substring(0, 1)\n                                                                val rest = music_string.substring(1)\n                                                                val beats = rest.split(\"o\").map(music_string => {\n                                                                    val beat = music_string.substring(0, 1)\n                                                                    val rest = music_string.substring(1)\n                                                                    val beats = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpigwi7wiz.scala:58:91 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m                                                                    \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = rest.split(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpigwi7wiz.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpigwi7wiz.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_size_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnjkk66h1.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjkk66h1.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028950
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list = music_list.map(music_string => {\n            val music_list = music_string.split(\"\\\\o\")\n            val music_list = music_list.map(music_string => {\n                val music_list = music_string.split(\"\\\\.\\\\.\")\n                val music_list = music_list.map(music_string => {\n                    val music_list = music_string.split(\"\\\\o\")\n                    val music_list = music_list.map(music_string => {\n                        val music_list = music_string.split(\"\\\\.\\\\.\")\n                        val music_list = music_list.map(music_string => {\n                            val music_list = music_string.split(\"\\\\o\")\n                            val music_list = music_list.map(music_string => {\n                                val music_list = music_string.split(\"\\\\.\\\\.\")\n                                val music_list = music_list.map(music_string => {\n                                    val music_list = music_string.split(\"\\\\o\")\n                                    val music_list = music_list.map(music_string => {\n                                        val music_list = music_string.split(\"\\\\.\\\\.\")\n                                        val music_list = music_list.map(music_string => {\n                                            val music_list = music_string.split(\"\\\\o\")\n                                            val music_list = music_list.map(music_string => {\n                                                val music_list = music_string.split(\"\\\\.\\\\.\")\n                                                val music_list = music_list.map(music_string => {\n                                                    val music_list = music_string.split(\"\\\\o\")\n                                                    val music_list = music_list.map(music_string => {\n                                                        val music_list = music_string.split(\"\\\\.\\\\.\")\n                                                        val music_list = music_list.map(music_string => {\n                                                            val music_list = music_string.split(\"\\\\o\")\n                                                            val music_list = music_list.map(music_string => {\n                                                                val music_list = music_string.split(\"\\\\.\\\\.\")\n                                                                val music_list = music_list.map(music_string => {\n                                                                    val music_list = music_string.split(\"\\\\o\")\n                                                                    val music_list = music_list.map(music_string => {\n                                                                        val music_list = music_string.split(\"\\\\.\\\\.\")\n                                                                        val music_list = music_list.map(music_string => {\n                                                                            val music_list = music_string.split(\"\\\\o\")\n                                                                            val music_list = music_list.map(music_string => {\n                                                                                val music_list = music_string.split(\"\\\\.\\\\.\")\n                                                                                val music_list = \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp_yp6e_l8.scala:51:96 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m                                                                                \u001b[33mval\u001b[0m \u001b[36mmusic_list\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_yp6e_l8.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_yp6e_l8.scala:62:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_yp6e_l8.scala:61:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \")\n        val music_list_length = music_list.length\n        val music_list_beats = music_list.map(music_string => {\n            val music_string_length = music_string.length\n            val music_string_beats = music_string.split(\"|\").length\n            music_string_beats * music_string_length\n        }).toList\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n        val music_list_beats_sum = music_list_beats.sum\n        val music_list_beats_length = music_list_beats.length\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpde7xzpi0.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_sum\u001b[0m = music_list_beats.sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_sum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_sum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpde7xzpi0.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_length\u001b[0m = music_list_beats.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpde7xzpi0.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_sum\u001b[0m = music_list_beats.sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_sum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_sum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpde7xzpi0.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_beats_length\u001b[0m = music_list_beats.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpde7xzpi0.scala:27:12 -----------------",
      "stdout": "",
      "timestamp": 1660029005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length() > 0)\n        val notes = music_list.map(music_note => {\n            val note = music_note.charAt(0)\n            val rest = music_note.substring(1).replace(\"|\", \"\")\n            val rests = rest.split(\"o\")\n            val rests_count = rests.length\n            val rests_beats = rests.map(rest => {\n                val rests_beat = rest.replace(\"|\", \"\")\n                val rests_beats = rests_beat.toLong\n                rests_beats\n            })\n            val rests_beats_count = rests_beats.sum\n            val rests_beats_count_without_rests = rests_beats_count - rests_beats_count\n            val rests_beats_count_without_rests_without_rests = rests_beats_count_without_rests - rests_beats_count\n            val rests_beats_count_without_rests_without_rests_without_rests = rests_beats_count_without_rests_without_rests - rests_beats_count\n            val rests_beats_count_without_rests_without_rests_without_rests_without_rests = rests_beats_count_without_rests_without_rests_without_rests - rests_beats_count\n            val rests_beats_count_without_rests_without_rests_without_rests_without_rests_without_rests = rests_beats_count_without_rests_without_rests_without_rests_without_rests - rests_beats_count\n            val rests_beats_count_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests = rests_beats_count_without_rests_without_rests_without_rests_without_rests_without_rests - rests_beats_count\n            val rests_beats_count_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests = rests_beats_count_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests - rests_beats_count\n            val rests_beats_count_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests = rests_beats_count_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests - rests_beats_count\n            val rests_beats_count_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests = rests_beats_count_without_rests_without_rests_without_rests_without_rest\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb5d8infc.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpb5d8infc.scala:45:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb5d8infc.scala:34:162 -----------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrests_beats_count_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests_without_rests\u001b[0m = rests_beats_count_without_rests_without_rests_without_rests_without_rest\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: rests_beats_count_without_rests_without_rests_without_rests_without_rest\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb5d8infc.scala:44:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n                beat.toLong * rest.length\n            }).sum\n            note.toLong * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjadz4yn9.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m17 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeat\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m18 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m)\n\u001b[31m19 |\u001b[0m                beat.toLong * rest.length\n\u001b[31m20 |\u001b[0m            }).sum\n\u001b[31m21 |\u001b[0m            note.toLong * beats\n\u001b[31m22 |\u001b[0m        }).sum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1659799849
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length>0).map(_.toInt)\n        val note_count = music_list.count(_ == 1)\n        val note_length = music_list.count(_ == 2)\n        val note_length = music_list.count(_ == 3)\n        val note_length = music_list.count(_ == 4)\n        val note_length = music_list.count(_ == 5)\n        val note_length = music_list.count(_ == 6)\n        val note_length = music_list.count(_ == 7)\n        val note_length = music_list.count(_ == 8)\n        val note_length = music_list.count(_ == 9)\n        val note_length = music_list.count(_ == 10)\n        val note_length = music_list.count(_ == 11)\n        val note_length = music_list.count(_ == 12)\n        val note_length = music_list.count(_ == 13)\n        val note_length = music_list.count(_ == 14)\n        val note_length = music_list.count(_ == 15)\n        val note_length = music_list.count(_ == 16)\n        val note_length = music_list.count(_ == 17)\n        val note_length = music_list.count(_ == 18)\n        val note_length = music_list.count(_ == 19)\n        val note_length = music_list.count(_ == 20)\n        val note_length = music_list.count(_ == 21)\n        val note_length = music_list.count(_ == 22)\n        val note_length = music_list.count(_ == 23)\n        val note_length = music_list.count(_ == 24)\n        val note_length = music_list.count(_ == 25)\n        val note_length = music_list.count(_ == 26)\n        val note_length = music_list.count(_ == 27)\n        val note_length = music_list.count(_ == 28)\n        val note_length = music_list.count(_ == 29)\n        val note_length = music_list.count(_ == 30)\n        val note_length = music_list.count(_ == 31)\n        val note_length = music_list.count(_ == 32)\n        val note_length = music_list.count(_ == 33)\n        val note_length = music_list.count(_ == 34)\n        val note_length = music_list.count(_ == 35)\n        val note_length = music_list.count(_ == 36)\n        val note_length = music_list.count(_ == 37)\n        val note_length = music_list.count(_ == 38)\n        val note_length = music_list.count(_ == 39)\n        val note_length = music_list.\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvc2t8ouq.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvc2t8ouq.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnote_length\u001b[0m = music_list.count(_ == \u001b[31m3\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnote_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnote_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvc2t8ouq.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnote_length\u001b[0m = music_list.count(_ == \u001b[31m4\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnote_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnote_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvc2t8ouq.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnote_length\u001b[0m = music_list.count(_ == \u001b[31m5\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnote_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnote_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvc2t8ouq.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnote_length\u001b[0m = music_list.count(_ == \u001b[31m6\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnote_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnote_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel def",
      "stdout": "",
      "timestamp": 1660029008
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1).trim\n            val beats = rest.split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1).trim\n                beat.charAt(0).toLong\n            }).sum\n            note.toLong * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoepjq5nz.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).trim\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = rest.split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m18 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeat\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m19 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).trim\n\u001b[31m20 |\u001b[0m                beat.charAt(\u001b[31m0\u001b[0m).toLong\n\u001b[31m21 |\u001b[0m            }).sum\n\u001b[31m22 |\u001b[0m            note.toLong * beats\n\u001b[31m23 |\u001b[0m        }).sum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n        val notes_beats = notes.map(_.length.toLong)\n        val notes_beats_length = notes_beats.sum\n        val notes_beats_length_minus_1 = notes_beats_length - 1\n        val notes_beats_length_minus_2 = notes_beats_length - 2\n        val notes_beats_length_minus_3 = notes_beats_length - 3\n        val notes_beats_length_minus_4 = notes_beats_length - 4\n        val notes_beats_length_minus_5 = notes_beats_length - 5\n        val notes_beats_length_minus_6 = notes_beats_length - 6\n        val notes_beats_length_minus_7 = notes_beats_length - 7\n        val notes_beats_length_minus_8 = notes_beats_length - 8\n        val notes_beats_length_minus_9 = notes_beats_length - 9\n        val notes_beats_length_minus_10 = notes_beats_length - 10\n        val notes_beats_length_minus_11 = notes_beats_length - 11\n        val notes_beats_length_minus_12 = notes_beats_length - 12\n        val notes_beats_length_minus_13 = notes_beats_length - 13\n        val notes_beats_length_minus_14 = notes_beats_length - 14\n        val notes_beats_length_minus_15 = notes_beats_length - 15\n        val notes_beats_length_minus_16 = notes_beats_length - 16\n        val notes_beats_length_minus_17 = notes_beats_length - 17\n        val notes_beats_length_minus_18 = notes_beats_length - 18\n        val notes_beats_length_minus_19 = notes_beats_length - 19\n        val notes_beats_length_minus_20 = notes_beats_length - 20\n        val notes_beats_length_minus_21 = notes_beats_length - 21\n        val notes_beats_length_minus_22 = notes_beats_length - 22\n        val notes_beats_length_minus_23 = notes_beats_length - 23\n        val notes_beats_length_minus_24 = notes_beats_length - 24\n        val notes_beats_length_minus_25 = notes_beats_length - 25\n        val notes_beats_length_minus_26 = notes_beats_length - 26\n        val notes_beats_length_min\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpoct_432m.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoct_432m.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val beats = rest.split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1, music_string.length)\n                val rest2 = rest.split(\"|\").map(music_string => {\n                    val beat = music_string.substring(0, 1)\n                    val rest = music_string.substring(1, music_string.length)\n                    val rest3 = rest.split(\"|\").map(music_string => {\n                        val beat = music_string.substring(0, 1)\n                        val rest = music_string.substring(1, music_string.length)\n                        val rest4 = rest.split(\"|\").map(music_string => {\n                            val beat = music_string.substring(0, 1)\n                            val rest = music_string.substring(1, music_string.length)\n                            val rest5 = rest.split(\"|\").map(music_string => {\n                                val beat = music_string.substring(0, 1)\n                                val rest = music_string.substring(1, music_string.length)\n                                val rest6 = rest.split(\"|\").map(music_string => {\n                                    val beat = music_string.substring(0, 1)\n                                    val rest = music_string.substring(1, music_string.length)\n                                    val rest7 = rest.split(\"|\").map(music_string => {\n                                        val beat = music_string.substring(0, 1)\n                                        val rest = music_string.substring(1, music_string.length)\n                                        val rest8 = rest.split(\"|\").map(music_string => {\n                                            val beat = music_string.substring(0, 1)\n                                            val rest = music_string.substring(1, music_string.length)\n                                            val rest9 = rest.split(\"|\").map(music_string => {\n                                                val beat = music_string.substring(0, 1)\n                                                val rest = music_string.substring(1, music_string.length)\n                                                val rest10 = rest.split(\"|\").map(music_string => {\n                                                    val beat = music_string.substring(0, 1)\n                                                    val rest = music_string.substring(1, music_string.length)\n                                                    val rest11 = rest.split(\"|\").map(music_string => {\n                                                        val beat = music_string.substring(0, 1)\n                                                        val rest = music_string.substring(1, music_string.length)\n                                                        val rest12 = rest.split(\"|\").map(music_string => {\n                                                            val beat = music_string.substring(0, 1)\n                                                            val rest = music_string.substring(1, music_string.length)\n                                                            val \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpz9esp709.scala:53:63 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m                                                            \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                        pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz9esp709.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpz9esp709.scala:64:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029007
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n                val beats = rest.split(\"o\").map(music_string => {\n                    val beat = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n                    val beats = rest.split(\".\").map(music_string => {\n                        val beat = music_string.substring(0, 1)\n                        val rest = music_string.substring(1)\n                        val beats = rest.split(\"|\").map(music_string => {\n                            val beat = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n                            val beats = rest.split(\"o\").map(music_string => {\n                                val beat = music_string.substring(0, 1)\n                                val rest = music_string.substring(1)\n                                val beats = rest.split(\".\").map(music_string => {\n                                    val beat = music_string.substring(0, 1)\n                                    val rest = music_string.substring(1)\n                                    val beats = rest.split(\"|\").map(music_string => {\n                                        val beat = music_string.substring(0, 1)\n                                        val rest = music_string.substring(1)\n                                        val beats = rest.split(\"o\").map(music_string => {\n                                            val beat = music_string.substring(0, 1)\n                                            val rest = music_string.substring(1)\n                                            val beats = rest.split(\".\").map(music_string => {\n                                                val beat = music_string.substring(0, 1)\n                                                val rest = music_string.substring(1)\n                                                val beats = rest.split(\"|\").map(music_string => {\n                                                    val beat = music_string.substring(0, 1)\n                                                    val rest = music_string.substring(1)\n                                                    val beats = rest.split(\"o\").map(music_string => {\n                                                        val beat = music_string.substring(0, 1)\n                                                        val rest = music_string.substring(1)\n                                                        val beats = rest.split(\".\").map(music_string => {\n                                                            val beat = music_string.substring(0, 1)\n                                                            val rest = music_string.substring(1)\n                                                            val beats = rest.split(\"|\").map(music_string => {\n                                                                val beat = music_string.substring(0, 1)\n                                                                val rest = music_string.substring(1)\n                                                                val beats = rest.split(\"o\").map(music_string => {\n                                                                    val beat = music_string.substring(0, 1)\n                                                                    val rest = music_string.substring(1)\n                                                                    val beats = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpigwi7wiz.scala:58:91 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m                                                                    \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = rest.split(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpigwi7wiz.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpigwi7wiz.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\").map(music_string => {\n                val note = music_string.split(\"o\").head\n                val beats = music_string.split(\"o|\").head\n                note.toLong * beats.toLong\n            })\n            notes.sum\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp964hupm3.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mArray\u001b[0m[Long]\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m[Long]\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnotes\u001b[0m = music_string.split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.split(\u001b[31m\"o\"\u001b[0m).head\n\u001b[31m17 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = music_string.split(\u001b[31m\"o|\"\u001b[0m).head\n\u001b[31m18 |\u001b[0m                note.toLong * beats.toLong\n\u001b[31m19 |\u001b[0m            })\n\u001b[31m20 |\u001b[0m            notes.sum\n\u001b[31m21 |\u001b[0m        })\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029012
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_count = notes.length\n        val notes_array = notes.map(_.toInt)\n        val notes_array = notes_array.toList\n        val notes_array = notes_array.sortBy(_ * -1)\n        val notes_array = notes_array.map(x => math.ceil(x).toLong)\n        val notes_array = notes_array.toList\n        val notes_array = notes_array.sortBy(_ * -1)\n        val notes_array = notes_array.map(x => math.ceil(x).toLong)\n        val notes_array = notes_array.toList\n        val notes_array = notes_array.sortBy(_ * -1)\n        val notes_array = notes_array.map(x => math.ceil(x).toLong)\n        val notes_array = notes_array.toList\n        val notes_array = notes_array.sortBy(_ * -1)\n        val notes_array = notes_array.map(x => math.ceil(x).toLong)\n        val notes_array = notes_array.toList\n        val notes_array = notes_array.sortBy(_ * -1)\n        val notes_array = notes_array.map(x => math.ceil(x).toLong)\n        val notes_array = notes_array.toList\n        val notes_array = notes_array.sortBy(_ * -1)\n        val notes_array = notes_array.map(x => math.ceil(x).toLong)\n        val notes_array = notes_array.toList\n        val notes_array = notes_array.sortBy(_ * -1)\n        val notes_array = notes_array.map(x => math.ceil(x).toLong)\n        val notes_array = notes_array.toList\n        val notes_array = notes_array.sortBy(_ * -1)\n        val notes_array = notes_array.map(x => math.ceil(x).toLong)\n        val notes_array = notes_array.toList\n        val notes_array = notes_array.sortBy(_ * -1)\n        val notes_array = notes_array.map(x => math.ceil(x).toLong)\n        val notes_array = notes_array.toList\n        val notes_array = notes_array.sortBy(_ * -1)\n        val notes_array = notes_array.map(x => math.ceil(x).toLong)\n        val notes_array = notes_array.toList\n        val notes_array = notes_array.sortBy(_ * -1)\n        val notes_array = notes_array.map(x => math.ceil(x).toLong)\n        val notes_array = note\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr4458xww.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr4458xww.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.sortBy(_ * -\u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr4458xww.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.map(\u001b[36mx\u001b[0m => math.ceil(x).toLong)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr4458xww.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_array is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_array\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr4458xww.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_array\u001b[0m = notes_array.sortBy(_ * -\u001b[31m1\u001b[0m)\n\u001b[31",
      "stdout": "",
      "timestamp": 1660029013
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").toList\n        val music_list_size = music_list.size\n        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 / 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_size_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyoff6gw5.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyoff6gw5.scala:22:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_8\u001b[0m = music_list_list_size_7 / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: music_list_list_size_7\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyoff6gw5.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029011
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n        val notes_beats = notes.map(_.length)\n        val notes_beats_length = notes_beats.sum\n        val notes_beats_length_length = notes_beats_length.toString.length\n        val notes_beats_length_length_length = notes_beats_length_length.toString.length\n        val notes_beats_length_length_length_length = notes_beats_length_length_length.toString.length\n        val notes_beats_length_length_length_length_length = notes_beats_length_length_length_length.toString.length\n        val notes_beats_length_length_length_length_length_length = notes_beats_length_length_length_length_length.toString.length\n        val notes_beats_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length.toString.length\n        val notes_beats_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length.toString.length\n        val notes_beats_length_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length.toString.length\n        val notes_beats_length_length_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length_length.toString.length\n        val notes_beats_length_length_length_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length_length_length.toString.length\n        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length_length_length_length.toString.length\n        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length.toString.length\n        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length = notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length.toString.length\n        val notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvy97uo1o.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvy97uo1o.scala:29:124 -----------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length\u001b[0m = notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length.toString.length\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvy97uo1o.scala:30:145 -----------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\u001b[0m = notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length.toString.length\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mNot found: notes_beats_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvy97uo1o.scala:32:5 ---------",
      "stdout": "",
      "timestamp": 1660029013
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n        val notes_beats = notes.map(_.length.toInt)\n        val notes_beats_length = notes_beats.sum\n        val notes_beats_length = notes_beats_length.toLong\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n        val notes_beats_length = notes_beats_length.toInt\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5d638c1u.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length\u001b[0m = notes_beats_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5d638c1u.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length\u001b[0m = notes_beats_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5d638c1u.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length\u001b[0m = notes_beats_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5d638c1u.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_beats_length\u001b[0m = notes_beats_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5d638c1u.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m  ",
      "stdout": "",
      "timestamp": 1660028965
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).filter(x => x != \"O\" && x != \"|\")\n        val music_list = music_list.map(x => if (x == \"O\") 4L else 2L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 2L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1L if x == \"|\") music_list\n        val music_list = music_list.map(x => if (x == \"O\") 1L else 1\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3wgwc2tb.scala:15:70 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list\u001b[0m = music_list.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x == \u001b[31m\"O\"\u001b[0m) \u001b[31m4L\u001b[0m \u001b[33melse\u001b[0m \u001b[31m2L\u001b[0m \u001b[33mif\u001b[0m x == \u001b[31m\"|\"\u001b[0m) music_list\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            ')' expected, but 'if' found\n\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp3wgwc2tb.scala:15:93 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list\u001b[0m = music_list.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x == \u001b[31m\"O\"\u001b[0m) \u001b[31m4L\u001b[0m \u001b[33melse\u001b[0m \u001b[31m2L\u001b[0m \u001b[33mif\u001b[0m x == \u001b[31m\"|\"\u001b[0m) music_list\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                          expression expected but \u001b[31mend of statement\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3wgwc2tb.scala:16:70 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list\u001b[0m = music_list.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x == \u001b[31m\"O\"\u001b[0m) \u001b[31m2L\u001b[0m \u001b[33melse\u001b[0m \u001b[31m1L\u001b[0m \u001b[33mif\u001b[0m x == \u001b[31m\"|\"\u001b[0m) music_list\n\u001b[31m\u001b[31m   |\u001b[0m                                                                      ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            ')' expected, but 'if' found\n\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp3wgwc2tb.scala:16:93 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list\u001b[0m = music_list.map(\u001b[36mx\u001b[0m => \u001b[33mif\u001b[0m (x == \u001b[31m\"O\"\u001b[0m) \u001b[31m2L\u001b[0m \u001b[33melse\u001b[0m \u001b[31m1L\u001b[0m \u001b[33mif\u001b[0m x == \u001b[31m\"|\"\u001b[0m) music_list\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                          expression expected but \u001b[31mend of statement\u001b",
      "stdout": "",
      "timestamp": 1660029014
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\")\n            val notes_length = notes.length\n            val notes_beats = notes.map(note => note.length.toLong).sum\n            val notes_last_beats = notes_beats - notes_length\n            notes_last_beats\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzkjfy2yy.scala:23)\n\tat Problem.main(tmpzkjfy2yy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029015
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).filter(_.length == 1).map(_.toInt).toList\n        val music_list_size = music_list.size\n        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole = music_list_size / 4\n        val music_list_size_whole_half = music_list_size_whole / 2\n        val music_list_size_whole_quarter = music_list_size_whole / 4\n        val music_list_size_whole_whole = music_list_size_whole_half / 4\n        val music_list_size_whole_whole_quarter = music_list_size_whole_whole / 4\n        val music_list_size_whole_whole_whole = music_list_size_whole_whole_quarter * 4\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole / 4\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole_quarter * 4\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole_quarter * 4\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole_quarter * 4\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole_quarter * 4\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole_quarter * 4\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole_quarter * 4\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole_quarter * 4\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole_quarter * 4\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole_quarter * 4\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole_quarter * 4\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo5r3fb41.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whole_quarter\u001b[0m = music_list_size_whole_whole_whole_quarter * \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_whole_whole_whole_quarter is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_whole_whole_whole_quarter\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo5r3fb41.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whole_quarter\u001b[0m = music_list_size_whole_whole_whole_quarter * \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_whole_whole_whole_quarter is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_whole_whole_whole_quarter\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo5r3fb41.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whole_quarter\u001b[0m = music_list_size_whole_whole_whole_quarter * \u001b[31m4\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_size_whole_whole_whole_quarter is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_size_whole_whole_whole_quarter\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo5r3fb41.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_whole_whole_whol",
      "stdout": "",
      "timestamp": 1660029014
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(_.toInt).sum\n            beats\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_agq4ck.scala:18:11 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).split(\u001b[31m\"|\"\u001b[0m).map(_.toInt).sum\n\u001b[31m17 |\u001b[0m            beats\n\u001b[31m18 |\u001b[0m        }).toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    List[\u001b[1m\u001b[31mInt\u001b[0m]\n\u001b[31m   |\u001b[0m        Required: List[\u001b[1m\u001b[32mLong\u001b[0m]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029014
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val beats = rest.split(\"|\").map(_.toLong).sum\n            beats.toLong\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmpnd0me9qo.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpnd0me9qo.scala:19)\n\tat Problem$.main(tmpnd0me9qo.scala:22)\n\tat Problem.main(tmpnd0me9qo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660028953
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val beats = rest.split(\"|\").map(_.toLong)\n            beats.map(beat => if (note == \"o\") 4L else 2L * beat)\n        }).reduce((a, b) => a ++ b).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmpyoa20p9q.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpyoa20p9q.scala:19)\n\tat Problem$.main(tmpyoa20p9q.scala:22)\n\tat Problem.main(tmpyoa20p9q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029016
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val notes = music_string.split(\"\\\\ \").map(music_string => {\n                val note = music_string.charAt(0)\n                val beats = music_string.substring(1).toInt\n                note -> beats\n            }).toList\n            notes.foldLeft(0l) { (sum, note) =>\n                val beats = note._2\n                val note = note._1\n                val noteLength = note.length\n                val noteLength = noteLength * beats\n                val noteLength = noteLength.toLong\n                sum + noteLength\n            }\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp219vua_p.scala:24:20 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnoteLength\u001b[0m = noteLength * beats\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnoteLength is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnoteLength\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029011
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(_.toInt)\n            beats.map(beat => if (note == \"o\") 1l else beat.toLong)\n        }).flatten.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmpp2k_1xtx.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpp2k_1xtx.scala:18)\n\tat Problem$.main(tmpp2k_1xtx.scala:21)\n\tat Problem.main(tmpp2k_1xtx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029018
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\").map(music_string => {\n                val note = music_string.split(\"o\").head\n                val beats = music_string.split(\"o|\").head\n                val rest = music_string.split(\".|\").head\n                val rest2 = music_string.split(\".|\").head\n                val rest3 = music_string.split(\".|\").head\n                val rest4 = music_string.split(\".|\").head\n                val rest5 = music_string.split(\".|\").head\n                val rest6 = music_string.split(\".|\").head\n                val rest7 = music_string.split(\".|\").head\n                val rest8 = music_string.split(\".|\").head\n                val rest9 = music_string.split(\".|\").head\n                val rest10 = music_string.split(\".|\").head\n                val rest11 = music_string.split(\".|\").head\n                val rest12 = music_string.split(\".|\").head\n                val rest13 = music_string.split(\".|\").head\n                val rest14 = music_string.split(\".|\").head\n                val rest15 = music_string.split(\".|\").head\n                val rest16 = music_string.split(\".|\").head\n                val rest17 = music_string.split(\".|\").head\n                val rest18 = music_string.split(\".|\").head\n                val rest19 = music_string.split(\".|\").head\n                val rest20 = music_string.split(\".|\").head\n                val rest21 = music_string.split(\".|\").head\n                val rest22 = music_string.split(\".|\").head\n                val rest23 = music_string.split(\".|\").head\n                val rest24 = music_string.split(\".|\").head\n                val rest25 = music_string.split(\".|\").head\n                val rest26 = music_string.split(\".|\").head\n                val rest27 = music_string.split(\".|\").head\n                val rest28 = music_string.split(\".|\").head\n                val rest29 = music_string.split(\".|\").head\n                val rest30 = music_string.split(\".|\").head\n                val rest31 = music_string.split(\".|\").head\n                val rest32 = music_string.split(\".|\").head\n                val rest33 = music_string.split(\".|\").head\n                val rest34 = music_string.\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp40vl8317.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp40vl8317.scala:53:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp40vl8317.scala:62:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029013
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val music_note = music_string.substring(0, 1)\n            val music_rest = music_string.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n            val music_rest = music_rest.substring(0, 1)\n            val music_rest = music_rest.substring(1).trim\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyankfj69.scala:56:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m56 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyankfj69.scala:65:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m65 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyankfj69.scala:17:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_rest\u001b[0m = music_rest.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_rest is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_rest\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyankfj69.scala:18:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_rest\u001b[0m = music_rest.substring(\u001b[31m1\u001b[0m).trim\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_rest is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_rest\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyankfj69.scala:19:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_rest\u001b[0m = music_rest.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_rest is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_rest\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpyankfj69.scala:20:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_rest\u001b[0m = m",
      "stdout": "",
      "timestamp": 1660029012
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \")\n        val music_list_size = music_list.size\n        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_size_33 = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjyj30zde.scala:47:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_33\u001b[0m = musi\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: musi\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjyj30zde.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028979
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1, music_string.length)\n            val beats = rest.split(\"|\").map(rest => {\n                val beat = rest.substring(0, 1)\n                val rest = rest.substring(1, rest.length)\n                beat.toLong * rest.toLong\n            }).sum\n            note match {\n                case \"o\" => 4l.toLong\n                case \"o|\" => 2l.toLong\n                case \".|\" => 1l.toLong\n                case _ => 0l.toLong\n            }\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpk6bsyh1u.scala:19:27 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = rest.substring(\u001b[31m1\u001b[0m, rest.length)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           Recursive \u001b[33mvalue\u001b[0m \u001b[35mrest\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpk6bsyh1u.scala:21:14 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            }).sum\n\u001b[31m\u001b[31m   |\u001b[0m              ^\u001b[0m\n\u001b[31m   |\u001b[0m              No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m              where:    B is a type variable\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029016
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val music_note = music_string.substring(0, 1)\n            val music_rest = music_string.substring(1, 2)\n            val music_rest2 = music_string.substring(3, 4)\n            val music_rest3 = music_string.substring(5, 6)\n            val music_rest4 = music_string.substring(7, 8)\n            val music_rest5 = music_string.substring(9, 10)\n            val music_rest6 = music_string.substring(11, 12)\n            val music_rest7 = music_string.substring(13, 14)\n            val music_rest8 = music_string.substring(15, 16)\n            val music_rest9 = music_string.substring(17, 18)\n            val music_rest10 = music_string.substring(19, 20)\n            val music_rest11 = music_string.substring(21, 22)\n            val music_rest12 = music_string.substring(23, 24)\n            val music_rest13 = music_string.substring(25, 26)\n            val music_rest14 = music_string.substring(27, 28)\n            val music_rest15 = music_string.substring(29, 30)\n            val music_rest16 = music_string.substring(31, 32)\n            val music_rest17 = music_string.substring(33, 34)\n            val music_rest18 = music_string.substring(35, 36)\n            val music_rest19 = music_string.substring(37, 38)\n            val music_rest20 = music_string.substring(39, 40)\n            val music_rest21 = music_string.substring(41, 42)\n            val music_rest22 = music_string.substring(43, 44)\n            val music_rest23 = music_string.substring(45, 46)\n            val music_rest24 = music_string.substring(47, 48)\n            val music_rest25 = music_string.substring(49, 50)\n            val music_rest26 = music_string.substring(51, 52)\n            val music_rest27 = music_string.substring(53, 54)\n            val music_rest28 = music_string.substring(55, 56)\n            val music_rest29 = music_string.substring(57, 58)\n            val music_rest30 = music_string.substring(59, 60)\n            val music_rest31 = music_string.substring(61, 62)\n            val music_rest32 = music_string.substring(63, 64)\n            val music_rest33 = music_string.substring(65, 66)\n            val music_rest34 = music_string.substring(67, 68)\n            val musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprudk55g5.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprudk55g5.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprudk55g5.scala:61:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029014
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val music_note = music_string.substring(0, 1)\n            val music_rest = music_string.substring(1).trim\n            val music_rests = music_rest.split(\"|\")\n            val music_rests_count = music_rests.map(music_rest => {\n                val music_rest_count = music_rest.split(\"o\").map(music_rest => {\n                    val music_rest_count_str = music_rest.split(\"|\").map(music_rest => {\n                        val music_rest_count_str = music_rest.split(\"o\").map(music_rest => {\n                            val music_rest_count_str = music_rest.split(\"|\").map(music_rest => {\n                                val music_rest_count_str = music_rest.split(\"o\").map(music_rest => {\n                                    val music_rest_count_str = music_rest.split(\"|\").map(music_rest => {\n                                        val music_rest_count_str = music_rest.split(\"o\").map(music_rest => {\n                                            val music_rest_count_str = music_rest.split(\"|\").map(music_rest => {\n                                                val music_rest_count_str = music_rest.split(\"o\").map(music_rest => {\n                                                    val music_rest_count_str = music_rest.split(\"|\").map(music_rest => {\n                                                        val music_rest_count_str = music_rest.split(\"o\").map(music_rest => {\n                                                            val music_rest_count_str = music_rest.split(\"|\").map(music_rest => {\n                                                                val music_rest_count_str = music_rest.split(\"o\").map(music_rest => {\n                                                                    val music_rest_count_str = music_rest.split(\"|\").map(music_rest => {\n                                                                        val music_rest_count_str = music_rest.split(\"o\").map(music_rest => {\n                                                                            val music_rest_count_str = music_rest.split(\"|\").map(music_rest => {\n                                                                                val music_rest_count_str = music_rest.split(\"o\").map(music_rest => {\n                                                                                    val music_rest_count_str = music_rest.split(\"|\").map(music_rest => {\n                                                                                        val music_rest_count_str = music_rest.split(\"o\").map(music_rest => {\n                                                                                            val music_rest_count_str = music_rest.split(\"|\").map(music_rest => {\n                                                                                                val music_rest_count_str = music_rest.split(\"o\").map(music_rest => {\n                                                                                                    val music_rest_count_str = music_rest.split(\"|\").map(music_rest => {\n                                                                                                        val music_rest_count_str = music_rest.split(\"o\").map(music_rest \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpecp09l3z.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpecp09l3z.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpecp09l3z.scala:52:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpecp09l3z.scala:41:157 -------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m                                                                                                        \u001b[33mval\u001b[0m \u001b[36mmusic_rest_count_str\u001b[0m = music_rest.split(\u001b[31m\"o\"\u001b[0m).map(music_rest \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                             ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    (music_rest : String)\n\u001b[31m   |\u001b[0m                                         Required: String => Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029018
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\").map(music_string => {\n                val note = music_string.split(\"o\").head\n                val beats = music_string.split(\"o|\").head.toLong\n                note.toLong * beats\n            }).sum\n            notes\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjyygujl7.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnotes\u001b[0m = music_string.split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.split(\u001b[31m\"o\"\u001b[0m).head\n\u001b[31m17 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = music_string.split(\u001b[31m\"o|\"\u001b[0m).head.toLong\n\u001b[31m18 |\u001b[0m                note.toLong * beats\n\u001b[31m19 |\u001b[0m            }).sum\n\u001b[31m20 |\u001b[0m            notes\n\u001b[31m21 |\u001b[0m        }).sum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029018
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.charAt(0)\n            val rest = music_string.substring(1).trim\n            val beats = rest.split(\"|\").map(rest => rest.charAt(0).toLong).sum\n            beats * note.toLong\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzfe_1xt4.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.charAt(\u001b[31m0\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m).trim\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = rest.split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mrest\u001b[0m => rest.charAt(\u001b[31m0\u001b[0m).toLong).sum\n\u001b[31m18 |\u001b[0m            beats * note.toLong\n\u001b[31m19 |\u001b[0m        }).sum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val music_notes = music_string.split(\"\\\\ \").map(music_note => {\n                val note = music_note.charAt(0).toLowerCase\n                val beats = music_note.substring(1).toInt\n                note.toLong * beats\n            }).toList\n            music_notes.sum\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0ywsyakg.scala:16:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_note.charAt(\u001b[31m0\u001b[0m).toLowerCase\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value toLowerCase is not a member of Char\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0ywsyakg.scala:19:14 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            }).toList\n\u001b[31m\u001b[31m   |\u001b[0m              ^\u001b[0m\n\u001b[31m   |\u001b[0m              No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m              where:    B is a type variable\n\u001b[31m\u001b[31m-- Error: /tmp/tmp0ywsyakg.scala:21:10 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        }).toList\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m          where:    B is a type variable\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029020
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(x => x.toInt).toList\n        val notes = music_list.takeWhile(_ != 0)\n        val beats = music_list.dropWhile(_ != 0).takeWhile(_ != 0).map(x => x.toLong).toList\n        val notes_beats = notes.zip(beats)\n        val notes_beats_sorted = notes_beats.sortBy(_._1).reverse\n        val notes_beats_sorted_list = notes_beats_sorted.map(x => x._2).toList\n        val notes_beats_sorted_list_length = notes_beats_sorted_list.size\n        val notes_beats_sorted_list_length_half = notes_beats_sorted_list_length / 2\n        val notes_beats_sorted_list_length_quarter = notes_beats_sorted_list_length_half / 4\n        val notes_beats_sorted_list_length_whole = notes_beats_sorted_list_length_quarter * 4\n        val notes_beats_sorted_list_length_whole_half = notes_beats_sorted_list_length_whole / 2\n        val notes_beats_sorted_list_length_whole_quarter = notes_beats_sorted_list_length_whole_half / 4\n        val notes_beats_sorted_list_length_whole_whole = notes_beats_sorted_list_length_whole_quarter * 4\n        val notes_beats_sorted_list_length_whole_whole_half = notes_beats_sorted_list_length_whole_whole / 2\n        val notes_beats_sorted_list_length_whole_whole_quarter = notes_beats_sorted_list_length_whole_whole_half / 4\n        val notes_beats_sorted_list_length_whole_whole_whole = notes_beats_sorted_list_length_whole_whole_quarter * 4\n        val notes_beats_sorted_list_length_whole_whole_whole_half = notes_beats_sorted_list_length_whole_whole_whole / 2\n        val notes_beats_sorted_list_length_whole_whole_whole_quarter = notes_beats_sorted_list_length_whole_whole_whole_half / 4\n        val notes_beats_sorted_list_length_whole_whole_whole_whole = notes_beats_sorted_list_length_whole_whole_whole_quarter * 4\n        val notes_beats_sorted_list_length_whole_whole_whole_whole_half = notes_beats_sorted_list_length_whole_whole_whole_whole / 2\n        val notes_beats_sorted_list_length_whole_whole_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy1ukncda.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy1ukncda.scala:35:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029019
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n        val music_length = music_list.size\n        val music_beats = music_list.map(music_length % 2 != 0).map(music_length / 2).sum\n        val music_notes = music_list.map(music_length % 2 == 0).map(music_length / 2).sum\n        val music_notes_length = music_notes.toLong\n        val music_notes_beats = music_notes.toLong / music_beats\n        val music_notes_beats_length = music_notes_beats.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val music_notes_beats_length = music_notes_beats_length.toLong\n        val musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpx4l2twzw.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpx4l2twzw.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpx4l2twzw.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpx4l2twzw.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_notes_beats_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_notes_beats_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpx4l2twzw.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_notes_beats_length\u001b[0m = music_notes_beats_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n",
      "stdout": "",
      "timestamp": 1660029022
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length() > 0)\n        val notes = music_list.map(music_note => music_note.split(\"|\").map(_.toUpperCase()).filter(_.length() > 0))\n        val notes_count = notes.map(music_note => music_note.size)\n        val notes_count_sum = notes_count.sum\n        val notes_count_count_sum = notes_count.count.sum\n        val notes_count_count_count_sum = notes_count.count.count.sum\n        val notes_count_count_count_count_sum = notes_count.count.count.count.sum\n        val notes_count_count_count_count_count_sum = notes_count.count.count.count.count.sum\n        val notes_count_count_count_count_count_count_sum = notes_count.count.count.count.count.count.sum\n        val notes_count_count_count_count_count_count_count_sum = notes_count.count.count.count.count.count.sum\n        val notes_count_count_count_count_count_count_count_count_sum = notes_count.count.count.count.count.count.count.sum\n        val notes_count_count_count_count_count_count_count_count_sum = notes_count.count.count.count.count.count.count.count.sum\n        val notes_count_count_count_count_count_count_count_count_count_sum = notes_count.count.count.count.count.count.count.count.count.sum\n        val notes_count_count_count_count_count_count_count_count_count_sum = notes_count.count.count.count.count.count.count.count.count.count.sum\n        val notes_count_count_count_count_count_count_count_count_count_count_sum = notes_count.count.count.count.count.count.count.count.count.count.sum\n        val notes_count_count_count_count_count_count_count_count_count_count_sum = notes_count.count.count.count.count.count.count.count.count.count.sum\n        val notes_count_count_count_count_count_count_count_count_count_count_count_sum = notes_count.count.count.count.count.count.count.count.count.count.count.sum\n        val notes_count_count_count_count_count_count_count_count_count_count_count_sum = notes_count.count.count.count.count.count.count.count.count.count.count.count.sum\n        val notes_count_count_count_count_count_count_count_count_count_count_count_sum = notes_count.count.count.count.count.count.count.count.count.count.count.count.sum\n        val notes_count_count_count_count_count_count_count_count_count_count_count_count_sum = notes_count.count.count.count.count.count.count.count.count.count.count.count.sum\n        val notes_count_count_count_count_count_count_count_count_count_count_count_count_sum = notes_count.count.count.count.count.count.count.count.count.count.count.count.sum\n        \n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplr61abxr.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_count_count_count_count_count_count_count_count_sum\u001b[0m = notes_count.count.count.count.count.count.count.count.sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_count_count_count_count_count_count_count_count_sum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_count_count_count_count_count_count_count_count_sum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplr61abxr.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_count_count_count_count_count_count_count_count_count_sum\u001b[0m = notes_count.count.count.count.count.count.count.count.count.count.sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_count_count_count_count_count_count_count_count_count_sum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_count_count_count_count_count_count_count_count_count_sum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplr61abxr.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_count_count_count_count_count_count_count_count_count_count_sum\u001b[0m = notes_count.count.count.count.count.count.count.count.count.count.sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_count_count_count_count_count_count_count_count_count_count_sum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes",
      "stdout": "",
      "timestamp": 1660029025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1, music_string.length)\n            val beats_as_int = beats.toInt\n            val beats_as_long = beats_as_int * 1000\n            val note_to_beats_map = Map(\n                \"o\" -> 4, \"o|\" -> 2, \".|\" -> 1\n            )\n            note_to_beats_map(note) match {\n                case None => throw new IllegalArgumentException(\"Invalid music string: \" + music_string)\n                case Some(beats) => beats\n            }\n        }).filter(music_string => music_string != \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyelq28tb.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                \u001b[33mcase\u001b[0m None => \u001b[33mthrow\u001b[0m \u001b[33mnew\u001b[0m IllegalArgumentException(\u001b[31m\"Invalid music string: \"\u001b[0m + music_string)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    None.type\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m                     pattern type is incompatible with expected type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029019
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1, music_string.length).trim\n            val beats_as_int = beats.toInt\n            val beats_as_long = beats_as_int * 1000\n            val note_to_beats = Map(\n                \"o\" -> 4l,\n                \"o|\" -> 2l,\n                \".|\" -> 1l\n            )\n            val note_to_beats_as_int = note_to_beats(note)\n            val note_to_beats_as_long = note_to_beats_as_int * 1000\n            val note_to_beats_as_int = note_to_beats(note)\n            val note_to_beats_as_long = note_to_beats_as_int * 1000\n            val note_to_beats_as_int = note_to_beats(note)\n            val note_to_beats_as_long = note_to_beats_as_int * 1000\n            val note_to_beats_as_int = note_to_beats(note)\n            val note_to_beats_as_long = note_to_beats_as_int * 1000\n            val note_to_beats_as_int = note_to_beats(note)\n            val note_to_beats_as_long = note_to_beats_as_int * 1000\n            val note_to_beats_as_int = note_to_beats(note)\n            val note_to_beats_as_long = note_to_beats_as_int * 1000\n            val note_to_beats_as_int = note_to_beats(note)\n            val note_to_beats_as_long = note_to_beats_as_int * 1000\n            val note_to_beats_as_int = note_to_beats(note)\n            val note_to_beats_as_long = note_to_beats_as_int * 1000\n            val note_to_beats_as_int = note_to_beats(note)\n            val note_to_beats_as_long = note_to_beats_as_int * 1000\n            val note_to_beats_as_int = note_to_beats(note)\n            val note_to_beats_as_long = note_to_beats_as_int * 1000\n            val note_to_beats_as_int = note_to_beats(note)\n            val note_to_beats_as_long = note_to_beats_as_int * 1000\n            val note_to_beats_as_int = note_to_beats(note)\n            val note_to_beats_as_long = note_to_beats_as_int * 1000\n            val note_to_beats_as_int = note_to_beats(note)\n            val note_to_beat\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsdzixlza.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsdzixlza.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsdzixlza.scala:60:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsdzixlza.scala:26:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote_to_beats_as_int\u001b[0m = note_to_beats(note)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnote_to_beats_as_int is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnote_to_beats_as_int\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsdzixlza.scala:27:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote_to_beats_as_long\u001b[0m = note_to_beats_as_int * \u001b[31m1000\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnote_to_beats_as_long is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnote_to_beats_as_long\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpsdzixlza.scala:28:16 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote_to_beats_as_int\u001b[0m = note_to_beats(note)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnote_to_beats_as_int is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnote_to_beats_as_int\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNo",
      "stdout": "",
      "timestamp": 1660029021
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val notes = music_string.split(\"o\").map(music_string => {\n                val beats = music_string.split(\"|\").map(music_string => {\n                    music_string.split(\".\").map(music_string => {\n                        music_string.toLong\n                    })\n                })\n                beats.reduceLeft((beat1, beat2) => {beat1 + beat2})\n            })\n            notes.reduceLeft((note1, note2) => {note1 + note2})\n        }).reduceLeft((note1, note2) => {note1 + note2})\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4p7ctrgg.scala:21:58 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                beats.reduceLeft((\u001b[36mbeat1\u001b[0m, \u001b[36mbeat2\u001b[0m) => {beat1 + beat2})\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of Array[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4p7ctrgg.scala:23:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m            notes.reduceLeft((\u001b[36mnote1\u001b[0m, \u001b[36mnote2\u001b[0m) => {note1 + note2})\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of Array[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4p7ctrgg.scala:24:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        }).reduceLeft((note1, note2) => {note1 + note2})\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue + is not a member of Array[Long], but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m   |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m   |\u001b[0m  import math.Numeric.Implicits.in",
      "stdout": "",
      "timestamp": 1660029029
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase()).filter(_.length == 1).map(x => x.toInt).toList\n        val notes = music_list.filter(x => x != '.').filter(x => x != 'o').filter(x => x != '|').map(x => x.toInt)\n        val beats = music_list.filter(x => x != '.').filter(x => x != 'o').filter(x => x != '|').map(x => x.toLong)\n        val notes_beats = notes.zip(beats)\n        notes_beats.toList.sortBy(_._1).reverse.map(x => x._2).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr__zigb6.scala:18:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        notes_beats.toList.sortBy(_._1).reverse.map(\u001b[36mx\u001b[0m => x._2).sum\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\").map(_.toInt).toList\n        val music_list_size = music_list.size\n        val music_list_size_half = music_list_size / 2\n        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole = music_list_size % 4\n        val music_list_size_last_half = music_list_size_half - 1\n        val music_list_size_last_quarter = music_list_size_quarter - 1\n        val music_list_size_last_whole = music_list_size_whole - 1\n        val music_list_size_last_last_half = music_list_size_last_half - 1\n        val music_list_size_last_last_quarter = music_list_size_last_quarter - 1\n        val music_list_size_last_last_whole = music_list_size_last_whole - 1\n        val music_list_size_last_last_last_half = music_list_size_last_last_half - 1\n        val music_list_size_last_last_last_quarter = music_list_size_last_last_quarter - 1\n        val music_list_size_last_last_last_whole = music_list_size_last_last_whole - 1\n        val music_list_size_last_last_last_last_half = music_list_size_last_last_last_half - 1\n        val music_list_size_last_last_last_last_quarter = music_list_size_last_last_last_quarter - 1\n        val music_list_size_last_last_last_last_whole = music_list_size_last_last_last_whole - 1\n        val music_list_size_last_last_last_last_last_half = music_list_size_last_last_last_last_half - 1\n        val music_list_size_last_last_last_last_last_quarter = music_list_size_last_last_last_last_quarter - 1\n        val music_list_size_last_last_last_last_last_whole = music_list_size_last_last_last_last_whole - 1\n        val music_list_size_last_last_last_last_last_last_half = music_list_size_last_last_last_last_last_half - 1\n        val music_list_size_last_last_last_last_last_last_quarter = music_list_size_last_last_last_last_last_quarter - 1\n        val music_list_size_last_last_last_last_last_last_whole = music_list_size_last_last_last_last_last_whole - 1\n        val music_list_size_last_last_last_last_last_last_last_half = music_list_size_last_last_last_last_last_last_half - 1\n        val music_list_size_last_last_last_last_last_last_last_quarter = music_list_size_last_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaga8neew.scala:38:73 ------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_last_last_last_last_last_last_last_quarter\u001b[0m = music_list_size_last_\n\u001b[31m\u001b[31m   |\u001b[0m                                                                         ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: music_list_size_last_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaga8neew.scala:39:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029026
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val notes = music_string.split(\"\\\\|\")\n        val notes_length = notes.length\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length.toInt\n        val notes_length = notes_length.toLong\n        val notes_length = notes_length\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplrkimmaz.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length\u001b[0m = notes_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplrkimmaz.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length\u001b[0m = notes_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplrkimmaz.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length\u001b[0m = notes_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplrkimmaz.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length\u001b[0m = notes_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplrkimmaz.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length\u001b[0m = notes_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0",
      "stdout": "",
      "timestamp": 1660029025
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(music_string => {\n                val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1)\n                val beats = rest.split(\"o\").map(music_string => {\n                    val beat = music_string.substring(0, 1)\n                    val rest = music_string.substring(1)\n                    val beats = rest.split(\"|\").map(music_string => {\n                        val beat = music_string.substring(0, 1)\n                        val rest = music_string.substring(1)\n                        val beats = rest.split(\"o\").map(music_string => {\n                            val beat = music_string.substring(0, 1)\n                            val rest = music_string.substring(1)\n                            val beats = rest.split(\"|\").map(music_string => {\n                                val beat = music_string.substring(0, 1)\n                                val rest = music_string.substring(1)\n                                val beats = rest.split(\"o\").map(music_string => {\n                                    val beat = music_string.substring(0, 1)\n                                    val rest = music_string.substring(1)\n                                    val beats = rest.split(\"|\").map(music_string => {\n                                        val beat = music_string.substring(0, 1)\n                                        val rest = music_string.substring(1)\n                                        val beats = rest.split(\"o\").map(music_string => {\n                                            val beat = music_string.substring(0, 1)\n                                            val rest = music_string.substring(1)\n                                            val beats = rest.split(\"|\").map(music_string => {\n                                                val beat = music_string.substring(0, 1)\n                                                val rest = music_string.substring(1)\n                                                val beats = rest.split(\"o\").map(music_string => {\n                                                    val beat = music_string.substring(0, 1)\n                                                    val rest = music_string.substring(1)\n                                                    val beats = rest.split(\"|\").map(music_string => {\n                                                        val beat = music_string.substring(0, 1)\n                                                        val rest = music_string.substring(1)\n                                                        val beats = rest.split(\"o\").map(music_string => {\n                                                            val beat = music_string.substring(0, 1)\n                                                            val rest = music_string.substring(1)\n                                                            val beats = rest.split(\"|\").map(music_string => {\n                                                                val beat = music_string.substring(0, 1)\n                                                                val rest = music_string.substring(1)\n                                                                val beats = rest.split(\"o\").map(music_string => {\n                                                                    val beat = music_string.substring(0, 1)\n                                                                    val rest = music_string.substring(1)\n                                                                    val beats = rest.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpabd9hgnm.scala:58:91 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m58 |\u001b[0m                                                                    \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = rest.split(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpabd9hgnm.scala:60:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m60 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpabd9hgnm.scala:69:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m69 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029022
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val notes = music_string.split(\"|\").map(music_string => {\n                val note = music_string.split(\"o\").map(music_string => {\n                    val beats = music_string.split(\"|\").map(music_string => {\n                        val beat = music_string.split(\".\").map(music_string => {\n                            music_string.toLong\n                        })\n                        beat.last\n                    })\n                    beat.last\n                })\n                note.last\n            })\n            notes.last\n        }).last\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkdo2qu11.scala:23:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                    beat.last\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: beat\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkdo2qu11.scala:24:18 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                })\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                  where:    B is a type variable\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkdo2qu11.scala:26:14 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m            })\n\u001b[31m\u001b[31m   |\u001b[0m              ^\u001b[0m\n\u001b[31m   |\u001b[0m              No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m              where:    B is a type variable\n\u001b[31m\u001b[31m-- Error: /tmp/tmpkdo2qu11.scala:28:10 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        }).last\n\u001b[31m\u001b[31m   |\u001b[0m          ^\u001b[0m\n\u001b[31m   |\u001b[0m          No ClassTag available for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m          where:    B is a type variable\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029026
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 / 2\n        val music_list_size_8 = music_list_size_7 / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_size_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnjkk66h1.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnjkk66h1.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660028950
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val music_notes = music_string.split(\"o\").map(music_note => {\n                val note = music_note.trim\n                val beats = note.length / 4\n                beats.toLong\n            })\n            music_notes.sum\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqy4yeubm.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\"\\\\|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mArray\u001b[0m[Long]\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m[Long]\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_notes\u001b[0m = music_string.split(\u001b[31m\"o\"\u001b[0m).map(\u001b[36mmusic_note\u001b[0m => {\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_note.trim\n\u001b[31m17 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = note.length / \u001b[31m4\u001b[0m\n\u001b[31m18 |\u001b[0m                beats.toLong\n\u001b[31m19 |\u001b[0m            })\n\u001b[31m20 |\u001b[0m            music_notes.sum\n\u001b[31m21 |\u001b[0m        })\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029028
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).map(x => if (x == \"O\") 1L else 0L)\n        val beats = music_list.foldLeft(0L) { (beats, note) => beats + (note / 4L) }\n        val notes = music_list.foldLeft(0L) { (notes, note) => notes + (note % 4L) }\n        val notes_per_beat = notes / beats\n        val notes_per_note = notes % beats\n        val notes_per_beats = notes_per_beat * beats\n        val notes_per_notes = notes_per_note * notes\n        val notes_per_beats_2 = notes_per_beats * beats\n        val notes_per_notes_2 = notes_per_note * notes\n        val notes_per_beats_3 = notes_per_beats * beats\n        val notes_per_notes_3 = notes_per_note * notes\n        val notes_per_beats_4 = notes_per_beats * beats\n        val notes_per_notes_4 = notes_per_note * notes\n        val notes_per_beats_5 = notes_per_beats * beats\n        val notes_per_notes_5 = notes_per_note * notes\n        val notes_per_beats_6 = notes_per_beats * beats\n        val notes_per_notes_6 = notes_per_note * notes\n        val notes_per_beats_7 = notes_per_beats * beats\n        val notes_per_notes_7 = notes_per_note * notes\n        val notes_per_beats_8 = notes_per_beats * beats\n        val notes_per_notes_8 = notes_per_note * notes\n        val notes_per_beats_9 = notes_per_beats * beats\n        val notes_per_notes_9 = notes_per_note * notes\n        val notes_per_beats_10 = notes_per_beats * beats\n        val notes_per_notes_10 = notes_per_note * notes\n        val notes_per_beats_11 = notes_per_beats * beats\n        val notes_per_notes_11 = notes_per_note * notes\n        val notes_per_beats_12 = notes_per_beats * beats\n        val notes_per_notes_12 = notes_per_note * notes\n        val notes_per_beats_13 = notes_per_beats * beats\n        val notes_per_notes_13 = notes_per_note * notes\n        val notes_per_beats_14 = notes_per_beats * beats\n        val notes_per_notes_14 = notes_per_note * notes\n        val notes_per_beats_15 = note\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwwyd32nw.scala:47:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_per_beats_15\u001b[0m = note\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Not found: note\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwwyd32nw.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029029
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n        val notes = music_list.filterNot(_.equals(\".\"))\n        val notes_length = notes.map(_.length).toList\n        val notes_length_sum = notes_length.sum\n        val notes_length_average = notes_length_sum / notes_length.length\n        val notes_length_min = notes_length.min\n        val notes_length_max = notes_length.max\n        val notes_length_range = notes_length_max - notes_length_min\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_length_range_average = notes_length_range / notes_length.length\n        val notes_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp75c3bq_g.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp75c3bq_g.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length_range_average\u001b[0m = notes_length_range / notes_length.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_length_range_average is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_length_range_average\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp75c3bq_g.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length_range_average\u001b[0m = notes_length_range / notes_length.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_length_range_average is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_length_range_average\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp75c3bq_g.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length_range_average\u001b[0m = notes_length_range / notes_length.length\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mnotes_length_range_average is already defined as \u001b[33mvalue\u001b[0m \u001b[35mnotes_length_range_average\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp75c3bq_g.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_length_range_average\u001b[0m = notes_length_range / notes_length.length\n\u001b[31",
      "stdout": "",
      "timestamp": 1660029027
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(_.toInt).sum\n            beats.toLong\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmpgbqhkddh.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpgbqhkddh.scala:18)\n\tat Problem$.main(tmpgbqhkddh.scala:21)\n\tat Problem.main(tmpgbqhkddh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029030
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(x => x.toInt)\n        val notes = music_list.filter(x => x != 0)\n        val notes_count = notes.map(x => x.toLong).sum\n        val notes_count_list = notes.map(x => x.toLong).grouped(4).toList\n        val notes_count_list_sorted = notes_count_list.sortBy(x => x._1)\n        val notes_count_list_sorted_reversed = notes_count_list_sorted.reverse\n        val notes_count_list_sorted_reversed_sorted = notes_count_list_sorted_reversed.sortBy(x => x._1)\n        val notes_count_list_sorted_reversed_sorted_2 = notes_count_list_sorted_reversed_sorted.take(notes_count_list_sorted_reversed_sorted.length/4)\n        val notes_count_list_sorted_reversed_sorted_2_sorted = notes_count_list_sorted_reversed_sorted_2.sortBy(x => x._1)\n        val notes_count_list_sorted_reversed_sorted_2_sorted_2 = notes_count_list_sorted_reversed_sorted_2_sorted.take(notes_count_list_sorted_reversed_sorted_2_sorted.length/4)\n        val notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted = notes_count_list_sorted_reversed_sorted_2_sorted_2.sortBy(x => x._1)\n        val notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted_2 = notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted.take(notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted.length/4)\n        val notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted_2_sorted = notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted_2.sortBy(x => x._1)\n        val notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted_2_sorted_2 = notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted_2_sorted.take(notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted_2_sorted.length/4)\n        val notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted_2_sorted_2_sorted = notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted_2_sorted_2.sortBy(x => x._1)\n        val notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted_2_sorted_2_sorted_2 = notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted_2_sorted_2_sorted.take(notes_count_list_sorted_reversed_sorted_2_sorted_2_sorted_2_sorted_2_sorted.length/4)\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1u8heex2.scala:18:69 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_count_list_sorted\u001b[0m = notes_count_list.sortBy(\u001b[36mx\u001b[0m => x._1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 value _1 is not a member of Array[Long]\n\u001b[31m\u001b[31m-- Error: /tmp/tmp1u8heex2.scala:18:72 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_count_list_sorted\u001b[0m = notes_count_list.sortBy(\u001b[36mx\u001b[0m => x._1)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0mambiguous given instances: both \u001b[33mobject\u001b[0m \u001b[35mByte\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m and \u001b[33mobject\u001b[0m \u001b[35mChar\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mOrdering\u001b[0m match type Ordering[B] of parameter ord of \u001b[33mmethod\u001b[0m \u001b[35msortBy\u001b[0m in \u001b[33mtrait\u001b[0m \u001b[35mSeqOps\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1u8heex2.scala:30:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029029
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val music_notes = music_string.split(\"o\").map(music_note => {\n                val note = music_note.trim\n                val beats = note.length / 4\n                beats.toLong\n            })\n            music_notes.sum\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqxp4_lnw.scala:24)\n\tat Problem.main(tmpqxp4_lnw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029031
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase)\n        val notes = music_list.filter(_.startsWith(\"O\")).map(_.toUpperCase)\n        val notes_half = music_list.filter(_.startsWith(\"O|\")).map(_.toUpperCase)\n        val notes_quarter = music_list.filter(_.startsWith(\".|\")).map(_.toUpperCase)\n        val notes_whole = music_list.filter(_.startsWith(\"O|O|\")).map(_.toUpperCase)\n        val notes_whole_half = music_list.filter(_.startsWith(\"O|O|.|\")).map(_.toUpperCase)\n        val notes_whole_quarter = music_list.filter(_.startsWith(\"O|O|.|.|\")).map(_.toUpperCase)\n        val notes_whole_whole = music_list.filter(_.startsWith(\"O|O|.|.|.|\")).map(_.toUpperCase)\n        val notes_whole_whole_half = music_list.filter(_.startsWith(\"O|O|.|.|.|.|\")).map(_.toUpperCase)\n        val notes_whole_whole_quarter = music_list.filter(_.startsWith(\"O|O|.|.|.|.|.|\")).map(_.toUpperCase)\n        val notes_whole_whole_whole = music_list.filter(_.startsWith(\"O|O|.|.|.|.|.|.|\")).map(_.toUpperCase)\n        val notes_whole_whole_whole_half = music_list.filter(_.startsWith(\"O|O|.|.|.|.|.|.|.|\")).map(_.toUpperCase)\n        val notes_whole_whole_whole_quarter = music_list.filter(_.startsWith(\"O|O|.|.|.|.|.|.|.|\")).map(_.toUpperCase)\n        val notes_whole_whole_whole_whole = music_list.filter(_.startsWith(\"O|O|.|.|.|.|.|.|.|.|\")).map(_.toUpperCase)\n        val notes_whole_whole_whole_whole_half = music_list.filter(_.startsWith(\"O|O|.|.|.|.|.|.|.|.\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmppaxlt5wi.scala:28:80 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_whole_whole_whole_whole_half\u001b[0m = music_list.filter(_.startsWith(\"O|O|.|.|.|.|.|.|.|.\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- Error: /tmp/tmppaxlt5wi.scala:30:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                 end of statement expected but '=' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppaxlt5wi.scala:29:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppaxlt5wi.scala:30:4 -------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    Not found: O|O|.|.|.|.|.|.|.|.def\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029029
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(_.toUpperCase).toList\n        val music_list_size = music_list.size\n        val music_list_length = music_list_size / 4\n        val music_list_last_beat = music_list_length - 1\n        val music_list_last_beat_length = music_list_last_beat * 4\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val music_list_last_beat_length = music_list_last_beat_length.toInt\n        val music_list_last_beat_length = music_list_last_beat_length.toLong\n        val musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpijmadlzr.scala:43:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpijmadlzr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_last_beat_length\u001b[0m = music_list_last_beat_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_last_beat_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_last_beat_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpijmadlzr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_last_beat_length\u001b[0m = music_list_last_beat_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_last_beat_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_last_beat_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpijmadlzr.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_last_beat_length\u001b[0m = music_list_last_beat_length.toLong\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmusic_list_last_beat_length is already defined as \u001b[33mvalue\u001b[0m \u001b[35mmusic_list_last_beat_length\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpijmadlzr.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_last_beat_length\u001b[0m = music_list_last_beat_length.toInt\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660029030
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \").map(x => x.toInt).toList\n        val notes = music_list.takeWhile(x => x != '.')\n        val rests = music_list.drop(notes.size)\n        val notes_beats = notes.zip(music_list.drop(notes.size))\n        val rests_beats = rests.zip(music_list.drop(rests.size))\n        val notes_rests = notes_beats.flatMap(x => x._1 -> x._2)\n        val rests_rests = rests_beats.flatMap(x => x._1 -> x._2)\n        val notes_rests_rests = notes_rests.flatMap(x => x._1 -> x._2)\n        val rests_rests_rests = rests_rests.flatMap(x => x._1 -> x._2)\n        val notes_rests_rests_rests = notes_rests_rests.flatMap(x => x._1 -> x._2)\n        val rests_rests_rests_rests = rests_rests_rests.flatMap(x => x._1 -> x._2)\n        val notes_rests_rests_rests_rests = notes_rests_rests_rests.flatMap(x => x._1 -> x._2)\n        val rests_rests_rests_rests_rests = rests_rests_rests_rests.flatMap(x => x._1 -> x._2)\n        val notes_rests_rests_rests_rests_rests = notes_rests_rests_rests_rests.flatMap(x => x._1 -> x._2)\n        val rests_rests_rests_rests_rests_rests = rests_rests_rests_rests_rests.flatMap(x => x._1 -> x._2)\n        val notes_rests_rests_rests_rests_rests_rests = notes_rests_rests_rests_rests_rests.flatMap(x => x._1 -> x._2)\n        val rests_rests_rests_rests_rests_rests_rests = rests_rests_rests_rests_rests_rests.flatMap(x => x._1 -> x._2)\n        val notes_rests_rests_rests_rests_rests_rests_rests = notes_rests_rests_rests_rests_rests_rests.flatMap(x => x._1 -> x._2)\n        val rests_rests_rests_rests_rests_rests_rests_rests_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4weg4sgo.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4weg4sgo.scala:19:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_rests\u001b[0m = notes_beats.flatMap(\u001b[36mx\u001b[0m => x._1 -> x._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Int, Int)\n\u001b[31m   |\u001b[0m                                             Required: IterableOnce[Any]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4weg4sgo.scala:20:51 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mrests_rests\u001b[0m = rests_beats.flatMap(\u001b[36mx\u001b[0m => x._1 -> x._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                   ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Int, Int)\n\u001b[31m   |\u001b[0m                                             Required: IterableOnce[Any]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4weg4sgo.scala:21:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnotes_rests_rests\u001b[0m = notes_rests.flatMap(\u001b[36mx\u001b[0m => x._1 -> x._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                         ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue _1 is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mThe following import might fix the problem:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m  import concurrent.duration.durationToPair\n\u001b[31m   |\u001b[0m\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp4weg4sgo.scala:22:59 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mrests_rests_rests\u001b[0m = rests_rests.flatMap(\u001b[36mx\u001b[0m => x._1 -> x._2)\n\u001b[31m\u001b[31",
      "stdout": "",
      "timestamp": 1660029033
    },
    {
      "exit_code": 0,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1).split(\"|\").map(_.toInt)\n            beats.map(beat => if (note == \"o\") 4L else beat.toLong)\n        }).flatten.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "Exception",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.parseMusic$$anonfun$1(tmpdt59p32x.scala:15)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpdt59p32x.scala:18)\n\tat Problem$.main(tmpdt59p32x.scala:21)\n\tat Problem.main(tmpdt59p32x.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "stdout": "",
      "timestamp": 1660029033
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val music_note = music_string.substring(0, 1)\n            val music_rest = music_string.substring(1, 2)\n            val music_rest2 = music_string.substring(2, 3)\n            val music_rest3 = music_string.substring(3, 4)\n            val music_rest4 = music_string.substring(4, 5)\n            val music_rest5 = music_string.substring(5, 6)\n            val music_rest6 = music_string.substring(6, 7)\n            val music_rest7 = music_string.substring(7, 8)\n            val music_rest8 = music_string.substring(8, 9)\n            val music_rest9 = music_string.substring(9, 10)\n            val music_rest10 = music_string.substring(10, 11)\n            val music_rest11 = music_string.substring(11, 12)\n            val music_rest12 = music_string.substring(12, 13)\n            val music_rest13 = music_string.substring(13, 14)\n            val music_rest14 = music_string.substring(14, 15)\n            val music_rest15 = music_string.substring(15, 16)\n            val music_rest16 = music_string.substring(16, 17)\n            val music_rest17 = music_string.substring(17, 18)\n            val music_rest18 = music_string.substring(18, 19)\n            val music_rest19 = music_string.substring(19, 20)\n            val music_rest20 = music_string.substring(20, 21)\n            val music_rest21 = music_string.substring(21, 22)\n            val music_rest22 = music_string.substring(22, 23)\n            val music_rest23 = music_string.substring(23, 24)\n            val music_rest24 = music_string.substring(24, 25)\n            val music_rest25 = music_string.substring(25, 26)\n            val music_rest26 = music_string.substring(26, 27)\n            val music_rest27 = music_string.substring(27, 28)\n            val music_rest28 = music_string.substring(28, 29)\n            val music_rest29 = music_string.substring(29, 30)\n            val music_rest30 = music_string.substring(30, 31)\n            val music_rest31 = music_string.substring(31, 32)\n            val music_rest32 = music_string.substring(32, 33)\n            val music_rest33 = music_string.substring(33, 34)\n            val music_rest34 = music_string.substring(34, 35)\n            val music_rest35 = music_string.substring(35, 36)\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_xe1yz9p.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_xe1yz9p.scala:61:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029029
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_beats = music_list.map(music_string => {\n            val music_string_split = music_string.split(\"o\")\n            val music_string_split_size = music_string_split.size\n            val music_string_split_beats = music_string_split.map(music_string_split => {\n                val music_string_split_split_size = music_string_split.split(\"|\").size\n                val music_string_split_split_beats = music_string_split.split(\"|\").map(music_string_split => {\n                    val music_string_split_split_split_size = music_string_split.split(\".\").size\n                    val music_string_split_split_split_beats = music_string_split.split(\".\").map(music_string_split => {\n                        val music_string_split_split_split_split_size = music_string_split.split(\".\").size\n                        val music_string_split_split_split_beats = music_string_split.split(\".\").map(music_string_split => {\n                            val music_string_split_split_split_split_size = music_string_split.split(\".\").size\n                            val music_string_split_split_split_split_beats = music_string_split.split(\".\").map(music_string_split => {\n                                val music_string_split_split_split_split_split_size = music_string_split.split(\".\").size\n                                val music_string_split_split_split_split_split_beats = music_string_split.split(\".\").map(music_string_split => {\n                                    val music_string_split_split_split_split_split_split_size = music_string_split.split(\".\").size\n                                    val music_string_split_split_split_split_split_beats = music_string_split.split(\".\").map(music_string_split => {\n                                        val music_string_split_split_split_split_split_split_size = music_string_split.split(\".\").size\n                                        val music_string_split_split_split_split_split_split_beats = music_string_split.split(\".\").map(music_string_split => {\n                                            val music_string_split_split_split_split_split_split_split_size = music_string_split.split(\".\").size\n                                            val music_string_split_split_split_split_split_split_beats = music_string_split.split(\".\").map(music_string_split => {\n                                                val music_string_split_split_split_split_split_split_split_size = music_string_split.split(\".\").size\n                                                val music_string_split_split_split_split_split_split_beats = music_string_split.split(\".\").map(music_string_split => {\n                                                    val music_string_split_split_split_split_split_split_split_split_size = music_string_split.split(\"\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmphm31cae4.scala:38:149 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m                                                    \u001b[33mval\u001b[0m \u001b[36mmusic_string_split_split_split_split_split_split_split_split_size\u001b[0m = music_string_split.split(\"\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 unclosed string literal\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphm31cae4.scala:40:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphm31cae4.scala:49:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphm31cae4.scala:48:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029032
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.charAt(0)\n            val beats = music_string.substring(1).split(\"|\").map(music_string => {\n                val beat = music_string.charAt(0)\n                val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                    val rest = music_string.charAt(0)\n                    val rest = music_string.substring(1).split(\".\").map(music_string => {\n                        val rest = music_string.charAt(0)\n                        val rest = music_string.substring(1).split(\"|\").map(music_string => {\n                            val rest = music_string.charAt(0)\n                            val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                                val rest = music_string.charAt(0)\n                                val rest = music_string.substring(1).split(\".\").map(music_string => {\n                                    val rest = music_string.charAt(0)\n                                    val rest = music_string.substring(1).split(\"|\").map(music_string => {\n                                        val rest = music_string.charAt(0)\n                                        val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                                            val rest = music_string.charAt(0)\n                                            val rest = music_string.substring(1).split(\".\").map(music_string => {\n                                                val rest = music_string.charAt(0)\n                                                val rest = music_string.substring(1).split(\"|\").map(music_string => {\n                                                    val rest = music_string.charAt(0)\n                                                    val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                                                        val rest = music_string.charAt(0)\n                                                        val rest = music_string.substring(1).split(\".\").map(music_string => {\n                                                            val rest = music_string.charAt(0)\n                                                            val rest = music_string.substring(1).split(\"|\").map(music_string => {\n                                                                val rest = music_string.charAt(0)\n                                                                val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                                                                    val rest = music_string.charAt(0)\n                                                                    val rest = music_string.substring(1).split(\".\").map(music_string => {\n                                                                        val rest = music_string.charAt(0)\n                                                                        val rest = music_string.substring(1).split(\"|\").map(music_string => {\n                                                                            val rest = music_string.charAt(0)\n                                                                            val rest = music_string.substring(1).split(\"o\").map(music_string => {\n                                                                                val rest = music_string.charAt(0)\n                                                                                val rest = musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp679cdm3p.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp679cdm3p.scala:61:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp679cdm3p.scala:50:84 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m                                                                                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = musi\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mrest is already defined as \u001b[33mvalue\u001b[0m \u001b[35mrest\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029030
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_list_size = music_list.size\n        val music_list_size_2 = music_list_size / 2\n        val music_list_size_3 = music_list_size_2 / 2\n        val music_list_size_4 = music_list_size_3 / 2\n        val music_list_size_5 = music_list_size_4 / 2\n        val music_list_size_6 = music_list_size_5 / 2\n        val music_list_size_7 = music_list_size_6 / 2\n        val music_list_size_8 = music_list_list_size_7 / 2\n        val music_list_size_9 = music_list_size_8 / 2\n        val music_list_size_10 = music_list_size_9 / 2\n        val music_list_size_11 = music_list_size_10 / 2\n        val music_list_size_12 = music_list_size_11 / 2\n        val music_list_size_13 = music_list_size_12 / 2\n        val music_list_size_14 = music_list_size_13 / 2\n        val music_list_size_15 = music_list_size_14 / 2\n        val music_list_size_16 = music_list_size_15 / 2\n        val music_list_size_17 = music_list_size_16 / 2\n        val music_list_size_18 = music_list_size_17 / 2\n        val music_list_size_19 = music_list_size_18 / 2\n        val music_list_size_20 = music_list_size_19 / 2\n        val music_list_size_21 = music_list_size_20 / 2\n        val music_list_size_22 = music_list_size_21 / 2\n        val music_list_size_23 = music_list_size_22 / 2\n        val music_list_size_24 = music_list_size_23 / 2\n        val music_list_size_25 = music_list_size_24 / 2\n        val music_list_size_26 = music_list_size_25 / 2\n        val music_list_size_27 = music_list_size_26 / 2\n        val music_list_size_28 = music_list_size_27 / 2\n        val music_list_size_29 = music_list_size_28 / 2\n        val music_list_size_30 = music_list_size_29 / 2\n        val music_list_size_31 = music_list_size_30 / 2\n        val music_list_size_32 = music_list_size_31 / 2\n        val music_list_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpur5iv493.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpur5iv493.scala:22:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_8\u001b[0m = music_list_list_size_7 / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: music_list_list_size_7\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpur5iv493.scala:48:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660029032
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\" \")\n        val music_list_size = music_list.size\n        val music_list_size_int = music_list_size.toInt\n        val music_list_size_long = music_list_size_int.toLong\n        val music_list_size_long2 = music_list_size_long * music_list_size_long\n        val music_list_size_long3 = music_list_size_long2 * music_list_size_long\n        val music_list_size_long4 = music_list_size_long3 * music_list_size_long\n        val music_list_size_long5 = music_list_size_long4 * music_list_size_long\n        val music_list_size_long6 = music_list_size_long5 * music_list_size_long\n        val music_list_size_long7 = music_list_size_long6 * music_list_size_long\n        val music_list_size_long8 = music_list_size_long7 * music_list_size_long\n        val music_list_size_long9 = music_list_size_long8 * music_list_size_long\n        val music_list_size_long10 = music_list_size_long9 * music_list_size_long\n        val music_list_size_long11 = music_list_size_long10 * music_list_size_long\n        val music_list_size_long12 = music_list_size_long11 * music_list_size_long\n        val music_list_size_long13 = music_list_size_long12 * music_list_size_long\n        val music_list_size_long14 = music_list_size_long13 * music_list_size_long\n        val music_list_size_long15 = music_list_size_long14 * music_list_size_long\n        val music_list_size_long16 = music_list_size_long15 * music_list_size_long\n        val music_list_size_long17 = music_list_size_long16 * music_list_size_long\n        val music_list_size_long18 = music_list_size_long17 * music_list_size_long\n        val music_list_size_long19 = music_list_size_long18 * music_list_size_long\n        val music_list_size_long20 = music_list_size_long19 * music_list_size_long\n        val music_list_size_long21 = music_list_size_long20 * music_list_size_long\n        val music_list_size_long22 = music_list_size_long21 * music_list_size_long\n        val music_list_size_long23 = music_list_size_long22 * musi\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp33s8tvzs.scala:39:62 ------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmusic_list_size_long23\u001b[0m = music_list_size_long22 * musi\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: musi\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33s8tvzs.scala:40:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660029033
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\"\\\\|\").map(music_string => {\n            val music_notes = music_string.split(\"\\\\ \").map(music_note => {\n                val note = music_note.charAt(0).toLowerCase\n                val beats = music_note.substring(1).toInt\n                beats\n            }).toList\n            music_notes.sum\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_sngf2g2.scala:16:48 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_note.charAt(\u001b[31m0\u001b[0m).toLowerCase\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value toLowerCase is not a member of Char\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029033
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0, 1)\n            val beats = music_string.substring(1, music_string.length).split(\"|\").map(music_string => {\n                val beats = music_string.substring(0, 1)\n                val rest = music_string.substring(1, music_string.length)\n                beats.toLong * rest.length\n            }).sum\n            note.toLong * beats\n        }).sum\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_739w_5e.scala:14:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Long\n\u001b[31m   |\u001b[0m        Required: \u001b[1m\u001b[32mList\u001b[0m\u001b[1m\u001b[32m[\u001b[0mLong\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnote\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m, music_string.length).split(\u001b[31m\"|\"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m17 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mbeats\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m18 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mrest\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m, music_string.length)\n\u001b[31m19 |\u001b[0m                beats.toLong * rest.length\n\u001b[31m20 |\u001b[0m            }).sum\n\u001b[31m21 |\u001b[0m            note.toLong * beats\n\u001b[31m22 |\u001b[0m        }).sum\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029033
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_list = music_string.split(\"\\\\|\")\n        val music_beats = music_list.map(music_string => {\n            val music_notes = music_string.split(\"\\\\o\")\n            val music_notes_beats = music_notes.map(music_note => {\n                val music_note_beats = music_note.split(\"\\\\.\").map(music_note => {\n                    val music_note_beats_beats = music_note.split(\"\\\\|\").map(music_note => {\n                        val music_note_beats_beats_beats = music_note.split(\"\\\\|\").map(music_note => {\n                            val music_note_beats_beats_beats_beats = music_note.split(\"\\\\|\").map(music_note => {\n                                val music_note_beats_beats_beats_beats_beats = music_note.split(\"\\\\|\").map(music_note => {\n                                    val music_note_beats_beats_beats_beats_beats_beats = music_note.split(\"\\\\|\").map(music_note => {\n                                        val music_note_beats_beats_beats_beats_beats_beats = music_note.split(\"\\\\|\").map(music_note => {\n                                            val music_note_beats_beats_beats_beats_beats_beats = music_note.split(\"\\\\|\").map(music_note => {\n                                                val music_note_beats_beats_beats_beats_beats_beats_beats = music_note.split(\"\\\\|\").map(music_note => {\n                                                    val music_note_beats_beats_beats_beats_beats_beats_beats_beats = music_note.split(\"\\\\|\").map(music_note => {\n                                                        val music_note_beats_beats_beats_beats_beats_beats_beats_beats = music_note.split(\"\\\\|\").map(music_note => {\n                                                            val music_note_beats_beats_beats_beats_beats_beats_beats_beats_beats = music_note.split(\"\\\\|\").map(music_note => {\n                                                                val music_note_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats = music_note.split(\"\\\\|\").map(music_note => {\n                                                                    val music_note_beats_beats_beats_beats_beats_beats_beats_beats_beats_beats = music_note.split(\"\\\\|\").map(music_note => {\n                                                                        val music_note_beats_beats_beats_beats_beats_\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2i02y4lj.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2i02y4lj.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[31m\u001b[31m   |\u001b[0m    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but 'def' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2i02y4lj.scala:43:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m')' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2i02y4lj.scala:42:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660029034
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        music_string.split(\" \").map(music_string => {\n            val music_note = music_string.substring(0, 1)\n            val music_type = music_string.substring(1, 2)\n            val music_length = music_string.substring(3, 4)\n            val music_beats = music_string.substring(4, 5)\n            val music_rest = music_string.substring(5, music_string.length)\n            val music_notes = music_note.toCharArray.map(music_note => {\n                val music_note_length = music_note.toInt\n                val music_note_beats = music_note_length / 4\n                val music_note_rest = music_note_length % 4\n                music_note_beats * music_note_length + music_note_rest\n            })\n            music_notes.toList.map(music_note => {\n                val music_note_length = music_note.toInt\n                val music_note_beats = music_note_length / 4\n                val music_note_rest = music_note_length % 4\n                music_note_beats * music_note_length + music_note_rest\n            })\n        }).flatten.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvuwmbzyg.scala:32:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        music_string.split(\u001b[31m\" \"\u001b[0m).map(\u001b[36mmusic_string\u001b[0m => {\n\u001b[31m15 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_note\u001b[0m = music_string.substring(\u001b[31m0\u001b[0m, \u001b[31m1\u001b[0m)\n\u001b[31m16 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_type\u001b[0m = music_string.substring(\u001b[31m1\u001b[0m, \u001b[31m2\u001b[0m)\n\u001b[31m17 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_length\u001b[0m = music_string.substring(\u001b[31m3\u001b[0m, \u001b[31m4\u001b[0m)\n\u001b[31m18 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_beats\u001b[0m = music_string.substring(\u001b[31m4\u001b[0m, \u001b[31m5\u001b[0m)\n\u001b[31m19 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_rest\u001b[0m = music_string.substring(\u001b[31m5\u001b[0m, music_string.length)\n\u001b[31m20 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmusic_notes\u001b[0m = music_note.toCharArray.map(\u001b[36mmusic_note\u001b[0m => {\n\u001b[31m21 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmusic_note_length\u001b[0m = music_note.toInt\n\u001b[31m22 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmusic_note_beats\u001b[0m = music_note_length / \u001b[31m4\u001b[0m\n\u001b[31m23 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmusic_note_rest\u001b[0m = music_note_length % \u001b[31m4\u001b[0m\n\u001b[31m24 |\u001b[0m                music_note_beats * music_note_length + music_note_rest\n\u001b[31m25 |\u001b[0m            })\n\u001b[31m26 |\u001b[0m            music_notes.toList.map(\u001b[36mmusic_note\u001b[0m => {\n\u001b[31m27 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmusic_note_length\u001b[0m = music_note.toInt\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmusic_note_beats\u001b[0m = music_note_length / \u001b[31m4\u001b[0m\n\u001b[31m29 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmusic_note_rest\u001b[0m = music_note_length % \u001b[31m4\u001b[0m\n\u001b[31m30 |\u001b[0m                music_note_beats * music_note_length + music_note_rest\n\u001b[31m31 |\u001b[0m            })\n\u001b[31m32 |\u001b[0m        }).flatten.toList\n\u001b[31m\u001b[31m   |\u001b[0m        ^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    List[\u001b[1m\u001b[31mInt\u001b[0m]\n\u001b[31m   |\u001b[0m        Required: List[\u001b[1m\u001b[32mLong\u001b[0m]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660029034
    }
  ]
}