name: HumanEval_104_unique_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of positive integers x. return a sorted list of all \n    //\
  \ elements that hasn't any even digit.\n    // Note: Returned list should be sorted\
  \ in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong,\
  \ 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
  \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
  \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
  \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
  \ 135l.toLong))));\n    }\n\n}\n"
completions: ["        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x\
    \ => if (x.toString.length == 0) result.add(x) else result.addAll(uniqueDigits(x.toString.reverse.map(_.toInt))))\n\
    \        result.sort", "        val evenDigits = x.filter(x => x.toString.toLong\
    \ % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n        evenDigitsList.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit\
    \ = new mutable.HashSet[Long]()\n        for(i <- 0 until x.size) {\n        \
    \    val digit = x(i).toInt\n            if(digit % 2 == 0) {\n              \
    \  evenDigit.add(digit)\n            }\n        }\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toInt\n            if(evenDigit.contains(digit))\
    \ {\n                continue\n            }\n            result.add(x(i))\n \
    \       }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => result += x }\n        oddDigits.foreach { x =>\
    \ result += x }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        notEvenDigits.foreach(x\
    \ => result.add(x))\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => \n            val index = oddDigits.indexOf(x)\n\
    \            if (index != -1) oddDigits.remove(index)\n            else result.add(x)\n\
    \        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach(x => if (result.contains(x)) return)\n     \
    \   result ++= evenDigitsSorted\n        result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => result += x }\n        oddDigits.foreach { x =>\
    \ result += x }\n        result.toList", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0).sort\n        val oddDigits = x.filter(x => x % 2 != 0).sort\n\
    \        evenDigits.filter(x => oddDigits.contains(x)).sort", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n            val\
    \ digit = x.toString.toInt\n            if (digit % 2 == 0) {\n              \
    \  result.add(x)\n            }\n        })\n        result.sort", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val evenDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => { \n            if (x % 2 == 0) {\n                evenDigit.add(x)\n\
    \            }\n        })\n        evenDigit.foreach(x => { \n            if\
    \ (result.contains(x)) {\n                return\n            }\n            result\
    \ += x\n        })\n        result.toList", "        val xs = x.toSet\n      \
    \  val ys = xs.filter(_ % 2 == 0)\n        ys.toList", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n\
    \        evenDigitsList.sortWith(_ < _)", "        val evenDigits = x.filter(x\
    \ => x.toString.toInt%2 == 0).sort\n        val oddDigits = x.filter(x => x.toString.toInt%2\
    \ != 0).sort\n        oddDigits.filter(x => evenDigits.contains(x)).sort", " \
    \       val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x\
    \ => {\n            val digit = x.toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result += x\n            }\n        })\n        result.sort",
  "        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n        val\
    \ uniqueEvenDigits = evenDigitsList.distinct\n        val uniqueEvenDigitsList\
    \ = uniqueEvenDigits.toList\n        val uniqueEvenDigitsSortedList = uniqueEvenDigitsList.sort\n\
    \        uniqueEvenDigitsSortedList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => \n            if (x.toString.toInt%2 == 0) result.add(x)\n\
    \        )\n        result.sort", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitList\
    \ = evenDigits.toList\n        evenDigitList.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val oddDigits = digits.filter(x => x % 2 != 0)\n\
    \        val oddDigitsSet = oddDigits.toSet\n        evenDigitsSet.forall(x =>\
    \ !oddDigitsSet.contains(x))\n        result ++= oddDigits\n        result", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sortWith(_\
    \ < _)", "        val evenDigitsMap = mutable.HashMap[Long, List[Long]]()\n  \
    \      val oddDigitsMap = mutable.HashMap[Long, List[Long]]()\n        x.foreach(x\
    \ => if (x % 2 == 0) evenDigitsMap += x -> Nil)\n        x.foreach(x => if (x\
    \ % 2 != 0) oddDigitsMap += x -> Nil)\n        oddDigitsMap.filter(_._2.isEmpty).map(_._1).sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach { x => \n     \
    \       if (result.contains(x)) \n                result.filter(_ != x).foreach\
    \ { y => result.remove(y) }\n            else \n                result += x\n\
    \        }\n        oddDigits.foreach { x => \n            if (result.contains(x))\
    \ \n                result.filter(_ != x).foreach { y => result.remove(y) }\n\
    \            else \n                result += x\n        }\n        result.toList",
  "        val xs = x.toSet\n        val even = xs.filter(x => x % 2 == 0).toList\n\
    \        xs.filterNot(even)", "        val evenDigits = x.filter(x => x % 2 ==\
    \ 0)\n        val evenDigitList = evenDigits.toList\n        val evenDigitSet\
    \ = evenDigitList.toSet\n        val uniqueEvenDigitList = evenDigitList.filter(x\
    \ => !evenDigitSet.contains(x))\n        val uniqueEvenDigitSet = uniqueEvenDigitList.toSet\n\
    \        uniqueEvenDigitList.filter(x => !uniqueEvenDigitSet.contains(x))", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        for(i <- 0 until x.size) {\n            val\
    \ digit = x(i).toInt\n            if(digit % 2 == 0) {\n                evenDigit.add(digit)\n\
    \            }\n        }\n        for(i <- 0 until x.size) {\n            val\
    \ digit = x(i).toInt\n            if(evenDigit.contains(digit)) {\n          \
    \      result.add(x(i))\n            }\n        }\n        result.sort", "   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val notEvenDigits = digits.filter(x => !evenDigitsSet.contains(x))\n\
    \        result.+=(notEvenDigits.toList)\n        result.sortWith(_ < _)\n   \
    \     result.toList", "        val result = new mutable.ListBuffer[Long]()\n \
    \       val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach\
    \ { x =>\n            if (result.contains(x)) \n                result.add(x)\n\
    \            else\n                result.add(x.toString.toLong)\n        }\n\
    \        result.toList", "        val xs = x.toSet\n        val ys = xs.filter(_\
    \ % 2 == 0).toList\n        ys.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i)\n            if(digit.isEven) {\n  \
    \              evenDigit.add(digit)\n            } else {\n                result.add(digit)\n\
    \            }\n        }\n        evenDigit.foreach(x => result.add(x))\n   \
    \     result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach { x => \n            val index =\
    \ digits.indexOf(x)\n            if (index != -1) {\n                result.add(digits(index))\n\
    \                digits.remove(index)\n            }\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach { x => result +=\
    \ x }\n        oddDigits.foreach { x => result += x }\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        val oddDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach { x =>\n            if (x % 2 == 0) {\n                evenDigit.add(x)\n\
    \            } else {\n                oddDigit.add(x)\n            }\n      \
    \  }\n        oddDigit.foreach { x =>\n            if (evenDigit.contains(x))\
    \ {\n                result.add(x)\n            }\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val str = x.toString\n            val digits = str.dropWhile(_ <\
    \ '0').dropWhile(_ > '9').toList\n            val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n            if (evenDigits.isEmpty) {\n                result\
    \ += x\n            }\n        })\n        result.sorted", "        val xs = x.toSet\n\
    \        val result = new mutable.ListBuffer[Long]()\n        for(i <- xs.iterator)\
    \ \n            if(i % 2 == 0) \n                result += i\n        result.sort",
  "        val evenDigits = x.filter(x => x.toString.toInt%2 == 0)\n        val evenDigitsList\
    \ = evenDigits.toList\n        val uniqueEvenDigits = evenDigitsList.distinct\n\
    \        val uniqueEvenDigitsList = uniqueEvenDigits.toList\n        val uniqueEvenDigitsSortedList\
    \ = uniqueEvenDigitsList.sort\n        uniqueEvenDigitsSortedList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val evenDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => { \n            if (x % 2 == 0) {\n                evenDigit.add(x)\n\
    \            }\n        })\n        evenDigit.foreach(x => { \n            if\
    \ (result.contains(x)) {\n                return\n            } else {\n     \
    \           result += x\n            }\n        })\n        result.toList", " \
    \       val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitList\
    \ = evenDigits.toList\n        val evenDigitSet = evenDigitList.distinct\n   \
    \     val evenDigitSetList = evenDigitSet.toList\n        val evenDigitSetSet\
    \ = evenDigitSetList.distinct\n        val evenDigitSetSetList = evenDigitSetSet.toList\n\
    \        evenDigitSetSetList.filter(x => x.length == 1).map(x => x.head).toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        x.foreach(x =>\
    \ {\n            if (x % 2 == 0) {\n                evenDigit += x\n         \
    \   }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result += x\n        })\n\
    \        result.toList", "        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val evenDigitsList = evenDigits.toList\n        val evenDigitsSet\
    \ = evenDigitsList.map(_.toString.toInt).toSet\n        val uniqueEvenDigits =\
    \ evenDigitsList.filter(x => !evenDigitsSet.contains(x.toString.toInt))\n    \
    \    uniqueEvenDigits.sortBy(_.toString.toInt)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitList\
    \ = evenDigits.toList\n        evenDigitList.foreach { x =>\n            if (result.contains(x))\
    \ {\n                return\n            } else {\n                result += x\n\
    \            }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- x.indices) {\n            if (x(i) % 2 == 0) {\n          \
    \      result.add(x(i))\n            }\n        }\n        result.sortWith(_ <\
    \ _)", "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit\
    \ = new mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x %\
    \ 2 == 0) {\n                evenDigit.add(x)\n            }\n        })\n   \
    \     evenDigit.foreach(x => result += x)\n        result.sort", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach(x => result +=\
    \ x)\n        oddDigits.foreach(x => result += x)\n        result.sort", "   \
    \     val result = new mutable.LinkedList[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            if (!result.contains(x)) {\n                result.add(x)\n\
    \            }\n        })\n        result.toList", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n           \
    \ val digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n        \
    \        result.add(x(i))\n            }\n        }\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        for(i <- 0 until x.size) {\n            val\
    \ digit = x(i).toInt\n            if(digit % 2 == 0) {\n                evenDigit.add(digit)\n\
    \            }\n        }\n        for(i <- 0 until x.size) {\n            val\
    \ digit = x(i).toInt\n            if(evenDigit.contains(digit)) {\n          \
    \      result.add(x(i))\n            }\n        }\n        result.sort", "   \
    \     val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach(x => result +=\
    \ x)\n        oddDigits.foreach(x => result += x)\n        result.sort", "   \
    \     val result = new mutable.LinkedList[Long]()\n        val nums = x.toSet\n\
    \        val even = nums.filter(_ % 2 == 0)\n        val odd = nums.filter(_ %\
    \ 2 != 0)\n        val evenList = even.toList\n        val oddList = odd.toList\n\
    \        evenList.foreach { x => result.add(x) }\n        oddList.foreach { x\
    \ => result.add(x) }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result += x(i)\n          \
    \  }\n        }\n        result.sortWith((x, y) => x.toString.toInt - y.toString.toInt)",
  "        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val digits\
    \ = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach(x\
    \ => result += x)\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            if (x(i) % 2 == 0) {\n     \
    \           result += x(i)\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.HashSet[Long]()\n        x.foreach(x\
    \ => if (x % 2 == 0) result.add(x) else ())\n        result.sort", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        evenDigitsSet.foreach { x => \n            if (result.contains(x))\
    \ \n                result.filter(_ != x).foreach(x => result.remove(x))\n   \
    \         else \n                result += x\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\
    \ \n            if (x % 2 == 0) {\n                evenDigit.add(x)\n        \
    \    }\n        })\n        evenDigit.foreach(x => { \n            if (result.contains(x))\
    \ {\n                result.add(x)\n            }\n        })\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        for(i <- 0 until x.size) {\n            val\
    \ digit = x(i)\n            if(digit.asDigit % 2 == 0) {\n                evenDigit.add(digit.asDigit)\n\
    \            }\n        }\n        for(i <- 0 until x.size) {\n            val\
    \ digit = x(i)\n            if(evenDigit.contains(digit.asDigit)) {\n        \
    \        result.add(digit.asDigit)\n            }\n        }\n        result.sorted",
  "        val evenDigits = x.filter(x => x % 2 == 0).sorted\n        val oddDigits\
    \ = x.filter(x => x % 2 != 0).sorted\n        evenDigits ++ oddDigits", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size)\
    \ {\n            if (x(i).toString.toLong % 2 == 0) {\n                result.add(x(i))\n\
    \            }\n        }\n        result.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n    \
    \        val digit = x(i).toString.toInt\n            if (digit % 2 == 0) {\n\
    \                result.add(x(i))\n            }\n        }\n        result.sortWith((x,\
    \ y) => x.toString.toInt - y.toString.toInt)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toString.toInt\n            if(digit % 2 ==\
    \ 0) {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitList\
    \ = evenDigits.toList\n        val uniqueEvenDigit = evenDigitList.distinct\n\
    \        val uniqueEvenDigitList = uniqueEvenDigit.toList\n        val uniqueEvenDigitListSorted\
    \ = uniqueEvenDigitList.sort\n        uniqueEvenDigitListSorted", "        val\
    \ xs = x.toSet\n        val ys = xs.filter(_ % 2 == 0)\n        val zs = xs.filter(_\
    \ % 2 != 0)\n        val zsSet = zs.toSet\n        val ys = ys.filterNot(zsSet)\n\
    \        ys.toList", "        val result = new mutable.ListBuffer[Long]()\n  \
    \      x.foreach(x => { \n            if (x.toString.toInt%2 == 0) result += x\n\
    \        })\n        result.sortWith(_ < _)", "        val xs = x.toSet\n    \
    \    val result = new mutable.ListBuffer[Long]()\n        for(i <- xs.iterator)\
    \ {\n            val digit = i.toString.toInt\n            if(digit % 2 == 0)\
    \ {\n                result.add(i)\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val digits\
    \ = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        notEvenDigits.foreach(x\
    \ => result.add(x))\n        result.sortWith((x, y) => x.toString.compareTo(y.toString)\
    \ < 0)", "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit\
    \ = new mutable.HashSet[Long]()\n        for(i <- x) {\n            if(i.toString.length\
    \ == 1) {\n                evenDigit.add(i)\n            }\n        }\n      \
    \  for(i <- x) {\n            if(!evenDigit.contains(i)) {\n                result.add(i)\n\
    \            }\n        }\n        result.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n            val\
    \ str = x.toString\n            val digits = str.dropWhile(_.isDigit).drop(1).dropRight(1)\n\
    \            val evenDigit = digits.filter(_.isDigit).length == 0\n          \
    \  if (evenDigit) result += x\n        })\n        result.sorted", "        val\
    \ evenDigitsMap = mutable.HashMap[Long, Int]()\n        val oddDigitsMap = mutable.HashMap[Long,\
    \ Int]()\n        x.foreach(x => if (x % 2 == 0) evenDigitsMap += x -> 1) else\
    \ oddDigitsMap += x -> 1)\n        val evenDigits = evenDigitsMap.filter(_._2\
    \ > 0).map(_._1)\n        val oddDigits = oddDigitsMap.filter(_._2 > 0).map(_._1)\n\
    \        evenDigits.toList ++ oddDigits", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach(x\
    \ => result += x)\n        evenDigitsSet.foreach(x => result -= x)\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x.toString.toInt%2 == 0) result += x)\n        result.sort", "        val evenDigits\
    \ = x.filter(_ % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_\
    \ < _)\n        evenDigitsSorted.filter(_ % 2 == 0).distinct", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => \n            x match\
    \ {\n                case x if x.toString.length == 0 => \n                  \
    \  result.clear()\n                case x if x.toString.length == 2 => \n    \
    \                result.clear()\n                case x if x.toString.length ==\
    \ 3 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 4 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 5 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 6 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 7 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 8 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 9 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 10 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 11 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 12 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 13 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 14 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 15 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 16 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 17 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 18 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 19 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 20 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 21 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 22 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 23 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 24 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 25 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 26 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 27 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 28 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 29 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 30 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 31 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 32 => \n                    result.clear()\n                case x if x.toString.length\
    \ == 33 => \n                    result.clear()\n", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n \
    \       val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        notEvenDigits.foreach(x\
    \ => result.add(x))\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        notEvenDigits.foreach(x\
    \ => result.add(x))\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x.toString.toInt%2 == 0)\n        val evenDigitList = evenDigits.toList\n\
    \        evenDigitList.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            if (x(i).asDigit % 2 == 0) {\n\
    \                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x\
    \ => {\n            val digit = x.toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result.add(x)\n            }\n        })\n        result.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(_ % 2 == 0)\n        val evenDigitList\
    \ = evenDigits.toList\n        val evenDigitSet = evenDigitList.distinct\n   \
    \     val evenDigitSetList = evenDigitSet.toList\n        evenDigitSetList.filterNot(evenDigitSetList.contains(_))",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => result.add(x))\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit\
    \ = new mutable.ListBuffer[Long]()\n        val oddDigit = new mutable.ListBuffer[Long]()\n\
    \        for (i <- x) {\n            if (i % 2 == 0) {\n                evenDigit\
    \ += i\n            } else {\n                oddDigit += i\n            }\n \
    \       }\n        evenDigit.sortWith(_ < _)\n        oddDigit.sortWith(_ < _)\n\
    \        evenDigit.foreach { i =>\n            if (oddDigit.contains(i)) {\n \
    \               result += i\n            }\n        }\n        result.toList",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        x.foreach(x => \n         \
    \   if (x.toString.length == 0) result.add(x)\n            else if (x.toString.forall(x\
    \ => x % 2 == 0)) result.add(x)\n        )\n        result.sort", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        for (i <- 0 until x.size) {\n\
    \            val digit = x(i).toString.toInt\n            if (digit % 2 == 0)\
    \ {\n                result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val digits\
    \ = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n        evenDigits.foreach(x => result += x)\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            val digit = x%10\n            if(digit==0) result.add(x)\n      \
    \  })\n        result.sortWith(_ < _)", "        val evenDigits = x.filter(x =>\
    \ x.toString.toInt%2 == 0).sorted\n        val oddDigits = x.filter(x => x.toString.toInt%2\
    \ == 1).sorted\n        oddDigits ++ evenDigits", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result.add(x)\n      \
    \  })\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val odd = new\
    \ mutable.ListBuffer[Long]()\n        x.foreach(x => {\n            if (x % 2\
    \ == 0) {\n                evenDigit += x\n            } else {\n            \
    \    odd += x\n            }\n        })\n        evenDigit.foreach(x => {\n \
    \           if (odd.contains(x)) {\n                result += x\n            }\n\
    \        })\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n            if (x\
    \ % 2 == 0) {\n                evenDigit += x\n            } else {\n        \
    \        oddDigit += x\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            if (result.contains(x)) {\n                result.filter(_\
    \ != x).foreach(x => result.remove(x))\n            } else {\n               \
    \ result += x\n            }\n        })\n        oddDigit.foreach(x => {\n  \
    \          if (result.contains(x)) {\n                result.filter(_ != x).foreach(x\
    \ => result.remove(x))\n            } else {\n                result += x\n  \
    \          }\n        })\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ x.size) {\n            val digit = x(i).toInt\n            if(digit % 2 == 0)\
    \ {\n                evenDigit.add(digit)\n            }\n        }\n        for(i\
    \ <- 0 until x.size) {\n            val digit = x(i).toInt\n            if(evenDigit.contains(digit))\
    \ {\n                continue\n            }\n            result.add(x(i))\n \
    \       }\n        result.sortWith(_ < _)", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val result = evenDigitsSet.filterNot(x => digits.contains(x))\n\
    \        result.sorted", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach(x => if (result.contains(x)) return\n      \
    \      else if (result.size < x) result += x)\n        result", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => result += x }\n        oddDigits.foreach { x =>\
    \ result += x }\n        result.sort", "        val evenDigits = x.filter(x =>\
    \ x.toString.toInt%2 == 0).sorted\n        val oddDigits = x.filter(x => x.toString.toInt%2\
    \ == 1).sorted\n        val result = evenDigits.filter(x => !oddDigits.contains(x))\n\
    \        result.sort", "        val xs = x.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ xs.size) {\n            val digit = xs(i)\n            if(digit.isEven) {\n\
    \                evenDigit.add(digit)\n            } else {\n                result.add(digit)\n\
    \            }\n        }\n        result.sortWith((x, y) => x.compare(y) == 0)\n\
    \        result.filterNot(evenDigit.contains)", "        val xs = x.toSet\n  \
    \      val evens = xs.filter(_ % 2 == 0)\n        evens.toList.sortBy(x => x)",
  "        val result = new mutable.ListBuffer[Long]()\n        val xs = x.toSet\n\
    \        xs.foreach { x =>\n            val y = x.toString.toInt\n           \
    \ if (y % 2 == 0) {\n                result += x\n            }\n        }\n \
    \       result.sort", "        val evenDigits = x.filter(x => x % 2 == 0).sorted\n\
    \        val oddDigits = x.filter(x => x % 2 != 0).sorted\n        evenDigits\
    \ ++ oddDigits", "        val result = new mutable.ListBuffer[Long]()\n      \
    \  val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x =>\n            if (result.contains(x)) return\n\
    \            result += x\n        }\n        oddDigits.foreach { x =>\n      \
    \      if (result.contains(x)) return\n            result += x\n        }\n  \
    \      result.toList", "        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x.toString.toInt%2 == 0)\n  \
    \      val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)", "        val xs = x.toSet\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- xs) {\n            if (i.toString.toLong % 2 == 0) {\n    \
    \            result += i\n            }\n        }\n        result.sort", "  \
    \      val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsList\
    \ = evenDigits.toList\n        val evenDigitsSet = evenDigitsList.distinct\n \
    \       val evenDigitsSetList = evenDigitsSet.toList\n        evenDigitsSetList.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => if (evenDigit.contains(x.toInt))\
    \ result.append(x) else evenDigit.add(x.toInt))\n        result.sort", "     \
    \   val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.toList.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        x.foreach { x\
    \ =>\n            if (x % 2 == 0) {\n                evenDigit += x\n        \
    \    } else {\n                result += x\n            }\n        }\n       \
    \ evenDigit.toList", "        val result = new mutable.ListBuffer[Long]()\n  \
    \      x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x % 2 == 0).sorted\n        val\
    \ oddDigits = x.filter(x => x % 2 != 0).sorted\n        oddDigits.filter(x =>\
    \ evenDigits.contains(x)).sorted", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.ListBuffer[Long]()\n        val oddDigit\
    \ = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n     \
    \       val digit = x(i)\n            if(digit % 2 == 0) {\n                evenDigit\
    \ += digit\n            } else {\n                oddDigit += digit\n        \
    \    }\n        }\n        evenDigit.foreach(x => result += x)\n        oddDigit.foreach(x\
    \ => result += x)\n        result.sort", "        val evenDigits = x.filter(x\
    \ => x.toString.toInt%2 == 0)\n        val evenDigitList = evenDigits.toList\n\
    \        val evenDigitList = evenDigitList.sortBy(x => x)\n        val uniqueEvenDigits\
    \ = evenDigitList.distinct\n        uniqueEvenDigits", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n\
    \        val evenDigitsSet = evenDigitsList.distinct\n        val evenDigitsSetList\
    \ = evenDigitsSet.toList\n        evenDigitsSetList.filter(x => x.toString.length\
    \ == 1).sort", "        val evenDigits = x.filter(x => x % 2 == 0).toList\n  \
    \      val evenDigitsSorted = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(_\
    \ % 2 == 0).distinct", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitCount = evenDigits.size\n        val oddDigitCount\
    \ = digits.size - evenDigitCount\n        evenDigits.foreach { x =>\n        \
    \    val digit = x % 10\n            if (digit != 0) {\n                result.add(x)\n\
    \            }\n        }\n        if (oddDigitCount > 0) {\n            val oddDigits\
    \ = digits.filter(x => x % 10 != 0)\n            oddDigits.foreach { x =>\n  \
    \              val digit = x % 10\n                if (digit != 0) {\n       \
    \             result.add(x)\n                }\n            }\n        }\n   \
    \     result.toList", "        val evenDigits = x.filter(x => x % 2 == 0).sorted\n\
    \        val oddDigits = x.filter(x => x % 2 != 0).sorted\n        evenDigits.filter(x\
    \ => oddDigits.contains(x)).sorted", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sorted\n        evenDigitsSorted.foreach\
    \ { x => \n            if (result.contains(x)) \n                result.delete(x)\n\
    \            else \n                result += x\n        }\n        result.toList",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsList\
    \ = evenDigits.toList\n        val evenDigitsSet = evenDigitsList.distinct\n \
    \       val evenDigitsSortedList = evenDigitsSet.sort\n        evenDigitsSortedList",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        val oddDigit = new mutable.HashSet[Long]()\n\
    \        for(i <- x) {\n            if(i.toString.length == 1) {\n           \
    \     evenDigit.add(i)\n            } else {\n                oddDigit.add(i)\n\
    \            }\n        }\n        for(i <- evenDigit) {\n            if(!oddDigit.contains(i))\
    \ {\n                result.add(i)\n            }\n        }\n        result.sorted",
  "        val evenDigits = x.filter(x => x.toString.toInt%2 == 0)\n        val evenDigitsList\
    \ = evenDigits.toList\n        evenDigitsList.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        for(i <- 0 until x.size) {\n     \
    \       val digit = x(i).toString.toInt\n            if(digit % 2 == 0) {\n  \
    \              result.add(x(i))\n            }\n        }\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit\
    \ = new mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x %\
    \ 2 == 0) {\n                evenDigit.add(x)\n            }\n        })\n   \
    \     evenDigit.foreach(x => {\n            if (result.contains(x)) {\n      \
    \          return\n            }\n            result.add(x)\n        })\n    \
    \    result.toList", "        val result = new mutable.ListBuffer[Long]()\n  \
    \      x.foreach(x => { \n            if (x.toString.toLong % 2 == 0) result.add(x)\n\
    \        })\n        result.sortWith((x, y) => x.toString.toLong < y.toString.toLong)",
  "        val result = new mutable.ListBuffer[Long]()\n        val xs = x.toSet\n\
    \        val xlen = xs.size\n        val xlen = xs.toSet.size\n        val xlen\
    \ = xs.toSet.size\n        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n\
    \        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val\
    \ xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n\
    \        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val\
    \ xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n\
    \        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val\
    \ xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n\
    \        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val\
    \ xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n\
    \        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val\
    \ xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n\
    \        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val\
    \ xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n\
    \        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val\
    \ xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n\
    \        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val\
    \ xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n\
    \        val xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val\
    \ xlen = xs.toSet.size\n        val xlen = xs.toSet.size\n        val xlen = ",
  "        val evenDigits = x.filter(x => x.toString.toInt%2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach { x => result +=\
    \ x }\n        oddDigits.foreach { x => result += x }\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if\
    \ (x.toString.toLong % 2 == 0) result += x)\n        result.sort", "        val\
    \ evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitList = evenDigits.toList\n\
    \        val evenDigitSet = evenDigitList.distinct\n        val evenDigitSetList\
    \ = evenDigitSet.toList\n        evenDigitSetList.filter(x => x.toString.length\
    \ == 1).sortBy(x => x)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result.add(x)\n            }\n   \
    \     })\n        result.sortWith((x, y) => x.toString.toInt - y.toString.toInt)",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.foreach(x => result +=\
    \ x)\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        evenDigits.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sortWith(_ < _)", "        val evenDigits =\
    \ x.filter(x => x % 2 == 0)\n        val evenDigitList = evenDigits.toList\n \
    \       val evenDigitListSet = evenDigitList.toSet\n        val uniqueEvenDigitList\
    \ = evenDigitList.filter(x => !evenDigitListSet.contains(x))\n        val uniqueEvenDigitListSet\
    \ = uniqueEvenDigitList.toSet\n        val uniqueEvenDigitListSetIterator = uniqueEvenDigitListSet.iterator\n\
    \        val uniqueEvenDigitListSetIteratorNext = uniqueEvenDigitListSetIterator.next\n\
    \        val uniqueEvenDigitListSetIteratorNextNext = uniqueEvenDigitListSetIteratorNext.next\n\
    \        val uniqueEvenDigitListSetIteratorNextNextNext = uniqueEvenDigitListSetIteratorNextNext.next\n\
    \        val uniqueEvenDigitListSetIteratorNextNextNextNext = uniqueEvenDigitListSetIteratorNextNextNext.next\n\
    \        val uniqueEvenDigitListSetIteratorNextNextNextNextNext = uniqueEvenDigitListSetIteratorNextNextNextNext.next\n\
    \        val uniqueEvenDigitListSetIteratorNextNextNextNextNextNext = uniqueEvenDigitListSetIteratorNextNextNextNextNext.next\n\
    \        val uniqueEvenDigitListSetIteratorNextNextNextNextNextNext = uniqueEvenDigitListSetIteratorNextNextNextNextNext.next\n\
    \        val uniqueEvenDigitListSetIteratorNextNextNextNextNextNextNext = uniqueEvenDigitListSetIteratorNextNextNextNextNextNext.next\n\
    \        val uniqueEvenDigitListSetIteratorNextNextNextNextNextNextNextNext =\
    \ uniqueEvenDigitListSetIteratorNextNextNextNextNextNextNext.next\n        val\
    \ uniqueEvenDigitListSetIteratorNextNextNextNextNextNextNextNextNext = uniqueEvenDigitListSetIteratorNextNextNextNextNextNextNextNext.next\n\
    \        val uniqueEvenDigitListSetIteratorNextNextNextNextNextNextNextNextNext\
    \ = uniqueEvenDigitListSetIteratorNextNextNextNextNextNextNextNextNext.next\n\
    \        val uniqueEvenDigitListSetIteratorNextNextNextNextNextNextNextNextNextNext\
    \ = uniqueEvenDigitListSetIteratorNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val uniqueEvenDigitListSetIteratorNextNextNextNextNextNextNextNextNextNextNext\
    \ = uniqueEvenDigitListSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val uniqueEvenDigitListSetIteratorNextNextNextNextNextNextNextNextNextNextNextNext\
    \ = uniqueEvenDigitListSetIteratorNextNextNextNextNextNextNextNext", "       \
    \ val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n    \
    \        val digit = x.toString.toInt\n            if (digit % 2 == 0) {\n   \
    \             result += x\n            }\n        })\n        result.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitSet\
    \ = evenDigits.toSet\n        evenDigits.foreach { x =>\n            if (evenDigitSet.contains(x))\
    \ {\n                result.add(x)\n            }\n        }\n        result.toList",
  "        val evenDigits = x.filter(x => x % 2 == 0)\n        val evenDigitsSorted\
    \ = evenDigits.sortWith(_ < _)\n        evenDigitsSorted.filter(x => x % 2 ==\
    \ 0)", "        val evenDigits = x.filter(x => x % 2 == 0).sorted\n        val\
    \ oddDigits = x.filter(x => x % 2 != 0).sorted\n        evenDigits ++ oddDigits",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        evenDigitsSet.foreach(x => result.add(x))\n    \
    \    result.toList", "        val evenDigits = x.filter(x => x % 2 == 0)\n   \
    \     val evenDigitList = evenDigits.toList\n        val uniqueEvenDigits = evenDigitList.distinct\n\
    \        val uniqueEvenDigitList = uniqueEvenDigits.toList\n        val uniqueEvenDigitListSorted\
    \ = uniqueEvenDigitList.sort\n        uniqueEvenDigitListSorted", "        val\
    \ result = new mutable.HashSet[Long]()\n        val nums = x.toList\n        nums.foreach(x\
    \ => if (x % 2 == 0) result.add(x))\n        nums.toList.sortWith(_ < _)", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val xs = x.toSet\n\
    \        val xs2 = xs.toList\n        val x3 = xs.toSet\n        val x4 = xs.toList\n\
    \        val x5 = xs.toSet\n        val x6 = xs.toList\n        val x7 = xs.toSet\n\
    \        val x8 = xs.toList\n        val x9 = xs.toSet\n        val x10 = xs.toList\n\
    \        val x11 = xs.toSet\n        val x12 = xs.toList\n        val x13 = xs.toSet\n\
    \        val x14 = xs.toList\n        val x15 = xs.toSet\n        val x16 = xs.toList\n\
    \        val x17 = xs.toSet\n        val x18 = xs.toList\n        val x19 = xs.toSet\n\
    \        val x20 = xs.toList\n        val x21 = xs.toSet\n        val x22 = xs.toList\n\
    \        val x23 = xs.toSet\n        val x24 = xs.toList\n        val x25 = xs.toSet\n\
    \        val x26 = xs.toList\n        val x27 = xs.toSet\n        val x28 = xs.toList\n\
    \        val x29 = xs.toSet\n        val x30 = xs.toList\n        val x31 = xs.toSet\n\
    \        val x32 = xs.toList\n        val x33 = xs.toSet\n        val x34 = xs.toList\n\
    \        val x35 = xs.toSet\n        val x36 = xs.toList\n        val x37 = xs.toSet\n\
    \        val x38 = xs.toList\n        val x39 = xs.toSet\n        val x40 = xs.toList\n\
    \        val x41 = xs.toSet\n        val x42 = xs.toList\n        val x43 = xs.toSet\n\
    \        val x44 = xs.toList\n        val x45 = xs.toSet\n        val x46 = xs.toList\n\
    \        val x47 = xs.toSet\n        val x48 = xs.toList\n        val x49 = xs.toSet\n\
    \        val x50 = xs.toList\n        val x51 = xs.toSet\n        val x52 = xs.toList\n\
    \        val x53 = xs.toSet\n        val x54 = xs.toList\n        val x55 = xs.toSet\n\
    \        val x", "        val evenDigits = x.filter(x => x.toString.toInt%2 ==\
    \ 0)\n        val evenDigitsList = evenDigits.toList\n        evenDigitsList.sortWith(_\
    \ < _)", "        val evenDigits = x.filter(x => x.toString.toInt%2 == 0)\n  \
    \      val evenDigitsList = evenDigits.toList\n        val evenDigitsSet = evenDigitsList.map(x\
    \ => x.toString.toInt).toSet\n        val uniqueEvenDigits = evenDigitsList.filter(x\
    \ => !evenDigitsSet.contains(x))\n        uniqueEvenDigits.sort", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val evenDigits = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                evenDigits.add(digit)\n   \
    \         }\n        }\n        for(i <- 0 until x.size) {\n            val digit\
    \ = x(i).toString.toInt\n            if(evenDigits.contains(digit)) {\n      \
    \          result.add(x(i))\n            }\n        }\n        result.sortWith((x,\
    \ y) => x.toString.toInt - y.toString.toInt)", "        val result = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x))\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n\
    \            if (x % 2 == 0) result.add(x)\n        })\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sortWith(_ < _)", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        x.foreach(x => if (x.toString.length ==\
    \ 0) result.add(x) else result.addAll(x.toString.filter(x => x.toString.forall(_.isDigit))))\n\
    \        result.sortWith(_ < _)", "        val evenDigits = x.filter(x => x.toString.toInt%2\
    \ == 0)\n        val oddDigits = x.filter(x => x.toString.toInt%2 != 0)\n    \
    \    evenDigits.union(oddDigits).sortBy(x => x)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            if (x % 2 == 0) {\n                evenDigit.add(x)\n           \
    \ }\n        })\n        evenDigit.foreach(x => {\n            if (result.contains(x))\
    \ {\n                return\n            }\n            result.add(x)\n      \
    \  })\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach(x => if (result.contains(x)) return\n      \
    \      else if (result.size < x) result += x)\n        result", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach(x => result.add(x))\n\
    \        oddDigits.foreach(x => result.add(x))\n        result.sort", "      \
    \  val evenDigits = x.filter(x => x.toString.toInt%2 == 0)\n        evenDigits.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val digits\
    \ = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n        evenDigits.foreach(x => result += x)\n        result.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val digits\
    \ = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x => x % 2\
    \ == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach(x\
    \ => result += x)\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        evenDigitsSet.foreach\
    \ { x => result += x }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach(x => result += x)\n        oddDigits.foreach(x => result\
    \ += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => if (x.toString.toInt%2 == 0) result += x)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            if (result.contains(x)) {\n                return\n      \
    \      }\n            result += x\n        })\n        result.toList", "     \
    \   val evenDigits = x.filter(x => x % 2 == 0).sorted\n        val oddDigits =\
    \ x.filter(x => x % 2 != 0).sorted\n        evenDigits.filter(x => oddDigits.contains(x)).sorted",
  "        val result = new mutable.LinkedList[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => { \n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => { \n            if (result.contains(x)) {\n                return\n     \
    \       }\n            result.add(x)\n        })\n        result.toList", "  \
    \      val result = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val oddDigits\
    \ = digits.filter(x => x % 2 != 0)\n        evenDigits.foreach { x => result +=\
    \ x }\n        oddDigits.foreach { x => result += x }\n        result.sort", " \
    \       val result = new mutable.HashSet[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result.add(x))\n        result.sorted", "        val result = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => if (x % 2 == 0) result.add(x)\
    \ else ())\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach(x => result += x)\n        oddDigits.foreach(x => result\
    \ += x)\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        x.foreach(x => {\n\
    \            val digit = x.toString.toInt\n            if (digit.even) {\n   \
    \             evenDigit.add(digit)\n            }\n        })\n        evenDigit.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        evenDigits.foreach(x\
    \ => result -= x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => result.add(x) }\n        oddDigits.foreach { x\
    \ => result.add(x) }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val evenDigit = new mutable.HashSet[Long]()\n        for(i <- x){\n \
    \           if(i.toString.length == 0){\n                result.add(i)\n     \
    \       }\n            else{\n                for(j <- i.toString.reverse){\n\
    \                    if(j.toString.length == 0){\n                        result.add(i)\n\
    \                        break\n                    }\n                    else\
    \ if(evenDigit.contains(j)){\n                        result.add(i)\n        \
    \                break\n                    }\n                    else{\n   \
    \                     evenDigit.add(j)\n                    }\n              \
    \  }\n            }\n        }\n        result.toList", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x.toString.toInt%2\
    \ == 0) result += x)\n        result.sortWith(_ < _)", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n \
    \       val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        evenDigitsSet.foreach(x => result += x)\n      \
    \  result.toList", "        val result = new mutable.ListBuffer[Long]()\n    \
    \    for (i <- 0 until x.size) {\n            if (x(i) % 2 == 0) {\n         \
    \       result.add(x(i))\n            }\n        }\n        result.sorted", " \
    \       val result = new mutable.HashSet[Long]()\n        x.foreach(x => if (x\
    \ % 2 == 0) result.add(x))\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sortWith(_ < _)", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitList\
    \ = evenDigits.toList\n        evenDigitList.sortWith(_ < _)", "        val xs\
    \ = x.toSet\n        val result = new mutable.LinkedList[Long]()\n        val\
    \ xLen = x.size\n        val xLen2 = xLen/2\n        val xLen3 = xLen*3\n    \
    \    val xLen4 = xLen*4\n        val xLen5 = xLen*5\n        val xLen6 = xLen*6\n\
    \        val xLen7 = xLen*7\n        val xLen8 = xLen*8\n        val xLen9 = xLen*9\n\
    \        val xLen10 = xLen*10\n        val xLen11 = xLen*11\n        val xLen12\
    \ = xLen*12\n        val xLen13 = xLen*13\n        val xLen14 = xLen*14\n    \
    \    val xLen15 = xLen*15\n        val xLen16 = xLen*16\n        val xLen17 =\
    \ xLen*17\n        val xLen18 = xLen*18\n        val xLen19 = xLen*19\n      \
    \  val xLen20 = xLen*20\n        val xLen21 = xLen*21\n        val xLen22 = xLen*22\n\
    \        val xLen23 = xLen*23\n        val xLen24 = xLen*24\n        val xLen25\
    \ = xLen*25\n        val xLen26 = xLen*26\n        val xLen27 = xLen*27\n    \
    \    val xLen28 = xLen*28\n        val xLen29 = xLen*29\n        val xLen30 =\
    \ xLen*30\n        val xLen31 = xLen*31\n        val xLen32 = xLen*32\n      \
    \  val xLen33 = xLen*33\n        val xLen34 = xLen*34\n        val xLen35 = xLen*35\n\
    \        val xLen36 = xLen*36\n        val xLen37 = xLen*37\n        val xLen38\
    \ = xLen*38\n        val xLen39 = xLen*39\n        val xLen40 = xLen*40\n    \
    \    val xLen41 = xLen*41\n        val xLen42 = xLen*42\n        val xLen43 =\
    \ xLen*43\n        val xLen44 = xLen*44\n        val xLen45 = xLen*45\n      \
    \  val xLen46 = xLen*46\n        val xLen47 = xLen*47\n        val xLen48 = xLen*48\n\
    \        val xLen49 = xLen*", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if (digit % 2 == 0) {\n                result.add(x(i))\n       \
    \     }\n        }\n        result.sortWith(_ < _)", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n \
    \       val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        evenDigits.foreach(x => result += x)\n        result.toList",
  "        val result = new mutable.LinkedList[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        x.foreach(x => {\n            if (x % 2 ==\
    \ 0) {\n                evenDigit.add(x)\n            }\n        })\n        evenDigit.foreach(x\
    \ => {\n            if (result.contains(x)) {\n                return\n      \
    \      }\n            result.add(x)\n        })\n        result.toList", "   \
    \     val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            if (x.toString.toInt%2 == 0) result += x\n        })\n        result.sort",
  "        val evenDigits = x.filter(_ % 2 == 0)\n        val evenDigitList = evenDigits.toList\n\
    \        val evenDigitSet = evenDigitList.distinct\n        val evenDigitSetList\
    \ = evenDigitSet.toList\n        val evenDigitSetSet = evenDigitSetList.distinct\n\
    \        val evenDigitSetSetList = evenDigitSetSet.toList\n        val evenDigitSetSetListSet\
    \ = evenDigitSetSetList.toList\n        evenDigitSetSetListSet.filter(_ % 2 ==\
    \ 0).sort", "        val result = new mutable.ListBuffer[Long]()\n        val\
    \ digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x =>\
    \ x % 2 == 0)\n        val evenDigitCount = evenDigits.size\n        val oddDigitCount\
    \ = digits.filter(x => x % 2 != 0).size\n        evenDigits.foreach { x => \n\
    \            if (result.contains(x)) {\n                result.clear()\n     \
    \       }\n            else {\n                result += x\n            }\n  \
    \      }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith((x, y) =>\
    \ x < y)\n        evenDigitsSorted.foreach(x => if (result.contains(x)) result.updated(x,\
    \ result.indexOf(x)))\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach { x =>\n            if (x.toString.toInt%2 == 0) {\n      \
    \          result += x\n            }\n        }\n        result.sort", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => if (x.toString.toInt%2\
    \ == 0) result += x)\n        result.sort", "        val result = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => if (x % 2 == 0) result.add(x))\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit = new\
    \ mutable.HashSet[Long]()\n        for(i <- x) {\n            if(i.toString.toLong\
    \ % 2 == 0) {\n                evenDigit.add(i.toString.toLong)\n            }\n\
    \        }\n        for(i <- x) {\n            if(!evenDigit.contains(i.toString.toLong))\
    \ {\n                result += i\n            }\n        }\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x => {\n\
    \            if (x.toString.length == 1) {\n                result.add(x)\n  \
    \          }\n        })\n        result.sortWith(_ < _)", "        val evenDigitsMap\
    \ = mutable.Map[Long, List[Long]]()\n        x.foreach(x => {\n            val\
    \ digit = x.toString.toInt\n            if (digit % 2 == 0) {\n              \
    \  val list = evenDigitsMap.getOrElse(digit, Nil)\n                list ::= x\n\
    \                evenDigitsMap += digit -> list\n            }\n        })\n \
    \       evenDigitsMap.filter(_._2.isEmpty).map(_._1).sort", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        evenDigits.foreach(x\
    \ => result += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => {\n            val digit = x.toString.toInt\n        \
    \    if (digit % 2 == 0) {\n                result.add(x)\n            }\n   \
    \     })\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until x.size) {\n            val digit = x(i).toString.toInt\n\
    \            if(digit % 2 == 0) {\n                result.add(x(i))\n        \
    \    }\n        }\n        result.sortWith(_ < _)"]
stop_tokens:
- "\n    }\n"
