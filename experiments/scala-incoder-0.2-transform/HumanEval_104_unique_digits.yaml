name: HumanEval_104_unique_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of positive integers x. return a sorted list of all \n    //\
  \ elements that hasn't any even digit.\n    // Note: Returned list should be sorted\
  \ in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong,\
  \ 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
  \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
  \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
  \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
  \ 135l.toLong))));\n    }\n\n}\n"
completions: ["        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x\
    \ => if (x.toString.length == 0) result.add(x) else result.addAll(uniqueDigits(x.toString.reverse.map(_.toInt))))\n\
    \        result.sort", "        val evenDigits = x.filter(x => x.toString.toLong\
    \ % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n        evenDigitsList.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        val evenDigit\
    \ = new mutable.HashSet[Long]()\n        for(i <- 0 until x.size) {\n        \
    \    val digit = x(i).toInt\n            if(digit % 2 == 0) {\n              \
    \  evenDigit.add(digit)\n            }\n        }\n        for(i <- 0 until x.size)\
    \ {\n            val digit = x(i).toInt\n            if(evenDigit.contains(digit))\
    \ {\n                continue\n            }\n            result.add(x(i))\n \
    \       }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => result += x }\n        oddDigits.foreach { x =>\
    \ result += x }\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n        val notEvenDigits\
    \ = digits.filter(x => !evenDigitsSet.contains(x))\n        notEvenDigits.foreach(x\
    \ => result.add(x))\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => \n            val index = oddDigits.indexOf(x)\n\
    \            if (index != -1) oddDigits.remove(index)\n            else result.add(x)\n\
    \        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsSorted = evenDigits.sortWith(_ < _)\n\
    \        evenDigitsSorted.foreach(x => if (result.contains(x)) return)\n     \
    \   result ++= evenDigitsSorted\n        result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val oddDigits = digits.filter(x => x % 2 != 0)\n   \
    \     evenDigits.foreach { x => result += x }\n        oddDigits.foreach { x =>\
    \ result += x }\n        result.toList", "        val evenDigits = x.filter(x\
    \ => x % 2 == 0).sort\n        val oddDigits = x.filter(x => x % 2 != 0).sort\n\
    \        evenDigits.filter(x => oddDigits.contains(x)).sort", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        x.foreach(x => { \n            val\
    \ digit = x.toString.toInt\n            if (digit % 2 == 0) {\n              \
    \  result.add(x)\n            }\n        })\n        result.sort", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val evenDigit = new mutable.HashSet[Long]()\n\
    \        x.foreach(x => { \n            if (x % 2 == 0) {\n                evenDigit.add(x)\n\
    \            }\n        })\n        evenDigit.foreach(x => { \n            if\
    \ (result.contains(x)) {\n                return\n            }\n            result\
    \ += x\n        })\n        result.toList", "        val xs = x.toSet\n      \
    \  val ys = xs.filter(_ % 2 == 0)\n        ys.toList", "        val evenDigits\
    \ = x.filter(x => x % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n\
    \        evenDigitsList.sortWith(_ < _)", "        val evenDigits = x.filter(x\
    \ => x.toString.toInt%2 == 0).sort\n        val oddDigits = x.filter(x => x.toString.toInt%2\
    \ != 0).sort\n        oddDigits.filter(x => evenDigits.contains(x)).sort", " \
    \       val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitList = evenDigits.toList\n        evenDigitList.sortWith(_\
    \ < _)", "        val result = new mutable.ListBuffer[Long]()\n        x.foreach(x\
    \ => {\n            val digit = x.toString.toInt\n            if (digit % 2 ==\
    \ 0) {\n                result += x\n            }\n        })\n        result.sort",
  "        val digits = x.map(_.toString.toInt)\n        val evenDigits = digits.filter(x\
    \ => x % 2 == 0)\n        val evenDigitsList = evenDigits.toList\n        val\
    \ uniqueEvenDigits = evenDigitsList.distinct\n        val uniqueEvenDigitsList\
    \ = uniqueEvenDigits.toList\n        val uniqueEvenDigitsSortedList = uniqueEvenDigitsList.sort\n\
    \        uniqueEvenDigitsSortedList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        x.foreach(x => \n            if (x.toString.toInt%2 == 0) result.add(x)\n\
    \        )\n        result.sort", "        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitList\
    \ = evenDigits.toList\n        evenDigitList.sortWith(_ < _)", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val digits = x.map(_.toString.toInt)\n\
    \        val evenDigits = digits.filter(x => x % 2 == 0)\n        val evenDigitsSet\
    \ = evenDigits.toSet\n        val oddDigits = digits.filter(x => x % 2 != 0)\n\
    \        val oddDigitsSet = oddDigits.toSet\n        evenDigitsSet.forall(x =>\
    \ !oddDigitsSet.contains(x))\n        result ++= oddDigits\n        result"]
stop_tokens:
- "\n    }\n"
