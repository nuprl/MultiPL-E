name: HumanEval_17_parse_music
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n    // Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n    // not last.\n    // Here is a\
  \ legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts\
  \ two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"\
  o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong,\
  \ 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n\
  \    def parseMusic(music_string : String) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\"\
  )).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
  \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o\
  \ o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
  \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o o|\
  \ o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
  \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
completions: ["        music_string.split(\" \").map(music_string => {\n         \
    \   val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val restLength = rest.length\n           \
    \ val restNote = rest(0)\n            val restRest = rest(1)\n            val\
    \ restRestLength = restRest.length\n            val restRestNote = restRest(0)\n\
    \            val restRestRest = restRest(1)\n            val restRestRestLength\
    \ = restRestRest.length\n            val restRestRestNote = restRestRest(0)\n\
    \            val restRestRestRest = restRestRest(1)\n            val restRestRestRestLength\
    \ = restRestRestRest.length\n            val restRestRestRestNote = restRestRestRest(0)\n\
    \            val restRestRestRestRest = restRestRestRest(1)\n            val restRestRestRestRestLength\
    \ = restRestRestRestRest.length\n            val restRestRestRestRestNote = restRestRestRestRest(0)\n\
    \            val restRestRestRestRestRest = restRestRestRestRest(1)\n        \
    \    val restRestRestRestRestRestLength = restRestRestRestRestRest.length\n  \
    \          val restRestRestRestRestRestNote = restRestRestRestRestRest(0)\n  \
    \          val restRestRestRestRestRestRest = restRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestLength = restRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestNote = restRestRestRestRestRestRest(0)\n\
    \            val restRestRestRestRestRestRestRest = restRestRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestRestNote = restRestRestRestRestRestRestRest(0)\n\
    \            val restRestRestRestRestRestRestRest = restRestRestRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestRestRestNote = restRestRestRestRestRestRestRestRestRest(0)\n\
    \            val restRestRestRestRestRestRestRestRest = restRestRestRestRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestRestRestRestNote = restRestRestRestRestRestRest",
  "        val notes = music_string.split(\" \").map(_.toUpperCase())\n        val\
    \ notes_count = notes.count\n        val notes_beats = notes.map(n => n.length.toLong).sum\n\
    \        val notes_last_beats = notes_beats - notes_count\n        val notes_last_beats_count\
    \ = notes_last_beats / 4\n        val notes_last_beats_count_2 = notes_last_beats_count\
    \ * 2\n        val notes_last_beats_count_3 = notes_last_beats_count_2 * 2\n \
    \       val notes_last_beats_count_4 = notes_last_beats_count_3 * 2\n        val\
    \ notes_last_beats_count_5 = notes_last_beats_count_4 * 2\n        val notes_last_beats_count_6\
    \ = notes_last_beats_count_5 * 2\n        val notes_last_beats_count_7 = notes_last_beats_count_6\
    \ * 2\n        val notes_last_beats_count_8 = notes_last_beats_count_7 * 2\n \
    \       val notes_last_beats_count_9 = notes_last_beats_count_8 * 2\n        val\
    \ notes_last_beats_count_10 = notes_last_beats_count_9 * 2\n        val notes_last_beats_count_11\
    \ = notes_last_beats_count_10 * 2\n        val notes_last_beats_count_12 = notes_last_beats_count_11\
    \ * 2\n        val notes_last_beats_count_13 = notes_last_beats_count_12 * 2\n\
    \        val notes_last_beats_count_14 = notes_last_beats_count_13 * 2\n     \
    \   val notes_last_beats_count_15 = notes_last_beats_count_14 * 2\n        val\
    \ notes_last_beats_count_16 = notes_last_beats_count_15 * 2\n        val notes_last_beats_count_17\
    \ = notes_last_beats_count_16 * 2\n        val notes_last_beats_count_18 = notes_last_beats_count_17\
    \ * 2\n        val notes_last_beats_count_19 = notes_last_beats_count_18 * 2\n\
    \        val notes_last_beats_count_20 = notes_last_beats_count_19 * 2\n     \
    \   val notes_last_beats_count_21 = notes_last_beats_count_20 * 2\n        val\
    \ notes_last_beats_count_22 = notes_last_beats_count_21 * 2\n        val notes_last_beats_count_23\
    \ = notes_last_beats_count_22 * 2\n        val notes_last_beats_count_24 = notes_last_beats_count_23\
    \ * ", "        music_string.split(\" \").map(music_string => {\n            val\
    \ music_note = music_string.charAt(0)\n            val music_length = music_string.substring(1).length\n\
    \            val music_beats = music_length.toLong\n            val music_last_beat\
    \ = music_beats - music_note.length.toLong\n            music_last_beat\n    \
    \    }).distinct", "        val notes = music_string.split(\"\\\\|\")\n      \
    \  val notes_count = notes.length\n        val notes_array = notes.map(x => x.toInt)\n\
    \        val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x != 0)\n        val notes_array = notes_array.map(x => x.toLong)\n     \
    \   val notes_array = notes_array.filter(x => x != 0)\n        val notes_array\
    \ = notes_array.map(x => x.toLong)\n        val notes_array = notes_array.filter(x\
    \ => x ", "        val music_list = music_string.split(\"\\\\|\").map(_.toInt).toList\n\
    \        val notes = music_list.zipWithIndex.filter(_._1 == 0).map(_._2)\n   \
    \     val notes_length = notes.map(_.toString.length).sum\n        val notes_last_beat\
    \ = notes.map(_.toString).map(_.last).toList\n        val notes_last_beats = notes_last_beat.map(_.toString.length).sum\n\
    \        val notes_last_beats_length = notes_last_beats.map(_.toString.length).sum\n\
    \        val notes_last_beats_last_beat = notes_last_beats.map(_.last).toList\n\
    \        val notes_last_beats_last_beats_length = notes_last_beats_last_beat.map(_.toString.length).sum\n\
    \        val notes_last_beats_last_beats_last_beat = notes_last_beats_last_beat.map(_.last).toList\n\
    \        val notes_last_beats_last_beats_last_beats_length = notes_last_beats_last_beats_last_beat.map(_.toString.length).sum\n\
    \        val notes_last_beats_last_beats_last_beats_last_beat = notes_last_beats_last_beats_last_beat.map(_.last).toList\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_length = notes_last_beats_last_beats_last_beats_last_beat.map(_.toString.length).sum\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beat = notes_last_beats_last_beats_last_beats_last_beat.map(_.last).toList\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_length\
    \ = notes_last_beats_last_beats_last_beats_last_beats_last_beat.map(_.toString.length).sum\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beat\
    \ = notes_last_beats_last_beats_last_beats_last_beats_last_beat.map(_.last).toList\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_length\
    \ = notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beat.map(_.toString.length).sum\n\
    \        val notes_last_beats_last_beats_last_beats_last_beats_last_beats_last_beats_last_beat\
    \ = notes_last_beats_last_beats_last_beats_last_", "        val music_list = music_string.split(\"\
    \ \").map(_.toUpperCase()).filter(_.length() > 0)\n        val music_list_size\
    \ = music_list.size\n        val music_list_size_half = music_list_size / 2\n\
    \        val music_list_size_quarter = music_list_size / 4\n        val music_list_size_whole\
    \ = music_list_size.toLong\n        val music_list_size_quarter2 = music_list_size_quarter\
    \ / 2\n        val music_list_size_quarter4 = music_list_size_quarter / 4\n  \
    \      val music_list_size_whole2 = music_list_size_whole / 2\n        val music_list_size_whole4\
    \ = music_list_size_whole / 4\n        val music_list_size_whole8 = music_list_size_whole\
    \ / 8\n        val music_list_size_whole16 = music_list_size_whole / 16\n    \
    \    val music_list_size_whole32 = music_list_size_whole / 32\n        val music_list_size_whole64\
    \ = music_list_size_whole / 64\n        val music_list_size_whole128 = music_list_size_whole\
    \ / 128\n        val music_list_size_whole256 = music_list_size_whole / 256\n\
    \        val music_list_size_whole512 = music_list_size_whole / 512\n        val\
    \ music_list_size_whole1024 = music_list_size_whole / 1024\n        val music_list_size_whole2048\
    \ = music_list_size_whole / 2048\n        val music_list_size_whole4096 = music_list_size_whole\
    \ / 4096\n        val music_list_size_whole8192 = music_list_size_whole / 8192\n\
    \        val music_list_size_whole16384 = music_list_size_whole / 16384\n    \
    \    val music_list_size_whole32768 = music_list_size_whole / 32768\n        val\
    \ music_list_size_whole65536 = music_list_size_whole / 65536\n        val music_list_size_whole131072\
    \ = music_list_size_whole / 131072\n        val music_list_size_whole262144 =\
    \ music_list_size_whole / 262144\n        val music_list_size_whole524288 = music_list_size_whole\
    \ / 524288\n        val music_list_size_whole1048576 = music_list_size_whole /\
    \ 1048576\n        val music_list_size_whole2097152 = music_list_size_whole /\
    \ 2097152\n        ", "        music_string.split(\" \").map(music_string => {\n\
    \            val note = music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val restLength = rest.length\n           \
    \ val restNote = rest(0)\n            val restRest = rest(1)\n            val\
    \ restRestLength = restRest.length\n            val restRestNote = restRest(0)\n\
    \            val restRestRest = restRest(1)\n            val restRestRestLength\
    \ = restRestRest.length\n            val restRestRestNote = restRestRest(0)\n\
    \            val restRestRestRest = restRestRest(1)\n            val restRestRestRestLength\
    \ = restRestRestRest.length\n            val restRestRestRestNote = restRestRestRest(0)\n\
    \            val restRestRestRestRest = restRestRestRest(1)\n            val restRestRestRestRestLength\
    \ = restRestRestRestRest.length\n            val restRestRestRestRestNote = restRestRestRestRest(0)\n\
    \            val restRestRestRestRestRest = restRestRestRestRest(1)\n        \
    \    val restRestRestRestRestRestLength = restRestRestRestRestRest.length\n  \
    \          val restRestRestRestRestRestNote = restRestRestRestRestRest(0)\n  \
    \          val restRestRestRestRestRestRest = restRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestLength = restRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestNote = restRestRestRestRestRestRest(0)\n\
    \            val restRestRestRestRestRestRestRest = restRestRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestRestNote = restRestRestRestRestRestRestRest(0)\n\
    \            val restRestRestRestRestRestRestRest = restRestRestRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestRestRestNote = restRestRestRestRestRestRestRestRestRest(0)\n\
    \            val restRestRestRestRestRestRestRestRest = restRestRestRestRestRestRestRestRestRest(1)\n\
    \            val restRestRestRestRestRestRestRestRestLength = restRestRestRestRestRestRestRestRestRestRest.length\n\
    \            val restRestRestRestRestRestRestRestRestRestNote = restRestRestRestRestRestRest",
  "        music_string.split(\" \").map(music_string => {\n            val music_note\
    \ = music_string.charAt(0)\n            val music_type = music_string.charAt(1)\n\
    \            val music_length = music_string.charAt(2)\n            val music_beats\
    \ = music_string.charAt(3)\n            val music_rest = music_string.substring(4)\n\
    \            val music_rest2 = music_rest.split(\"\").map(music_rest => {\n  \
    \              val music_rest3 = music_rest.charAt(0)\n                val music_rest4\
    \ = music_rest.charAt(1)\n                val music_rest5 = music_rest.charAt(2)\n\
    \                val music_rest6 = music_rest.charAt(3)\n                val music_rest7\
    \ = music_rest.charAt(4)\n                val music_rest8 = music_rest.charAt(5)\n\
    \                val music_rest9 = music_rest.charAt(6)\n                val music_rest10\
    \ = music_rest.charAt(7)\n                val music_rest11 = music_rest.charAt(8)\n\
    \                val music_rest12 = music_rest.charAt(9)\n                val\
    \ music_rest13 = music_rest.charAt(10)\n                val music_rest14 = music_rest.charAt(11)\n\
    \                val music_rest15 = music_rest.charAt(12)\n                val\
    \ music_rest16 = music_rest.charAt(13)\n                val music_rest17 = music_rest.charAt(14)\n\
    \                val music_rest18 = music_rest.charAt(15)\n                val\
    \ music_rest19 = music_rest.charAt(16)\n                val music_rest20 = music_rest.charAt(17)\n\
    \                val music_rest21 = music_rest.charAt(18)\n                val\
    \ music_rest22 = music_rest.charAt(19)\n                val music_rest23 = music_rest.charAt(20)\n\
    \                val music_rest24 = music_rest.charAt(21)\n                val\
    \ music_rest25 = music_rest.charAt(22)\n                val music_rest26 = music_rest.charAt(23)\n\
    \                val music_rest27 = music_rest.charAt(24)\n                val\
    \ music_rest28 = music_rest.charAt(25)\n                val music_rest29 = music_rest.charAt(26)\n\
    \                val music_rest30 = music_rest.charAt(27)\n                val\
    \ music_rest31 = music_rest.charAt(28)\n                val music_rest32 = music_rest.charAt(29)\n\
    \                val music_rest33 = music_rest.charAt(30)\n                val\
    \ music_rest34 = music_rest.charAt(31)\n                val music_rest35 = music_rest.",
  "        music_string.split(\" \").map(music_string => {\n            val notes\
    \ = music_string.split(\"|\").map(music_string => {\n                val note\
    \ = music_string.split(\"o\").map(music_string => {\n                    val beats\
    \ = music_string.split(\"|\").map(music_string => {\n                        val\
    \ beat = music_string.split(\".\").map(music_string => {\n                   \
    \         music_string.toLong\n                        }).sum\n              \
    \          beat.asInstanceOf[Long]\n                    }).sum\n             \
    \       beat.asInstanceOf[Long]\n                }).sum\n                note.asInstanceOf[Long]\n\
    \            }).sum\n            notes.asInstanceOf[Long]\n        }).sum", " \
    \       val music_notes = music_string.split(\"\\\\|\")\n        val music_notes_length\
    \ = music_notes.length\n        val music_notes_beats = music_notes.map(music_note\
    \ => music_note.split(\"o\"))\n        val music_notes_beats_length = music_notes_beats.length\n\
    \        val music_notes_beats_beats = music_notes_beats.map(music_notes_beat\
    \ => music_notes_beat.length)\n        val music_notes_beats_beats_length = music_notes_beats_beats.length\n\
    \        val music_notes_beats_beats_beats = music_notes_beats_beats.map(music_notes_beats_beat\
    \ => music_notes_beats_beat.length)\n        val music_notes_beats_beats_beats_length\
    \ = music_notes_beats_beats_beats.length\n        val music_notes_beats_beats_beats_beats\
    \ = music_notes_beats_beats_beats.map(music_notes_beats_beats_beat => music_notes_beats_beats_beat.length)\n\
    \        val music_notes_beats_beats_beats_beats_length = music_notes_beats_beats_beats_beats.length\n\
    \        val music_notes_beats_beats_beats_beats_beats = music_notes_beats_beats_beats_beats.map(music_notes_beats_beats_beats_beat\
    \ => music_notes_beats_beats_beats_beat.length)\n        val music_notes_beats_beats_beats_beats_beats_length\
    \ = music_notes_beats_beats_beats_beats_beats.length\n        val music_notes_beats_beats_beats_beats_beats_beats\
    \ = music_notes_beats_beats_beats_beats_beats.map(music_notes_beats_beats_beats_beats_beat\
    \ => music_notes_beats_beats_beats_beats_beat.length)\n        val music_notes_beats_beats_beats_beats_beats_beats_length\
    \ = music_notes_beats_beats_beats_beats_beats_beats_beats.length\n        val\
    \ music_notes_beats_beats_beats_beats_beats_beats_beats = music_notes_beats_beats_beats_beats_beats_beats_beats.map(music_notes_beats_beats_beats_beats_beats_beats_beat\
    \ => music_notes_beat", "        val music_list = music_string.split(\"\\\\|\"\
    )\n        val music_list_length = music_list.length\n        val music_list_beats\
    \ = music_list.map(music_string => music_string.split(\"o|\"))\n        val music_list_beats_length\
    \ = music_list_beats.length\n        val music_list_beats_length = music_list_beats_length\
    \ / 2\n        val music_list_beats_length = music_list_beats_length.toInt\n \
    \       val music_list_beats_length = music_list_beats_length * 4\n        val\
    \ music_list_beats_length = music_list_beats_length.toLong\n        val music_list_beats_length\
    \ = music_list_beats_length * music_list_length\n        val music_list_beats_length\
    \ = music_list_beats_length.toLong\n        val music_list_beats_length = music_list_beats_length\
    \ * music_list_length\n        val music_list_beats_length = music_list_beats_length.toLong\n\
    \        val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_length * music_list_length\n\
    \        val music_list_beats_length = music_list_beats_length.toLong\n      \
    \  val music_list_beats_length = music_list_beats_", "        music_string.split(\"\
    \ \").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val rest = music_string.substring(1, music_string.length)\n\
    \            val beats = rest.split(\"|\").map(music_string => {\n           \
    \     val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1,\
    \ music_string.length)\n                beat.toLong * rest.split(\"o\").length\n\
    \            }).sum\n            note -> beats\n        }).groupBy(music_string\
    \ => {\n            music_string._1\n        }).values.toList", "        val notes\
    \ = music_string.split(\"\\\\|\")\n        val notes_count = notes.length\n  \
    \      val notes_beats = notes.map(_.length.toLong)\n        val notes_beats_count\
    \ = notes_beats.sum\n        val notes_beats_count_without_last_note = notes_beats_count\
    \ - notes_beats(notes_count - 1)\n        val notes_beats_count_without_last_note\
    \ = notes_beats_count_without_last_note.toLong\n        val notes_beats_count_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note - notes_beats(notes_count - 2)\n     \
    \   val notes_beats_count_without_last_note_without_last_note = notes_beats_count_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note - notes_beats(notes_count\
    \ - 3)\n        val notes_beats_count_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note.toLong\n\
    \        val notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note\
    \ = notes_beats_count_without_last_note_without_last_note_without_last_note_without_last_note_without_last_note_without_last_",
  "        val music_list = music_string.split(\" \").map(_.toUpperCase)\n       \
    \ val music_list_size = music_list.size\n        val music_list_size_half = music_list_size\
    \ / 2\n        val music_list_size_quarter = music_list_size / 4\n        val\
    \ music_list_size_whole = music_list_size.toLong\n        val music_list_size_whole_half\
    \ = music_list_size_whole / 2\n        val music_list_size_whole_quarter = music_list_size_whole\
    \ / 4\n        val music_list_size_whole_whole = music_list_size_whole / 8\n \
    \       val music_list_size_whole_whole_half = music_list_size_whole_whole / 2\n\
    \        val music_list_size_whole_whole_quarter = music_list_size_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole = music_list_size_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_half = music_list_size_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_quarter = music_list_size_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole = music_list_size_whole_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole\
    \ / 4\n        val music_list_size_whole_whole_whole_whole_whole = music_list_size_whole_whole_whole_whole\
    \ / 8\n        val music_list_size_whole_whole_whole_whole_half = music_list_size_whole_whole_whole_whole\
    \ / 2\n        val music_list_size_whole_whole_whole_whole_quarter = music_list_size_whole_whole_whole_whole ",
  "        val music_list = music_string.split(\"\\\\|\")\n        val music_length\
    \ = music_list.length\n        val music_notes = music_list.map(music_note =>\
    \ music_note.split(\"o\"))\n        val music_notes_length = music_notes.length\n\
    \        val music_notes_length = music_notes_length / 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_notes_length = music_notes_length\
    \ * 4\n        val music_notes_length = music_notes_length.toInt\n        val\
    \ music_notes_length = music_notes_length * 4\n        val music_notes_length\
    \ = music_notes_length.toInt\n        val music_note", "        val notes = music_string.split(\"\
    \ \").map(_.toUpperCase())\n        val notes_count = notes.map(n => n.length).sum\n\
    \        val notes_count_per_beat = notes_count / 4\n        val notes_count_per_half_beat\
    \ = notes_count_per_beat * 2\n        val notes_count_per_quater_beat = notes_count_per_beat\
    \ * 4\n        val notes_count_per_whole_note = notes_count_per_beat * 8\n   \
    \     val notes_count_per_half_note = notes_count_per_half_beat * 2\n        val\
    \ notes_count_per_quater_note = notes_count_per_quater_beat * 4\n        val notes_count_per_whole_note_2\
    \ = notes_count_per_whole_note * 2\n        val notes_count_per_half_note_2 =\
    \ notes_count_per_half_note * 2\n        val notes_count_per_quater_note_2 = notes_count_per_quater_note\
    \ * 4\n        val notes_count_per_whole_note_3 = notes_count_per_whole_note_2\
    \ * 3\n        val notes_count_per_half_note_3 = notes_count_per_half_note_2 *\
    \ 3\n        val notes_count_per_quater_note_3 = notes_count_per_quater_note_2\
    \ * 4\n        val notes_count_per_whole_note_4 = notes_count_per_whole_note_3\
    \ * 4\n        val notes_count_per_half_note_4 = notes_count_per_half_note_3 *\
    \ 4\n        val notes_count_per_quater_note_4 = notes_count_per_quater_note_3\
    \ * 4\n        val notes_count_per_whole_note_5 = notes_count_per_whole_note_4\
    \ * 5\n        val notes_count_per_half_note_5 = notes_count_per_half_note_4 *\
    \ 5\n        val notes_count_per_quater_note_5 = notes_count_per_quater_note_4\
    \ * 5\n        val notes_count_per_whole_note_6 = notes_count_per_whole_note_5\
    \ * 6\n        val notes_count_per_half_note_6 = notes_count_per_half_note_5 *\
    \ 6\n        val notes_count_per_quater_note_6 = notes_count_per_quater_note_5\
    \ * 6\n        val notes_count_per_whole_note_7 = notes_count_per_whole_note_6\
    \ * 7\n        val notes_count_per_half_note_7 = notes_count_per_half_note_6 *\
    \ 7\n        val notes_count_per_quater_note_7 = notes_count_per_quater_note_6\
    \ * 7\n        val notes_count_per_whole_note_8 = notes_count_", "        music_string.split(\"\
    \ \").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val beats = music_string.substring(1).split(\"|\").map(music_string\
    \ => {\n                val beat = music_string.substring(0, 1)\n            \
    \    val rest = music_string.substring(1)\n                beat.toLong * rest.length\n\
    \            }).sum\n            note.toLong * beats\n        }).sum", "     \
    \   music_string.split(\" \").map(music_string => {\n            val note = music_string.substring(0,\
    \ 1)\n            val rest = music_string.substring(1, music_string.length)\n\
    \            val beats = rest.split(\"|\").map(_.toLong)\n            val wholeNote\
    \ = beats.map(_.toLong).sum\n            val halfNote = beats.map(_.toLong).take(2).sum\n\
    \            val quarterNote = beats.map(_.toLong).take(3).sum\n            val\
    \ wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n\
    \            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote\
    \ = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n\
    \            val quarterNote = beats.map(_.toLong).take(3).sum\n            val\
    \ wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n\
    \            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote\
    \ = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n\
    \            val quarterNote = beats.map(_.toLong).take(3).sum\n            val\
    \ wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n\
    \            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote\
    \ = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n\
    \            val quarterNote = beats.map(_.toLong).take(3).sum\n            val\
    \ wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).take(3).sum\n\
    \            val wholeNote = beats.map(_.toLong).sum\n            val quarterNote\
    \ = beats.map(_.toLong).take(3).sum\n            val wholeNote = beats.map(_.toLong).sum\n\
    \            val quarterNote = beats.map(_.toLong).take(3).sum\n            val\
    \ wholeNote = beats.map(_.toLong).sum\n            val quarterNote = beats.map(_.toLong).",
  "        music_string.split(\" \").map(music_string => {\n            val note =\
    \ music_string.substring(0, 1)\n            val rest = music_string.substring(1).trim\n\
    \            val beats = rest.split(\"|\").map(music_string => {\n           \
    \     val beat = music_string.substring(0, 1)\n                val rest = music_string.substring(1).trim\n\
    \                beat.charAt(0).toLong * 12 + beat.charAt(1).toLong\n        \
    \    }).sum\n            note match {\n                case \"o\" => List(beats)\n\
    \                case \"o|\" => List(beats / 2, beats)\n                case \"\
    .|\" => List(beats / 4)\n                case _ => throw new Exception(\"Invalid\
    \ music string: \" + music_string)\n            }\n        }).flatten.distinct",
  "        music_string.split(\" \").map(music_string => {\n            val note =\
    \ music_string.substring(0, 1)\n            val rest = music_string.substring(1,\
    \ music_string.length)\n            val beats = rest.split(\"|\").map(_.toLong).sum\n\
    \            beats * note.toLong\n        }).sum"]
stop_tokens:
- "\n    }\n"
