name: HumanEval_93_encode
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a message, and encodes in such a \n    // way\
  \ that it swaps case of all letters, replaces all vowels in \n    // the message\
  \ with the letter that appears 2 places ahead of that \n    // vowel in the english\
  \ alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"\
  test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    //\
  \ (\"tHKS KS C MGSSCGG\")\n    def encode(message : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
  )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n\
  \    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This is\
  \ a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw\
  \ WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
completions: ["        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.foldLeft(\"\")( (acc, elem) => {\n            val index = letters.indexOf(elem)\n\
    \            val nextIndex = letters.indexOf(elem, index + 1)\n            val\
    \ nextLetter = letters(nextIndex)\n            val nextVowel = vowels(nextIndex)\n\
    \            val nextVowelIndex = letters.indexOf(nextVowel)\n            val\
    \ nextVowelNextIndex = letters.indexOf(nextVowel, nextVowelIndex + 1)\n      \
    \      val nextVowelNextLetter = letters(nextVowelNextIndex)\n            val\
    \ nextVowelNextVowel = vowels(nextVowelNextIndex)\n            val nextVowelNextVowelIndex\
    \ = letters.indexOf(nextVowelNextVowel)\n            val nextVowelNextVowelNextIndex\
    \ = letters.indexOf(nextVowelNextVowel, nextVowelNextVowelIndex + 1)\n       \
    \     val nextVowelNextVowelNextLetter = letters(nextVowelNextVowelNextIndex)\n\
    \            val nextVowelNextVowelNextVowel = vowels(nextVowelNextVowelNextIndex)\n\
    \            val nextVowelNextVowelNextVowelIndex = letters.indexOf(nextVowelNextVowelNextVowel)\n\
    \            val nextVowelNextVowelNextVowelNextIndex = letters.indexOf(nextVowelNextVowelNextVowel,\
    \ nextVowelNextVowelNextVowelIndex + 1)\n            val nextVowelNextVowelNextVowelNextLetter\
    \ = letters(nextVowelNextVowelNextVowelNextIndex)\n            val nextVowelNextVowelNextVowelNextVowel\
    \ = vowels(nextVowelNextVowelNextVowelNextIndex)\n            val nextVowelNextVowelNextVowelNextVowelIndex\
    \ = letters.indexOf(nextVowelNextVowelNextVowelNextVowel)\n            val nextVowelNextVowelNextVowelNextVowelNextIndex\
    \ = letters.indexOf(nextVowelNextVowelNextVowelNextVowel, ", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val\
    \ messageArrayLength = messageArray.length\n        val encodedMessageArray =\
    \ ArrayBuffer.empty[String]\n        var i = 0\n        while (i < messageArrayLength)\
    \ {\n            val currentChar = messageArray(i)\n            val currentCharIndex\
    \ = vowels.indexOf(currentChar)\n            if (currentCharIndex != -1) {\n \
    \               val nextChar = vowels(currentCharIndex + 1)\n                val\
    \ nextCharIndex = vowels.indexOf(nextChar)\n                if (nextCharIndex\
    \ != -1) {\n                    val encodedChar = nextChar + vowels(currentCharIndex\
    \ + 2)\n                    encodedMessageArray.append(encodedChar)\n        \
    \        }\n            }\n            i += 1\n        }\n        encodedMessageArray.toString",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        var newMessage = \"\"\n        var currentLetter = messageArray(0)\n\
    \        var currentVowel = vowels(0)\n        var currentVowelIndex = -1\n  \
    \      var currentVowelIndex2 = -1\n        var currentVowelIndex3 = -1\n    \
    \    var currentVowelIndex4 = -1\n        var currentVowelIndex5 = -1\n      \
    \  var currentVowelIndex6 = -1\n        var currentVowelIndex7 = -1\n        var\
    \ currentVowelIndex8 = -1\n        var currentVowelIndex9 = -1\n        var currentVowelIndex10\
    \ = -1\n        var currentVowelIndex11 = -1\n        var currentVowelIndex12\
    \ = -1\n        var currentVowelIndex13 = -1\n        var currentVowelIndex14\
    \ = -1\n        var currentVowelIndex15 = -1\n        var currentVowelIndex16\
    \ = -1\n        var currentVowelIndex17 = -1\n        var currentVowelIndex18\
    \ = -1\n        var currentVowelIndex19 = -1\n        var currentVowelIndex20\
    \ = -1\n        var currentVowelIndex21 = -1\n        var currentVowelIndex22\
    \ = -1\n        var currentVowelIndex23 = -1\n        var currentVowelIndex24\
    \ = -1\n        var currentVowelIndex25 = -1\n        var currentVowelIndex26\
    \ = -1\n        var currentVowelIndex27 = -1\n        var currentVowelIndex28\
    \ = -1\n        var currentVowelIndex29 = -1\n        var currentVowelIndex30\
    \ = -1\n        var currentVowelIndex31 = -1\n        var currentVowelIndex32\
    \ = -1\n        var currentVowelIndex33 = -1\n        var currentVowelIndex34\
    \ = -1\n        var currentVowelIndex35 = -1\n        var currentVowelIndex36\
    \ = -1\n        var currentVowelIndex37 = -1\n        var currentVowelIndex38\
    \ = -1\n        var currentVowelIndex39 = -1\n        var currentVowelIndex40\
    \ = -1\n        var currentVowelIndex41 = -1\n        var currentVowelIndex42\
    \ = -1\n        var currentVowelIndex43 = -1\n        var currentVowelIndex44\
    \ = -1\n        var currentVowelIndex45 = -1\n        var currentVowelIndex46\
    \ = -1\n        var currentVowelIndex47 = -1\n        var currentVowelIndex48\
    \ = -1\n        var currentVowelIndex49 = -1\n        var currentVowelIndex50\
    \ = -1\n        var currentVowelIndex51 = -1\n", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageLength = message.length\n        val encodedMessage = mutable.StringBuilder(messageLength)\n\
    \        val messageArray = message.split(\"\")\n        val vowelsArray = vowels.split(\"\
    \")\n        val vowelsSet = mutable.Set[String]()\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArraySet = mutable.Set[String]()\n \
    \       val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArraySetLength = vowelsArraySet.length\n\
    \        val vowelsArraySetLength = vowelsArraySet.length\n        val vowelsArraySetLength\
    \ = vowelsArraySet.length\n        val vowelsArray", "        val vowels = \"\
    aeiouAEIOU\"\n        val messageList = message.split(\" \").toList\n        val\
    \ encodedMessage = messageList.foldLeft(\"\") { (result, current) =>\n       \
    \     val currentList = current.toUpperCase().toList\n            val currentVowels\
    \ = currentList.filter(vowels.contains)\n            val currentVowelsCount =\
    \ currentVowels.map(_.length).sum\n            val currentVowelsIndex = currentList.indexOf(currentVowels.head)\n\
    \            val currentVowelsIndex2 = currentVowelsIndex + 2\n            val\
    \ currentVowelsIndex3 = currentVowelsIndex + 3\n            val currentVowelsIndex4\
    \ = currentVowelsIndex + 4\n            val currentVowelsIndex5 = currentVowelsIndex\
    \ + 5\n            val currentVowelsIndex6 = currentVowelsIndex + 6\n        \
    \    val currentVowelsIndex7 = currentVowelsIndex + 7\n            val currentVowelsIndex8\
    \ = currentVowelsIndex + 8\n            val currentVowelsIndex9 = currentVowelsIndex\
    \ + 9\n            val currentVowelsIndex10 = currentVowelsIndex + 10\n      \
    \      val currentVowelsIndex11 = currentVowelsIndex + 11\n            val currentVowelsIndex12\
    \ = currentVowelsIndex + 12\n            val currentVowelsIndex13 = currentVowelsIndex\
    \ + 13\n            val currentVowelsIndex14 = currentVowelsIndex + 14\n     \
    \       val currentVowelsIndex15 = currentVowelsIndex + 15\n            val currentVowelsIndex16\
    \ = currentVowelsIndex + 16\n            val currentVowelsIndex17 = currentVowelsIndex\
    \ + 17\n            val currentVowelsIndex18 = currentVowelsIndex + 18\n     \
    \       val currentVowelsIndex19 = currentVowelsIndex + 19\n            val currentVowelsIndex20\
    \ = currentVowelsIndex + 20\n            val currentVowelsIndex21 = currentVowelsIndex\
    \ + 21\n            val currentVowelsIndex22 = currentVowelsIndex + 22\n     \
    \       val currentVowelsIndex23 = currentVowelsIndex + 23\n            val current",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowel.zip(vowels.drop(vowelIndex)).map { case (vowel1, vowel2)\
    \ => vowel1 -> vowel2 }.toMap\n            } else {\n                letter ->\
    \ letter\n            }\n        })\n        newMessageArray.toList.mkString(\"\
    \")", "        val vowels = \"aeiouAEIOU\".toList\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    .toList\n        val messageList = message.split(\"\")\n        val encodedMessage\
    \ = messageList.foldLeft(\"\")( (acc, curr) => {\n            val currIndex =\
    \ letters.indexOf(curr)\n            val currVowelIndex = vowels.indexOf(curr)\n\
    \            val currVowelIndex2 = vowels.indexOf(curr + 1, currIndex + 1)\n \
    \           val currVowelIndex3 = vowels.indexOf(curr + 2, currIndex + 2)\n  \
    \          val currVowelIndex4 = vowels.indexOf(curr + 3, currIndex + 3)\n   \
    \         val currVowelIndex5 = vowels.indexOf(curr + 4, currIndex + 4)\n    \
    \        val currVowelIndex6 = vowels.indexOf(curr + 5, currIndex + 5)\n     \
    \       val currVowelIndex7 = vowels.indexOf(curr + 6, currIndex + 6)\n      \
    \      val currVowelIndex8 = vowels.indexOf(curr + 7, currIndex + 7)\n       \
    \     val currVowelIndex9 = vowels.indexOf(curr + 8, currIndex + 8)\n        \
    \    val currVowelIndex10 = vowels.indexOf(curr + 9, currIndex + 9)\n        \
    \    val currVowelIndex11 = vowels.indexOf(curr + 10, currIndex + 10)\n      \
    \      val currVowelIndex12 = vowels.indexOf(curr + 11, currIndex + 11)\n    \
    \        val currVowelIndex13 = vowels.indexOf(curr + 12, currIndex + 12)\n  \
    \          val currVowelIndex14 = vowels.indexOf(curr + 13, currIndex + 13)\n\
    \            val currVowelIndex15 = vowels.indexOf(curr + 14, currIndex + 14)\n\
    \            val currVowelIndex16 = vowels.indexOf(curr + 15, currIndex + 15)\n\
    \            val currVowelIndex17 = vowels.indexOf(curr + 16, currIndex + 16)\n\
    \            val currVowelIndex18 = vowels.indexOf(curr + 17, currIndex + 17)\n\
    \            val currVowelIndex19 = vowels.indexOf(curr + 18, currIndex + 18)\n\
    \            val currVowelIndex20 = vowels.indexOf(curr + 19, currIndex + 19)\n\
    \            val currVowelIndex21 = vowels.indexOf(curr + 20, currIndex + 20)\n\
    \            val currVowelIndex22 = vowels.indexOf(curr + 21, currIndex + 21)\n\
    \            val currVowelIndex23 = vowels.indexOf(curr + 22, currIndex + 22)\n\
    \            val ", "        val vowels = \"aeiouAEIOU\".toCharArray\n       \
    \ val messageArray = message.toCharArray\n        val result = new StringBuilder\n\
    \        var i = 0\n        while (i < messageArray.length) {\n            val\
    \ letter = messageArray(i)\n            if (vowels(i) == letter) {\n         \
    \       val nextLetter = messageArray(i + 1)\n                val index = vowels.indexOf(letter)\n\
    \                if (index != -1) {\n                    result.append(vowels(index))\n\
    \                    result.append(nextLetter)\n                }\n          \
    \  }\n            i += 1\n        }\n        return result.toString", "      \
    \  val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            if (vowels.contains(letter)) {\n                vowels.find(vowel\
    \ => vowel == letter).map(_ + letter).head\n            } else {\n           \
    \     letter\n            }\n        }).mkString(\"\")\n        encodedMessage",
  "        val vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n\
    \        val encodedMessage = message.map(letter => vowels.indexOf(letter) match\
    \ {\n            case -1 => letter\n            case i => vowels(i + 2)\n    \
    \    }).mkString\n        val encodedMessageLength = encodedMessage.length\n \
    \       val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val ", "        val vowels = \"aeiouAEIOU\"\n        val messageList\
    \ = message.split(\" \").toList\n        val newMessage = messageList.map(x =>\
    \ x.toUpperCase).mkString(\"\")\n        val newMessageList = newMessage.split(\"\
    \").toList\n        val newMessageList2 = newMessageList.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList3 = newMessageList2.split(\"\
    \").toList\n        val newMessageList4 = newMessageList3.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList5 = newMessageList4.split(\"\
    \").toList\n        val newMessageList6 = newMessageList5.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList7 = newMessageList6.split(\"\
    \").toList\n        val newMessageList8 = newMessageList7.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList9 = newMessageList8.split(\"\
    \").toList\n        val newMessageList10 = newMessageList9.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList11 = newMessageList10.split(\"\
    \").toList\n        val newMessageList12 = newMessageList11.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList13 = newMessageList12.split(\"\
    \").toList\n        val newMessageList14 = newMessageList13.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList15 = newMessageList14.split(\"\
    \").toList\n        val newMessageList16 = newMessageList15.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList17 = newMessageList16.split(\"\
    \").toList\n        val newMessageList18 = newMessageList17.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList19 = newMessageList18.split(\"\
    \").toList\n        val newMessageList20 = newMessageList19.map(x => vowels.indexOf(x)\
    \ + 1).map(x => vowels(x)).mkString(\"\")\n        val newMessageList21 = newMessageList20.split(\"\
    \").toList\n        val newMessageList22 = newMessageList21.map(x ", "       \
    \ val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\",\
    \ \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val messageList = message.split(\" \"\
    ).toList\n        val newMessage = messageList.foldLeft(\"\")( (acc, elem) =>\
    \ {\n            val index = alphabet.indexOf(elem)\n            val newElem =\
    \ if (index != -1) alphabet(index - 1) else elem\n            acc + (if (vowels.contains(elem))\
    \ elem else newElem)\n        })\n        newMessage", "        val alphabet =\
    \ List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2).mkString(\"\")", "        val vowels = \"aeiouAEIOU\"\n    \
    \    val messageWithVowels = message.replaceAll(vowels, vowels.charAt(2))\n  \
    \      val messageWithVowelsAndTwoCharsBefore = messageWithVowels.replaceAll(vowels.charAt(2),\
    \ vowels.charAt(3))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBefore.replaceAll(vowels.charAt(3), vowels.charAt(4))\n\
    \        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfter.replaceAll(vowels.charAt(4),\
    \ vowels.charAt(5))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfter.replaceAll(vowels.charAt(5),\
    \ vowels.charAt(6))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter.replaceAll(vowels.charAt(6),\
    \ vowels.charAt(7))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter.replaceAll(vowels.charAt(7),\
    \ vowels.charAt(8))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter.replaceAll(vowels.charAt(8),\
    \ vowels.charAt(9))\n        val messageWithVowelsAndTwoCharsBeforeAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfterAndTwoCharsAfter\
    \ = messageWithVowelsAndTwoCharsBefore", "        val alphabet = List(\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n        val messageList = message.split(\"\")\n        val encodedMessage =\
    \ messageList.foldLeft(\"\")( (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n\
    \            if (index != -1) {\n                val vowelIndex = vowels.indexOf(elem)\n\
    \                if (vowelIndex != -1) {\n                    val vowel = vowels(vowelIndex)\n\
    \                    val vowelIndex = vowels.indexOf(vowel)\n                \
    \    val vowelIndex = vowelIndex + 2\n                    if (vowelIndex < vowels.length)\
    \ acc + (vowels(vowelIndex))\n                    else acc + (elem)\n        \
    \        } else acc + (elem)\n            } else acc + (elem)\n        })\n  \
    \      encodedMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => {\n            val\
    \ index = alphabet.indexOf(letter)\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            if (index != -1 && vowelIndex != -1) {\n                val vowel\
    \ = vowels(vowelIndex)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val vowelIndex = vowelIndex + 2\n                alphabet(index)\n\
    \            } else {\n                letter\n            }\n        }).mkString\n\
    \        encodedMessage", "        val vowels = \"aeiouAEIOU\"\n        val messageList\
    \ = message.split(\" \").toList\n        val newMessage = messageList.foldLeft(\"\
    \")( (acc, elem) => \n            acc + (elem.toUpperCase().replaceAll(vowels,\
    \ elem.toUpperCase().charAt(2)) + elem.toLowerCase().replaceAll(vowels, elem.toLowerCase().charAt(2))\
    \ ) \n        )\n        newMessage", "        val vowels = Set(\"a\", \"e\",\
    \ \"i\", \"o\", \"u\")\n        val messageWithVowels = message.map(letter =>\
    \ vowels.contains(letter) ? letter : vowels.find(letter => letter != letter +\
    \ 2) match {\n            case Some(vowel) => vowel\n            case None =>\
    \ letter\n        })\n        val messageWithVowelsAndLetters = messageWithVowels.map(letter\
    \ => vowels.find(letter => letter != letter + 2) match {\n            case Some(vowel)\
    \ => vowel\n            case None => letter\n        }).mkString(\"\")\n     \
    \   val messageWithVowelsAndLettersAndLettersAfterVowels = messageWithVowelsAndLetters.map(letter\
    \ => vowels.find(letter => letter != letter + 2) match {\n            case Some(vowel)\
    \ => vowel\n            case None => letter\n        }).mkString(\"\")\n     \
    \   val messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowels\
    \ = messageWithVowelsAndLettersAndLettersAfterVowels.map(letter => vowels.find(letter\
    \ => letter != letter + 2) match {\n            case Some(vowel) => vowel\n  \
    \          case None => letter\n        }).mkString(\"\")\n        val messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels\
    \ = messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowels.map(letter\
    \ => vowels.find(letter => letter != letter + 2) match {\n            case Some(vowel)\
    \ => vowel\n            case None => letter\n        }).mkString(\"\")\n     \
    \   val messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels\
    \ = messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels.map(letter\
    \ => vowels.find(letter => letter != letter + 2) match {\n            case Some(vowel)\
    \ => vowel\n            case None => letter\n        }).mkString(\"\")\n     \
    \   val messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowels\
    \ = messageWithVowelsAndLettersAndLettersAfterVowelsAndLettersAfterVowelsAndLettersAfterVowel",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter))\
    \ + 1)\n        newMessage.toString.reverse.mkString(\"\")", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  \
    \      val messageArray = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            letter match {\n                case vowel => vowels.indexOf(letter)\n\
    \                case letter => alphabet.indexOf(letter) + 2\n            }\n\
    \        )\n        val newMessage = messageArray.toList.mkString(\"\")\n    \
    \    newMessage", "        val vowels = \"aeiouAEIOU\"\n        val letters =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 1)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 2)))\n     \
    \   newMessage.toList", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessageArray.map(letter => \n         \
    \   letter match {\n                case letter if vowels.contains(letter) =>\
    \ vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage2 = newMessageArray2.toList.mkString(\"\
    \")\n        val newMessageArray3 = newMessage2.split(\"\").map(letter => \n \
    \           letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage3 = newMessageArray3.toList.mkString(\"\
    \")\n        val newMessageArray4 = newMessage3.split(\"\").map(letter => \n \
    \           letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage4 = newMessageArray4.toList.mkString(\"\
    \")\n        val newMessageArray5 = newMessage4.split(\"\").map(letter => \n \
    \           letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage5 = newMessageArray5.toList.mkString(\"\
    \")\n        val newMessageArray6 = newMessage5.split(\"\").map(letter => \n \
    \           letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage6 = newMessageArray6.toList.mkString(\"\
    \")\n        val newMessageArray7 = newMessage6.split(\"\").map(letter => \n \
    \           letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage7 = newMessageArray7.toList.mkString(\"\
    \")\n        val newMessageArray8 = newMessage7.split(\"\").map(letter => \n \
    \           letter match {\n                case letter if vowels.contains(letter)\
    \ => vowels(vowels.indexOf(letter) + 2)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage8 = newMessageArray8.toList.mkString(\"\
    \")\n        val newMessageArray", "        val vowels = \"aeiouAEIOU\"\n    \
    \    val messageArray = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case 0 => letter\n                case 1 => vowels(letter\
    \ - 1) + letter\n                case 2 => vowels(letter - 1) + vowels(letter\
    \ - 1) + letter\n            }\n        ).mkString(\"\")\n        encodedMessage",
  "        val vowels = \"aeiouAEIOU\"\n        val newMessage = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => vowels(i + 2)\n        })\n        val newMessageString = newMessage.toList.reverse.mkString\n\
    \        newMessageString", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageArray = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowel\n            } else {\n        \
    \        letter\n            }\n        })\n        val newMessage = String.join(\"\
    \", newMessageArray)\n        newMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val alphabet = scala.collection.mutable.ArrayBuffer(\n            \"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"\n        )\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.foldLeft(\"\")(\n            (acc,\
    \ elem) => {\n                val index = alphabet.indexOf(elem)\n           \
    \     if (index != -1) {\n                    val nextIndex = index + 2\n    \
    \                if (nextIndex < alphabet.length) {\n                        acc\
    \ += alphabet(nextIndex)\n                    } else {\n                     \
    \   acc += elem\n                    }\n                } else {\n           \
    \         acc += elem\n                }\n            }\n        )\n        encodedMessage",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map {\n            letter =>\n\
    \                if (vowels.contains(letter)) {\n                    letter\n\
    \                } else {\n                    val index = vowels.indexOf(letter)\n\
    \                    val vowelIndex = index + 1\n                    vowels(vowelIndex\
    \ - 1) + letter\n                }\n        }\n        newMessageArray.toString.toUpperCase",
  "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversed = messageWithVowels.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplaced = messageWithVowelsReversed.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplaced.reverse\n        messageWithVowelsReversedWithVowelsReplacedReversed.mkString(\"\
    \")", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','a','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => \n            letter\
    \ match {\n                case letter if letter != ' ' => letter\n          \
    \      case letter if letter != ' ' =>\n                    val index = alphabet.indexOf(letter)\n\
    \                    val vowelIndex = vowels.indexOf(letter)\n               \
    \     val nextLetter = alphabet(index+2)\n                    nextLetter match\
    \ {\n                        case letter if letter != ' ' =>\n               \
    \             letter\n                        case letter if letter != ' ' =>\n\
    \                            letter\n                        case letter if letter\
    \ != ' ' =>\n                            letter\n                        case\
    \ letter if letter != ' ' =>\n                            letter\n           \
    \             case letter if letter != ' ' =>\n                            letter\n\
    \                        case letter if letter != ' ' =>\n                   \
    \         letter\n                        case letter if letter != ' ' =>\n  \
    \                          letter\n                        case letter if letter\
    \ != ' ' =>\n                            letter\n                        case\
    \ letter if letter != ' ' =>\n                            letter\n           \
    \             case letter if letter != ' ' =>\n                            letter\n\
    \                        case letter if letter != ' ' =>\n                   \
    \         letter\n                        case letter if letter != ' ' =>\n  \
    \                          letter\n                        case letter if letter\
    \ != ' ' =>\n                            letter\n                        case\
    \ letter if letter != ' ' =>\n                            letter\n           \
    \             case letter if letter != ' ' =>\n                            letter\n\
    \                        case letter if letter != ' ' =>\n                   \
    \         letter\n                        case letter if letter != ' ' =>\n  \
    \                          letter\n                        case letter if letter\
    \ != ' ' =>\n                            letter\n                        case\
    \ letter if letter != ' ' =>\n                            letter\n           \
    \             case letter if letter != ' ' =>\n                            letter\n\
    \                        case letter if letter != ' ' =>\n                   \
    \         letter\n                        case letter if letter != ' ' =>\n  \
    \                          letter\n                        case letter if letter\
    \ != ' ' =>\n                            letter\n                        case\
    \ letter if letter != ' ' =>\n                            letter\n           \
    \             case letter if letter != ' ' =>\n                            letter\n\
    \                        case letter if letter != ' ' =>\n                   \
    \         letter\n                        case letter if letter != ' ' =>\n  \
    \                          letter\n                        case letter if letter\
    \ != ", "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageLength = message.length\n        val encodedMessage = mutable.StringBuilder(messageLength)\n\
    \        for(i <- 0 until messageLength) {\n            val currentChar = message.charAt(i)\n\
    \            val currentCharIndex = letters.indexOf(currentChar)\n           \
    \ val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % letters.length\n            val currentChar = letters(currentCharIndex)\n\
    \            encodedMessage.append(currentChar)\n        }\n        encodedMessage.toString()",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index >= 0) {\n            \
    \    val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowel\n            } else {\n                letter\n       \
    \     }\n        })\n        val newMessage = String.join(\"\", newMessageArray)\n\
    \        newMessage", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val replacement = vowels(vowelIndex -\
    \ 1) + vowel\n                replacement\n            } else {\n            \
    \    letter\n            }\n        })\n        newMessageArray.toString.reverse.mkString(\"\
    \")", "        val vowels = \"aeiou\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => {\n            if\
    \ (vowels.contains(letter)) {\n                val vowelIndex = vowels.indexOf(letter)\n\
    \                val vowel2Index = vowels.indexOf(vowels.charAt(vowelIndex + 1))\n\
    \                vowels.charAt(vowelIndex + 1) match {\n                    case\
    \ vowel => vowel\n                    case _ => vowels.charAt(vowel2Index)\n \
    \               }\n            } else {\n                letter\n            }\n\
    \        }).mkString(\"\")\n        encodedMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\" \")\n        var newMessage = \"\"\n        var i = 0\n   \
    \     while(i < messageList.length){\n            val currentChar = messageList(i)\n\
    \            val newChar = currentChar.toUpper\n            val newCharIndex =\
    \ alphabet.indexOf(newChar)\n            val newCharIndex2 = alphabet.indexOf(newChar,\
    \ newCharIndex + 1)\n            val newCharIndex3 = alphabet.indexOf(newChar,\
    \ newCharIndex + 2)\n            val newCharIndex4 = alphabet.indexOf(newChar,\
    \ newCharIndex + 3)\n            val newCharIndex5 = alphabet.indexOf(newChar,\
    \ newCharIndex + 4)\n            val newCharIndex6 = alphabet.indexOf(newChar,\
    \ newCharIndex + 5)\n            val newCharIndex7 = alphabet.indexOf(newChar,\
    \ newCharIndex + 6)\n            val newCharIndex8 = alphabet.indexOf(newChar,\
    \ newCharIndex + 7)\n            val newCharIndex9 = alphabet.indexOf(newChar,\
    \ newCharIndex + 8)\n            val newCharIndex10 = alphabet.indexOf(newChar,\
    \ newCharIndex + 9)\n            val newCharIndex11 = alphabet.indexOf(newChar,\
    \ newCharIndex + 10)\n            val newCharIndex12 = alphabet.indexOf(newChar,\
    \ newCharIndex + 11)\n            val newCharIndex13 = alphabet.indexOf(newChar,\
    \ newCharIndex + 12)\n            val newCharIndex14 = alphabet.indexOf(newChar,\
    \ newCharIndex + 13)\n            val newCharIndex15 = alphabet.indexOf(newChar,\
    \ newCharIndex + 14)\n            val newCharIndex16 = alphabet.indexOf(newChar,\
    \ newCharIndex + 15)\n            val newCharIndex17 = alphabet.indexOf(newChar,\
    \ newCharIndex + 16)\n            val newCharIndex18 = alphabet.indexOf(newChar,\
    \ newCharIndex + 17)\n            val newCharIndex19 = alphabet.indexOf(newChar,\
    \ newCharIndex + 18)\n            val newCharIndex20 = alphabet.indexOf(newChar,\
    \ newCharIndex + 19)\n            val newCharIndex21 = alphabet.indexOf(newChar,\
    \ newCharIndex + 20)\n            val newCharIndex22 = alphabet.indexOf(newChar,\
    \ newCharIndex", "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) + 1)\n    \
    \    val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        messageWithVowelsReversedWithVowelsReplacedReversed.foldLeft(\"\")(_\
    \ + _)", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(vowels.tail) + 1)\n         \
    \   })\n        val newMessage = messageArray.toList.mkString(\"\")\n        newMessageArray.toList.mkString(\"\
    \")", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => {\n            val index\
    \ = vowels.indexOf(letter)\n            if (index >= 0) {\n                val\
    \ vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n   \
    \             vowels.indexOf(vowel, vowelIndex) + vowel\n            } else {\n\
    \                letter\n            }\n        }).mkString(\"\")\n        newMessage",
  "        val vowels = \"aeiouAEIOU\".toCharArray\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    .toCharArray\n        val newMessage = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 1)\n        val newMessage2\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 2)\n        val newMessage3 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 3)\n        val newMessage4\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 4)\n        val newMessage5 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 5)\n        val newMessage6\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 6)\n        val newMessage7 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 7)\n        val newMessage8\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 8)\n        val newMessage9 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 9)\n        val newMessage10\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 10)\n        val newMessage11 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 11)\n        val newMessage12\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 12)\n        val newMessage13 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 13)\n        val newMessage14\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 14)\n        val newMessage15 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 15)\n        val newMessage16\
    \ = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letters.indexOf(letter)))\
    \ + 16)\n        val newMessage17 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels(letters.indexOf(letter))) + 17)\n        val newMessage18\
    \ = message.map(letter => letters.indexOf(letter", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val nextVowel = vowels(index\
    \ + 1)\n                val nextVowelIndex = vowels.indexOf(nextVowel)\n     \
    \           val nextVowelIndex = if (nextVowelIndex == -1) vowels.length else\
    \ nextVowelIndex\n                val nextVowelIndex = if (nextVowelIndex == -1)\
    \ 0 else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) 0 else nextVowelIndex\n\
    \                val nextVowel = vowels(nextVowelIndex)\n                val nextVowelIndex\
    \ = if (nextVowelIndex == -1) 0 else nextVowelIndex\n                val nextVowel\
    \ = vowels(nextVowelIndex)\n                val nextVowelIndex = if (nextVowelIndex\
    \ == -1) 0 else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) 0 else nextVowelIndex\n\
    \                val nextVowel = vowels(nextVowelIndex)\n                val nextVowelIndex\
    \ = if (nextVowelIndex == -1) 0 else nextVowelIndex\n                val nextVowel\
    \ = vowels(nextVowelIndex)\n                val nextVowelIndex = if (nextVowelIndex\
    \ == -1) 0 else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) 0 else nextVowelIndex\n\
    \                val nextVowel = vowels(nextVowelIndex)\n                val nextVowelIndex\
    \ = if (nextVowelIndex == -1) 0 else nextVowelIndex\n                val nextVowel\
    \ = vowels(nextVowelIndex)\n                val nextVowelIndex = if (nextVowelIndex\
    \ == -1) 0 else nextVowelIndex\n                val nextVowel = vowels(nextVowelIndex)\n\
    \                val nextVowelIndex = if (nextVowelIndex == -1) 0 else nextVowelIndex\n\
    \                val nextVowel = vowels(nextVowelIndex)\n                val nextVowelIndex\
    \ = ", "        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = mutable.StringBuilder()\n        val messageArray =\
    \ message.split(\"\")\n        messageArray.foreach(letter => {\n            val\
    \ index = alphabet.indexOf(letter)\n            val nextLetter = alphabet(index\
    \ + 1)\n            val nextIndex = alphabet.indexOf(nextLetter)\n           \
    \ val nextLetter2 = alphabet(index + 2)\n            val nextIndex2 = alphabet.indexOf(nextLetter2)\n\
    \            val nextLetter3 = alphabet(index + 3)\n            val nextIndex3\
    \ = alphabet.indexOf(nextLetter3)\n            val nextLetter4 = alphabet(index\
    \ + 4)\n            val nextIndex4 = alphabet.indexOf(nextLetter4)\n         \
    \   val nextLetter5 = alphabet(index + 5)\n            val nextIndex5 = alphabet.indexOf(nextLetter5)\n\
    \            val nextLetter6 = alphabet(index + 6)\n            val nextIndex6\
    \ = alphabet.indexOf(nextLetter6)\n            val nextLetter7 = alphabet(index\
    \ + 7)\n            val nextIndex7 = alphabet.indexOf(nextLetter7)\n         \
    \   val nextLetter8 = alphabet(index + 8)\n            val nextIndex8 = alphabet.indexOf(nextLetter8)\n\
    \            val nextLetter9 = alphabet(index + 9)\n            val nextIndex9\
    \ = alphabet.indexOf(nextLetter9)\n            val nextLetter10 = alphabet(index\
    \ + 10)\n            val nextIndex10 = alphabet.indexOf(nextLetter10)\n      \
    \      val nextLetter11 = alphabet(index + 11)\n            val nextIndex11 =\
    \ alphabet.indexOf(nextLetter11)\n            val nextLetter12 = alphabet(index\
    \ + 12)\n            val nextIndex12 = alphabet.indexOf(nextLetter12)\n      \
    \      val nextLetter13 = alphabet(index + 13)\n            val nextIndex13 =\
    \ alphabet.indexOf(nextLetter13)\n            val nextLetter14 = alphabet(index\
    \ + 14)\n            val nextIndex14 = alphabet.indexOf(nextLetter14)\n      \
    \      val nextLetter15 = alphabet(index + 15)\n            val nextIndex15 =\
    \ alphabet.indexOf(nextLetter15)\n            val nextLetter16 = alphabet(index\
    \ + 16)\n            val nextIndex16 = alphabet.indexOf(nextLetter16)\n      \
    \      val nextLetter17 = alphabet(index + 17)\n            val nextIndex17 =\
    \ alphabet.indexOf(nextLetter17)\n            val nextLetter18 = alphabet(index\
    \ + 18)\n            val nextIndex18 = alphabet.indexOf(nextLetter18)\n      \
    \      val nextLetter19 = alphabet(index + 19)\n            val nextIndex19 =\
    \ alphabet.indexOf(nextLetter19)\n            val nextLetter20 = alphabet(index\
    \ + 20)\n            val nextIndex", "        val vowels = \"aeiouAEIOU\"\n  \
    \      val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val vowelMap = new\
    \ mutable.HashMap[String, String]()\n        vowelMap += (vowels -> \"a\")\n \
    \       vowelMap += (vowels.tail ->\"e\")\n        vowelMap += (vowels.tail.tail\
    \ ->\"i\")\n        vowelMap += (vowels.tail.tail.tail ->\"o\")\n        vowelMap\
    \ += (vowels.tail.tail.tail.tail ->\"u\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail\
    \ ->\"A\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail ->\"E\"\
    )\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail ->\"I\")\n \
    \       vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail ->\"O\")\n\
    \        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail ->\"\
    U\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ->\"a\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ->\"e\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ->\"i\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ->\"o\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ->\"u\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ->\"A\")\n        vowelMap += (vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ->\"E\")\n        vowelMap += (vowels.tail.tail.tail.tail", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.map(letter => \n \
    \           letter match {\n                case 'a' => alphabet(0)\n        \
    \        case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n  \
    \              case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case _ => letter\n\
    \            }\n        ).mkString(\"\")\n        val newMessageList = newMessage.split(\"\
    \")\n        val newAlphabet = alphabet.map(letter => \n            letter match\
    \ {\n                case 'a' => alphabet(0)\n                case 'b' => alphabet(1)\n\
    \                case 'c' => alphabet(2)\n                case 'd' => alphabet(3)\n\
    \                case 'e' => alphabet(4)\n                case 'f' => alphabet(5)\n\
    \                case 'g' => alphabet(6)\n                case 'h' => alphabet(7)\n\
    \                case 'i' => alphabet(8)\n                case 'j' => alphabet(9)\n\
    \                case 'k' => alphabet(10)\n                case 'l' => alphabet(11)\n\
    \                case 'm' => alphabet(12)\n                case 'n' => alphabet(13)\n\
    \                case 'o' => alphabet(14)\n                case 'p' => alphabet(15)\n\
    \                case 'q' => alphabet(16)\n                case 'r' => alphabet(17)\n\
    \                case 's' => alphabet(18)\n                case 't' => alphabet(19)\n\
    \                case 'u' => alphabet(20)\n                case 'v' => alphabet(21)\n\
    \                case 'w' => alphabet(22)\n                case 'x' => alphabet(23)\n\
    \                case 'y' => alphabet(24)\n                case 'z' => alphabet(25)\n\
    \                case _ => letter\n            }\n        ).mkString(\"\")\n \
    \       val newAlphabetList = newAlphab", "        val vowels = \"aeiouAEIOU\"\
    \n        val newMessage = message\n        val newMessageList = newMessage.split(\"\
    \")\n        val newMessageList2 = newMessageList.map(x => x.toUpperCase)\n  \
    \      val newMessageList3 = newMessageList2.map(x => vowels.indexOf(x) + 1)\n\
    \        val newMessageList4 = newMessageList3.map(x => vowels.charAt(x))\n  \
    \      val newMessageList5 = newMessageList4.map(x => x.toUpperCase)\n       \
    \ val newMessageList6 = newMessageList5.map(x => vowels.indexOf(x) + 1)\n    \
    \    val newMessageList7 = newMessageList6.map(x => vowels.charAt(x))\n      \
    \  val newMessageList8 = newMessageList7.map(x => x.toUpperCase)\n        val\
    \ newMessageList9 = newMessageList8.map(x => vowels.indexOf(x) + 1)\n        val\
    \ newMessageList10 = newMessageList9.map(x => vowels.charAt(x))\n        newMessageList10.mkString(\"\
    \")", "        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowels\
    \ = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.map(letter =>\
    \ vowels.indexOf(letter) + 1).map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 1))", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.map(letter =>\
    \ vowels.map(vowel => vowel match {\n            case vowel => vowel\n       \
    \     case _ => alphabet(alphabet.indexOf(vowel) + 1)\n        }))", "       \
    \ val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => \n            letter match {\n                case 'a'\
    \ => alphabet(0)\n                case 'b' => alphabet(1)\n                case\
    \ 'c' => alphabet(2)\n                case 'd' => alphabet(3)\n              \
    \  case 'e' => alphabet(4)\n                case 'f' => alphabet(5)\n        \
    \        case 'g' => alphabet(6)\n                case 'h' => alphabet(7)\n  \
    \              case 'i' => alphabet(8)\n                case 'j' => alphabet(9)\n\
    \                case 'k' => alphabet(10)\n                case 'l' => alphabet(11)\n\
    \                case 'm' => alphabet(12)\n                case 'n' => alphabet(13)\n\
    \                case 'o' => alphabet(14)\n                case 'p' => alphabet(15)\n\
    \                case 'q' => alphabet(16)\n                case 'r' => alphabet(17)\n\
    \                case 's' => alphabet(18)\n                case 't' => alphabet(19)\n\
    \                case 'u' => alphabet(20)\n                case 'v' => alphabet(21)\n\
    \                case 'w' => alphabet(22)\n                case 'x' => alphabet(23)\n\
    \                case 'y' => alphabet(24)\n                case 'z' => alphabet(25)\n\
    \                case _ => letter\n            }\n        ).map(letter => \n \
    \           vowels.map(vowel => \n                vowel match {\n            \
    \        case 'a' => alphabet(0)\n                    case 'e' => alphabet(1)\n\
    \                    case 'i' => alphabet(2)\n                    case 'o' =>\
    \ alphabet(3)\n                    case 'u' => alphabet(4)\n                 \
    \   case 'y' => alphabet(5)\n                    case 'a' => alphabet(0)\n   \
    \                 case 'e' => alphabet(1)\n                    case 'i' => alphabet(2)\n\
    \                    case 'o' => alphabet(3)\n                    case 'u' =>\
    \ alphabet(4)\n                    case 'y' => alphabet(5)\n                 \
    \   case 'a' => alphabet(0)\n                    case 'e' => alphabet(1)\n   \
    \                 case 'i' => alphabet(2)\n                    case 'o' => alphabet(3)\n\
    \                    case 'u' => alphabet(4)\n                    case 'y' =>\
    \ alphabet(5)\n                    case 'a' => alphabet(0)\n                 \
    \   case 'e' => alphabet(1)\n                    case 'i' => alphabet(2)\n   \
    \                 case 'o' => alphabet(3)\n                    case 'u' => alphabet(4)\n\
    \                    case 'y' => alphabet(5)\n                    case 'a' =>\
    \ alphabet(0)\n                    case 'e' => alphabet(1)\n                 \
    \   case 'i' => alphabet(2)\n                    case 'o' => alphabet(3)\n   \
    \                 case 'u' => alphabet(4)\n                    case 'y' => alphabet(5)\n\
    \                    case 'a' => alphabet(0)\n                    case 'e", " \
    \       val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val messageList = message.split(\"\"\
    )\n        val encodedMessage = messageList.foldLeft(\"\") { (acc, c) =>\n   \
    \         val index = alphabet.indexOf(c)\n            if (index != -1) {\n  \
    \              acc += alphabet(index - 2)\n            }\n            acc += c\n\
    \        }\n        val vowelIndex = vowels.indexOf(messageList(0))\n        if\
    \ (vowelIndex != -1) {\n            encodedMessage += vowels(vowelIndex - 2)\n\
    \        }\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\n  \
    \      val newMessage = message.map(letter => vowels.indexOf(letter) + 1).map(letter\
    \ => vowels.charAt(letter)).mkString\n        newMessage", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n \
    \       val vowelsMap = Map(vowels -> \"A\", vowels.tail ->\"B\")\n        val\
    \ messageList = message.split(\"\")\n        val result = messageList.foldLeft(\"\
    \"){ (acc, elem) =>\n            val index = alphabet.indexOf(elem)\n        \
    \    val nextVowel = alphabet(index+1)\n            val nextVowelIndex = alphabet.indexOf(nextVowel)\n\
    \            val nextVowelIndex = if (nextVowelIndex == -1) alphabet.size else\
    \ nextVowelIndex\n            val nextVowelIndex = if (nextVowelIndex == -1) 0\
    \ else nextVowelIndex\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = if (nextVowelIndex == -1) alphabet.size else\
    \ nextVowelIndex\n            val nextVowelIndex = if (nextVowelIndex == -1) 0\
    \ else nextVowelIndex\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = if (nextVowelIndex == -1) alphabet.size else\
    \ nextVowelIndex\n            val nextVowelIndex = if (nextVowelIndex == -1) 0\
    \ else nextVowelIndex\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = if (nextVowelIndex == -1) alphabet.size else\
    \ nextVowelIndex\n            val nextVowelIndex = if (nextVowelIndex == -1) 0\
    \ else nextVowelIndex\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = if (nextVowelIndex == -1) alphabet.size else\
    \ nextVowelIndex\n            val nextVowelIndex = if (nextVowelIndex == -1) 0\
    \ else nextVowelIndex\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = if (nextVowelIndex == -1) alphabet.size else\
    \ nextVowelIndex\n            val nextVowelIndex = if (nextVowelIndex == -1) 0\
    \ else nextVowelIndex\n            val nextVowel = alphabet(nextVow", "      \
    \  val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageList = message.split(\"\")\n        val newMessageList =\
    \ messageList.map(letter => \n            letter match {\n                case\
    \ vowel => vowel\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n            }\n        )\n        val newMessage = newMessageList.toList\n\
    \        val newMessageString = newMessage.toString\n        val newMessageStringList\
    \ = newMessageString.split(\" \")\n        val newMessageStringList2 = newMessageStringList.map(word\
    \ => \n            word match {\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n                case _ => word\n            }\n        )\n        val\
    \ newMessageString2 = newMessageStringList2.toString\n        val newMessageString3\
    \ = newMessageString2.split(\" \")\n        val newMessageString4 = newMessageString3.map(word\
    \ => \n            word match {\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n                case _ => word\n            }\n        )\n        val\
    \ newMessageString5 = newMessageString4.toString\n        val newMessageString6\
    \ = newMessageString5.split(\" \")\n        val newMessageString7 = newMessageString6.map(word\
    \ => \n            word match {\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n                case _ => word\n            }\n        )\n        val\
    \ newMessageString8 = newMessageString7.toString\n        val newMessageString9\
    \ = newMessageString8.split(\" \")\n        val newMessageString10 = newMessageString9.map(word\
    \ => \n            word match {\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n                case _ => word\n            }\n        )\n        val\
    \ newMessageString11 = newMessageString10.toString\n        val newMessageString12\
    \ = newMessageString11.split(\" \")\n        val newMessageString13 = newMessageString12.map(word\
    \ => \n            word match {\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n                case _ => word\n            }\n        )\n        val\
    \ newMessageString14 = newMessageString13.toString\n        val newMessageString15\
    \ = newMessageString14.split(\" \")\n        val newMessageString16 = newMessageString15.map(word\
    \ => \n            word match {\n                case letter => alphabet(alphabet.indexOf(letter)\
    \ + 2)\n                case _ => word\n            }\n        )\n        val\
    \ newMessageString17 = newMessageString16.map(word => \n            word match\
    \ {\n                case letter => alphabet(alphabet.indexOf(letter) + 2)\n \
    \               case _ => word\n            }\n        )\n        val newMessageString18",
  "        val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\"){ (acc, elem) =>\n   \
    \         val index = vowels.indexOf(elem)\n            if (index != -1) {\n \
    \               val newElem = vowels(index - 1) + vowels(index)\n            \
    \    acc += newElem\n            }\n            else {\n                acc +=\
    \ elem\n            }\n        }\n        newMessage", "        val vowels = \"\
    aeiouAEIOU\"\n        val messageWithVowels = message.replaceAll(vowels, vowels.charAt(2))\n\
    \        val messageWithVowelsAndVowelsTwoAhead = (messageWithVowels +: messageWithVowels.split(vowels.charAt(2))).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead = (messageWithVowelsAndVowelsTwoAhead\
    \ +: messageWithVowelsAndVowelsTwoAhead.split(vowels.charAt(2))).mkString\n  \
    \      val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead +: messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead.split(vowels.charAt(2))).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ +: messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead).mkString\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndV",
  "        val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.foldLeft(\"\"){ (acc, elem) =>\n\
    \            val index = vowels.indexOf(elem)\n            if (index != -1) {\n\
    \                val vowel = vowels(index)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val vowel2 = vowels(vowelIndex + 1)\n                acc + (if\
    \ (vowelIndex == 0) elem.toUpperCase else elem.toLowerCase + vowel2)\n       \
    \     } else {\n                acc + elem\n            }\n        }\n       \
    \ encodedMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ){ (result, current) => {\n            val currentLetter = current.toUpperCase()\n\
    \            val currentVowel = vowels.find(letter => letter === currentLetter)\n\
    \            val currentVowelIndex = vowels.indexOf(currentVowel)\n          \
    \  val currentVowelIndex = currentVowelIndex + 2\n            val currentVowelLetter\
    \ = alphabet(currentVowelIndex)\n            val currentLetterIndex = alphabet.indexOf(currentLetter)\n\
    \            val currentLetterIndex = currentLetterIndex + 2\n            val\
    \ currentLetterLetter = alphabet(currentLetterIndex)\n            val currentLetterVowel\
    \ = alphabet(currentLetterIndex + 2)\n            val currentVowelLetterVowel\
    \ = alphabet(currentVowelIndex + 2)\n            val currentVowelLetterLetter\
    \ = alphabet(currentVowelIndex + 3)\n            val currentLetterVowelLetter\
    \ = alphabet(currentLetterIndex + 3)\n            val currentVowelLetterVowelLetter\
    \ = alphabet(currentVowelIndex + 3)\n            val currentLetterVowelVowelLetter\
    \ = alphabet(currentLetterIndex + 4)\n            val currentVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 4)\n            val currentVowelVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 5)\n            val currentVowelVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 6)\n            val currentVowelVowelVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 7)\n            val currentVowelVowelVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 8)\n            val currentVowelVowelVowelVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 9)\n            val currentVowelVowelVowelVowelVowelVowelLetter\
    \ = alphabet(currentVowelIndex + 10)\n            val ", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n \
    \       val newMessage2 = newMessage.map(letter => alphabet.indexOf(letter) +\
    \ 2)\n        val newMessage3 = newMessage2.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage4 = newMessage3.map(letter => alphabet.indexOf(letter))\n\
    \        val newMessage5 = newMessage4.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage6 = newMessage5.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage7 = newMessage6.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage8 = newMessage7.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage9 = newMessage8.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage10 = newMessage9.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage11 = newMessage10.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage12 = newMessage11.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage13 = newMessage12.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage14 = newMessage13.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage15 = newMessage14.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage16 = newMessage15.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage17 = newMessage16.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage18 = newMessage17.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage19 = newMessage18.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage20 = newMessage19.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage21 = newMessage20.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage22 = newMessage21.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage23 = newMessage22.map(letter => alphabet.indexOf(letter)\
    \ + 1)\n        val newMessage24 = newMessage23.map(letter => alphabet.indexOf(letter)\
    \ + 2)\n        val newMessage25 = new", "        val vowels = \"aeiouAEIOU\"\n\
    \        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) match {\n            case -1\
    \ => letter\n            case 0 => letter\n            case 1 => letter\n    \
    \        case 2 => letter\n            case 3 => letter\n            case 4 =>\
    \ letter\n            case 5 => letter\n            case 6 => letter\n       \
    \     case 7 => letter\n            case 8 => letter\n            case 9 => letter\n\
    \            case 10 => letter\n            case 11 => letter\n            case\
    \ 12 => letter\n            case 13 => letter\n            case 14 => letter\n\
    \            case 15 => letter\n            case 16 => letter\n            case\
    \ 17 => letter\n            case 18 => letter\n            case 19 => letter\n\
    \            case 20 => letter\n            case 21 => letter\n            case\
    \ 22 => letter\n            case 23 => letter\n            case 24 => letter\n\
    \            case 25 => letter\n            case 26 => letter\n            case\
    \ 27 => letter\n            case 28 => letter\n            case 29 => letter\n\
    \            case 30 => letter\n            case 31 => letter\n            case\
    \ 32 => letter\n            case 33 => letter\n            case 34 => letter\n\
    \            case 35 => letter\n            case 36 => letter\n            case\
    \ 37 => letter\n            case 38 => letter\n            case 39 => letter\n\
    \            case 40 => letter\n            case 41 => letter\n            case\
    \ 42 => letter\n            case 43 => letter\n            case 44 => letter\n\
    \            case 45 => letter\n            case 46 => letter\n            case\
    \ 47 => letter\n            case 48 => letter\n            case 49 => letter\n\
    \            case 50 => letter\n            case 51 => letter\n            case\
    \ 52 => letter\n            case 53 => letter\n            case 54 => letter\n\
    \            case 55 => letter\n            case 56 => letter\n            case\
    \ 57 => letter\n            case 58 => letter\n            case 59 => letter\n\
    \            case 60 => letter\n            case 61 => letter\n            case\
    \ 62 => letter\n            case 63 => letter\n            case 64 => letter\n\
    \            case 65 => letter\n            case 66 => letter\n            case\
    \ 67 => letter\n            case 68 => letter\n            case 69 => letter\n\
    \            case 70 => letter\n            case 71 => letter\n            case\
    \ 72 => letter\n            case 73 => letter\n            case 74 => letter\n\
    \            case 75 => letter\n            case 76 => letter\n            case\
    \ 77 => letter\n            case 78 => letter\n            case 79 => letter\n\
    \            case 80 => letter\n            case 81 => letter\n            case\
    \ 82 => letter\n            case 83 => letter\n", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = index + 1\n\
    \                if (vowelIndex < vowels.length) vowels(vowelIndex) else letter\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage = newMessageArray.toList\n        newMessage.foldLeft(\"\"\
    )( (acc, letter) => acc + letter.toUpperCase)", "        val vowels = \"aeiouAEIOU\"\
    \n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val newMessage\
    \ = mutable.StringBuilder()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String]()\n\
    \        val newMessageList = mutable.ListBuffer[String]()\n        val newMessageList\
    \ = mutable.ListBuffer[String]()\n        val newMessageList = mutable.ListBuffer[String",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowels.indexOf(vowel, vowelIndex + 1)\n            } else {\n\
    \                letter\n            }\n        })\n        val newMessage = String.join(\"\
    \", newMessageArray)\n        newMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageList = message.split(\"\")\n        val newMessage = messageList.map(letter\
    \ => \n            vowels.indexOf(letter) match {\n                case -1 =>\
    \ letter\n                case i => vowels(i+2)\n            }\n        ).mkString(\"\
    \")\n        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(letter => \n            vowels.indexOf(letter) match {\n\
    \                case -1 => letter\n                case i => vowels(i+2)\n  \
    \          }\n        ).mkString(\"\")\n        newMessageList2.reverse.mkString(\"\
    \")", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowels(vowelIndex) = letter\n                vowel\n        \
    \    } else {\n                letter\n            }\n        })\n        val\
    \ newMessage = newMessageArray.toList\n        val newMessageString = newMessage.toString\n\
    \        val newMessageStringArray = newMessageString.split(\"\")\n        val\
    \ newMessageStringArrayLength = newMessageStringArray.length\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = new", "        val alphabet = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n\
    \        val messageList = message.split(\"\")\n        val result = new StringBuilder\n\
    \        var i = 0\n        while (i < messageList.length) {\n            val\
    \ letter = messageList(i)\n            val index = alphabet.indexOf(letter)\n\
    \            if (index != -1) {\n                val nextLetter = alphabet(index\
    \ + 1)\n                val nextIndex = alphabet.indexOf(nextLetter)\n       \
    \         if (nextIndex != -1) {\n                    val nextLetter2 = alphabet(nextIndex\
    \ + 1)\n                    val nextIndex2 = alphabet.indexOf(nextLetter2)\n \
    \                   if (nextIndex2 != -1) {\n                        val nextLetter3\
    \ = alphabet(nextIndex2 + 1)\n                        val nextIndex3 = alphabet.indexOf(nextLetter3)\n\
    \                        if (nextIndex3 != -1) {\n                           \
    \ val nextLetter4 = alphabet(nextIndex3 + 1)\n                            val\
    \ nextIndex4 = alphabet.indexOf(nextLetter4)\n                            if (nextIndex4\
    \ != -1) {\n                                val nextLetter5 = alphabet(nextIndex4\
    \ + 1)\n                                val nextIndex5 = alphabet.indexOf(nextLetter5)\n\
    \                                if (nextIndex5 != -1) {\n                   \
    \                 val nextLetter6 = alphabet(nextIndex5 + 1)\n               \
    \                     val nextIndex6 = alphabet.indexOf(nextLetter6)\n       \
    \                             if (nextIndex6 != -1) {\n                      \
    \                  val nextLetter7 = alphabet(nextIndex6 + 1)\n              \
    \                          val nextIndex7 = alphabet.indexOf(nextLetter7)\n  \
    \                                      if (nextIndex7 != -1) {\n             \
    \                               val nextLetter8 = alphabet(nextIndex7 + 1)\n \
    \                                           val nextIndex8 = alphabet.indexOf(nextLetter8)\n\
    \                                            if (nextIndex8 != -1) {\n       \
    \                                         val nextLetter9 = alphabet(nextIndex8\
    \ + 1)\n                                                val nextIndex9 = alphabet.indexOf(nextLetter9)\n\
    \                                                if (nextIndex9 != -1) {\n   \
    \                                                 val nextLetter10 = alphabet(nextIndex9\
    \ + 1)\n                                                    val nextIndex10 =\
    \ alphabet.indexOf(nextLetter10)\n                                           \
    \         if (nextIndex10 != -1) {\n                                         \
    \               val nextLetter11 = alphabet(nextIndex10 + 1)\n               \
    \                                         val nextIndex11 = alphabet.indexOf(nextLetter11)\n\
    \                                                        if (nextIndex11 != -1)\
    \ {\n                                                            val nextLetter12\
    \ = alphabet(nextIndex11 + 1)\n                                              \
    \              val nextIndex12 = alphabet.indexOf(nextLetter12)\n            \
    \                                                if (nextIndex12 != -1) {\n  \
    \                                                              val nextLetter13\
    \ = alphabet(nextIndex12 + 1)\n                                              \
    \                  val nextIndex13 = alphabet.indexOf(nextLetter13)", "      \
    \  val vowels = \"aeiou\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)) + letters.indexOf(vowels.charAt(2)) + letters.indexOf(vowels.charAt(3))\
    \ + letters.indexOf(vowels.charAt(4)) + letters.indexOf(vowels.charAt(5)) + letters.indexOf(vowels.charAt(6))\
    \ + letters.indexOf(vowels.charAt(7)) + letters.indexOf(vowels.charAt(8)) + letters.indexOf(vowels.charAt(9))\
    \ + letters.indexOf(vowels.charAt(10)) + letters.indexOf(vowels.charAt(11)) +\
    \ letters.indexOf(vowels.charAt(12)) + letters.indexOf(vowels.charAt(13)) + letters.indexOf(vowels.charAt(14))\
    \ + letters.indexOf(vowels.charAt(15))).map(_.toString).mkString\n        newMessage",
  "        val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \ \").toList\n        val newMessage = messageList.foldLeft(\"\") { (result, current)\
    \ => {\n            val currentChar = current.charAt(0)\n            val currentVowel\
    \ = vowels.indexOf(currentChar)\n            val currentVowel2 = vowels.indexOf(current.charAt(1))\n\
    \            val currentVowel3 = vowels.indexOf(current.charAt(2))\n         \
    \   val currentVowel4 = vowels.indexOf(current.charAt(3))\n            val currentVowel5\
    \ = vowels.indexOf(current.charAt(4))\n            val currentVowel6 = vowels.indexOf(current.charAt(5))\n\
    \            val currentVowel7 = vowels.indexOf(current.charAt(6))\n         \
    \   val currentVowel8 = vowels.indexOf(current.charAt(7))\n            val currentVowel9\
    \ = vowels.indexOf(current.charAt(8))\n            val currentVowel10 = vowels.indexOf(current.charAt(9))\n\
    \            val currentVowel11 = vowels.indexOf(current.charAt(10))\n       \
    \     val currentVowel12 = vowels.indexOf(current.charAt(11))\n            val\
    \ currentVowel13 = vowels.indexOf(current.charAt(12))\n            val currentVowel14\
    \ = vowels.indexOf(current.charAt(13))\n            val currentVowel15 = vowels.indexOf(current.charAt(14))\n\
    \            val currentVowel16 = vowels.indexOf(current.charAt(15))\n       \
    \     val currentVowel17 = vowels.indexOf(current.charAt(16))\n            val\
    \ currentVowel18 = vowels.indexOf(current.charAt(17))\n            val currentVowel19\
    \ = vowels.indexOf(current.charAt(18))\n            val currentVowel20 = vowels.indexOf(current.charAt(19))\n\
    \            val currentVowel21 = vowels.indexOf(current.charAt(20))\n       \
    \     val currentVowel22 = vowels.indexOf(current.charAt(21))\n            val\
    \ currentVowel23 = vowels.indexOf(current.charAt(22))\n            val currentVowel24\
    \ = vowels.indexOf(current.charAt(23))\n            val currentVowel25 = vowels.indexOf(current.charAt(24))\n\
    \            val currentVowel26 = vowels.indexOf(current.charAt(25))\n       \
    \     val currentVowel27 = vowels.indexOf(current.charAt(26))\n            val\
    \ currentVowel28 = vowels.indexOf(current.charAt(27))\n            val currentVowel29\
    \ = vowels.indexOf(current.charAt(28))\n            val currentVowel30 = vowels.indexOf(current.charAt(29))\n\
    \            val currentVowel31 = vowel", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map {\n            letter =>\n                val vowelIndex =\
    \ vowels.indexOf(letter)\n                if (vowelIndex == -1) {\n          \
    \          letter\n                } else {\n                    val vowelIndex2\
    \ = vowels.indexOf(letter, vowelIndex + 1)\n                    if (vowelIndex2\
    \ == -1) {\n                        letter\n                    } else {\n   \
    \                     vowels(vowelIndex2) + letter\n                    }\n  \
    \              }\n        }\n        encodedMessage.toString.reverse", "     \
    \   val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.foldLeft(\"\") { (result, current)\
    \ =>\n            val currentLetter = current.toLowerCase\n            val currentLetterIndex\
    \ = alphabet.indexOf(currentLetter)\n            val currentVowelIndex = vowels.indexOf(currentLetter)\n\
    \            val currentVowelIndex2 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 1))\n            val currentVowelIndex3 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 2))\n            val currentVowelIndex4 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 3))\n            val currentVowelIndex5 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 4))\n            val currentVowelIndex6 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 5))\n            val currentVowelIndex7 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 6))\n            val currentVowelIndex8 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 7))\n            val currentVowelIndex9 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 8))\n            val currentVowelIndex10 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 9))\n            val currentVowelIndex11 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 10))\n            val currentVowelIndex12 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 11))\n            val currentVowelIndex13 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 12))\n            val currentVowelIndex14 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 13))\n            val currentVowelIndex15 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 14))\n            val currentVowelIndex16 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 15))\n            val currentVowelIndex17 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 16", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0) + letter.charAt(1)\n        \
    \        vowels(vowelIndex) = newLetter\n                newLetter\n         \
    \   } else {\n                letter\n            }\n        })\n        val newMessage\
    \ = newMessageArray.toList\n        newMessage.toString", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val\
    \ messageArrayLength = messageArray.length\n        val encodedMessageArray =\
    \ messageArray.map(letter => {\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            if (vowelIndex != -1) {\n                val vowel2Index = vowels.indexOf(messageArray(vowelIndex\
    \ + 1))\n                if (vowel2Index != -1) {\n                    val vowel2Letter\
    \ = vowels.charAt(vowel2Index)\n                    val vowel2LetterIndex = vowels.indexOf(vowel2Letter)\n\
    \                    if (vowel2LetterIndex != -1) {\n                        val\
    \ vowel2Letter2Index = vowels.indexOf(messageArray(vowel2LetterIndex + 1))\n \
    \                       if (vowel2Letter2Index != -1) {\n                    \
    \        val vowel2Letter2Letter = vowels.charAt(vowel2Letter2Index)\n       \
    \                     val vowel2Letter2LetterIndex = vowels.indexOf(vowel2Letter2Letter)\n\
    \                            if (vowel2Letter2LetterIndex != -1) {\n         \
    \                       val vowel2Letter2Letter2Index = vowels.indexOf(messageArray(vowel2Letter2LetterIndex\
    \ + 1))\n                                if (vowel2Letter2Letter2Index != -1)\
    \ {\n                                    val vowel2Letter2Letter2Letter = vowels.charAt(vowel2Letter2Letter2Index)\n\
    \                                    val vowel2Letter2Letter2LetterIndex = vowels.indexOf(vowel2Letter2Letter2Letter)\n\
    \                                    if (vowel2Letter2Letter2LetterIndex != -1)\
    \ {\n                                        val vowel2Letter2Letter2Letter2Index\
    \ = vowels.indexOf(messageArray(vowel2Letter2Letter2LetterIndex + 1))\n      \
    \                                  if (vowel2Letter2Letter2Letter2Index != -1)\
    \ {\n                                            val vowel2Letter2Letter2Letter2Letter\
    \ = vowels.charAt(vowel2Letter2Letter2Letter2Index)\n                        \
    \                    val vowel2Letter2Letter2Letter2LetterIndex = vowels.indexOf(vowel2Letter2Letter2Letter2Letter)\n\
    \                                            if (vowel2Letter2Letter2Letter2LetterIndex\
    \ != -1) {\n                                                val vowel2Letter2Letter2Letter2Letter2Index\
    \ = vowels.indexOf(messageArray(vowel2Letter2Letter2Letter2Index + 1))\n     \
    \                                           if (vowel2Letter2Letter2Letter2Letter2Index\
    \ != -1) {\n                                                    val vowel2Letter2Letter2Letter2Letter2Letter\
    \ = vowels.charAt(vowel2Letter2Letter2Letter2Letter2Index)\n                 \
    \                                   val vowel2Letter2Letter2Letter2Letter2LetterIndex\
    \ = vowels.indexOf(vowel2Letter2Letter2Letter2Letter2Letter)\n               \
    \                                     if (vowel2Letter2Letter2Letter2Letter2LetterIndex\
    \ != -1) {\n                                                        val vowel2",
  "        val alphabet = List(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\")\n        val vowels = List(\"a\",\"e\",\"i\",\"o\"\
    ,\"u\")\n        val newMessage = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        val newVowels = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 2))\n        newMessage.zip(newVowels).map(x => x._1 + x._2).mkString(\"\"\
    )", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map { letter =>\n            val index\
    \ = vowels.indexOf(letter)\n            if (index != -1) {\n                val\
    \ vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n   \
    \             vowels.indexOf(vowel, vowelIndex) + vowel\n            } else {\n\
    \                letter\n            }\n        }\n        val newMessageString\
    \ = newMessage.toList.reverse.mkString(\"\")\n        newMessageString", "   \
    \     val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\"){ (acc, elem) =>\n   \
    \         val index = alphabet.indexOf(elem)\n            if (index != -1) {\n\
    \                val newIndex = index + 2\n                if (newIndex < alphabet.length)\
    \ {\n                    acc += alphabet(newIndex)\n                }\n      \
    \      }\n            acc += elem\n        }\n        val vowelIndex = alphabet.indexOf(\"\
    a\")\n        val newMessageList = newMessage.split(\"\")\n        newMessageList.foldLeft(\"\
    \"){ (acc, elem) =>\n            val index = vowels.indexOf(elem)\n          \
    \  if (index != -1) {\n                val newIndex = index + vowelIndex\n   \
    \             if (newIndex < vowels.length) {\n                    acc += vowels(newIndex)\n\
    \                }\n            }\n            acc += elem\n        }", "    \
    \    val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelMap = new mutable.HashMap[String, String]()\n        val letterMap\
    \ = new mutable.HashMap[String, String]()\n        val result = new mutable.StringBuilder\n\
    \        for (letter <- message) {\n            val vowelIndex = letters.indexOf(letter)\n\
    \            if (vowelIndex != -1) {\n                val vowel = vowels(vowelIndex)\n\
    \                vowelMap(vowel) = letter\n            }\n            val letterIndex\
    \ = letters.indexOf(letter)\n            if (letterIndex != -1) {\n          \
    \      val letter = letters(letterIndex)\n                letterMap(letter) =\
    \ letter\n            }\n        }\n        for (vowel <- vowelMap) {\n      \
    \      val letter = vowelMap(vowel)\n            result.append(vowel)\n      \
    \      result.append(letter)\n        }\n        for (letter <- letterMap) {\n\
    \            val vowel = letterMap(letter)\n            result.append(vowel)\n\
    \            result.append(vowel)\n        }\n        return result.toString",
  "        val vowels = \"aeiou\"\n        val alphabet = List(\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val newMessage = message.map(letter => alphabet.indexOf(letter)\
    \ + alphabet.indexOf(vowels.charAt(alphabet.indexOf(letter)) + 1))\n        newMessage.toList.toString",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map { letter =>\n            val index = letters.indexOf(letter)\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex\
    \ != -1) letters.charAt(vowelIndex + 2)\n            else letters.charAt(index\
    \ + 2)\n        }.mkString(\"\")\n        encodedMessage", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val\
    \ newMessageArray = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = index + 1\n\
    \                val vowel = vowels(vowelIndex)\n                val newLetter\
    \ = vowel.charAt(0).toUpperCase + vowel.substring(1)\n                val newIndex\
    \ = messageArray.indexOf(newLetter)\n                if (newIndex != -1) {\n \
    \                   messageArray(newIndex) = letter\n                }\n     \
    \           else {\n                    messageArray(index)\n                }\n\
    \            }\n            else {\n                letter\n            }\n  \
    \      })\n        newMessageArray.toString.reverse", "        val vowels = \"\
    aeiouAEIOU\"\n        val messageWithVowels = message.toLowerCase.foldLeft(\"\"\
    )(\n            (x: String, y: Char) => x + y + x.charAt(x.indexOf(y) + 1))\n\
    \        val messageWithVowelsAndVowelsTwoAhead = (messageWithVowels.toUpperCase.foldLeft(\"\
    \")(\n            (x: String, y: Char) => x + y + x.charAt(x.indexOf(y) + 2)))\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead = (messageWithVowelsAndVowelsTwoAhead.toUpperCase.foldLeft(\"\
    \")(\n            (x: String, y: Char) => x + y + x.charAt(x.indexOf(y) + 3)))\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead.toUpperCase.foldLeft(\"\
    \")(\n            (x: String, y: Char) => x + y + x.charAt(x.indexOf(y) + 4)))\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead.toUpperCase.foldLeft(\"\
    \")(\n            (x: String, y: Char) => x + y + x.charAt(x.indexOf(y) + 5)))\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead.toUpperCase.foldLeft(\"\
    \")(\n            (x: String, y: Char) => x + y + x.charAt(x.indexOf(y) + 6)))\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoA",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    )( (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n        \
    \    val vowelIndex = vowels.indexOf(elem)\n            val nextIndex = index\
    \ - vowelIndex\n            if (nextIndex >= 0) {\n                acc += alphabet(nextIndex)\n\
    \            } else {\n                acc += elem\n            }\n        })\n\
    \        encodedMessage", "        val vowels = \"aeiouAEIOU\".toCharArray\n \
    \       val messageArray = message.toCharArray\n        val newMessage = new Array[Char](messageArray.length)\n\
    \        var i = 0\n        while (i < messageArray.length) {\n            val\
    \ currentChar = messageArray(i)\n            val nextChar = messageArray(i + 1)\n\
    \            val currentCharIndex = vowels.indexOf(currentChar)\n            val\
    \ nextCharIndex = vowels.indexOf(nextChar)\n            if (currentCharIndex !=\
    \ -1 && nextCharIndex != -1) {\n                val currentCharVowel = vowels(currentCharIndex)\n\
    \                val nextCharVowel = vowels(nextCharIndex)\n                if\
    \ (currentCharVowel != nextCharVowel) {\n                    newMessage(i) = vowels(nextCharIndex)\n\
    \                } else {\n                    newMessage(i) = currentChar\n \
    \               }\n                i += 2\n            } else {\n            \
    \    newMessage(i) = currentChar\n                i += 1\n            }\n    \
    \    }\n        new String(newMessage)", "        val alphabet = List(\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\")\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n        val messageList = message.split(\" \").toList\n        val encodedMessage\
    \ = messageList.foldLeft(\"\")( (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n\
    \            if (index != -1) {\n                val nextIndex = index + 2\n \
    \               if (nextIndex < alphabet.length) {\n                    acc +=\
    \ alphabet(nextIndex)\n                }\n            }\n            acc += elem\n\
    \        })\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\n \
    \       val messageArray = message.split(\"\")\n        val newMessageArray =\
    \ messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = index + 1\n\
    \                val vowel = vowels(vowelIndex)\n                val newLetter\
    \ = vowels.charAt(vowelIndex)\n                letter.replace(vowel, newLetter)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     newMessageArray.toString", "        val vowels = \"aeiouAEIOU\"\n      \
    \  val messageList = message.split(\"\")\n        val newMessageList = messageList.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessage = newMessageList.toList\n\
    \        val newMessageString = newMessage.toString\n        val newMessageStringList\
    \ = newMessageString.split(\"\")\n        val newMessageStringList2 = newMessageStringList.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString2\
    \ = newMessageStringList2.toList\n        val newMessageString3 = newMessageString2.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString4\
    \ = newMessageString3.toList\n        val newMessageString5 = newMessageString4.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString6\
    \ = newMessageString5.toList\n        val newMessageString7 = newMessageString6.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString8\
    \ = newMessageString7.toList\n        val newMessageString9 = newMessageString8.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString10\
    \ = newMessageString9.toList\n        val newMessageString11 = newMessageString10.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString12\
    \ = newMessageString11.toList\n        val newMessageString13 = newMessageString12.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString14\
    \ = newMessageString13.toList\n        val newMessageString15 = newMessageString14.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) letter else vowels(index - 2)\n        })\n        val newMessageString16\
    \ = newMessageString15.toList\n        val newMessageString17 = newMessageString16.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= ", "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels =\
    \ message.replaceAll(vowels, vowels.charAt(2))\n        val messageWithVowelsAndLetters\
    \ = messageWithVowels.replaceAll(\"[aeiou]\", \"z\")\n        val messageWithVowelsAndLettersAndLetters\
    \ = messageWithVowelsAndLetters.replaceAll(\"[aeiouAEIOU]\", \"z\")\n        val\
    \ messageWithVowelsAndLettersAndLettersAndLetters = messageWithVowelsAndLettersAndLetters.replaceAll(\"\
    [aeiouAEIOUAEIOU]\", \"z\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLetters.replaceAll(\"[aeiouAEIOUAEIOUAEIOU]\"\
    , \"z\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLetters.replaceAll(\"[aeiouAEIOUAEIOUAEIOUAEIOU]\"\
    , \"z\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiouAEIOUAEIOUAEIOUAEIOUAEIOU]\", \"z\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiouAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU]\", \"z\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiouAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU]\", \"z\")\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiouAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU", "        val vowels = Set(\"a\", \"\
    e\", \"i\", \"o\", \"u\")\n        val messageWithVowels = message.toLowerCase.foldLeft(\"\
    \"){\n            (acc, c) => acc + (if (vowels.contains(c)) c.toUpperCase else\
    \ c)\n        }\n        val messageWithVowelsAndTwoLettersBeforeVowel = messageWithVowels.foldLeft(\"\
    \"){\n            (acc, c) => acc + (if (vowels.contains(c)) c.toUpperCase else\
    \ c)\n        }\n        val messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersBeforeVowel.foldLeft(\"\"){\n            (acc,\
    \ c) => acc + (if (vowels.contains(c)) c.toUpperCase else c)\n        }\n    \
    \    val messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowel.foldLeft(\"\
    \"){\n            (acc, c) => acc + (if (vowels.contains(c)) c.toUpperCase else\
    \ c)\n        }\n        val messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.foldLeft(\"\
    \"){\n            (acc, c) => acc + (if (vowels.contains(c)) c.toUpperCase else\
    \ c)\n        }\n        val messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.foldLeft(\"\
    \"){\n            (acc, c) => acc + (if (vowels.contains(c)) c.toUpperCase else\
    \ c)\n        }\n        val messageWithVowelsAndTwoLettersBeforeVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLetters",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','a','i','o','u')\n        val newMessage = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => alphabet(i+1)\n        }).mkString\n        newMessage", "     \
    \   val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\"\
    )\n        val encodedMessage = messageArray.map { letter =>\n            val\
    \ index = vowels.indexOf(letter)\n            if (index >= 0) {\n            \
    \    val nextVowel = vowels(index + 1)\n                letter match {\n     \
    \               case \"a\" => nextVowel\n                    case \"e\" => nextVowel\n\
    \                    case \"i\" => nextVowel\n                    case \"o\" =>\
    \ nextVowel\n                    case \"u\" => nextVowel\n                   \
    \ case \"A\" => nextVowel\n                    case \"E\" => nextVowel\n     \
    \               case \"I\" => nextVowel\n                    case \"O\" => nextVowel\n\
    \                    case \"U\" => nextVowel\n                    case _ => letter\n\
    \                }\n            } else {\n                letter\n           \
    \ }\n        }.mkString(\"\")\n        encodedMessage", "        val vowels =\
    \ \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n     \
    \   val vowelsMap : Map[Char, Char] = Map(vowels -> letters.charAt(2))\n     \
    \   val lettersMap : Map[Char, Char] = Map(letters -> vowels.charAt(2))\n    \
    \    val newMessage = message\n            .map(letter => lettersMap(letter))\n\
    \            .map(letter => vowelsMap(letter))\n            .mkString\n      \
    \  newMessage", "        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n        val newMessage = message.map(letter => \n\
    \            letter match {\n                case vowel => vowel\n           \
    \     case letter => alphabet.indexOf(letter) + alphabet.indexOf(vowel)\n    \
    \        }\n        )\n        val newMessageString = newMessage.toList\n    \
    \    val newMessageStringString = newMessageString.mkString(\"\")\n        val\
    \ newMessageStringStringString = newMessageStringString.toUpperCase\n        newMessageStringStringString",
  "        val vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n\
    \        val encodedMessage = mutable.StringBuilder()\n        var i = 0\n   \
    \     while (i < messageLength) {\n            val currentChar = message.charAt(i)\n\
    \            val nextChar = message.charAt(i + 1)\n            val currentCharIndex\
    \ = vowels.indexOf(currentChar)\n            val nextCharIndex = vowels.indexOf(nextChar)\n\
    \            if (currentCharIndex != -1 && nextCharIndex != -1) {\n          \
    \      val currentCharIndex = currentCharIndex + 2\n                val nextCharIndex\
    \ = nextCharIndex + 2\n                if (currentCharIndex < messageLength &&\
    \ nextCharIndex < messageLength) {\n                    encodedMessage.append(vowels(currentCharIndex))\n\
    \                    encodedMessage.append(vowels(nextCharIndex))\n          \
    \      }\n            }\n            i += 1\n        }\n        encodedMessage.toString()",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            letter\
    \ match {\n                case 'a' => alphabet(0)\n                case 'b' =>\
    \ alphabet(1)\n                case 'c' => alphabet(2)\n                case 'd'\
    \ => alphabet(3)\n                case 'e' => alphabet(4)\n                case\
    \ 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n              \
    \  case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n        \
    \        case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n \
    \               case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage = messageArray.mkString(\"\"\
    )\n        val newMessageArray2 = newMessageArray.map(letter => \n           \
    \ letter match {\n                case 'a' => vowels(0)\n                case\
    \ 'b' => vowels(1)\n                case 'c' => vowels(2)\n                case\
    \ 'd' => vowels(3)\n                case 'e' => vowels(4)\n                case\
    \ 'f' => vowels(5)\n                case 'g' => vowels(6)\n                case\
    \ 'h' => vowels(7)\n                case 'i' => vowels(8)\n                case\
    \ 'j' => vowels(9)\n                case 'k' => vowels(10)\n                case\
    \ 'l' => vowels(11)\n                case 'm' => vowels(12)\n                case\
    \ 'n' => vowels(13)\n                case 'o' => vowels(14)\n                case\
    \ 'p' => vowels(15)\n                case 'q' => vowels(16)\n                case\
    \ 'r' => vowels(17)\n                case 's' => vowels(18)\n                case\
    \ 't' => vowels(19)\n                case 'u' => vowels(20)\n                case\
    \ 'v' => vowels(21)\n                case 'w' => vowels(22)\n                case\
    \ 'x' => vowels(23)\n                case 'y' => vowels(24)\n                case\
    \ 'z' => vowels(25)\n                case letter => letter\n            }\n  \
    \      )\n        val new", "        val vowels = \"aeiouAEIOU\".toCharArray\n\
    \        val messageArray = message.toCharArray\n        val result = new StringBuilder\n\
    \        val vowelsArray = vowels.toCharArray\n        val vowelsCount = vowels.length\n\
    \        val messageCount = messageArray.length\n        var i = 0\n        var\
    \ j = 0\n        while (i < messageCount) {\n            while (j < vowelsCount)\
    \ {\n                if (messageArray(i) == vowelsArray(j)) {\n              \
    \      result.append(vowelsArray(j + 1))\n                    j += 2\n       \
    \         }\n                j += 1\n            }\n            i += 1\n     \
    \   }\n        return result.toString()", "        val vowels = \"aeiouAEIOU\"\
    \n        val newMessage = message.map(letter => vowels.indexOf(letter) match\
    \ {\n            case -1 => letter\n            case 0 => letter\n           \
    \ case 1 => vowels.charAt(vowels.indexOf(letter) + 1)\n            case 2 => vowels.charAt(vowels.indexOf(letter)\
    \ - 1)\n            case _ => letter\n        })\n        val newMessageString\
    \ = newMessage.toList\n        newMessageString.mkString(\"\")", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n  \
    \      val encodedMessage = messageArray.map(letter => {\n            val index\
    \ = vowels.indexOf(letter)\n            if (index != -1) {\n                val\
    \ vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n   \
    \             vowels.indexOf(vowel, vowelIndex + 1)\n            } else {\n  \
    \              letter\n            }\n        }).mkString(\"\")\n        encodedMessage",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessage = messageArray.foldLeft(\"\
    \"){ (acc, letter) =>\n            val index = letters.indexOf(letter)\n     \
    \       val nextLetter = letters.charAt(index + 1)\n            val nextIndex\
    \ = letters.indexOf(nextLetter)\n            val nextLetter2 = letters.charAt(index\
    \ + 2)\n            val nextIndex2 = letters.indexOf(nextLetter2)\n          \
    \  val nextLetter3 = letters.charAt(index + 3)\n            val nextIndex3 = letters.indexOf(nextLetter3)\n\
    \            val nextLetter4 = letters.charAt(index + 4)\n            val nextIndex4\
    \ = letters.indexOf(nextLetter4)\n            val nextLetter5 = letters.charAt(index\
    \ + 5)\n            val nextIndex5 = letters.indexOf(nextLetter5)\n          \
    \  val nextLetter6 = letters.charAt(index + 6)\n            val nextIndex6 = letters.indexOf(nextLetter6)\n\
    \            val nextLetter7 = letters.charAt(index + 7)\n            val nextIndex7\
    \ = letters.indexOf(nextLetter7)\n            val nextLetter8 = letters.charAt(index\
    \ + 8)\n            val nextIndex8 = letters.indexOf(nextLetter8)\n          \
    \  val nextLetter9 = letters.charAt(index + 9)\n            val nextIndex9 = letters.indexOf(nextLetter9)\n\
    \            val nextLetter10 = letters.charAt(index + 10)\n            val nextIndex10\
    \ = letters.indexOf(nextLetter10)\n            val nextLetter11 = letters.charAt(index\
    \ + 11)\n            val nextIndex11 = letters.indexOf(nextLetter11)\n       \
    \     val nextLetter12 = letters.charAt(index + 12)\n            val nextIndex12\
    \ = letters.indexOf(nextLetter12)\n            val nextLetter13 = letters.charAt(index\
    \ + 13)\n            val nextIndex13 = letters.indexOf(nextLetter13)\n       \
    \     val nextLetter14 = letters.charAt(index + 14)\n            val nextIndex14\
    \ = letters.indexOf(nextLetter14)\n            val nextLetter15 = letters.charAt(index\
    \ + 15)\n            val nextIndex15 = letters.indexOf(nextLetter15)\n       \
    \     val nextLetter16 = letters.charAt(index + 16)\n            val nextIndex16\
    \ = letters.indexOf(nextLetter16)\n            val nextLetter17 = letters.charAt(index\
    \ + 17)\n            val nextIndex17 = letters.indexOf(nextLetter17)\n       \
    \     val nextLetter18 = letters.charAt(index + 18)\n            val nextIndex18\
    \ = letters.indexOf(nextLetter18)\n            val nextLetter19 = letters.charAt(index\
    \ + 19)\n            val nextIndex19 = letters.indexOf(", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \     val vowelsMap : Map[Char, Char] = Map(a -> \"a\", e -> \"e\", i -> \"i\"\
    , o -> \"o\", u -> \"u\")\n        val lettersMap : Map[Char, Char] = Map(a ->\
    \ \"a\", e -> \"e\", i -> \"i\", o -> \"o\", u -> \"u\", z -> \"z\")\n       \
    \ val newMessage = message.map(letter => lettersMap(letter))\n        val newMessage2\
    \ = newMessage.map(letter => vowelsMap(letter))\n        val newMessage3 = newMessage2.map(letter\
    \ => lettersMap(letter))\n        val newMessage4 = newMessage3.map(letter =>\
    \ vowelsMap(letter))\n        val newMessage5 = newMessage4.map(letter => lettersMap(letter))\n\
    \        val newMessage6 = newMessage5.map(letter => vowelsMap(letter))\n    \
    \    val newMessage7 = newMessage6.map(letter => lettersMap(letter))\n       \
    \ val newMessage8 = newMessage7.map(letter => vowelsMap(letter))\n        val\
    \ newMessage9 = newMessage8.map(letter => lettersMap(letter))\n        val newMessage10\
    \ = newMessage9.map(letter => vowelsMap(letter))\n        val newMessage11 = newMessage10.map(letter\
    \ => lettersMap(letter))\n        val newMessage12 = newMessage11.map(letter =>\
    \ vowelsMap(letter))\n        val newMessage13 = newMessage12.map(letter => lettersMap(letter))\n\
    \        val newMessage14 = newMessage13.map(letter => vowelsMap(letter))\n  \
    \      val newMessage15 = newMessage14.map(letter => lettersMap(letter))\n   \
    \     val newMessage16 = newMessage15.map(letter => vowelsMap(letter))\n     \
    \   val newMessage17 = newMessage16.map(letter => lettersMap(letter))\n      \
    \  val newMessage18 = newMessage17.map(letter => vowelsMap(letter))\n        val\
    \ newMessage19 = newMessage18.map(letter => lettersMap(letter))\n        val newMessage20\
    \ = newMessage19.map(letter => vowelsMap(letter))\n        val newMessage21 =\
    \ newMessage20.map(letter => lettersMap(letter))\n        val newMessage22 = newMessage21.map(letter\
    \ => vowelsMap(letter))\n        val newMessage23 = newMessage22.map(letter =>\
    \ lettersMap(letter))\n        val newMessage24 = newMessage23.map(letter => vowelsMap(letter))\n\
    \        val newMessage25 = newMessage24.map(letter => letters", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\")\n   \
    \     val encodedMessage = messageList.foldLeft(\"\")( (acc, elem) => {\n    \
    \        val index = vowels.indexOf(elem)\n            if (index != -1) {\n  \
    \              val nextVowel = vowels(index + 1)\n                acc + (if (index\
    \ == 0) elem.toUpperCase else elem.toLowerCase + nextVowel)\n            } else\
    \ {\n                acc + elem\n            }\n        })\n        encodedMessage",
  "        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelMap = new mutable.HashMap[String, String]()\n        vowelMap\
    \ += \"a\" -> \"A\"\n        vowelMap += \"e\" -> \"E\"\n        vowelMap += \"\
    i\" -> \"I\"\n        vowelMap += \"o\" -> \"O\"\n        vowelMap += \"u\" ->\
    \ \"U\"\n        vowelMap += \"A\" -> \"a\"\n        vowelMap += \"E\" -> \"e\"\
    \n        vowelMap += \"I\" -> \"i\"\n        vowelMap += \"O\" -> \"o\"\n   \
    \     vowelMap += \"U\" -> \"u\"\n        val messageArray = message.split(\"\"\
    )\n        val encodedMessage = messageArray.map(letter => {\n            val\
    \ vowel = vowels.find(_ == letter)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val nextVowel = vowels.indexOf(vowel, vowelIndex + 1)\n         \
    \   val nextLetter = alphabet.find(_ == nextVowel)\n            val nextLetterIndex\
    \ = alphabet.indexOf(nextLetter)\n            val nextLetterNextVowel = alphabet.indexOf(nextLetter,\
    \ nextLetterIndex + 1)\n            val nextLetterNextVowelIndex = alphabet.indexOf(nextLetterNextVowel)\n\
    \            val nextLetterNextVowelNextLetter = alphabet.indexOf(nextLetterNextVowel,\
    \ nextLetterNextVowelIndex + 1)\n            val nextLetterNextVowelNextLetterIndex\
    \ = alphabet.indexOf(nextLetterNextVowelNextLetter)\n            val nextLetterNextVowelNextLetterNextLetter\
    \ = alphabet.indexOf(nextLetterNextVowelNextLetter, nextLetterNextVowelNextLetterIndex\
    \ + 1)\n            val nextLetterNextVowelNextLetterNextLetterIndex = alphabet.indexOf(nextLetterNextVowelNextLetterNextLetter)\n\
    \            val nextLetterNextVowelNextLetterNextLetterNextLetter = alphabet.indexOf(nextLetterNextVowelNextLetterNextLetter,\
    \ nextLetterNextVowelNextLetterNextLetterIndex + 1)\n            val nextLetterNextVowelNextLetterNextLetterNextLetterIndex\
    \ = alphabet.indexOf(nextLetterNextVowelNextLetterNextLetterNextLetter)\n    \
    \        val nextLetterNextVowelNextLetterNextLetterNextLetterNextLetter = alphabet.indexOf(nextLetterNextVowelNextLetterNextLetterNextLetter,\
    \ nextLetterNextVowelNextLetterNextLetterNextLetter", "        val alphabet =\
    \ List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ){ (result, current) => {\n            val currentLetter = current.toLowerCase\n\
    \            val currentLetterIndex = alphabet.indexOf(currentLetter)\n      \
    \      val currentVowelIndex = vowels.indexOf(currentLetter)\n            val\
    \ currentVowelIndex2 = vowels.indexOf(currentLetter.charAt(currentVowelIndex +\
    \ 1))\n            val currentVowelIndex3 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 2))\n            val currentVowelIndex4 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 3))\n            val currentVowelIndex5 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 4))\n            val currentVowelIndex6 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 5))\n            val currentVowelIndex7 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 6))\n            val currentVowelIndex8 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 7))\n            val currentVowelIndex9 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 8))\n            val currentVowelIndex10 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 9))\n            val currentVowelIndex11 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 10))\n            val currentVowelIndex12 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 11))\n            val currentVowelIndex13 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 12))\n            val currentVowelIndex14 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 13))\n            val currentVowelIndex15 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 14))\n            val currentVowelIndex16 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 15))\n            val currentVowelIndex17 = vowels.indexOf(currentLetter.charAt(currentVowelIndex\
    \ + 16))\n", "        val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = alphabet.indexOf(letter)\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            val nextVowelIndex\
    \ = vowelIndex + 2\n            val nextLetter = alphabet(nextVowelIndex)\n  \
    \          alphabet(index) match {\n                case letter if index == vowelIndex\
    \ => letter\n                case letter if index == nextVowelIndex => nextLetter\n\
    \                case letter => letter\n            }\n        })\n        newMessageArray.toString.replaceAll(\"\
    \\\\s+\", \"\")", "        val vowels = \"aeiouAEIOU\"\n        val messageList\
    \ = message.split(\"\")\n        val newMessage = messageList.map(letter => \n\
    \            vowels.indexOf(letter) match {\n                case -1 => letter\n\
    \                case i => vowels(i + 2)\n            }\n        ).mkString(\"\
    \")\n        newMessage", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => {\n\
    \            if (vowels.contains(letter)) {\n                val vowelIndex =\
    \ vowels.indexOf(letter)\n                val vowel2Index = vowels.indexOf(vowels[vowelIndex\
    \ + 1])\n                vowels(vowelIndex) match {\n                    case\
    \ \"a\" => vowels(vowelIndex + 1)\n                    case \"e\" => vowels(vowelIndex\
    \ + 1)\n                    case \"i\" => vowels(vowelIndex + 1)\n           \
    \         case \"o\" => vowels(vowelIndex + 1)\n                    case \"u\"\
    \ => vowels(vowelIndex + 1)\n                    case \"A\" => vowels(vowel2Index\
    \ + 1)\n                    case \"E\" => vowels(vowel2Index + 1)\n          \
    \          case \"I\" => vowels(vowel2Index + 1)\n                    case \"\
    O\" => vowels(vowel2Index + 1)\n                    case \"U\" => vowels(vowel2Index\
    \ + 1)\n                    case \"a\" => vowels(vowel2Index + 1)\n          \
    \          case \"e\" => vowels(vowel2Index + 1)\n                    case \"\
    i\" => vowels(vowel2Index + 1)\n                    case \"o\" => vowels(vowel2Index\
    \ + 1)\n                    case \"u\" => vowels(vowel2Index + 1)\n          \
    \          case \"A\" => vowels(vowelIndex + 1)\n                    case \"E\"\
    \ => vowels(vowelIndex + 1)\n                    case \"I\" => vowels(vowelIndex\
    \ + 1)\n                    case \"O\" => vowels(vowelIndex + 1)\n           \
    \         case \"U\" => vowels(vowelIndex + 1)\n                    case \"a\"\
    \ => vowels(vowelIndex + 1)\n                    case \"e\" => vowels(vowelIndex\
    \ + 1)\n                    case \"i\" => vowels(vowelIndex + 1)\n           \
    \         case \"o\" => vowels(vowelIndex + 1)\n                    case \"u\"\
    \ => vowels(vowelIndex + 1)\n                    case \"A\" => vowels(vowel2Index\
    \ + 1)\n                    case \"E\" => vowels(vowel2Index + 1)\n          \
    \          case \"I\" => vowels(vowel2Index + 1)\n                    case \"\
    O\" => vowels(vowel2Index + 1)\n                    case \"U\" => vowels(vowel2Index\
    \ + 1)\n                    case \"a\" => vowels(vowel2Index + 1)\n          \
    \          case \"e\" => vowels(vowel2Index + 1)\n                    case \"\
    i\" => vowels(vowel2Index + 1)\n                    case \"o\" => vowels(vowel2Index\
    \ + 1)\n                    case \"u\" => vowels(vowel2Index + 1)\n          \
    \          case \"A\" => vowels(vowelIndex + 1)\n                    case \"E\"\
    \ => vowels(vowelIndex + 1)\n                    case \"I\" => vowels(vowelIndex\
    \ + 1)\n                    case \"", "        val vowels = \"aeiouAEIOU\"\n \
    \       val messageArray = message.split(\"\")\n        val newMessageArray =\
    \ messageArray.map(letter => \n            letter match {\n                case\
    \ vowel => vowels.indexOf(vowel) + 2\n                case _ => vowels.indexOf(letter)\
    \ + 2\n            }\n        )\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessageArray.map(letter => \n         \
    \   letter match {\n                case vowel => vowels.indexOf(vowel) + 2\n\
    \                case _ => vowels.indexOf(letter) + 2\n            }\n       \
    \ )\n        val newMessage2 = newMessageArray2.toList.mkString(\"\")\n      \
    \  val newMessageArray3 = newMessage2.split(\"\").map(letter => \n           \
    \ letter match {\n                case vowel => vowels.indexOf(vowel) + 2\n  \
    \              case _ => vowels.indexOf(letter) + 2\n            }\n        )\n\
    \        val newMessage3 = newMessageArray3.toList.mkString(\"\")\n        val\
    \ newMessageArray4 = newMessage3.split(\"\").map(letter => \n            letter\
    \ match {\n                case vowel => vowels.indexOf(vowel) + 2\n         \
    \       case _ => vowels.indexOf(letter) + 2\n            }\n        )\n     \
    \   val newMessage4 = newMessageArray4.toList.mkString(\"\")\n        val newMessageArray5\
    \ = newMessage4.split(\"\").map(letter => \n            letter match {\n     \
    \           case vowel => vowels.indexOf(vowel) + 2\n                case _ =>\
    \ vowels.indexOf(letter) + 2\n            }\n        )\n        val newMessage5\
    \ = newMessageArray5.toList.mkString(\"\")\n        val newMessageArray6 = newMessage5.split(\"\
    \").map(letter => \n            letter match {\n                case vowel =>\
    \ vowels.indexOf(vowel) + 2\n                case _ => vowels.indexOf(letter)\
    \ + 2\n            }\n        )\n        val newMessage6 = newMessageArray6.toList.mkString(\"\
    \")\n        val newMessageArray7 = newMessage6.split(\"\").map(letter => \n \
    \           letter match {\n                case vowel => vowels.indexOf(vowel)\
    \ + 2\n                case _ => vowels.indexOf(letter) + 2\n            }\n \
    \       )\n        val newMessage7 = newMessageArray7.toList.mkString(\"\")\n\
    \        val newMessageArray8 = newMessage7.split(\"\").map(letter => \n     \
    \       letter match {\n                case vowel => vowels.indexOf(vowel) +\
    \ 2\n                case _ => vowels.indexOf(letter) + 2\n            }\n   \
    \     )\n        val newMessage8 = newMessageArray8.toList.mkString(\"\")\n  \
    \      val newMessageArray9 = newMessage8.split(\"\").map(", "        val vowels\
    \ = \"aeiou\"\n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            if (vowels.contains(letter)) {\n\
    \                val vowelIndex = vowels.indexOf(letter)\n                val\
    \ vowel2Index = vowels.indexOf(vowels[vowelIndex + 1])\n                val newLetter\
    \ = vowels(vowelIndex + 1) + vowels(vowel2Index + 1)\n                println(s\"\
    vowelIndex: $vowelIndex, $vowel2Index, $letter, $newLetter\")\n              \
    \  newLetter\n            } else {\n                letter\n            }\n  \
    \      })\n        val newMessage = newMessageArray.toList\n        newMessage.toString.replace(\"\
    ,\", \"\")", "        val vowels = \"aeiouAEIOU\"\n        val messageArray =\
    \ message.split(\"\")\n        val newMessageArray = messageArray.map(letter =>\
    \ {\n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0) + letter.charAt(1)\n\
    \                vowels(vowelIndex) = newLetter\n                vowels(index)\
    \ = newLetter\n                newLetter\n            } else {\n             \
    \   letter\n            }\n        })\n        newMessageArray.toString.replaceAll(\"\
    [aeiouAEIOU]\", \"$0\")", "        val vowels = \"aeiouAEIOU\"\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 1)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 2)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 3)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 4)))\n        val newMessageString = newMessage.toList.toString\n        newMessageString.replaceAll(\"\
    ,\", \"\")", "        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageWithVowels\
    \ = message.toLowerCase.map(letter => vowels.contains(letter) ? letter : alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        val messageWithVowelsAndVowelsTwoAheadOfVowel = messageWithVowels.map(letter\
    \ => vowels.contains(letter) ? letter : alphabet(alphabet.indexOf(letter) + 2))\n\
    \        messageWithVowelsAndVowelsTwoAheadOfVowel", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.foldLeft(\"\
    \"){ (result, current) =>\n            val index = alphabet.indexOf(current)\n\
    \            val vowelIndex = vowels.indexOf(current)\n            if (index !=\
    \ -1 && vowelIndex != -1) {\n                val newIndex = index + vowelIndex\n\
    \                val newChar = alphabet(newIndex)\n                result + newChar\n\
    \            } else {\n                result + current\n            }\n     \
    \   }\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\n       \
    \ val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val result = new StringBuilder\n\
    \        for(i <- 0 until message.length){\n            val letter = message.charAt(i)\n\
    \            val vowelIndex = letters.indexOf(letter)\n            val vowel =\
    \ vowels(vowelIndex)\n            val nextLetter = letters.indexOf(letter, vowelIndex\
    \ + 1)\n            val nextVowel = vowels(nextLetter)\n            result.append(vowel)\n\
    \            result.append(nextVowel)\n        }\n        return result.toString()",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => vowels.indexOf(letter) match {\n            case -1 =>\
    \ letter\n            case 0 => alphabet(alphabet.indexOf(letter) + 1)\n     \
    \       case 1 => alphabet(alphabet.indexOf(letter) + 2)\n            case _ =>\
    \ letter\n        })\n        newMessage.toString", "        val vowels = \"aeiouAEIOU\"\
    .toCharArray\n        val messageArray = message.toCharArray\n        val result\
    \ = new StringBuilder\n        for(i <- 0 until messageArray.length){\n      \
    \      val currentChar = messageArray(i)\n            val nextChar = messageArray(i+1)\n\
    \            if(vowels(i) == currentChar){\n                val nextCharIndex\
    \ = vowels.indexOf(nextChar)\n                if(nextCharIndex != -1){\n     \
    \               result.append(vowels(nextCharIndex+1))\n                }\n  \
    \          }\n            result.append(currentChar)\n        }\n        return\
    \ result.toString", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\"\
    )\n        val messageArray = message.toCharArray\n        val newMessage = messageArray.map\
    \ { c =>\n            val index = vowels.indexOf(c)\n            if (index !=\
    \ -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels.contains(c) ? vowel : c\n     \
    \       } else {\n                c\n            }\n        }\n        new String(newMessage)",
  "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageLength = message.length\n        val encodedMessage = mutable.Buffer.empty[String]\n\
    \        val vowelsCount = message.count(vowels)\n        val lettersCount = message.count(letters)\n\
    \        val vowelsPosition = vowels.indexOf(message.charAt(0))\n        val lettersPosition\
    \ = letters.indexOf(message.charAt(messageLength - 1))\n        val vowelsPosition2\
    \ = vowels.indexOf(message.charAt(messageLength - 2))\n        val lettersPosition2\
    \ = letters.indexOf(message.charAt(messageLength - 3))\n        val vowelsPosition3\
    \ = vowels.indexOf(message.charAt(messageLength - 4))\n        val lettersPosition3\
    \ = letters.indexOf(message.charAt(messageLength - 5))\n        val vowelsPosition4\
    \ = vowels.indexOf(message.charAt(messageLength - 6))\n        val lettersPosition4\
    \ = letters.indexOf(message.charAt(messageLength - 7))\n        val vowelsPosition5\
    \ = vowels.indexOf(message.charAt(messageLength - 8))\n        val lettersPosition5\
    \ = letters.indexOf(message.charAt(messageLength - 9))\n        val vowelsPosition6\
    \ = vowels.indexOf(message.charAt(messageLength - 10))\n        val lettersPosition6\
    \ = letters.indexOf(message.charAt(messageLength - 11))\n        val vowelsPosition7\
    \ = vowels.indexOf(message.charAt(messageLength - 12))\n        val lettersPosition7\
    \ = letters.indexOf(message.charAt(messageLength - 13))\n        val vowelsPosition8\
    \ = vowels.indexOf(message.charAt(messageLength - 14))\n        val lettersPosition8\
    \ = letters.indexOf(message.charAt(messageLength - 15))\n        val vowelsPosition9\
    \ = vowels.indexOf(message.charAt(messageLength - 16))\n        val lettersPosition9\
    \ = letters.indexOf(message.charAt(messageLength - 17))\n        val vowelsPosition10\
    \ = vowels.indexOf(message.charAt(messageLength - 18))\n        val lettersPosition10\
    \ = letters.indexOf(message.charAt(messageLength - 19))\n        val vowelsPosition11\
    \ = vowels.indexOf(message.charAt(messageLength - 20))\n        val lettersPosition11\
    \ = letters.indexOf(message.charAt(messageLength - 21))\n        val vowelsPosition12\
    \ = vowels.indexOf(message.charAt(messageLength - 22))\n        val lettersPosition12\
    \ = letters.indexOf(message.charAt(messageLength - 23))\n        val vowelsPosition13\
    \ = vowels.indexOf(message.charAt(messageLength - 24))\n        val lettersPosition13\
    \ = letters.indexOf(message.charAt(messageLength - 25))\n        val vowelsPosition14\
    \ = vowels.indexOf(message.charAt(messageLength - 26))\n        val lettersPosition14\
    \ = letters.indexOf(message.charAt(", "        val vowels = \"aeiouAEIOU\"\n \
    \       val messageArray = message.split(\"\")\n        val newMessageArray =\
    \ messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if(index != -1){\n                val vowelIndex = index - 2\n  \
    \              val vowel = vowels(vowelIndex)\n                val replacement\
    \ = vowels(vowelIndex + 1)\n                letter.replace(vowel, replacement)\n\
    \            }\n            else{\n                letter\n            }\n   \
    \     })\n        newMessageArray.toString()", "        val vowels = Set(\"a\"\
    , \"e\", \"i\", \"o\", \"u\")\n        val alphabet = Set(\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\")\n        val messageWithVowels = message.map(letter => vowels.contains(letter)\
    \ ? letter : alphabet.find(letter => letter != letter + letter))\n        val\
    \ messageWithVowelsAndTwoLettersAfterVowel = messageWithVowels.map(letter => letter\
    \ + letter)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowel.map(letter => letter + letter)\n\
    \        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(letter\
    \ => letter + letter)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(letter\
    \ => letter + letter)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel.map(letter\
    \ => letter + letter)\n        val messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowel\
    \ = messageWithVowelsAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAndTwoLettersAfterVowelAnd",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0).toUpperCase + vowel.substring(1)\n\
    \                val newIndex = vowels.indexOf(newLetter)\n                if\
    \ (newIndex != -1) {\n                    newLetter\n                } else {\n\
    \                    letter\n                }\n            } else {\n       \
    \         letter\n            }\n        })\n        newMessageArray.toString.toUpperCase",
  "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageWithVowels\
    \ = message.toLowerCase.foldLeft(\"\") { (result, letter) =>\n            val\
    \ index = vowels.indexOf(letter)\n            if (index >= 0) {\n            \
    \    val vowel = vowels(index)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val newLetter = vowels(vowelIndex + 2)\n                result\
    \ + newLetter\n            } else {\n                result + letter\n       \
    \     }\n        }\n        val messageWithVowelsArray = messageWithVowels.toCharArray\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArray.length\n  \
    \      val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n \
    \       val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithVowelsArrayLength - 1\n\
    \        val messageWithVowelsArrayLength = messageWithV", "        val vowels\
    \ = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessage = new Array[Char](messageArray.length)\n        val vowelsArray\
    \ = vowels.toCharArray\n        var i = 0\n        while (i < messageArray.length)\
    \ {\n            val currentChar = messageArray(i)\n            val nextChar =\
    \ messageArray(i + 1)\n            if (vowelsArray.contains(currentChar)) {\n\
    \                newMessage(i) = vowelsArray(vowelsArray.indexOf(currentChar)\
    \ + 1)\n                newMessage(i + 1) = currentChar\n            } else {\n\
    \                newMessage(i) = currentChar\n                newMessage(i + 1)\
    \ = vowelsArray(vowelsArray.indexOf(nextChar) + 1)\n            }\n          \
    \  i += 1\n        }\n        new String(newMessage)", "        val vowels = \"\
    aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val\
    \ messageArray = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            if (vowels.contains(letter)) {\n                val vowelIndex\
    \ = letters.indexOf(letter)\n                val vowel2Index = vowelIndex + 2\n\
    \                letters(vowel2Index) \n            } else {\n               \
    \ letter\n            }\n        }).mkString(\"\")\n        encodedMessage", " \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val result = new StringBuilder\n        var i = 0\n        while (i <\
    \ messageArray.length) {\n            val currentChar = messageArray(i)\n    \
    \        val nextChar = messageArray(i + 1)\n            val currentCharIndex\
    \ = vowels.indexOf(currentChar)\n            val nextCharIndex = vowels.indexOf(nextChar)\n\
    \            if (currentCharIndex < 0 || nextCharIndex < 0 || currentCharIndex\
    \ > nextCharIndex) {\n                result.append((currentChar))\n         \
    \   } else {\n                val currentCharVowel = vowels(currentCharIndex)\n\
    \                val nextCharVowel = vowels(nextCharIndex)\n                val\
    \ currentCharIndex = vowels.indexOf(currentCharVowel)\n                val nextCharIndex\
    \ = vowels.indexOf(nextCharVowel)\n                if (currentCharIndex < 0 ||\
    \ nextCharIndex < 0 || currentCharIndex > nextCharIndex) {\n                 \
    \   result.append((currentChar))\n                } else {\n                 \
    \   val currentCharVowel = vowels(currentCharIndex)\n                    val nextCharVowel\
    \ = vowels(nextCharIndex)\n                    val currentCharIndex = vowels.indexOf(currentCharVowel)\n\
    \                    val nextCharIndex = vowels.indexOf(nextCharVowel)\n     \
    \               if (currentCharIndex < 0 || nextCharIndex < 0 || currentCharIndex\
    \ > nextCharIndex) {\n                        result.append((currentChar))\n \
    \                   } else {\n                        val currentCharVowel = vowels(currentCharIndex)\n\
    \                        val nextCharVowel = vowels(nextCharIndex)\n         \
    \               val currentCharIndex = vowels.indexOf(currentCharVowel)\n    \
    \                    val nextCharIndex = vowels.indexOf(nextCharVowel)\n     \
    \                   if (currentCharIndex < 0 || nextCharIndex < 0 || currentCharIndex\
    \ > nextCharIndex) {\n                            result.append((currentChar))\n\
    \                        } else {\n                            val currentCharVowel\
    \ = vowels(currentCharIndex)\n                            val nextCharVowel =\
    \ vowels(nextCharIndex)\n                            val currentCharIndex = vowels.indexOf(currentCharVowel)\n\
    \                            val nextCharIndex = vowels.indexOf(nextCharVowel)\n\
    \                            if (currentCharIndex < 0 || nextCharIndex < 0 ||\
    \ currentCharIndex > nextCharIndex) {\n                                result.append((currentChar))\n\
    \                            } else {\n                                val currentCharVowel\
    \ = vowels(currentCharIndex)\n                                val nextCharVowel\
    \ = vowels(nextCharIndex)\n                                val currentCharIndex\
    \ = vowels.indexOf(currentCharVowel)\n                                val nextCharIndex\
    \ = vowels.indexOf(nextChar", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\") { (acc,\
    \ elem) => \n            val index = alphabet.indexOf(elem)\n            val nextIndex\
    \ = index + 2\n            val nextChar = alphabet(nextIndex)\n            acc\
    \ + (if (vowels.contains(elem)) nextChar else elem)\n        }\n        newMessage",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val\
    \ newVowels2 = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 2))\n\
    \        val newVowels3 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 3))\n        val newVowels4 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 4))\n        val newVowels5 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 5))\n        val newVowels6 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 6))\n        val newVowels7 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 7))\n        val newVowels8 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 8))\n        val newVowels9 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 9))\n        val newVowels10 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 10))\n        val newVowels11 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 11))\n        val newVowels12 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 12))\n        val newVowels13 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 13))\n        val newVowels14 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 14))\n        val newVowels15 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 15))\n        val newVowels16 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 16))\n        val newVowels17 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 17))\n        val newVowels18 = vowels.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 18))\n        val newVowels19 = vowels.map(letter ", "        val vowels =\
    \ \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val\
    \ newMessageArray = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ + vowels.indexOf(letter) + 1)\n        val newMessage = messageArray.join(\"\
    \")\n        val newMessageArray2 = newMessage.split(\"\")\n        newMessageArray2.map(letter\
    \ => \n            vowels.indexOf(letter) + vowels.indexOf(letter) + 1).mkString(\"\
    \")", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)))\n\
    \        val messageWithVowelsAndVowelsTwoAheadOfVowel = messageWithVowels.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1))\n        val messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelTwoAheadOfVowel\
    \ = messageWithVowelsAndVowelsTwoAheadOfVowel.map(letter => vowels.indexOf(letter)\
    \ + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter) + 1) +\
    \ alphabet(vowels.indexOf(letter) + 2))\n        val messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowel\
    \ = messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelTwoAheadOfVowel.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1) + alphabet(vowels.indexOf(letter) + 2) + alphabet(vowels.indexOf(letter)\
    \ + 3))\n        val messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowel\
    \ = messageWithVowelsAndVowelsTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowelAndVowelTwoAheadOfVowel.map(letter\
    \ => vowels.indexOf(letter) + alphabet(vowels.indexOf(letter)) + alphabet(vowels.indexOf(letter)\
    \ + 1) + alphabet(vowels.indexOf(letter) + 2) + alphabet(vowels.indexOf(letter)\
    \ + 3) + alphabet(vowels.indexOf(letter) + 4))\n        val messageWithVowelsAndVowelsTwoAheadOfVowel",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = mutable.StringBuilder()\n\
    \        val vowelsCount = mutable.Map[Char,Int]()\n        val messageLength\
    \ = message.length\n        for(i <- 0 until messageLength){\n            val\
    \ currentChar = message.charAt(i)\n            val currentCharIndex = alphabet.indexOf(currentChar)\n\
    \            val currentCharNext = alphabet.indexOf(message.charAt(i+1))\n   \
    \         val currentCharNextIndex = alphabet.indexOf(message.charAt(i+2))\n \
    \           val currentCharNextNext = alphabet.indexOf(message.charAt(i+3))\n\
    \            val currentCharNextNextIndex = alphabet.indexOf(message.charAt(i+4))\n\
    \            val currentCharNextNextNext = alphabet.indexOf(message.charAt(i+5))\n\
    \            val currentCharNextNextNextIndex = alphabet.indexOf(message.charAt(i+6))\n\
    \            val currentCharNextNextNextNext = alphabet.indexOf(message.charAt(i+7))\n\
    \            val currentCharNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+8))\n\
    \            val currentCharNextNextNextNextNext = alphabet.indexOf(message.charAt(i+9))\n\
    \            val currentCharNextNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+10))\n\
    \            val currentCharNextNextNextNextNextNext = alphabet.indexOf(message.charAt(i+11))\n\
    \            val currentCharNextNextNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+12))\n\
    \            val currentCharNextNextNextNextNextNextNext = alphabet.indexOf(message.charAt(i+13))\n\
    \            val currentCharNextNextNextNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+14))\n\
    \            val currentCharNextNextNextNextNextNextNextNext = alphabet.indexOf(message.charAt(i+15))\n\
    \            val currentCharNextNextNextNextNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+16))\n\
    \            val currentCharNextNextNextNextNextNextNextNext = alphabet.indexOf(message.charAt(i+17))\n\
    \            val currentCharNextNextNextNextNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+18))\n\
    \            val currentCharNextNextNextNextNextNextNextNextNext = alphabet.indexOf(message.charAt(i+19))\n\
    \            val currentCharNextNextNextNextNextNextNextNextIndex = alphabet.indexOf(message.charAt(i+20))\n\
    \            ", "        val vowels = \"aeiou\"\n        val messageWithVowels\
    \ = message.toLowerCase.foldLeft(\"\")( (acc, c) => acc + (if (vowels.contains(c))\
    \ c.toUpperCase else c))\n        val messageWithVowelsAndVowelsTwoAhead = messageWithVowels.foldLeft(\"\
    \")( (acc, c) => acc + (if (vowels.contains(c)) c.toUpperCase else c))\n     \
    \   val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                if (vowelIndex < vowels.length)\n\
    \                    vowels(vowelIndex) = vowels(index)\n                else\n\
    \                    vowels(vowelIndex) = letter\n            }\n            else\n\
    \                letter\n        })\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString\n        val newMessageStringArray\
    \ = newMessageString.split(\"\")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength",
  "        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels(vowelIndex) = letter\n        \
    \        vowel\n            } else {\n                letter\n            }\n\
    \        })\n        newMessageArray.toString.replace(\"[\", \"\").replace(\"\
    ]\", \"\")", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n  \
    \      val alphabet = Set(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val messageList\
    \ = message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\")(\
    \ (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n         \
    \   val newElem = if (index > 0) alphabet(index - 1) else elem\n            acc\
    \ + newElem\n        })\n        val newMessageList = newMessage.split(\"\")\n\
    \        val newVowels = vowels.map(elem => elem.toLowerCase)\n        val newVowelsSet\
    \ = Set(newVowels.toList)\n        val newVowelsSetList = newVowelsSet.toList\n\
    \        val newVowelsSetListWithIndex = newVowelsSetList.zipWithIndex\n     \
    \   val newVowelsSetListWithIndexSorted = newVowelsSetListWithIndex.sortBy(_._2)\n\
    \        val newVowelsSetListWithIndexSortedWithIndex = newVowelsSetListWithIndexSorted.map(elem\
    \ => elem._1 + elem._2)\n        val newVowelsSetListWithIndexSortedWithIndexSorted\
    \ = newVowelsSetListWithIndexSortedWithIndex.sortBy(_._1)\n        val newVowelsSetListWithIndexSortedWithIndexSortedWithIndex\
    \ = newVowelsSetListWithIndexSortedWithIndexSorted.map(elem => elem._1 + elem._2\
    \ + elem._3)\n        val newVowelsSetListWithIndexSortedWithIndexSortedWithIndexSorted\
    \ = newVowelsSetListWithIndexSortedWithIndexSortedWithIndex.sortBy(_._1)\n   \
    \     newVowelsSetListWithIndexSortedWithIndexSortedWithIndexSorted.foldLeft(\"\
    \")( (acc, elem) => {\n            val index = alphabet.indexOf(elem)\n      \
    \      val newElem = if (index > 0) alphabet(index - 1) else elem\n          \
    \  acc + newElem\n        })", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageArray = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => \n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index) else letter)\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageStringArray = newMessageString.split(\"\")\n\
    \        val newMessageStringArrayLength = newMessageStringArray.length\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageArray\
    \ = message.split(\"\")\n        val messageArrayLength = messageArray.length\n\
    \        val newMessageArray = Array.fill(messageArrayLength)(\"\")\n        val\
    \ newMessageArrayLength = newMessageArray.length\n        val newMessageArrayIndex\
    \ = 0\n        val newMessageArrayIndexLength = 0\n        val newMessageArrayIndexLength2\
    \ = newMessageArrayIndexLength\n        val newMessageArrayIndexLength3 = newMessageArrayIndexLength2\n\
    \        val newMessageArrayIndexLength4 = newMessageArrayIndexLength3\n     \
    \   val newMessageArrayIndexLength5 = newMessageArrayIndexLength4\n        val\
    \ newMessageArrayIndexLength6 = newMessageArrayIndexLength5\n        val newMessageArrayIndexLength7\
    \ = newMessageArrayIndexLength6\n        val newMessageArrayIndexLength8 = newMessageArrayIndexLength7\n\
    \        val newMessageArrayIndexLength9 = newMessageArrayIndexLength8\n     \
    \   val newMessageArrayIndexLength10 = newMessageArrayIndexLength9\n        val\
    \ newMessageArrayIndexLength11 = newMessageArrayIndexLength10\n        val newMessageArrayIndexLength12\
    \ = newMessageArrayIndexLength11\n        val newMessageArrayIndexLength13 = newMessageArrayIndexLength12\n\
    \        val newMessageArrayIndexLength14 = newMessageArrayIndexLength13\n   \
    \     val newMessageArrayIndexLength15 = newMessageArrayIndexLength14\n      \
    \  val newMessageArrayIndexLength16 = newMessageArrayIndexLength15\n        val\
    \ newMessageArrayIndexLength17 = newMessageArrayIndexLength16\n        val newMessageArrayIndexLength18\
    \ = newMessageArrayIndexLength17\n        val newMessageArrayIndexLength19 = newMessageArrayIndexLength18\n\
    \        val newMessageArrayIndexLength20 = newMessageArrayIndexLength19\n   \
    \     val newMessageArrayIndexLength21 = newMessageArrayIndexLength20\n      \
    \  val newMessageArrayIndexLength22 = newMessageArrayIndexLength21\n        val\
    \ newMessageArrayIndexLength23 = newMessageArrayIndexLength22\n        val newMessageArrayIndexLength24\
    \ = newMessageArrayIndexLength23\n        val newMessageArrayIndexLength25 = newMessageArrayIndexLength24\n\
    \        val newMessageArrayIndexLength26 = newMessageArrayIndexLength25\n   \
    \     val newMessageArrayIndexLength27 = newMessageArrayIndexLength26\n      \
    \  val newMessageArrayIndexLength28 = newMessageArrayIndexLength27\n        val\
    \ newMessageArrayIndexLength29 = newMessageArrayIndexLength28\n        val newMessage",
  "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \ \").toList\n        val messageList2 = messageList.map(x => x.toLowerCase)\n\
    \        val messageList3 = messageList2.map(x => x.replaceAll(vowels, \"X\"))\n\
    \        val messageList4 = messageList3.map(x => x.replaceAll(alphabet, x =>\
    \ alphabet.indexOf(x) + 2))\n        val messageList5 = messageList4.map(x =>\
    \ x.replaceAll(\"X\", \"a\"))\n        messageList5.mkString(\"\")", "       \
    \ val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\")\n\
    \        val newMessageList = messageList.map(letter => \n            letter match\
    \ {\n                case vowel => vowels.indexOf(letter) + 2\n              \
    \  case letter => vowels.indexOf(letter)\n            })\n        val newMessage\
    \ = newMessageList.toList\n        val newMessageString = newMessage.toString.toUpperCase\n\
    \        val newMessageStringList = newMessageString.split(\" \")\n        val\
    \ newMessageStringList2 = newMessageStringList.map(word => \n            word\
    \ match {\n                case letter => vowels.indexOf(letter) + 2\n       \
    \         case letter => vowels.indexOf(letter)\n            })\n        val newMessageString2\
    \ = newMessageStringList2.toList\n        val newMessageString3 = newMessageString2.toString.toUpperCase\n\
    \        val newMessageString4 = newMessageString3.split(\" \")\n        val newMessageString5\
    \ = newMessageString4.map(word => \n            word match {\n               \
    \ case letter => vowels.indexOf(letter) + 2\n                case letter => vowels.indexOf(letter)\n\
    \            })\n        val newMessageString6 = newMessageString5.toList\n  \
    \      val newMessageString7 = newMessageString6.toString.toUpperCase\n      \
    \  val newMessageString8 = newMessageString7.split(\" \")\n        val newMessageString9\
    \ = newMessageString8.map(word => \n            word match {\n               \
    \ case letter => vowels.indexOf(letter) + 2\n                case letter => vowels.indexOf(letter)\n\
    \            })\n        val newMessageString10 = newMessageString9.toList\n \
    \       val newMessageString11 = newMessageString10.toString.toUpperCase\n   \
    \     val newMessageString12 = newMessageString11.split(\" \")\n        val newMessageString13\
    \ = newMessageString12.map(word => \n            word match {\n              \
    \  case letter => vowels.indexOf(letter) + 2\n                case letter => vowels.indexOf(letter)\n\
    \            })\n        val newMessageString14 = newMessageString13.toList\n\
    \        val newMessageString15 = newMessageString14.toString.toUpperCase\n  \
    \      val newMessageString16 = newMessageString15.split(\" \")\n        val newMessageString17\
    \ = newMessageString16.map(word => \n            word match {\n              \
    \  case letter => vowels.indexOf(letter) + 2\n                case letter => vowels.indexOf(letter)\n\
    \            })\n        val newMessageString18 = newMessageString17.toList\n\
    \        val newMessageString19 = newMessageString18.toString.toUpperCase\n  \
    \      val newMessageString20 = newMessageString19.split(\" \")\n        val newMessageString21\
    \ = newMessageString20.map(word => \n            word match {\n", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = mutable.StringBuilder()\n        val vowelCount = message.count(vowels)\n\
    \        val letterCount = message.count(letters)\n        val newVowelCount =\
    \ vowelCount - message.count(vowels.toCharArray)\n        val newLetterCount =\
    \ letterCount - message.count(letters.toCharArray)\n        val newVowels = vowels.toCharArray\n\
    \        val newLetters = letters.toCharArray\n        val newVowelsCount = newVowels.size\
    \ - newVowelCount\n        val newLettersCount = newLetters.size - newLetterCount\n\
    \        val newVowelsArray = newVowels.slice(1, newVowelsCount)\n        val\
    \ newLettersArray = newLetters.slice(1, newLettersCount)\n        val newVowelsArrayLength\
    \ = newVowelsArray.length\n        val newLettersArrayLength = newLettersArray.length\n\
    \        val newVowelsArrayLength = newVowelsArrayLength - 1\n        val newLettersArrayLength\
    \ = newLettersArrayLength - 1\n        val newVowelsArrayLength = newVowelsArrayLength\
    \ - 1\n        val newLettersArrayLength = newLettersArrayLength - 1\n       \
    \ val newVowelsArrayLength = newVowelsArrayLength - 1\n        val newLettersArrayLength\
    \ = newLettersArrayLength - 1\n        val newVowelsArrayLength = newVowelsArrayLength\
    \ - 1\n        val newLettersArrayLength = newLettersArrayLength - 1\n       \
    \ val newVowelsArrayLength = newVowelsArrayLength - 1\n        val newLettersArrayLength\
    \ = newLettersArrayLength - 1\n        val newVowelsArrayLength = newVowelsArrayLength\
    \ - 1\n        val newLettersArrayLength = newLettersArrayLength - 1\n       \
    \ val newVowelsArrayLength = newVowelsArrayLength - 1\n        val newLettersArrayLength\
    \ = newLettersArrayLength - 1\n        val newVowelsArrayLength = newVowelsArrayLength\
    \ - 1\n        val newLettersArrayLength = newLettersArrayLength - 1\n       \
    \ val newVowelsArrayLength = newVowelsArrayLength - 1\n        val newLettersArrayLength\
    \ = newLettersArrayLength - 1\n        val newVow", "        val vowels = Set(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val messageArray = message.split(\"\"\
    )\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     vowels(index)\n            } else {\n                letter\n          \
    \  }\n        })\n        val newMessage = messageArray.toList.mkString(\"\")\n\
    \        newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','i','o','u')\n        val messageList = message.split(\"\
    \ \").toList\n        var newMessage = \"\"\n        for(i <- 0 until messageList.length){\n\
    \            val currentChar = messageList(i)\n            val currentCharIndex\
    \ = alphabet.indexOf(currentChar)\n            val currentCharVowelIndex = vowels.indexOf(currentChar)\n\
    \            val newChar = if(currentCharIndex < currentCharVowelIndex) alphabet(currentCharIndex\
    \ + 2) else alphabet(currentCharIndex + 1)\n            newMessage += newChar\n\
    \        }\n        return newMessage", "        val vowels = \"aeiouAEIOU\"\n\
    \        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val vowelsMap =\
    \ new mutable.HashMap[String, String]()\n        val lettersMap = new mutable.HashMap[String,\
    \ String]()\n        val newMessage = message.map(letter => {\n            if\
    \ (vowels.contains(letter)) {\n                vowelsMap(letter) = lettersMap(lettersMap(letter)\
    \ + letter)\n            } else {\n                lettersMap(letter) = lettersMap(letter)\
    \ + letter\n            }\n        })\n        newMessage.toString", "       \
    \ val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.foldLeft(\"\"){\
    \ (result, currentChar) =>\n            val index = alphabet.indexOf(currentChar)\n\
    \            val nextIndex = index + 2\n            val nextChar = alphabet(nextIndex)\n\
    \            val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(nextChar)\n            val nextCharIndex\
    \ = nextCharIndex + 2\n            val nextChar = alphabet(nextCharIndex)\n  \
    \          val nextCharIndex = alphabet.indexOf(next", "        val vowels = \"\
    aeiouAEIOU\"\n        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversed = messageWithVowels.reverse\n  \
    \      val messageWithVowelsReversedWithVowelsReplaced = messageWithVowelsReversed.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplaced.reverse\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowel",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map { letter =>\n            val\
    \ index = vowels.indexOf(letter)\n            if (index >= 0) {\n            \
    \    val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0) + letter.charAt(1)\n        \
    \        vowels(vowelIndex) = newLetter\n                newLetter\n         \
    \   } else {\n                letter\n            }\n        }\n        val newMessage\
    \ = newMessageArray.toArray\n        val newMessageString = newMessage.join\n\
    \        newMessageString", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageWithVowels = message.map(letter => vowels.indexOf(letter) + letter)\n\
    \        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.map(letter\
    \ => vowels.indexOf(letter) + letter)\n        val messageWithVowelsAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersAfter.map(letter => vowels.indexOf(letter) +\
    \ letter)\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLetters",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0) + letter.charAt(1)\n        \
    \        vowels(vowelIndex) = newLetter\n                newLetter\n         \
    \   } else {\n                letter\n            }\n        })\n        newMessageArray.toString()",
  "        val vowels = \"aeiou\"\n        val messageArray = message.split(\"\")\n\
    \        val encodedMessage = messageArray.map(letter => \n            letter\
    \ match {\n                case vowel => vowel\n                case letter =>\
    \ vowels.indexOf(letter) + vowels.indexOf(vowel) + 1 \n            }\n       \
    \ ).mkString(\"\")\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversed = messageWithVowels.reverse\n  \
    \      val messageWithVowelsReversedWithVowelsReplaced = messageWithVowelsReversed.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplaced.reverse\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowel",
  "        val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = alphabet.indexOf(letter)\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex\
    \ != -1) {\n                val vowel = vowels(vowelIndex)\n                val\
    \ vowelIndex = vowels.indexOf(vowel)\n                val nextVowel = alphabet(vowelIndex\
    \ + 2)\n                alphabet(index) match {\n                    case vowel\
    \ => nextVowel\n                    case letter => letter\n                }\n\
    \            } else {\n                alphabet(index)\n            }\n      \
    \  })\n        newMessageArray.toString.replace(\"[\", \"\")\n            .replace(\"\
    ]\", \"\")", "        val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.foldLeft(\"\") {\n            (acc,\
    \ c) => acc + (if (vowels.contains(c)) c.toUpperCase() else c.toLowerCase())\n\
    \        }\n        val vowelsCount = messageList.count(vowels.contains)\n   \
    \     val vowelsIndex = messageList.zipWithIndex.filter(_._2 == vowelsCount).map(_._1).last\n\
    \        val vowelsIndex = vowelsIndex.toString.toInt\n        val vowelsIndex\
    \ = vowelsIndex + 1\n        val encodedMessage = encodedMessage.replace(vowels,\
    \ vowels.charAt(vowelsIndex))\n        encodedMessage", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\"){ (acc,\
    \ elem) => \n            val index = alphabet.indexOf(elem)\n            val nextIndex\
    \ = index + 1\n            val nextElem = alphabet(nextIndex)\n            val\
    \ nextVowel = vowels(index)\n            acc + (if (index > 0) nextVowel else\
    \ elem) + nextElem\n        }\n        newMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = index + 1\n\
    \                val vowel = vowels(vowelIndex)\n                val newLetter\
    \ = vowel.charAt(0)\n                val newIndex = vowels.indexOf(newLetter)\n\
    \                if (newIndex != -1) {\n                    newLetter -> vowel.charAt(newIndex)\n\
    \                } else {\n                    letter -> vowel.charAt(0)\n   \
    \             }\n            } else {\n                letter -> letter\n    \
    \        }\n        })\n        val newMessage = newMessageArray.toList\n    \
    \    newMessage.foldLeft(\"\")( (acc, elem) => acc + (elem._1 + elem._2))", " \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if(index != -1){\n             \
    \   val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0) + letter.charAt(1)\n        \
    \        vowels(vowelIndex) = newLetter\n                newLetter\n         \
    \   }\n            else{\n                letter\n            }\n        })\n\
    \        newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\", \"$0\")", "   \
    \     val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) + letter)\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.map(letter => vowels.indexOf(letter) + letter + letter)\n\
    \        val messageWithVowelsAndTwoLettersBeforeAndVowelsReplaced = messageWithVowelsAndTwoLettersBefore\n\
    \            .map(letter => vowels.indexOf(letter) + letter + letter)\n      \
    \      .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + letter)\n            .map(letter => vowels.indexOf(letter)\
    \ + letter)\n            .map(letter => vowels.indexOf(letter) + letter)\n   \
    \         .map(letter => vowels.indexOf(letter) + letter)\n            .map(letter\
    \ => vowels.indexOf(letter) + ", "        val vowels = \"aeiouAEIOU\"\n      \
    \  val messageArray = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                vowels.indexOf(vowel, vowelIndex + 1)\n\
    \            } else {\n                letter\n            }\n        })\n   \
    \     val newMessage = newMessageArray.toList\n        newMessage.mkString(\"\"\
    )", "        val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageList = message.split(\"\")\n        val encodedMessage =\
    \ messageList.foldLeft(\"\") { (result, letter) =>\n            val index = letters.indexOf(letter)\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex\
    \ != -1) {\n                val vowel = vowels(vowelIndex)\n                val\
    \ vowelIndex = vowels.indexOf(vowel)\n                val vowelIndex = vowelIndex\
    \ + 2\n                val vowel = vowels(vowelIndex)\n                result\
    \ + vowel + letters(index)\n            } else {\n                result + letter\n\
    \            }\n        }\n        encodedMessage", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageList = message.split(\"\")\n        val newMessage = messageList.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowel = vowels(index + 1)\n                val\
    \ vowelIndex = vowels.indexOf(vowel)\n                val newLetter = vowels(vowelIndex\
    \ + 2)\n                vowels(vowelIndex) = newLetter\n                vowels(vowelIndex\
    \ + 1) = newLetter\n                vowels(vowelIndex + 2) = vowel\n         \
    \   }\n            letter\n        }).mkString(\"\")\n        newMessage", " \
    \       val vowels = \"aeiou\"\n        val messageList = message.split(\" \"\
    ).toList\n        val newMessage = messageList.foldLeft(\"\"){ (acc, elem) =>\n\
    \            val firstVowel = elem.indexOf(vowels(0))\n            val secondVowel\
    \ = elem.indexOf(vowels(1))\n            val firstLetter = elem.charAt(firstVowel)\n\
    \            val secondLetter = elem.charAt(secondVowel)\n            val firstLetterIndex\
    \ = vowels.indexOf(firstLetter)\n            val secondLetterIndex = vowels.indexOf(secondLetter)\n\
    \            val firstLetterIndex = elem.indexOf(firstLetter)\n            val\
    \ secondLetterIndex = elem.indexOf(secondLetter)\n            val firstVowelIndex\
    \ = elem.indexOf(vowels(0))\n            val secondVowelIndex = elem.indexOf(vowels(1))\n\
    \            val firstVowelIndex = elem.indexOf(vowels(0))\n            val secondVowelIndex\
    \ = elem.indexOf(vowels(1))\n            val firstLetterIndex = elem.indexOf(firstLetter)\n\
    \            val secondLetterIndex = elem.indexOf(secondLetter)\n            val\
    \ firstVowelIndex = elem.indexOf(vowels(0))\n            val secondVowelIndex\
    \ = elem.indexOf(vowels(1))\n            val firstVowelIndex = elem.indexOf(vowels(0))\n\
    \            val secondVowelIndex = elem.indexOf(vowels(1))\n            val firstVowelIndex\
    \ = elem.indexOf(vowels(0))\n            val secondVowelIndex = elem.indexOf(vowels(1))\n\
    \            val firstVowelIndex = elem.indexOf(vowels(0))\n            val secondVowelIndex\
    \ = elem.indexOf(vowels(1))\n            val firstVowelIndex = elem.indexOf(vowels(0))\n\
    \            val secondVowelIndex = elem.indexOf(vowels(1))\n            val firstVowelIndex\
    \ = elem.indexOf(vowels(0))\n            val secondVowelIndex = elem.indexOf(vowels(1))\n\
    \            val firstVowelIndex = elem.indexOf(vowels(0))\n            val secondVowelIndex\
    \ = elem.indexOf(vowels(1))\n            val firstVowelIndex = elem.indexOf(vowels(0))\n\
    \            val secondVowelIndex = elem.indexOf(vowels(1))\n            val firstVowelIndex\
    \ = elem.indexOf(vowels(0))\n            val secondVowelIndex = elem.indexOf(vowels(1))\n\
    \            val firstVowelIndex = elem.indexOf(vowels(0))\n            val secondVowelIndex\
    \ = elem.indexOf(vowels(1))\n            val firstVowelIndex = elem.indexOf(vowels(0))\n\
    \            val secondVowelIndex = elem.indexOf(vowels(1))\n            val firstVowelIndex\
    \ = elem.indexOf(vowels(0))\n            val secondVow", "        val alphabet\
    \ = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage ++ newVowels",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0).toUpperCase + vowel.substring(1)\n\
    \                val newIndex = messageArray.indexOf(newLetter)\n            \
    \    if (newIndex != -1) {\n                    messageArray(newIndex) = letter\n\
    \                }\n                else {\n                    messageArray(index)\
    \ = letter\n                }\n            }\n            else {\n           \
    \     messageArray(letter)\n            }\n        })\n        newMessageArray.toString.mkString(\"\
    \")", "        val vowels = \"aeiou\"\n        val messageWithVowels = message.toLowerCase.foldLeft(\"\
    \"){ (result, letter) =>\n            val index = vowels.indexOf(letter)\n   \
    \         if (index >= 0) {\n                val vowel = vowels(index)\n     \
    \           val vowelIndex = vowels.indexOf(vowel)\n                val vowel2Index\
    \ = vowels.indexOf(vowel, index + 1)\n                if (vowelIndex >= 0) {\n\
    \                    result + vowel\n                } else if (vowel2Index >=\
    \ 0) {\n                    result + vowels(vowel2Index) + vowel\n           \
    \     } else {\n                    result + vowel\n                }\n      \
    \      } else {\n                result\n            }\n        }\n        val\
    \ messageWithVowelsAnd2LettersBefore = messageWithVowels.foldLeft(\"\"){ (result,\
    \ letter) =>\n            val index = vowels.indexOf(letter)\n            if (index\
    \ >= 0) {\n                val vowel = vowels(index)\n                val vowelIndex\
    \ = vowels.indexOf(vowel, index + 1)\n                val vowel2Index = vowels.indexOf(vowel,\
    \ index + 2)\n                if (vowelIndex >= 0) {\n                    result\
    \ + vowel\n                } else if (vowel2Index >= 0) {\n                  \
    \  result + vowels(vowel2Index) + vowel\n                } else {\n          \
    \          result + vowel\n                }\n            } else {\n         \
    \       result\n            }\n        }\n        val messageWithVowelsAnd3LettersBefore\
    \ = messageWithVowelsAnd2LettersBefore.foldLeft(\"\"){ (result, letter) =>\n \
    \           val index = vowels.indexOf(letter)\n            if (index >= 0) {\n\
    \                val vowel = vowels(index)\n                val vowelIndex = vowels.indexOf(vowel,\
    \ index + 1)\n                val vowel2Index = vowels.indexOf(vowel, index +\
    \ 2)\n                val vowel3Index = vowels.indexOf(vowel, index + 3)\n   \
    \             if (vowelIndex >= 0) {\n                    result + vowel\n   \
    \             } else if (vowel2Index >= 0) {\n                    result + vowels(vowel2Index)\
    \ + vowel\n                } else if (vowel3Index >= 0) {\n                  \
    \  result + vowels(vowel3Index) + vowel\n                } else {\n          \
    \          result + vowel\n                }\n            } else {\n         \
    \       result\n            }\n        }\n        val messageWithVowelsAnd4LettersBefore\
    \ = messageWithVowelsAnd3LettersBefore.foldLeft(\"\"){ (result, letter) =>\n \
    \           val index = vowels.indexOf(letter)\n            if (index >= 0) {\n\
    \                val vowel = vowels(index)\n                val vowelIndex = vowels.indexOf(vowel,\
    \ index + 1)\n                val vowel2Index = vowels.indexOf(vowel, index +\
    \ 2)\n                val vowel3Index = vowels.indexOf(vowel, index + 3)", " \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowels.indexOf(vowel)\n            } else {\n               \
    \ letter\n            }\n        }).mkString(\"\")\n        encodedMessage", " \
    \       val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => \n            vowels.contains(letter) ? letter : \n            vowels.find(vowel\
    \ => vowel.equals(messageArray(vowels.indexOf(vowel) + 1))) \n            .getOrElse(letter))\n\
    \        encodedMessage.toString.reverse", "        val vowels = \"aeiouAEIOU\"\
    \n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.Buffer.empty[String]\n\
    \        val messageArray = message.split(\"\")\n        val vowelArray = vowels.split(\"\
    \")\n        val letterArray = letters.split(\"\")\n        val currentLetter\
    \ = messageArray(0)\n        val currentVowel = vowelArray(0)\n        val currentLetterIndex\
    \ = letterArray.indexOf(currentLetter)\n        val currentVowelIndex = vowelArray.indexOf(currentVowel)\n\
    \        val currentVowelIndex2 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 1)\n        val currentVowelIndex3 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 2)\n        val currentVowelIndex4 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 3)\n        val currentVowelIndex5 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 4)\n        val currentVowelIndex6 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 5)\n        val currentVowelIndex7 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 6)\n        val currentVowelIndex8 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 7)\n        val currentVowelIndex9 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 8)\n        val currentVowelIndex10 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 9)\n        val currentVowelIndex11 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 10)\n        val currentVowelIndex12 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 11)\n        val currentVowelIndex13 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 12)\n        val currentVowelIndex14 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 13)\n        val currentVowelIndex15 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 14)\n        val currentVowelIndex16 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 15)\n        val currentVowelIndex17 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 16)\n        val currentVowelIndex18 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 17)\n        val currentVowelIndex19 = vowelArray.indexOf(currentVowel, currentLetterIndex\
    \ + 18)\n        val current", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageWithVowels = message.map(letter => vowels.indexOf(letter) + letter)\n\
    \        val messageWithVowelsReversed = messageWithVowels.reverse\n        val\
    \ messageWithVowelsReversedWithVowelsReplaced = messageWithVowelsReversed.map(letter\
    \ => vowels.indexOf(letter) + letter)\n        val messageWithVowelsReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplaced.reverse\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ + letter)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithV",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map { letter =>\n            val\
    \ index = vowels.indexOf(letter)\n            if (index >= 0) letter else vowels((index\
    \ + 1) % vowels.length)\n        }.mkString(\"\")\n        encodedMessage", " \
    \       val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val letters\
    \ = List(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    )\n        val newMessage = message.map(letter => letters.find(letter => letter\
    \ != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter => vowels.contains(letter)).getOrElse(letter))\n\
    \        val newMessage2 = newMessage.map(letter => letters.find(letter => letter\
    \ != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter => vowels.contains(letter)).getOrElse(letter))\n\
    \        val newMessage3 = newMessage2.map(letter => letters.find(letter => letter\
    \ != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter => vowels.contains(letter)).getOrElse(letter))\n\
    \        val newMessage4 = newMessage3.map(letter => letters.find(letter => letter\
    \ != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter => vowels.contains(letter)).getOrElse(letter))\n\
    \        val newMessage5 = newMessage4.map(letter => letters.find(letter => letter\
    \ != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter => vowels.contains(letter)).getOrElse(letter))\n\
    \        val newMessage6 = newMessage5.map(letter => letters.find(letter => letter\
    \ != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter => vowels.contains(letter)).getOrElse(letter))\n\
    \        val newMessage7 = newMessage6.map(letter => letters.find(letter => letter\
    \ != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter => vowels.contains(letter)).getOrElse(letter))\n\
    \        val newMessage8 = newMessage7.map(letter => letters.find(letter => letter\
    \ != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter => vowels.contains(letter)).getOrElse(letter))\n\
    \        val newMessage9 = newMessage8.map(letter => letters.find(letter => letter\
    \ != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter => vowels.contains(letter)).getOrElse(letter))\n\
    \        val newMessage10 = newMessage9.map(letter => letters.find(letter => letter\
    \ != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter => vowels.contains(letter)).getOrElse(letter))\n\
    \        val newMessage11 = newMessage10.map(letter => letters.find(letter =>\
    \ letter != letter.toLowerCase).map(letter => letter.toLowerCase).find(letter\
    \ => vowels.contains(letter)).getOrElse", "        val vowels = \"aeiou\"\n  \
    \      val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map { letter\
    \ =>\n            val index = alphabet.indexOf(letter)\n            val vowelIndex\
    \ = vowels.indexOf(letter)\n            val nextLetter = alphabet(index + 1)\n\
    \            if (vowelIndex != -1) {\n                alphabet(vowelIndex) = nextLetter\n\
    \            }\n            else {\n                alphabet(index) = nextLetter\n\
    \            }\n        }\n        encodedMessage.toString.reverse", "       \
    \ val vowels = \"aeiouAEIOU\".toList\n        val messageList = message.split(\"\
    \")\n        val newMessageList = messageList.map(letter => \n            vowels.map(vowel\
    \ => \n                if (vowel == letter) vowel \n                else vowel.charAt(vowel.indexOf(letter)\
    \ + 2))\n            .toList.flatten)\n        val newMessage = \n           \
    \ newMessageList.map(letter => \n                letter.foldLeft(\"\")(_ + _))\n\
    \        newMessage.toString", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageLength = message.length\n        val encodedMessage = mutable.StringBuilder()\n\
    \        var i = 0\n        while (i < messageLength) {\n            val currentChar\
    \ = message.charAt(i)\n            val nextChar = message.charAt(i + 1)\n    \
    \        val currentCharIndex = vowels.indexOf(currentChar)\n            val nextCharIndex\
    \ = vowels.indexOf(nextChar)\n            if (currentCharIndex != -1 && nextCharIndex\
    \ != -1) {\n                val currentCharIndex = currentCharIndex + 1\n    \
    \            val nextCharIndex = nextCharIndex + 1\n                val currentChar\
    \ = vowels(currentCharIndex)\n                val nextChar = vowels(nextCharIndex)\n\
    \                encodedMessage.append(currentChar)\n                encodedMessage.append(nextChar)\n\
    \                i += 2\n            } else {\n                encodedMessage.append(currentChar)\n\
    \                i += 1\n            }\n        }\n        encodedMessage.toString()",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(letter - 2)\n            }\n        ).mkString(\"\
    \")\n        newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageWithVowels\
    \ = message.replaceAll(\"[aeiou]\", vowels)\n        val messageWithVowelsAndLetters\
    \ = messageWithVowels.replaceAll(\"[aeiou]\", alphabet)\n        val messageWithVowelsAndLettersAndLetters\
    \ = messageWithVowelsAndLetters.replaceAll(\"[aeiou]\", alphabet)\n        val\
    \ messageWithVowelsAndLettersAndLettersAndLetters = messageWithVowelsAndLettersAndLetters.replaceAll(\"\
    [aeiou]\", alphabet)\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLetters.replaceAll(\"[aeiou]\", alphabet)\n\
    \        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLetters.replaceAll(\"[aeiou]\"\
    , alphabet)\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiou]\", alphabet)\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiou]\", alphabet)\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiou]\", alphabet)\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters.replaceAll(\"\
    [aeiou]\", alphabet)\n        val messageWithVowelsAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLettersAndLetters\
    \ = messageWithVowel", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.foldLeft(\"\"){ (result, letter)\
    \ =>\n            val index = alphabet.indexOf(letter)\n            val vowelIndex\
    \ = vowels.indexOf(letter)\n            val nextVowelIndex = vowelIndex + 2\n\
    \            val nextLetter = alphabet(nextVowelIndex)\n            val nextVowel\
    \ = vowels(nextVowelIndex)\n            val nextLetterIndex = alphabet.indexOf(nextLetter)\n\
    \            val nextVowelIndex = vowels.indexOf(nextVowel)\n            val nextLetterIndex\
    \ = alphabet.indexOf(nextLetter)\n            val nextVowelIndex = vowels.indexOf(nextVowel)\n\
    \            val nextLetter = alphabet(nextLetterIndex)\n            val nextVowel\
    \ = vowels(nextVowelIndex)\n            val nextLetterIndex = alphabet.indexOf(nextLetter)\n\
    \            val nextVowelIndex = vowels.indexOf(nextVowel)\n            val nextLetter\
    \ = alphabet(nextLetterIndex)\n            val nextVowel = vowels(nextVowelIndex)\n\
    \            val nextLetterIndex = alphabet.indexOf(nextLetter)\n            val\
    \ nextVowelIndex = vowels.indexOf(nextVowel)\n            val nextLetter = alphabet(nextLetterIndex)\n\
    \            val nextVowel = vowels(nextVowelIndex)\n            val nextLetterIndex\
    \ = alphabet.indexOf(nextLetter)\n            val nextVowelIndex = vowels.indexOf(nextVowel)\n\
    \            val nextLetter = alphabet(nextLetterIndex)\n            val nextVowel\
    \ = vowels(nextVowelIndex)\n            val nextLetterIndex = alphabet.indexOf(nextLetter)\n\
    \            val nextVowelIndex = vowels.indexOf(nextVowel)\n            val nextLetter\
    \ = alphabet(nextLetterIndex)\n            val nextVowel = vowels(nextVowelIndex)\n\
    \            val nextLetterIndex = alphabet.indexOf(nextLetter)\n            val\
    \ nextVowelIndex = vowels.indexOf(nextVowel)\n            val nextLetter = alphabet(nextLetterIndex)\n\
    \            val nextVowel = vowels(nextVowelIndex)\n", "        val vowels =\
    \ \"aeiouAEIOU\"\n        val newMessage = message.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter\n     \
    \       case 1 => vowels(letter - 1) + vowels(letter - 2)\n            case 2\
    \ => vowels(letter - 1) + vowels(letter - 2)\n            case _ => letter\n \
    \       })\n        newMessage.toString", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageList = message.split(\" \")\n        var newMessage = \"\"\
    \n        for(i <- 0 until messageList.length){\n            val currentChar =\
    \ messageList(i)\n            val currentCharList = currentChar.toList\n     \
    \       val newCharList = currentCharList.map(x => if (vowels.contains(x)) x.toUpperCase()\
    \ else x)\n            val newChar = newCharList.mkString(\"\")\n            newMessage\
    \ += newChar\n        }\n        return newMessage", "        val vowels = \"\
    aeiouAEIOU\"\n        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndVowelsBefore\
    \ = messageWithVowels.map(letter => vowels.indexOf(letter) + 1).map(letter =>\
    \ vowels(letter))\n        val messageWithVowelsAndVowelsBeforeAndVowelsBefore\
    \ = messageWithVowelsAndVowelsBefore.map(letter => vowels.indexOf(letter) + 1).map(letter\
    \ => vowels(letter))\n        val messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels(letter))\n        val messageWithVowelsAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBeforeAndVowelsBefore\
    \ = messageWithVowelsAnd", "        val vowels = Set(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        val alphabet = Set(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val\
    \ messageList = message.split(\" \").toList\n        val encodedMessage = messageList.foldLeft(\"\
    \")( (acc, elem) => {\n            val letter = elem.toUpperCase\n           \
    \ val vowelIndex = alphabet.indexOf(letter)\n            val vowel = vowels(vowelIndex)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val nextVowel\
    \ = alphabet(vowelIndex + 2)\n            acc += vowel + nextVowel\n        })\n\
    \        encodedMessage", "        val vowels = \"aeiouAEIOU\"\n        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => letters.charAt(i + 2)\n        })\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowels\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) match {\n \
    \           case -1 => letter\n            case i => letters.charAt(i - 2)\n \
    \       })\n        val messageWithVowelsReversedWithVowelsReversed = messageWithVowelsReversedWithVowels.reverse\n\
    \        messageWithVowelsReversedWithVowelsReversed.map(letter => letters.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => letters.charAt(i\
    \ + 2)\n        }).mkString", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ messageLength = message.length\n        val encodedMessage = mutable.StringBuilder()\n\
    \        var i = 0\n        while (i < messageLength) {\n            val currentChar\
    \ = message.charAt(i)\n            val nextChar = message.charAt(i + 1)\n    \
    \        val nextCharIndex = vowels.indexOf(nextChar)\n            if (nextCharIndex\
    \ != -1) {\n                val currentCharIndex = vowels.indexOf(currentChar)\n\
    \                val nextCharIndex = vowels.indexOf(nextChar)\n              \
    \  val nextCharIndex2 = vowels.indexOf(nextChar, nextCharIndex + 1)\n        \
    \        val currentCharIndex2 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 1)\n                val nextCharIndex3 = vowels.indexOf(nextChar, nextCharIndex2\
    \ + 1)\n                val currentCharIndex3 = vowels.indexOf(currentChar, currentCharIndex2\
    \ + 1)\n                val nextCharIndex4 = vowels.indexOf(nextChar, nextCharIndex3\
    \ + 1)\n                val currentCharIndex4 = vowels.indexOf(currentChar, currentCharIndex3\
    \ + 1)\n                val nextCharIndex5 = vowels.indexOf(nextChar, nextCharIndex4\
    \ + 1)\n                val currentCharIndex5 = vowels.indexOf(currentChar, currentCharIndex4\
    \ + 1)\n                val nextCharIndex6 = vowels.indexOf(nextChar, nextCharIndex5\
    \ + 1)\n                val currentCharIndex6 = vowels.indexOf(currentChar, currentCharIndex5\
    \ + 1)\n                val nextCharIndex7 = vowels.indexOf(nextChar, nextCharIndex6\
    \ + 1)\n                val currentCharIndex7 = vowels.indexOf(currentChar, currentCharIndex6\
    \ + 1)\n                val nextCharIndex8 = vowels.indexOf(nextChar, nextCharIndex7\
    \ + 1)\n                val currentCharIndex8 = vowels.indexOf(currentChar, currentCharIndex7\
    \ + 1)\n                val nextCharIndex9 = vowels.indexOf(nextChar, nextCharIndex8\
    \ + 1)\n                val currentCharIndex9 = vowels.indexOf(currentChar, currentCharIndex8\
    \ + 1)\n                val nextCharIndex10 = vowels.indexOf(nextChar, nextCharIndex9\
    \ + 1)\n                val currentCharIndex10 = vowels.indexOf(currentChar, currentCharIndex9\
    \ + 1)\n                val nextCharIndex11 = vowels.indexOf(nextChar, nextCharIndex10\
    \ + 1)\n                val currentCharIndex11 = vowels.indexOf(currentChar, currentCharIndex10\
    \ + 1)\n                val nextCharIndex12 = vowels.indexOf(nextChar, nextCharIndex11\
    \ + 1)\n                val currentCharIndex12 = vowels.indexOf(currentChar, currentCharIndex11\
    \ + 1)\n                val nextCharIndex13 = vowels.indexOf(nextChar, nextCharIndex12\
    \ + 1)", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val nextLetter = vowels(index + 1)\n                val newLetter = if (letter\
    \ != nextLetter) letter else nextLetter\n                (newLetter, letter)\n\
    \            } else {\n                (letter, letter)\n            }\n     \
    \   })\n        val newMessage = newMessageArray.toList\n        val newMessageString\
    \ = newMessage.toString.replaceAll(\"[aeiou]\", \"$0\")\n        newMessageString.replaceAll(\"\
    [AEIOU]\", \"$0\")", "        val vowels = \"aeiouAEIOU\"\n        val messageLength\
    \ = message.length\n        val encodedMessage = mutable.Buffer.empty[Char]\n\
    \        val vowelsCount = message.count(vowels)\n        val vowelsIndex = 0\n\
    \        val vowelsIndex2 = vowelsIndex + 1\n        val vowelsIndex3 = vowelsIndex2\
    \ + 1\n        val vowelsIndex4 = vowelsIndex3 + 1\n        val vowelsIndex5 =\
    \ vowelsIndex4 + 1\n        val vowelsIndex6 = vowelsIndex5 + 1\n        val vowelsIndex7\
    \ = vowelsIndex6 + 1\n        val vowelsIndex8 = vowelsIndex7 + 1\n        val\
    \ vowelsIndex9 = vowelsIndex8 + 1\n        val vowelsIndex10 = vowelsIndex9 +\
    \ 1\n        val vowelsIndex11 = vowelsIndex10 + 1\n        val vowelsIndex12\
    \ = vowelsIndex11 + 1\n        val vowelsIndex13 = vowelsIndex12 + 1\n       \
    \ val vowelsIndex14 = vowelsIndex13 + 1\n        val vowelsIndex15 = vowelsIndex14\
    \ + 1\n        val vowelsIndex16 = vowelsIndex15 + 1\n        val vowelsIndex17\
    \ = vowelsIndex16 + 1\n        val vowelsIndex18 = vowelsIndex17 + 1\n       \
    \ val vowelsIndex19 = vowelsIndex18 + 1\n        val vowelsIndex20 = vowelsIndex19\
    \ + 1\n        val vowelsIndex21 = vowelsIndex20 + 1\n        val vowelsIndex22\
    \ = vowelsIndex21 + 1\n        val vowelsIndex23 = vowelsIndex22 + 1\n       \
    \ val vowelsIndex24 = vowelsIndex23 + 1\n        val vowelsIndex25 = vowelsIndex24\
    \ + 1\n        val vowelsIndex26 = vowelsIndex25 + 1\n        val vowelsIndex27\
    \ = vowelsIndex26 + 1\n        val vowelsIndex28 = vowelsIndex27 + 1\n       \
    \ val vowelsIndex29 = vowelsIndex28 + 1\n        val vowelsIndex30 = vowelsIndex29\
    \ + 1\n        val vowelsIndex31 = vowelsIndex30 + 1\n        val vowelsIndex32\
    \ = vowelsIndex31 + 1\n        val vowelsIndex33 = vowelsIndex32 + 1\n       \
    \ val vowelsIndex34 = vowelsIndex33 + 1\n        val vowelsIndex35 = vowelsIndex34\
    \ + 1\n        val vowelsIndex36 = vowelsIndex35 + 1\n        val vowelsIndex37\
    \ = vowelsIndex36 + 1\n        val vowelsIndex38", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = index + 1\n\
    \                val vowel = vowels(vowelIndex)\n                vowels(vowelIndex)\
    \ = letter\n                vowel\n            } else {\n                letter\n\
    \            }\n        })\n        val newMessage = newMessageArray.toList\n\
    \        newMessage.toString.reverse.mkString(\"\")", "        val vowels = \"\
    aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index >= 0) {\n                val vowelIndex = index + 1\n \
    \               val vowel = vowels(vowelIndex)\n                vowel.charAt(0).toUpperCase\
    \ + vowel.substring(1)\n            } else {\n                letter\n       \
    \     }\n        })\n        newMessageArray.toString.reverse.mkString(\"\")",
  "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsAndTwoLettersBefore\
    \ = messageWithVowels.map(letter => letter + letter)\n        val messageWithVowelsAndTwoLettersBeforeAndVowelsReplaced\
    \ = messageWithVowelsAndTwoLettersBefore\n            .map(letter => vowels.indexOf(letter)\
    \ + 1)\n            .map(letter => vowels.indexOf(letter) + 1)\n            .map(letter\
    \ => vowels.indexOf(letter) + 1)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter + letter)\n            .map(letter => letter\
    \ + letter)\n            .map(letter => letter + letter)\n            .map(letter\
    \ => letter + letter)\n            .map(letter => letter + letter)\n         \
    \   .map(letter => letter + letter)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter + letter)\n            .map(letter => letter\
    \ + letter)\n            .map(letter => letter + letter)\n            .map(letter\
    \ => letter + letter)\n            .map(letter => letter + letter)\n         \
    \   .map(letter => letter + letter)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter + letter)\n            .map(letter => letter\
    \ + letter)\n            .map(letter => letter + letter)\n            .map(letter\
    \ => letter + letter)\n            .map(letter => letter + letter)\n         \
    \   .map(letter => letter + letter)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter + letter)\n            .map(letter => letter\
    \ + letter)\n            .map(letter => letter + letter)\n            .map(letter\
    \ => letter + letter)\n            .map(letter => letter + letter)\n         \
    \   .map(letter => letter + letter)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter + letter)\n            .map(letter => letter\
    \ + letter)\n            .map(letter => letter + letter)\n            .map(letter\
    \ => letter + letter)\n            .map(letter => letter + letter)\n         \
    \   .map(letter => letter + letter)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter + letter)\n            .map(letter => letter\
    \ + letter)\n            .map(letter => letter + letter)\n            .map(letter\
    \ => letter + letter)\n            .map(letter => letter + letter)\n         \
    \   .map(letter => letter + letter)\n            .map(letter => letter + letter)\n\
    \            .map(letter => letter", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newMessage2\
    \ = message.map(letter => vowels(vowels.indexOf(letter) + 1))\n        val newMessage3\
    \ = message.map(letter => vowels(vowels.indexOf(letter) + 2))\n        val newMessage4\
    \ = message.map(letter => alphabet(alphabet.indexOf(letter) + 2))\n        val\
    \ newMessage5 = message.map(letter => alphabet(alphabet.indexOf(letter) + 3))\n\
    \        val newMessage6 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 4))\n        val newMessage7 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 5))\n        val newMessage8 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 6))\n        val newMessage9 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 7))\n        val newMessage10 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 8))\n        val newMessage11 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 9))\n        val newMessage12 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 10))\n        val newMessage13 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 11))\n        val newMessage14 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 12))\n        val newMessage15 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 13))\n        val newMessage16 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 14))\n        val newMessage17 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 15))\n        val newMessage18 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 16))\n        val newMessage19 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 17))\n        val newMessage20 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 18))\n        val newMessage21 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 19))\n        val newMessage22 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 20))\n        val newMessage23 = message.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 21))\n        val newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => \n            letter match {\n                case 'a'\
    \ => alphabet(0)\n                case 'b' => alphabet(1)\n                case\
    \ 'c' => alphabet(2)\n                case 'd' => alphabet(3)\n              \
    \  case 'e' => alphabet(4)\n                case 'f' => alphabet(5)\n        \
    \        case 'g' => alphabet(6)\n                case 'h' => alphabet(7)\n  \
    \              case 'i' => alphabet(8)\n                case 'j' => alphabet(9)\n\
    \                case 'k' => alphabet(10)\n                case 'l' => alphabet(11)\n\
    \                case 'm' => alphabet(12)\n                case 'n' => alphabet(13)\n\
    \                case 'o' => alphabet(14)\n                case 'p' => alphabet(15)\n\
    \                case 'q' => alphabet(16)\n                case 'r' => alphabet(17)\n\
    \                case 's' => alphabet(18)\n                case 't' => alphabet(19)\n\
    \                case 'u' => alphabet(20)\n                case 'v' => alphabet(21)\n\
    \                case 'w' => alphabet(22)\n                case 'x' => alphabet(23)\n\
    \                case 'y' => alphabet(24)\n                case 'z' => alphabet(25)\n\
    \                case letter => letter\n            }\n        )\n        val\
    \ newMessage2 = newMessage.map(letter => \n            letter match {\n      \
    \          case 'a' => vowels(0)\n                case 'b' => vowels(1)\n    \
    \            case 'c' => vowels(2)\n                case 'd' => vowels(3)\n  \
    \              case 'e' => vowels(4)\n                case 'f' => vowels(5)\n\
    \                case 'g' => vowels(6)\n                case 'h' => vowels(7)\n\
    \                case 'i' => vowels(8)\n                case 'j' => vowels(9)\n\
    \                case 'k' => vowels(10)\n                case 'l' => vowels(11)\n\
    \                case 'm' => vowels(12)\n                case 'n' => vowels(13)\n\
    \                case 'o' => vowels(14)\n                case 'p' => vowels(15)\n\
    \                case 'q' => vowels(16)\n                case 'r' => vowels(17)\n\
    \                case 's' => vowels(18)\n                case 't' => vowels(19)\n\
    \                case 'u' => vowels(20)\n                case 'v' => vowels(21)\n\
    \                case 'w' => vowels(22)\n                case 'x' => vowels(23)\n\
    \                case 'y' => vowels(24)\n                case 'z' => vowels(25)\n\
    \                case letter => letter\n            }\n        )\n        newMessage2.zip(newMessage).map(x\
    \ => x._1 + x._2)", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map(letter\
    \ => {\n            val index = vowels.indexOf(letter)\n            if (index\
    \ != -1) {\n                val vowelIndex = index + 1\n                val vowel\
    \ = vowels(vowelIndex)\n                val newLetter = vowel.charAt(0).toUpperCase\
    \ + vowel.substring(1)\n                val newIndex = vowels.indexOf(newLetter)\n\
    \                if (newIndex != -1) {\n                    newLetter -> vowels(newIndex)\n\
    \                } else {\n                    letter -> vowel\n             \
    \   }\n            } else {\n                letter -> letter\n            }\n\
    \        })\n        newMessageArray.toList.mkString(\"\")", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageList = message.split(\"\")\n        val\
    \ newMessage = messageList.foldLeft(\"\")( (acc, elem) => {\n            val vowelIndex\
    \ = vowels.indexOf(elem)\n            if(vowelIndex != -1){\n                val\
    \ vowel = vowels(vowelIndex)\n                val vowelIndex = vowels.indexOf(vowel,\
    \ vowelIndex + 1)\n                if(vowelIndex != -1){\n                   \
    \ acc + (vowel + vowels(vowelIndex))\n                }\n                else{\n\
    \                    acc + (vowel + elem)\n                }\n            }\n\
    \            else{\n                acc + (elem)\n            }\n        })\n\
    \        newMessage", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\" \").toList\n        val newMessage = messageList.map(x => x.toLowerCase).map(x\
    \ => x.toUpperCase).map(x => x.replaceAll(vowels, alphabet(alphabet.indexOf(x)\
    \ + 2)))\n        newMessage.toString", "        val vowels = \"aeiou\"\n    \
    \    val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageArray =\
    \ message.split(\"\")\n        val newMessage = messageArray.map(x => \n     \
    \       if (vowels.contains(x)) x.toUpperCase\n            else alphabet(alphabet.indexOf(x)\
    \ + 2))\n        newMessage.toString.replace(\"[\", \"\").replace(\"]\", \"\")",
  "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.toCharArray\n\
    \        val encodedMessage = messageArray.map {\n            case c if vowels.contains(c)\
    \ => vowels.indexOf(c) + 2\n            case c => c\n        }\n        new String(encodedMessage)",
  "        val alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val vowels = List(\"\
    a\", \"e\", \"i\", \"o\", \"u\")\n        val messageList = message.split(\"\"\
    )\n        val result = new StringBuilder\n        val vowelsMap = new mutable.HashMap[String,\
    \ String]()\n        val vowelsMap2 = new mutable.HashMap[String, String]()\n\
    \        val vowelsMap3 = new mutable.HashMap[String, String]()\n        val vowelsMap4\
    \ = new mutable.HashMap[String, String]()\n        val vowelsMap5 = new mutable.HashMap[String,\
    \ String]()\n        val vowelsMap6 = new mutable.HashMap[String, String]()\n\
    \        val vowelsMap7 = new mutable.HashMap[String, String]()\n        val vowelsMap8\
    \ = new mutable.HashMap[String, String]()\n        val vowelsMap9 = new mutable.HashMap[String,\
    \ String]()\n        val vowelsMap10 = new mutable.HashMap[String, String]()\n\
    \        val vowelsMap11 = new mutable.HashMap[String, String]()\n        val\
    \ vowelsMap12 = new mutable.HashMap[String, String]()\n        val vowelsMap13\
    \ = new mutable.HashMap[String, String]()\n        val vowelsMap14 = new mutable.HashMap[String,\
    \ String]()\n        val vowelsMap15 = new mutable.HashMap[String, String]()\n\
    \        val vowelsMap16 = new mutable.HashMap[String, String]()\n        val\
    \ vowelsMap17 = new mutable.HashMap[String, String]()\n        val vowelsMap18\
    \ = new mutable.HashMap[String, String]()\n        val vowelsMap19 = new mutable.HashMap[String,\
    \ String]()\n        val vowelsMap20 = new mutable.HashMap[String, String]()\n\
    \        val vowelsMap21 = new mutable.HashMap[String, String]()\n        val\
    \ vowelsMap22 = new mutable.HashMap[String, String]()\n        val vowelsMap23\
    \ = new mutable.HashMap[String, String]()\n        val vowelsMap24 = new mutable.HashMap[String,\
    \ String]()\n        val vowelsMap25 = new mutable.HashMap[String, String]()\n\
    \        val vowelsMap26 = new mutable.HashMap[String, String]()\n        val\
    \ vowelsMap27 = new mutable.HashMap[String, String]()\n", "        val vowels\
    \ = \"aeiouAEIOU\"\n        val messageWithVowels = message.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversed = messageWithVowels.reverse\n  \
    \      val messageWithVowelsReversedWithVowelsReplaced = messageWithVowelsReversed.map(letter\
    \ => vowels.indexOf(letter) + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplaced.reverse\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowel",
  "        val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter))\n      \
    \  val messageWithVowelsAndVowelsTwoAhead = (messageWithVowels zip vowels.drop(1)).map\
    \ { case (vowel, vowelTwoAhead) => vowelTwoAhead + vowel }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAhead zip vowels.drop(2)).map { case (vowel,\
    \ vowelTwoAhead) => vowelTwoAhead + vowel }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead zip vowels.drop(3)).map\
    \ { case (vowel, vowelTwoAhead) => vowelTwoAhead + vowel }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead zip\
    \ vowels.drop(4)).map { case (vowel, vowelTwoAhead) => vowelTwoAhead + vowel }\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ zip vowels.drop(5)).map { case (vowel, vowelTwoAhead) => vowelTwoAhead + vowel\
    \ }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVow", "        val vowels = \"aeiouAEIOU\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = vowels.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = index + 1\n\
    \                val vowel = vowels(vowelIndex)\n                vowel\n     \
    \       } else {\n                letter\n            }\n        })\n        newMessageArray.toSeq.mkString(\"\
    \")", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\")( (acc, elem) => {\n \
    \           val index = alphabet.indexOf(elem)\n            val nextIndex = index\
    \ + 2\n            val nextElem = alphabet(nextIndex)\n            val newElem\
    \ = if (nextElem == elem) nextElem else elem\n            acc + newElem\n    \
    \    })\n        newMessage", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ alphabet = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => alphabet(i + 2)\n        })\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) match {\n \
    \           case -1 => letter\n            case i => alphabet(i + 2)\n       \
    \ })\n        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => alphabet(i + 2)\n\
    \        })\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowel", " \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => \n            letter\
    \ match {\n                case vowel => vowels.indexOf(vowel) + 2\n         \
    \       case _ => vowels.indexOf(letter) + 2\n            }\n        ).mkString(\"\
    \")\n        newMessage", "        val vowels = \"aeiouAEIOU\"\n        val alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map { letter =>\n            val\
    \ index = alphabet.indexOf(letter)\n            val vowelIndex = vowels.indexOf(letter)\n\
    \            if (vowelIndex != -1) {\n                val vowel = vowels(vowelIndex)\n\
    \                val vowelIndex = vowels.indexOf(vowel)\n                val vowelIndex\
    \ = vowelIndex + 2\n                alphabet(vowelIndex)\n            } else {\n\
    \                letter\n            }\n        }\n        newMessageArray.toString.replaceAll(\"\
    \\\\s+\", \"\")", "        val vowels = \"aeiouAEIOU\"\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.foldLeft(\"\"){\
    \ (acc, elem) =>\n            val index = vowels.indexOf(elem)\n            if\
    \ (index != -1) {\n                val newIndex = index - 2\n                val\
    \ newChar = vowels(newIndex)\n                acc + (if (newChar.isUpper) elem.toUpperCase\
    \ else elem.toLowerCase) + newChar\n            } else {\n                acc\
    \ + elem\n            }\n        }\n        newMessage", "        val vowels =\
    \ \"aeiouAEIOU\"\n        val newMessage = message.map(letter => vowels.indexOf(letter)\
    \ + 2)\n        val newMessage2 = message.map(letter => vowels.indexOf(letter)\
    \ + 1)\n        val newMessage3 = message.map(letter => vowels.indexOf(letter))\n\
    \        val newMessage4 = message.map(letter => vowels.indexOf(letter) + 1)\n\
    \        val newMessage5 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage6 = message.map(letter => vowels.indexOf(letter))\n   \
    \     val newMessage7 = message.map(letter => vowels.indexOf(letter) + 1)\n  \
    \      val newMessage8 = message.map(letter => vowels.indexOf(letter) + 2)\n \
    \       val newMessage9 = message.map(letter => vowels.indexOf(letter))\n    \
    \    val newMessage10 = message.map(letter => vowels.indexOf(letter) + 1)\n  \
    \      val newMessage11 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage12 = message.map(letter => vowels.indexOf(letter))\n  \
    \      val newMessage13 = message.map(letter => vowels.indexOf(letter) + 1)\n\
    \        val newMessage14 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage15 = message.map(letter => vowels.indexOf(letter))\n  \
    \      val newMessage16 = message.map(letter => vowels.indexOf(letter) + 1)\n\
    \        val newMessage17 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage18 = message.map(letter => vowels.indexOf(letter))\n  \
    \      val newMessage19 = message.map(letter => vowels.indexOf(letter) + 1)\n\
    \        val newMessage20 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage21 = message.map(letter => vowels.indexOf(letter))\n  \
    \      val newMessage22 = message.map(letter => vowels.indexOf(letter) + 1)\n\
    \        val newMessage23 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage24 = message.map(letter => vowels.indexOf(letter))\n  \
    \      val newMessage25 = message.map(letter => vowels.indexOf(letter) + 1)\n\
    \        val newMessage26 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage27 = message.map(letter => vowels.indexOf(letter))\n  \
    \      val newMessage28 = message.map(letter => vowels.indexOf(letter) + 1)\n\
    \        val newMessage29 = message.map(letter => vowels.indexOf(letter) + 2)\n\
    \        val newMessage30 = message.map(letter => vowels.indexOf(letter))\n  \
    \      val newMessage31 = message.map(letter => vowels.indexOf(", "        val\
    \ vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\")\n  \
    \      val newMessageArray = messageArray.map { x =>\n            val index =\
    \ vowels.indexOf(x)\n            if (index >= 0) {\n                val vowel\
    \ = vowels(index)\n                val vowelIndex = vowels.indexOf(vowel)\n  \
    \              val vowel2 = vowels(vowelIndex + 1)\n                val newLetter\
    \ = if (vowelIndex < vowel2.length) vowel \n                    else vowel2\n\
    \                x -> newLetter\n            } else {\n                x\n   \
    \         }\n        }\n        val newMessage = newMessageArray.toList\n    \
    \    val newMessageString = newMessage.toString.replaceAll(\"\\\\s\", \"\")\n\
    \        val newMessageStringArray = newMessageString.split(\"\")\n        val\
    \ newMessageStringArrayLength = newMessageStringArray.length\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val ", "        val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            val\
    \ vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex != -1) \n  \
    \              vowels(vowelIndex - 2) \n            else \n                letter)\n\
    \        val newMessage = newMessageArray.toList\n        val newMessageString\
    \ = newMessage.toString.replaceAll(\"[aeiouAEIOU]\", \n            new StringBuilder(vowels.head).reverse.mkString)\n\
    \        newMessageString", "        val vowels = \"aeiouAEIOU\"\n        val\
    \ newMessage = message.map(letter => vowels.indexOf(letter) match {\n        \
    \    case -1 => letter\n            case i => vowels(i + 2)\n        })\n    \
    \    newMessage.toString", "        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => \n            val index = alphabet.indexOf(letter)\n            val vowelIndex\
    \ = vowels.indexOf(letter)\n            val vowel = vowels(vowelIndex)\n     \
    \       val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            val vowelIndex\
    \ = vowels.indexOf(vowel)\n            val vowelIndex = vowels.indexOf(vowel)\n\
    \            val vowelIndex = vowels.indexOf(vowel)\n            ", "        val\
    \ vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val messageArray =\
    \ message.split(\"\")\n        val newMessageArray = messageArray.map(letter =>\
    \ \n            if (vowels.contains(letter)) letter else \n                vowels.find(vowel\
    \ => vowel.equals(letter)).get.charAt(2))\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessage.split(\"\")\n        val newMessageArray3\
    \ = newMessageArray2.map(letter => \n            if (vowels.contains(letter))\
    \ letter else \n                vowels.find(vowel => vowel.equals(letter)).get.charAt(2))\n\
    \        val newMessage2 = newMessageArray3.toList.mkString(\"\")\n        val\
    \ newMessageArray4 = newMessage2.split(\"\")\n        val newMessageArray5 = newMessageArray4.map(letter\
    \ => \n            if (vowels.contains(letter)) letter else \n               \
    \ vowels.find(vowel => vowel.equals(letter)).get.charAt(2))\n        val newMessage3\
    \ = newMessageArray5.toList.mkString(\"\")\n        val newMessageArray6 = newMessage3.split(\"\
    \")\n        val newMessageArray7 = newMessageArray6.map(letter => \n        \
    \    if (vowels.contains(letter)) letter else \n                vowels.find(vowel\
    \ => vowel.equals(letter)).get.charAt(2))\n        val newMessage4 = newMessageArray7.toList.mkString(\"\
    \")\n        val newMessageArray8 = newMessage4.split(\"\")\n        val newMessageArray9\
    \ = newMessageArray8.map(letter => \n            if (vowels.contains(letter))\
    \ letter else \n                vowels.find(vowel => vowel.equals(letter)).get.charAt(2))\n\
    \        val newMessage5 = newMessageArray9.toList.mkString(\"\")\n        val\
    \ newMessageArray10 = newMessage5.split(\"\")\n        val newMessageArray11 =\
    \ newMessageArray10.map(letter => \n            if (vowels.contains(letter)) letter\
    \ else \n                vowels.find(vowel => vowel.equals(letter)).get.charAt(2))\n\
    \        val newMessage6 = newMessageArray11.toList.mkString(\"\")\n        val\
    \ newMessageArray12 = newMessage6.split(\"\")\n        val newMessageArray13 =\
    \ newMessageArray12.map(letter => \n            if (vowels.contains(letter)) letter\
    \ else \n                vowels.find(vowel => vowel.equals(letter)).get.charAt(2))\n\
    \        val newMessage7 = newMessageArray13.toList.mkString(\"\")\n        val\
    \ newMessageArray14 = newMessage7.split(\"\")\n        val newMessageArray15 =\
    \ newMessageArray14.map(letter => \n            if (vowels.contains(letter)) letter\
    \ else \n"]
stop_tokens:
- "\n    }\n"
