language: scala
name: HumanEval_0_has_close_elements
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val distances = numbers.map(x => Math.abs(x - threshold))\n\
    \        distances.min < distances.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f))\
    \ == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpya2uzm_z.scala:16)\n\tat Problem.main(tmpya2uzm_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val sortedNumbers = numbers.toList.sortWith(_ < _)\n\
    \        val sortedNumbersSize = sortedNumbers.size\n        val threshold = threshold\
    \ * sortedNumbersSize\n        val currentElement = sortedNumbers.head\n     \
    \   val currentElementSize = sortedNumbers.tail.head\n        val currentElementIndex\
    \ = sortedNumbers.indexOf(0)\n        val currentElementIndexSize = sortedNumbersSize\
    \ - currentElementIndex\n        val currentElementIndexThreshold = currentElementIndexSize\
    \ * threshold\n        val currentElementIndexThreshold2 = currentElementIndexThreshold\
    \ * currentElementIndexThreshold\n        val currentElementIndexThreshold3 =\
    \ currentElementIndexThreshold2 * currentElementIndexThreshold\n        val currentElementIndexThreshold4\
    \ = currentElementIndexThreshold3 * currentElementIndexThreshold\n        val\
    \ currentElementIndexThreshold5 = currentElementIndexThreshold4 * currentElementIndexThreshold\n\
    \        val currentElementIndexThreshold6 = currentElementIndexThreshold5 * currentElementIndexThreshold\n\
    \        val currentElementIndexThreshold7 = currentElementIndexThreshold6 * currentElementIndexThreshold\n\
    \        val currentElementIndexThreshold8 = currentElementIndexThreshold7 * currentElementIndexThreshold\n\
    \        val currentElementIndexThreshold9 = currentElementIndexThreshold8 * currentElementIndexThreshold\n\
    \        val currentElementIndexThreshold10 = currentElementIndexThreshold9 *\
    \ currentElementIndexThreshold\n        val currentElementIndexThreshold11 = currentElementIndexThreshold10\
    \ * currentElementIndexThreshold\n        val currentElementIndexThreshold12 =\
    \ currentElementIndexThreshold11 * currentElementIndexThreshold\n        val currentElementIndexThreshold13\
    \ = currentElementIndexThreshold12 * currentElementIndexThreshold\n        val\
    \ currentElementIndexThreshold14 = currentElementIndexThreshold13 * currentElementIndexThreshold\n\
    \        val currentElementIndexThreshold15 = currentElementIndexThreshold14 *\
    \ currentElementIndexThreshold\n        val currentElementIndexThreshold16 = currentElementIndexThreshold15\
    \ * currentElementIndexThreshold\n        val currentElementIndexThreshold17 =\
    \ currentElementIndexThreshold16 * currentElementIndexThreshold\n        val currentElementIndexThreshold18\
    \ = currentElementIndexThreshold17 * currentElementIndexThreshold\n        val\
    \ currentElementIndexThreshold19 = currentElementIndexThreshold18 * currentElementIndexThreshold\n\
    \        val currentElementIndexThreshold20 = currentElementIndexThreshold19 *\
    \ currentElementIndexThreshold\n        val currentElementIndexThreshold21 = currentElementIndexThreshold20\
    \ * currentElementIndexThreshold\n        val currentElementIndexThreshold22 =\
    \ currentElementIndexThreshold21 * currentElementIndexThreshold\n        val currentElementIndexThreshold23\
    \ = currentElementIndexThreshold22 * currentElementIndexThreshold\n        val\
    \ currentElementIndexThreshold24 = currentElementIndexThreshold23 * \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzv6ru3if.scala:41:77 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mcurrentElementIndexThreshold24\e\
    [0m = currentElementIndexThreshold23 * \n\e[31m\e[31m   |\e[0m               \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzv6ru3if.scala:13:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m\
    \ \e[36mthreshold\e[0m = threshold * sortedNumbersSize\n\e[31m\e[31m   |\e[0m\
    \                        ^\e[0m\n\e[31m   |\e[0m                        Recursive\
    \ \e[33mvalue\e[0m \e[35mthreshold\e[0m needs type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpzv6ru3if.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659799544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val sortedNumbers = numbers.toList.sortWith(_ < _)\n\
    \        val minDistance = sortedNumbers.foldLeft(0.0f) { (sum, number) => sum\
    \ + math.abs(number - threshold) }\n        sortedNumbers.forall(number => number\
    \ - threshold < minDistance && number + threshold > minDistance)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpup8bfp_p.scala:16)\n\tat Problem.main(tmpup8bfp_p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val sortedNumbers = numbers.toList.sortWith(_ < _)\n\
    \        val closestToClosest: List[Float] = sortedNumbers.sliding(2).map { x\
    \ =>\n            val xDiff = x(0) - x(1) // xDiff = x2 - x1\n            val\
    \ yDiff = x(0) - x(2) // yDiff = y2 - y1\n            val xDiffAbs = abs(xDiff)\n\
    \            val yDiffAbs = abs(yDiff)\n            val xDiffAbsMin = if (xDiffAbs\
    \ < xDiff) xDiff else xDiffAbs\n            val yDiffAbsMin = if (yDiffAbs < yDiff)\
    \ yDiff else yDiffAbs\n            val xDiffAbsMax = if (xDiffAbs > xDiff) xDiff\
    \ else xDiffAbs\n            val yDiffAbsMax = if (yDiffAbs > yDiff) yDiff else\
    \ yDiffAbs\n            val xDiffAbsMinAbs = if (xDiffAbsMin < xDiffAbs) xDiffAbsMin\
    \ else xDiffAbsMax\n            val yDiffAbsMinAbs = if (yDiffAbsMin < yDiffAbs)\
    \ yDiffAbsMin else yDiffAbsMax\n            val xDiffAbsMaxAbs = if (xDiffAbsMax\
    \ > xDiffAbs) xDiffAbsMax else xDiffAbsMin\n            val yDiffAbsMaxAbs = if\
    \ (yDiffAbsMax > yDiffAbs) yDiffAbsMax else yDiffAbsMin\n            val xDiffAbsMinAbsAbs\
    \ = if (xDiffAbsMinAbs < xDiffAbsMin) xDiffAbsMinAbs else xDiffAbsMaxAbs\n   \
    \         val yDiffAbsMinAbsAbs = if (yDiffAbsMinAbs < yDiffAbsMin) yDiffAbsMinAbs\
    \ else yDiffAbsMaxAbs\n            val xDiffAbsMaxAbsAbs = if (xDiffAbsMaxAbs\
    \ > xDiffAbsMax) xDiffAbsMaxAbs else xDiffAbsMinAbsAbs\n            val yDiffAbsMaxAbsAbs\
    \ = if (yDiffAbsMaxAbs > yDiffAbsMax) yDiffAbsMaxAbs else yDiffAbsMinAbsAbs\n\
    \            val xDiffAbsMinAbsAbsAbs = if (xDiffAbsMinAbsAbs < xDiffAbsMinAb\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpubqo61xj.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpubqo61xj.scala:42:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpubqo61xj.scala:29:63 ------------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m            \e[33mval\e[0m \e[36mxDiffAbsMinAbsAbsAbs\e[0m = \e\
    [33mif\e[0m (xDiffAbsMinAbsAbs < xDiffAbsMinAb\n\e[31m\e[31m   |\e[0m        \
    \                                                       ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                Not found: xDiffAbsMinAb\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpubqo61xj.scala:41:1\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpubqo61xj.scala:31:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m31 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659799544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val distances = numbers.map(x => Math.abs(x - threshold))\n\
    \        val minDistance = distances.min\n        distances.forall(x => x < minDistance)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdry_x8qd.scala:16)\n\tat Problem.main(tmpdry_x8qd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val sortedNumbers = numbers.toList.sortWith(_ < _)\n\
    \        val differences = sortedNumbers.zip(sortedNumbers.tail).map { case (first,\
    \ second) =>\n            math.abs(first - second)\n        }\n        val threshold\
    \ = math.abs(threshold)\n        val threshold = threshold * threshold\n     \
    \   val threshold = threshold * threshold\n        val threshold = threshold *\
    \ threshold\n        val threshold = threshold * threshold\n        val threshold\
    \ = threshold * threshold\n        val threshold = threshold * threshold\n   \
    \     val threshold = threshold * threshold\n        val threshold = threshold\
    \ * threshold\n        val threshold = threshold * threshold\n        val threshold\
    \ = threshold * threshold\n        val threshold = threshold * threshold\n   \
    \     val threshold = threshold * threshold\n        val threshold = threshold\
    \ * threshold\n        val threshold = threshold * threshold\n        val threshold\
    \ = threshold * threshold\n        val threshold = threshold * threshold\n   \
    \     val threshold = threshold * threshold\n        val threshold = threshold\
    \ * threshold\n        val threshold = threshold * threshold\n        val threshold\
    \ = threshold * threshold\n        val threshold = threshold * threshold\n   \
    \     val threshold = threshold * threshold\n        val threshold = threshold\
    \ * threshold\n        val threshold = threshold * threshold\n        val threshold\
    \ = threshold * threshold\n        val threshold = threshold * threshold\n   \
    \     val threshold = threshold * threshold\n        val threshold = threshold\
    \ * threshold\n        val threshold = threshold * threshold\n        val threshold\
    \ = threshold * threshold\n        val threshold = threshold * threshold\n   \
    \     val threshold = threshold * threshold\n        val threshold = threshold\
    \ * threshold\n        val threshold = threshold * threshold\n        val threshold\
    \ = threshold * threshold\n        val threshold = threshold * threshold\n   \
    \     val threshold = threshold * threshold\n        val threshold = threshold\
    \ * threshold\n        val threshold = threshold * threshold\n        val threshold\
    \ = threshold * threshold\n        val threshold = threshold * threshold\n   \
    \     val threshold = threshold * threshold\n        val threshold = threshold\
    \ * threshold\n        val threshold = threshold * threshold\n        val threshold\
    \ = threshold * threshold\n        val threshold = threshold * threshold\n   \
    \     val threshold = threshold * threshold\n        val threshold = threshold\
    \ * threshold\n        val threshold = threshold * threshold\n        val threshold\
    \ = threshold * threshold\n        val threshold = threshold * threshold\n   \
    \     val threshold = threshold * threshold\n        val threshold = threshold\
    \ * threshold\n        val threshold = threshold * threshold\n        val threshold\
    \ = threshold * threshold\n        val threshold = threshold * threshold\n   \
    \     val threshold = threshold * threshold\n        val threshold = threshold\
    \ * threshold\n        val threshold = threshold * threshold\n        val threshold\
    \ = threshold * threshold\n        val threshold = threshold * threshold\n   \
    \     val threshold = threshold * threshold\n        val threshold = threshold\
    \ * threshold\n        val threshold = threshold * threshold\n        val threshold\
    \ = threshold * threshold\n        val threshold = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat,\
    \ 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpac85rlx_.scala:81:23 ---------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m        \e[33mval\e[0m \e[36mthreshold\e[0m = \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpac85rlx_.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mthreshold\e[0m = threshold\
    \ * threshold\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mthreshold is already defined as \e[33mvalue\e[0m \e[35mthreshold\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpac85rlx_.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mthreshold\e[0m = threshold * threshold\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mthreshold is already defined as \e[33mvalue\e[0m \e[35mthreshold\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpac85rlx_.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mthreshold\e[0m = threshold * threshold\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mthreshold is already defined as \e[33mvalue\e[0m \e[35mthreshold\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpac85rlx_.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mthreshold\e[0m = threshold * threshold\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mthreshold is already defined as \e[33mvalue\e[0m \e[35mthreshold\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote t"
  stdout: ''
  timestamp: 1659799544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val sortedNumbers = numbers.toList.sorted\n        val\
    \ closeNumbers = sortedNumbers.filter(_ < threshold)\n        val closeNumbersCount\
    \ = closeNumbers.size\n        val sortedNumbersCount = sortedNumbers.size\n \
    \       closeNumbersCount < sortedNumbersCount && closeNumbers.forall(sortedNumbers.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpblj94xwr.scala:19)\n\tat Problem.main(tmpblj94xwr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val sortedNumbers = numbers.sortWith(_ < _)\n       \
    \ val threshold = threshold * threshold\n        val distances = sortedNumbers.map(x\
    \ => (x - threshold))\n        val minDistance = distances.min\n        val minDistanceIndex\
    \ = distances.indexOf(minDistance)\n        val minDistanceIndex = minDistanceIndex\
    \ + 1\n        val minDistanceDistance = distances(minDistanceIndex)\n       \
    \ val minDistanceDistance = minDistanceDistance * minDistanceDistance\n      \
    \  val minDistanceDistance = minDistanceDistance * minDistanceDistance\n     \
    \   val minDistanceDistance = minDistanceDistance * minDistanceDistance\n    \
    \    minDistanceDistance < threshold\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f))\
    \ == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfdbv5jiq.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mminDistanceIndex\e[0m =\
    \ minDistanceIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminDistanceIndex is already defined as \e[33mvalue\e[0m \e\
    [35mminDistanceIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfdbv5jiq.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mminDistanceDistance\e[0m\
    \ = minDistanceDistance * minDistanceDistance\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminDistanceDistance is already defined as \e[33mvalue\e[0m\
    \ \e[35mminDistanceDistance\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfdbv5jiq.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mminDistanceDistance\e[0m\
    \ = minDistanceDistance * minDistanceDistance\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminDistanceDistance is already defined as \e[33mvalue\e[0m\
    \ \e[35mminDistanceDistance\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfdbv5jiq.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mminDistanceDistance\e[0m\
    \ = minDistanceDistance * minDistanceDistance\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mminDistanceDistance is already defined as \e[33mvalue\e[0m\
    \ \e[35mminDistanceDistance\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31"
  stdout: ''
  timestamp: 1659799544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val sortedNumbers = numbers.toList.sortWith(_ < _)\n\
    \        val distances = sortedNumbers.map(x => x - threshold)\n        distances.forall(x\
    \ => x < 0.0f)\n    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5u0n09i.scala:16)\n\tat Problem.main(tmpm5u0n09i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val numberSet = numbers.toSet\n        val threshold\
    \ = threshold * threshold\n        val minSet = numberSet.min\n        val maxSet\
    \ = numberSet.max\n        val minDiff = maxSet - minSet\n        val maxDiff\
    \ = maxSet - minSet\n        val minDiffAbs = Math.abs(minDiff)\n        val maxDiffAbs\
    \ = Math.abs(maxDiff)\n        val minDiffAbsThreshold = Math.abs(threshold -\
    \ minDiff)\n        val maxDiffAbsThreshold = Math.abs(threshold - maxDiff)\n\
    \        val minDiffAbsThresholdAbs = Math.abs(threshold - minDiffAbsThreshold)\n\
    \        val maxDiffAbsThresholdAbs = Math.abs(threshold - maxDiffAbsThreshold)\n\
    \        val minDiffAbsThresholdAbsAbs = Math.abs(threshold - minDiffAbsThresholdAbs)\n\
    \        val maxDiffAbsThresholdAbsAbs = Math.abs(threshold - maxDiffAbsThresholdAbs)\n\
    \        val minDiffAbsThresholdAbsAbsAbs = Math.abs(threshold - minDiffAbsThresholdAbsAbs)\n\
    \        val maxDiffAbsThresholdAbsAbsAbs = Math.abs(threshold - maxDiffAbsThresholdAbsAbs)\n\
    \        val minDiffAbsThresholdAbsAbsAbsAbs = Math.abs(threshold - minDiffAbsThresholdAbsAbsAbs)\n\
    \        val maxDiffAbsThresholdAbsAbsAbsAbs = Math.abs(threshold - maxDiffAbsThresholdAbsAbsAbs)\n\
    \        val minDiffAbsThresholdAbsAbsAbsAbsAbs = Math.abs(threshold - minDiffAbsThresholdAbsAbsAbsAbs)\n\
    \        val maxDiffAbsThresholdAbsAbsAbsAbsAbs = Math.abs(threshold - maxDiffAbsThresholdAbsAbsAbsAbs)\n\
    \        val minDiffAbsThresholdAbsAbsAbsAbsAbsAbs = Math.abs(threshold - minDiffAbsThresholdAbsAbsAbsAbsAbs)\n\
    \        val maxDiffAbsThresholdAbsAbsAbsAbsAbsAbs = Math.abs(threshold - maxDiffAbsThresholdAbsAbsAbsAbsAbs)\n\
    \        val minDiffAbsThresholdAbsAbsAbsAbsAbsAbsAbs = Math.abs(threshold - minDiffAbsThresholdAbsAbsAbsAbsAbsAbs)\n\
    \        val maxDiffAbsThresholdAbsAbsAbsAbsAbsAbsAbs = Math.abs(threshold - \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzy7ift8k.scala:34:75 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmaxDiffAbsThresholdAbsAbsAbsAbsAbsAbsAbs\e\
    [0m = Math.abs(threshold - \n\e[31m\e[31m   |\e[0m                           \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                  expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzy7ift8k.scala:12:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m\
    \ \e[36mthreshold\e[0m = threshold * threshold\n\e[31m\e[31m   |\e[0m        \
    \                ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e\
    [0m \e[35mthreshold\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzy7ift8k.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val sortedNumbers = numbers.toList.sortWith(_ < _)\n\
    \        val closestToClosest = (sortedNumbers.head - sortedNumbers.last).abs.toFloat\n\
    \        val closestToThreshold = sortedNumbers.last.abs.toFloat - threshold\n\
    \        closestToThreshold < closestToClosest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f))\
    \ == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxq27ssrv.scala:17)\n\tat Problem.main(tmpxq27ssrv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val minDistance = numbers.min\n        val maxDistance\
    \ = numbers.max\n        val distances = numbers.map(x => Math.abs(x - minDistance))\n\
    \        val threshold = Math.abs(threshold - minDistance)\n        distances.forall(x\
    \ => x >= threshold)\n    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvlzrybch.scala:14:33 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mthreshold\e[0m = Math.abs(threshold\
    \ - minDistance)\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\
    \e[31m   |\e[0m                                 Recursive \e[33mvalue\e[0m \e\
    [35mthreshold\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val distances = numbers.map(x => (x - threshold).abs)\n\
    \        val minDistance = distances.min\n        distances.forall(x => x < minDistance)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpltk8gf_s.scala:16)\n\tat Problem.main(tmpltk8gf_s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val sortedNumbers = numbers.toList.sortWith(_ < _)\n\
    \        val closeElements = sortedNumbers.sliding(2).collect {\n            case\
    \ Seq(a, b) if (a - b < threshold) => b\n            case Seq(a, b) if (b - a\
    \ < threshold) => a\n            case Seq(a, b) => a\n        }\n        closeElements.size\
    \ == numbers.size\n    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8op761oi.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m Seq(a, b) \e[33mif\e[0m (a\
    \ - b < threshold) => b\n\e[31m\e[31m   |\e[0m                               ^^^\e\
    [0m\n\e[31m   |\e[0m      value - is not a member of A$1.\n\e[31m   |\e[0m   \
    \   An extension method was tried, but could not be fully constructed:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m          Short2short(a)\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp8op761oi.scala:14:33 ------------------------\e[0m\e[0m\n\
    \e[31m14 |\e[0m            \e[33mcase\e[0m Seq(a, b) \e[33mif\e[0m (b - a < threshold)\
    \ => a\n\e[31m\e[31m   |\e[0m                               ^^^\e[0m\n\e[31m \
    \  |\e[0m      value - is not a member of A$2.\n\e[31m   |\e[0m      An extension\
    \ method was tried, but could not be fully constructed:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m          Short2short(b)\n2 errors found\n"
  stdout: ''
  timestamp: 1659799542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        numbers.foldLeft(false)((acc, element) => {\n       \
    \     val difference = math.abs(element - numbers(numbers.size - 1))\n       \
    \     if (difference < threshold) {\n                acc = true\n            }\n\
    \            acc\n        })\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f))\
    \ == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_pnc2llo.scala:14:20 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                acc = \e[31mtrue\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val acc\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799540
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val sortedNumbers = numbers.toList.sortWith(_ < _)\n\
    \        val closeElements = mutable.Set[Float]()\n        val closeElementsCount\
    \ = mutable.Set[Float]()\n        val closeElementsCount2 = mutable.Set[Float]()\n\
    \        val closeElementsCount3 = mutable.Set[Float]()\n        val closeElementsCount4\
    \ = mutable.Set[Float]()\n        val closeElementsCount5 = mutable.Set[Float]()\n\
    \        val closeElementsCount6 = mutable.Set[Float]()\n        val closeElementsCount7\
    \ = mutable.Set[Float]()\n        val closeElementsCount8 = mutable.Set[Float]()\n\
    \        val closeElementsCount9 = mutable.Set[Float]()\n        val closeElementsCount10\
    \ = mutable.Set[Float]()\n        val closeElementsCount11 = mutable.Set[Float]()\n\
    \        val closeElementsCount12 = mutable.Set[Float]()\n        val closeElementsCount13\
    \ = mutable.Set[Float]()\n        val closeElementsCount14 = mutable.Set[Float]()\n\
    \        val closeElementsCount15 = mutable.Set[Float]()\n        val closeElementsCount16\
    \ = mutable.Set[Float]()\n        val closeElementsCount17 = mutable.Set[Float]()\n\
    \        val closeElementsCount18 = mutable.Set[Float]()\n        val closeElementsCount19\
    \ = mutable.Set[Float]()\n        val closeElementsCount20 = mutable.Set[Float]()\n\
    \        val closeElementsCount21 = mutable.Set[Float]()\n        val closeElementsCount22\
    \ = mutable.Set[Float]()\n        val closeElementsCount23 = mutable.Set[Float]()\n\
    \        val closeElementsCount24 = mutable.Set[Float]()\n        val closeElementsCount25\
    \ = mutable.Set[Float]()\n        val closeElementsCount26 = mutable.Set[Float]()\n\
    \        val closeElementsCount27 = mutable.Set[Float]()\n        val closeElementsCount28\
    \ = mutable.Set[Float]()\n        val closeElementsCount29 = mutable.Set[Float]()\n\
    \        val closeElementsCount30 = mutable.Set[Float]()\n        val closeElementsCount31\
    \ = mutable.Set[Float]()\n        \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f))\
    \ == (false));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb_y25tj0.scala:12:28 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mcloseElements\e[0m = mutable.Set[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb_y25tj0.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcloseElementsCount\e[0m\
    \ = mutable.Set[\e[35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb_y25tj0.scala:14:34\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseElementsCount2\e[0m = mutable.Set[\e[35mFloat\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpb_y25tj0.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mcloseElementsCount3\e[0m\
    \ = mutable.Set[\e[35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb_y25tj0.scala:16:34\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mcloseElementsCount4\e[0m = mutable.Set[\e[35mFloat\e[0m]()\n\e[31m\e[31m \
    \  |\e[0m                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659799544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val distances = numbers.map(x => Math.abs(x - threshold))\n\
    \        val minDistance = distances.min\n        distances.contains(minDistance)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpea2tkyr2.scala:17)\n\tat Problem.main(tmpea2tkyr2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799140
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val distances = numbers.map(x => Math.abs(x - threshold))\n\
    \        val minDistance = distances.min\n        distances.forall(x => x == minDistance)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq0e3yqor.scala:16)\n\tat Problem.main(tmpq0e3yqor.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val nums = numbers.toList\n        val numsSorted = nums.sortWith((a,\
    \ b) => math.abs(a - b) < threshold)\n        val numsSortedSet = numsSorted.toSet\n\
    \        val numsSortedSetSize = numsSortedSet.size\n        val numsSortedSetIterator\
    \ = numsSortedSet.iterator\n        val numsSortedSetIteratorSize = numsSortedSetIterator.size\n\
    \        val numsSortedSetIteratorIterator = numsSortedSetIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorSize = numsSortedSetIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIterator = numsSortedSetIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorSize = numsSortedSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIterator = numsSortedSetIteratorIteratorIterator.iterator\n\
    \        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetIteratorIteratorIteratorIterator.size\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetIteratorIteratorIteratorIterator.size\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetIteratorIteratorIteratorIterator.size\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetIteratorIteratorIteratorIterator.size\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSortedSetIteratorIteratorIterator.iterator\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSortedSetIteratorIteratorIteratorIterator.size\n        val numsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprzan9j9a.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzan9j9a.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m = numsSortedSetIteratorIteratorIteratorIterator.size\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSortedSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmprzan9j9a.scala:36:5 ---------------------\e[0m\e[0m\n\
    \e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659799543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n\
    \    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float)\
    \ : Boolean = {\n        val numberSet = numbers.toSet\n        val threshold\
    \ = threshold * threshold\n        val result = numberSet.foldLeft(false)((acc,\
    \ x) => acc && Math.abs(x - numberSet.last) < threshold)\n        result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.3f))\
    \ == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
    \ 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)), (0.05f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 5.9f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat)), (0.95f)) == (true));\n    assert(hasCloseElements((List[Float](1.0f.toFloat,\
    \ 2.0f.toFloat, 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat)), (0.8f)) == (false));\n\
    \    assert(hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat,\
    \ 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.1f)) == (true));\n    assert(hasCloseElements((List[Float](1.1f.toFloat,\
    \ 2.2f.toFloat, 3.1f.toFloat, 4.1f.toFloat, 5.1f.toFloat)), (1.0f)) == (true));\n\
    \    assert(hasCloseElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
    \ 4.1f.toFloat, 5.1f.toFloat)), (0.5f)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpc_hm4cxh.scala:12:24 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mthreshold\e[0m = threshold\
    \ * threshold\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e\
    [0m                        Recursive \e[33mvalue\e[0m \e[35mthreshold\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799540
