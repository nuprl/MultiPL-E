name: HumanEval_21_rescale_to_unit
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n    // such that the smallest number will become 0 and the largest\
  \ will become 1\n    // >>> rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat)))\n    // (List[Float](0.0f.toFloat,\
  \ 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))\n    def rescaleToUnit(numbers\
  \ : List[Float]) : List[Float] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rescaleToUnit((List[Float](2.0f.toFloat,\
  \ 49.9f.toFloat))).equals((List[Float](0.0f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](100.0f.toFloat,\
  \ 49.9f.toFloat))).equals((List[Float](1.0f.toFloat, 0.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals((List[Float](0.0f.toFloat,\
  \ 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](2.0f.toFloat,\
  \ 1.0f.toFloat, 5.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))).equals((List[Float](0.25f.toFloat,\
  \ 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    assert(rescaleToUnit((List[Float](12.0f.toFloat,\
  \ 11.0f.toFloat, 15.0f.toFloat, 13.0f.toFloat, 14.0f.toFloat))).equals((List[Float](0.25f.toFloat,\
  \ 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    }\n\n}\n"
completions: ["        val min = numbers.min\n        val max = numbers.max\n    \
    \    val range = max - min\n        val newRange = range / 2\n        val newMin\
    \ = min - newRange\n        val newMax = max + newRange\n        numbers.map(_\
    \ - newMin).map(x => (x - newMin) / newRange)", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min - range * 0.5f\n        val newMax = max\
    \ + range * 0.5f\n        numbers.map(n => (n - newMin) / (newMax - newMin))",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n     \
    \   val maxValue = numbers.max\n        val range = (maxValue - minValue).toFloat\n\
    \        val newNumbers = numbers.map(x => (x - minValue) / range)\n        newNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val newRange = range / 2\n       \
    \ val newMinValue = minValue + newRange\n        val newMaxValue = maxValue -\
    \ newRange\n        numbers.map(x => (x - minValue) / range)", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val newRange = range / 2\n        val newMinValue = minValue\
    \ - newRange\n        val newMaxValue = maxValue + newRange\n        numbers.map(x\
    \ => (x - newMinValue) / newRange)", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newRange = range\
    \ / 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val minNum\
    \ = numbers.min\n        val maxNum = numbers.max\n        val diff = maxNum -\
    \ minNum\n        val newNumbers = numbers.map(x => (x - minNum) / diff)\n   \
    \     newNumbers", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val scaledNumbers = numbers.map(x => (x - minValue) / (maxValue\
    \ - minValue))\n        scaledNumbers", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers.toList", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = (maxValue - minValue).toFloat\n        val\
    \ newRange = range / numbers.size\n        val newNumbers = numbers.map(x => (x\
    \ - minValue) / newRange)\n        newNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        scaledNumbers", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val range\
    \ = maxValue - minValue\n        val newList = numbers.map( x => (x - minValue)\
    \ / range )\n        newList", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val range = maxValue - minValue\n        val\
    \ newMinValue = minValue / range\n        val newMaxValue = maxValue / range\n\
    \        numbers.map(x => (x - newMinValue) / (newMaxValue - newMinValue))", " \
    \       val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2.0\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newNumbers\
    \ = numbers.map( x => (x - min) / range )\n        newNumbers", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))"]
stop_tokens:
- "\n    }\n"
