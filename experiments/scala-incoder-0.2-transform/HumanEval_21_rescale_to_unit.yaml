name: HumanEval_21_rescale_to_unit
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n    // such that the smallest number will become 0 and the largest\
  \ will become 1\n    // >>> rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat)))\n    // (List[Float](0.0f.toFloat,\
  \ 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))\n    def rescaleToUnit(numbers\
  \ : List[Float]) : List[Float] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rescaleToUnit((List[Float](2.0f.toFloat,\
  \ 49.9f.toFloat))).equals((List[Float](0.0f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](100.0f.toFloat,\
  \ 49.9f.toFloat))).equals((List[Float](1.0f.toFloat, 0.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals((List[Float](0.0f.toFloat,\
  \ 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))));\n    assert(rescaleToUnit((List[Float](2.0f.toFloat,\
  \ 1.0f.toFloat, 5.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))).equals((List[Float](0.25f.toFloat,\
  \ 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    assert(rescaleToUnit((List[Float](12.0f.toFloat,\
  \ 11.0f.toFloat, 15.0f.toFloat, 13.0f.toFloat, 14.0f.toFloat))).equals((List[Float](0.25f.toFloat,\
  \ 0.0f.toFloat, 1.0f.toFloat, 0.5f.toFloat, 0.75f.toFloat))));\n    }\n\n}\n"
completions: ["        val min = numbers.min\n        val max = numbers.max\n    \
    \    val range = max - min\n        val newRange = range / 2\n        val newMin\
    \ = min - newRange\n        val newMax = max + newRange\n        numbers.map(_\
    \ - newMin).map(x => (x - newMin) / newRange)", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min - range * 0.5f\n        val newMax = max\
    \ + range * 0.5f\n        numbers.map(n => (n - newMin) / (newMax - newMin))",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n     \
    \   val maxValue = numbers.max\n        val range = (maxValue - minValue).toFloat\n\
    \        val newNumbers = numbers.map(x => (x - minValue) / range)\n        newNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val newRange = range / 2\n       \
    \ val newMinValue = minValue + newRange\n        val newMaxValue = maxValue -\
    \ newRange\n        numbers.map(x => (x - minValue) / range)", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val newRange = range / 2\n        val newMinValue = minValue\
    \ - newRange\n        val newMaxValue = maxValue + newRange\n        numbers.map(x\
    \ => (x - newMinValue) / newRange)", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newRange = range\
    \ / 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val minNum\
    \ = numbers.min\n        val maxNum = numbers.max\n        val diff = maxNum -\
    \ minNum\n        val newNumbers = numbers.map(x => (x - minNum) / diff)\n   \
    \     newNumbers", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val scaledNumbers = numbers.map(x => (x - minValue) / (maxValue\
    \ - minValue))\n        scaledNumbers", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers.toList", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = (maxValue - minValue).toFloat\n        val\
    \ newRange = range / numbers.size\n        val newNumbers = numbers.map(x => (x\
    \ - minValue) / newRange)\n        newNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        scaledNumbers", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val range\
    \ = maxValue - minValue\n        val newList = numbers.map( x => (x - minValue)\
    \ / range )\n        newList", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val range = maxValue - minValue\n        val\
    \ newMinValue = minValue / range\n        val newMaxValue = maxValue / range\n\
    \        numbers.map(x => (x - newMinValue) / (newMaxValue - newMinValue))", " \
    \       val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2.0\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newNumbers\
    \ = numbers.map( x => (x - min) / range )\n        newNumbers", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map( x =>\
    \ (x - min) / range )\n        scaledNumbers", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val newNumbers = numbers.map( x => (x - minValue) / range )\n       \
    \ newNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newNumbers = numbers.map((number:\
    \ Float) => number / range)\n        newNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val scaled = (numbers\
    \ - min) / range\n        scaled.map(x => if (x == 0.0) 0.0 else x)", "      \
    \  val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val newRange = range / 2.0\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledList = numbers.map(x => (x\
    \ - min) / range)\n        rescaledList", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        numbers.map(x => (x -\
    \ min) * newRange + newRange)", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled = (numbers - min) / range\n\
    \        scaled.map(x => if (x == 0.0f) 0.0f else x)", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n     \
    \   val maxValue = numbers.max\n        val scaledNumbers = numbers.map(x => (x\
    \ - minValue) / (maxValue - minValue))\n        scaledNumbers", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val newRange = range / 2.0\n        val newMinValue = minValue\
    \ + newRange\n        val newMaxValue = maxValue - newRange\n        numbers.map(x\
    \ => (x - minValue) / newRange)", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newRange = range\
    \ / 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min / range\n        val newMax = max / range\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val newList = numbers.map(x => (x - minValue) / range)\n        newList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map((number: Float) => number - minValue)\
    \ / range\n        scaledNumbers.map((number: Float) => number + minValue)", " \
    \       val minValue = numbers.min\n        val maxValue = numbers.max\n     \
    \   val scaledNumbers = numbers.map(x => (x - minValue) / (maxValue - minValue))\n\
    \        scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newMin = min / range\n        val\
    \ newMax = max / range\n        numbers.map(x => (x - newMin) / (newMax - newMin))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newMin = min / range\n        val\
    \ newMax = max / range\n        numbers.map(x => (x - newMin) / (newMax - newMin))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newList = numbers.map((number) =>\
    \ number - min) / range\n        newList", "        val min = numbers.min\n  \
    \      val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val minValue = numbers.min\n        val maxValue = numbers.max\n       \
    \ val range = maxValue - minValue\n        val newRange = range / 2\n        val\
    \ newMinValue = minValue + newRange\n        val newMaxValue = maxValue - newRange\n\
    \        numbers.map(x => (x - minValue) / range * newRange + newMinValue).toList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val rescaledList = numbers.map(x => (x - min) / range)\n\
    \        rescaledList", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val newNumbers\
    \ = numbers.map(x => (x - minValue) / range)\n        newNumbers", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val range\
    \ = maxValue - minValue\n        val newMinValue = minValue / range\n        val\
    \ newMaxValue = maxValue / range\n        numbers.map(x => (x - newMinValue) /\
    \ (newMaxValue - newMinValue))", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val scaledNumbers = numbers.map(x\
    \ => (x - min) / range)\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n     \
    \   val maxValue = numbers.max\n        val range = maxValue - minValue\n    \
    \    val newRange = range / 2\n        val newMinValue = minValue - newRange\n\
    \        val newMaxValue = maxValue + newRange\n        numbers.map(x => (x -\
    \ newMinValue) / newRange)", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val range = maxValue - minValue\n        val\
    \ newRange = range / 2\n        numbers.map(_ - minValue).map(x => x / newRange)",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = (maxValue - minValue).toFloat\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2.0\n        val newMin = min - newRange\n        val newMax = max\
    \ + newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", " \
    \       val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2.0\n        val newMin = min -\
    \ newRange\n        val newMax = max + newRange\n        numbers.map(x => (x -\
    \ newMin) / (newMax - newMin))", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val newRange = range / 2\n        val newMinValue = minValue\
    \ - newRange\n        val newMaxValue = maxValue + newRange\n        numbers.map(x\
    \ => (x - newMinValue) / newRange)", "        val minValue = numbers.min\n   \
    \     val maxValue = numbers.max\n        val range = maxValue - minValue\n  \
    \      val newRange = range / 2\n        val newMinValue = minValue - newRange\n\
    \        val newMaxValue = maxValue + newRange\n        numbers.map(x => (x -\
    \ newMinValue) / newRange)", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val range = maxValue - minValue\n        val\
    \ newMinValue = minValue - range * 0.5f\n        val newMaxValue = maxValue +\
    \ range * 0.5f\n        numbers.map(x => (x - newMinValue) / (newMaxValue - newMinValue))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map((number)\
    \ => number * range + newMin).toList", "        val min = numbers.min\n      \
    \  val max = numbers.max\n        val range = max - min\n        val newMin =\
    \ min / range\n        val newMax = max / range\n        numbers.map(x => (x -\
    \ newMin) / (newMax - newMin))", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newMin = min / range\n\
    \        val newMax = max / range\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newMin = min / range\n        val\
    \ newMax = max / range\n        numbers.map(x => (x - newMin) / (newMax - newMin))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map((number: Float) => number * range + newMin).filter((number:\
    \ Float) => number < newMax)", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(_ - newMin).map(_ / newRange).map(_ + newMin).map(_ / newRange)",
  "        val minValue = math.min(numbers)\n        val maxValue = math.max(numbers)\n\
    \        val range = maxValue - minValue\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        scaledNumbers", "        val minValue =\
    \ numbers.min\n        val maxValue = numbers.max\n        val newNumbers = numbers.map(x\
    \ => (x - minValue) / (maxValue - minValue))\n        newNumbers", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val scaledNumbers\
    \ = numbers.map(x => (x - minValue) / (maxValue - minValue))\n        scaledNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaled = (range / numbers.size) * numbers.toList\n\
    \        scaled.map(x => if (x == 0.0f) 0.0f else (x - min) / range)", "     \
    \   val min = numbers.min\n        val max = numbers.max\n        val range =\
    \ max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map( x => (x - newMin) /\
    \ (newMax - newMin) )", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        numbers.map(x\
    \ => (x - min) * newRange + newRange)", "        val min = numbers.min\n     \
    \   val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = (maxValue - minValue).toFloat\n        val\
    \ newNumbers = numbers.map { x => (x - minValue) / range }\n        newNumbers",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = (maxValue - minValue).toFloat\n        val newNumbers = numbers.map\
    \ { n =>\n            ((n - minValue) / range).toFloat\n        }\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newNumbers = numbers.map(x => (x - min) / range)\n\
    \        newNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledList = numbers.map(x => (x\
    \ - min) / range)\n        rescaledList", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val minValue = numbers.min\n        val maxValue = numbers.max\n       \
    \ val scale = (maxValue - minValue) / (numbers.size - 1)\n        numbers.map(x\
    \ => x - minValue).map(x => x * scale).map(x => x + minValue)", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min / range\n        val newMax = max / range\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val minNum = numbers.min\n       \
    \ val maxNum = numbers.max\n        val newList = numbers.map(x => (x - minNum)\
    \ / (maxNum - minNum))\n        newList", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaledNumbers = numbers.map(x => (x - min) / range)\n\
    \        scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled = (numbers - min) / range\n\
    \        scaled.map(x => if (x == 0.0f) 0.0f else x)", "        val minValue =\
    \ math.min(numbers)\n        val maxValue = math.max(numbers)\n        val range\
    \ = maxValue - minValue\n        val scaledNumbers = numbers.map(x => (x - minValue)\
    \ / range)\n        scaledNumbers", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newMin = min /\
    \ range\n        val newMax = max / range\n        numbers.map(x => (x - newMin)\
    \ / (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = (maxValue - minValue).toFloat\n\
    \        val newList = numbers.map(x => (x - minValue) / range)\n        newList",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val minNum\
    \ = numbers.min\n        val maxNum = numbers.max\n        val range = maxNum\
    \ - minNum\n        val newMinNum = minNum - range * 0.5f\n        val newMaxNum\
    \ = maxNum + range * 0.5f\n        numbers.map(x => (x - newMinNum) / (newMaxNum\
    \ - newMinNum))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        val newNumbers\
    \ = numbers.map(x => (x - min) / newRange)\n        val newList = newNumbers.toList\n\
    \        newList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled = (numbers - min) / range\n\
    \        scaled.map(x => if (x == 0.0) 0.0f else x)", "        val minValue =\
    \ numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val scaledNumbers = numbers.map((number) => number / range)\n\
    \        scaledNumbers.map((number) => number + minValue)", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newList = numbers.map(x => (x - min) / range)\n        newList",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = maxValue - minValue\n        val newNumbers = numbers.map(x =>\
    \ (x - minValue) / range)\n        newNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        numbers.map(x => (x - min) / newRange)", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2.0\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newNumbers = numbers.map((number:\
    \ Float) => number - min) / range\n        newNumbers.toList", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val newList = numbers.map(x => (x - minValue) / range)\n\
    \        newList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newList = numbers.map(x => (x - min)\
    \ / range * 2.0f + 1.0f)\n        newList", "        val min = numbers.min\n \
    \       val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newRange = range\
    \ / 2.0\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val scale = (maxValue\
    \ - minValue) / (numbers.size - 1)\n        numbers.map(x => x * scale.toFloat)",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers", "        val minValue = numbers.min\n        val maxValue =\
    \ numbers.max\n        val range = maxValue - minValue\n        val scaledNumbers\
    \ = numbers.map(x => (x - minValue) / range)\n        scaledNumbers", "      \
    \  val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = (maxValue\
    \ - minValue).toFloat\n        val rescaledNumbers = numbers.map(x => (x - minValue)\
    \ / range)\n        rescaledNumbers", "        val min = numbers.min\n       \
    \ val max = numbers.max\n        val range = max - min\n        val newMin = min\
    \ - range * 0.5f\n        val newMax = max + range * 0.5f\n        numbers.map(n\
    \ => (n - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled = (numbers - min) / range\n\
    \        scaled.map(x => if (x == 0.0f) 0.0f else x)", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min / range\n        val newMax = max / range\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val minValue = numbers.min\n     \
    \   val maxValue = numbers.max\n        val range = maxValue - minValue\n    \
    \    val newMinValue = minValue - range * 0.5\n        val newMaxValue = maxValue\
    \ + range * 0.5\n        numbers.map(x => (x - minValue) / range * newMaxValue\
    \ + newMinValue)", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        numbers.map(_\
    \ - min).map(x => x * newRange).map(x => x + min).toList", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled = (numbers - min) / range\n\
    \        scaled.map(x => if (x == 0.0f) 0.0f else x)", "        val minValue =\
    \ numbers.min\n        val maxValue = numbers.max\n        val newNumbers = numbers.map(x\
    \ => (x - minValue) / (maxValue - minValue))\n        newNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledList = numbers.map(x => (x\
    \ - min) / range)\n        rescaledList", "        val min = numbers.min\n   \
    \     val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map( x => (x - min) / range )\n        newList", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val newMinValue = minValue / range\n        val newMaxValue\
    \ = maxValue / range\n        val newNumbers = numbers.map(x => (x - newMinValue)\
    \ / (newMaxValue - newMinValue))\n        newNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newNumbers\
    \ = numbers.map(x => (x - min) / range)\n        newNumbers", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val scaled = (numbers - min) / range\n        scaled.map(x => if (x ==\
    \ 0.0f) 0.0f else (x - min) / range)", "        val min = numbers.min\n      \
    \  val max = numbers.max\n        val range = max - min\n        val newMin =\
    \ min / range\n        val newMax = max / range\n        numbers.map(x => (x -\
    \ newMin) / (newMax - newMin))", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2\n        numbers.map(x => (x - min) * newRange + min).toList", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val range\
    \ = maxValue - minValue\n        val newNumbers = numbers.map(x => (x - minValue)\
    \ / range)\n        newNumbers", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newMin = min / range\n\
    \        val newMax = max / range\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newMin = min / range\n        val\
    \ newMax = max / range\n        numbers.map(x => (x - newMin) / (newMax - newMin))",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        numbers.map(x => (x -\
    \ min) * newRange + min)", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val rescaledNumbers\
    \ = numbers.map(x => (x - min) / range)\n        rescaledNumbers", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newMin = min / range\n        val newMax = max / range\n  \
    \      numbers.map(_ - newMin).map(_ * range + newMin).toList", "        val minValue\
    \ = numbers.min\n        val maxValue = numbers.max\n        val range = maxValue\
    \ - minValue\n        val newRange = range / 2\n        val newMinValue = minValue\
    \ - newRange\n        val newMaxValue = maxValue + newRange\n        numbers.map(x\
    \ => (x - newMinValue) / (newMaxValue - newMinValue))", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newNumbers = numbers.map((number) => number - min)\
    \ / range\n        newNumbers", "        val min = numbers.min\n        val max\
    \ = numbers.max\n        val range = max - min\n        val newRange = range /\
    \ 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newNumbers = numbers.map(x => (x - min) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val rescaledNumbers = numbers.map(x => (x - min) / range)\n\
    \        rescaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map(x => (x\
    \ - min) / range)\n        scaledNumbers", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val newNumbers = numbers.map(x =>\
    \ (x - minValue) / (maxValue - minValue))\n        newNumbers", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min / range\n        val newMax = max / range\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val minValue = numbers.min\n        val maxValue = numbers.max\n       \
    \ val range = (maxValue - minValue).toFloat\n        val scaledNumbers = numbers.map(\
    \ x => (x - minValue) / range )\n        scaledNumbers", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newRange\
    \ = range / 2\n        val newMin = min - newRange\n        val newMax = max +\
    \ newRange\n        numbers.map(x => (x - newMin) / (newMax - newMin))", "   \
    \     val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min - range * 0.5f\n        val newMax = max + range * 0.5f\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map(x => (x\
    \ - newMin) / (newMax - newMin))", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newRange = range\
    \ / 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min / range\n        val newMax = max / range\n        numbers.map(x\
    \ => (x - newMin) / (newMax - newMin))", "        val min = numbers.min\n    \
    \    val max = numbers.max\n        val range = max - min\n        val newMin\
    \ = min / range\n        val newMax = max / range\n        numbers.map( x => (x\
    \ - newMin) / (newMax - newMin) )", "        val minValue = numbers.min\n    \
    \    val maxValue = numbers.max\n        val range = (maxValue - minValue).toFloat\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers.toList", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaledNumbers = numbers.map(x => (x\
    \ - min) / range)\n        scaledNumbers", "        val min = numbers.min\n  \
    \      val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map { x => (x - min) / range }\n        scaledNumbers", "        val\
    \ minValue = numbers.min\n        val maxValue = numbers.max\n        val range\
    \ = maxValue - minValue\n        val newRange = range / 2\n        val newMinValue\
    \ = minValue - newRange\n        val newMaxValue = maxValue + newRange\n     \
    \   numbers.map(x => (x - newMinValue) / (newMaxValue - newMinValue))", "    \
    \    val min = numbers.min\n        val max = numbers.max\n        val range =\
    \ max - min\n        val scaledList = numbers.map((_ - min) / range)\n       \
    \ val zeros = scaledList.takeWhile(_ < 0.0f)\n        val ones = scaledList.drop(zeros.length)\n\
    \        val result = ones.zip(zeros).map((_ + _) / 2.0).toList\n        result",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / numbers.size\n        numbers.map(x\
    \ => (x - min) * newRange)", "        val minValue = numbers.min\n        val\
    \ maxValue = numbers.max\n        val range = maxValue - minValue\n        val\
    \ scaledList = numbers.map(x => (x - minValue) / range)\n        scaledList",
  "        val minValue = numbers.min\n        val maxValue = numbers.max\n      \
    \  val range = (maxValue - minValue).toFloat\n        val rescaledList = numbers.map(x\
    \ => (x - minValue) / range)\n        rescaledList", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val scaledNumbers = numbers.map(x => (x - minValue) / range)\n      \
    \  scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newList = numbers.map { x => (x -\
    \ min) / range }\n        newList", "        val min = numbers.min\n        val\
    \ max = numbers.max\n        val range = max - min\n        val newRange = range\
    \ / 2\n        val newMin = min - newRange\n        val newMax = max + newRange\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val minNum\
    \ = numbers.min\n        val maxNum = numbers.max\n        val scaledNumbers =\
    \ numbers.map(x => (x - minNum) / (maxNum - minNum))\n        scaledNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newList = numbers.map(x => (x - min) / range)\n   \
    \     newList", "        val minValue = numbers.min\n        val maxValue = numbers.max\n\
    \        val range = maxValue - minValue\n        val newNumbers = numbers.map(x\
    \ => (x - minValue) / range)\n        newNumbers", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val scaledNumbers = numbers.map(x\
    \ => (x - minValue) / (maxValue - minValue))\n        scaledNumbers", "      \
    \  val min = numbers.min\n        val max = numbers.max\n        val range = max\
    \ - min\n        val newRange = range / 2.0\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val newRange = range / 2\n        val\
    \ newMin = min - newRange\n        val newMax = max + newRange\n        val newNumbers\
    \ = numbers.map(x => (x - min) / newRange)\n        (newMin, newMax, newNumbers)",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val minValue = numbers.min\n        val maxValue\
    \ = numbers.max\n        val range = maxValue - minValue\n        val scaledNumbers\
    \ = numbers.map(x => (x - minValue) / range)\n        scaledNumbers.toList", " \
    \       val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val scaledNumbers = numbers.map(n => (n - min) / range)\n\
    \        scaledNumbers", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val scaled = (numbers - min) / range\n\
    \        scaled.map(x => if (x == 0.0f) 0.0f else x)", "        val min = numbers.min\n\
    \        val max = numbers.max\n        val range = max - min\n        val newList\
    \ = numbers.map(x => (x - min) / range)\n        newList", "        val min =\
    \ numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newMin = min / range\n        val newMax = max / range\n        numbers.map(\
    \ x => (x - newMin) / (newMax - newMin) )", "        val min = numbers.min\n \
    \       val max = numbers.max\n        val range = max - min\n        val scaledNumbers\
    \ = numbers.map((number: Float) => number * (range / numbers.size))\n        scaledNumbers.map((number:\
    \ Float) => number + min)", "        val min = numbers.min\n        val max =\
    \ numbers.max\n        val range = max - min\n        val newRange = range / 2\n\
    \        val newMin = min - newRange\n        val newMax = max + newRange\n  \
    \      numbers.map(x => (x - newMin) / (newMax - newMin))", "        val minNum\
    \ = numbers.min\n        val maxNum = numbers.max\n        val rescaledList =\
    \ numbers.map(x => (x - minNum) / (maxNum - minNum))\n        rescaledList", " \
    \       val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newRange = range / 2.0\n        val newMin = min -\
    \ newRange\n        val newMax = max + newRange\n        numbers.map(x => (x -\
    \ newMin) / (newMax - newMin))", "        val minValue = numbers.min\n       \
    \ val maxValue = numbers.max\n        val range = (maxValue - minValue).toFloat\n\
    \        val newNumbers = numbers.map(x => (x - minValue) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map((number: Float) => number * range + newMin)", "        val\
    \ min = numbers.min\n        val max = numbers.max\n        val range = max -\
    \ min\n        val newRange = range / 2\n        val newMin = min - newRange\n\
    \        val newMax = max + newRange\n        numbers.map(x => (x - newMin) /\
    \ (newMax - newMin))", "        val min = numbers.min\n        val max = numbers.max\n\
    \        val range = max - min\n        val rescaledList = numbers.map(x => (x\
    \ - min) / range)\n        rescaledList", "        val minValue = numbers.min\n\
    \        val maxValue = numbers.max\n        val range = maxValue - minValue\n\
    \        val newNumbers = numbers.map(x => (x - minValue) / range)\n        newNumbers",
  "        val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map(_ * range + newMin).map(x => if (x < 0) -x else x)", "  \
    \      val min = numbers.min\n        val max = numbers.max\n        val range\
    \ = max - min\n        val newMin = min / range\n        val newMax = max / range\n\
    \        numbers.map(x => (x - newMin) / (newMax - newMin))", "        val min\
    \ = numbers.min\n        val max = numbers.max\n        val range = max - min\n\
    \        val newRange = range / 2\n        val newMin = min - newRange\n     \
    \   val newMax = max + newRange\n        numbers.map(x => (x - newMin) / (newMax\
    \ - newMin))"]
stop_tokens:
- "\n    }\n"
