name: HumanEval_143_words_in_sentence
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string representing a sentence,\n    // the sentence contains\
  \ some words separated by a space,\n    // and you have to return a string that\
  \ contains the words from the original sentence,\n    // whose lengths are prime\
  \ numbers,\n    // the order of the words in the new string should be the same as\
  \ the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"This is a\
  \ test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"lets\
  \ go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)\
  \ <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
  This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
  \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no\
  \ place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
  Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
  go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\
  \")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n\
  }\n"
completions: ["        val words = sentence.split(\" \")\n        val result = new\
    \ mutable.ListBuffer[String]()\n        for (word <- words) {\n            val\
    \ len = word.length\n            if (len == 1) result.add(word)\n            else\
    \ {\n                val isPrime = true\n                for (i <- 2 to len) {\n\
    \                    if (len % i == 0) {\n                        isPrime = false\n\
    \                        break\n                    }\n                }\n   \
    \             if (isPrime) result.add(word)\n            }\n        }\n      \
    \  result.toList().mkString(\" \")", "        val words = sentence.split(\" \"\
    ).map(_.toUpperCase)\n        val primes = words.map(_.length)\n        val result\
    \ = primes.filter(_ > 1).mkString(\" \")\n        val sortedWords = words.sortWith(_\
    \ < _)\n        val sortedResult = sortedWords.filter(_ > 1).mkString(\" \")\n\
    \        sortedResult", "        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 2 || length ==\
    \ 3 || length == 5 || length == 7) {\n                result.add(word)\n     \
    \       }\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val result = new mutable.ListBuffer[String]()\n        for(word\
    \ <- words) {\n            val length = word.length\n            val prime = length.toInt\n\
    \            val isPrime = true\n            for(i <- 2 to length.toInt) {\n \
    \               if(length.toInt % i == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if(isPrime)\
    \ {\n                result += word\n            }\n        }\n        result.mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(word <- words) {\n            val length = word.length\n        \
    \    val prime = length.toInt\n            val isPrime = true\n            for(i\
    \ <- 1 to length) {\n                if(i % prime != 0) {\n                  \
    \  isPrime = false\n                    break\n                }\n           \
    \ }\n            if(isPrime) {\n                result += word\n            }\n\
    \        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n        val\
    \ result = new mutable.ListBuffer[String]()\n        primes.foreach(p => {\n \
    \           val primeFactors = primes.filter(_ % p == 0)\n            primeFactors.foreach(f\
    \ => {\n                val newWord = words.filter(_ % f == 0).mkString(\" \"\
    )\n                result += newWord\n            })\n        })\n        result.mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = words.map(x\
    \ => prime(x))\n        val result = primes.filter(x => words.count(y => prime(y)\
    \ == x) == 1).mkString(\" \")\n        result", "        val words = sentence.split(\"\
    \ \").filter(_.isLetter).toList\n        val primes = words.map(x => prime(x))\n\
    \        val result = primes.filter(x => words.count(y => x == y) == x).mkString(\"\
    \ \")\n        result", "        val words = sentence.split(\" \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           val length = word.length\n            if (length == 1) {\n       \
    \         result.add(word)\n            } else if (length == 2 && word.head ==\
    \ word.last) {\n                result.add(word)\n            } else if (length\
    \ == 2 && word.head != word.last) {\n                result.add(word.head + word.last)\n\
    \            } else if (length == 3 && word.head == word.last && word.head !=\
    \ word.last) {\n                result.add(word.head + word.last)\n          \
    \  } else if (length == 3 && word.head != word.last && word.head != word.last)\
    \ {\n                result.add(word.head + word.last + word.last)\n         \
    \   } else if (length == 4 && word.head == word.last && word.head != word.last\
    \ && word.head != word.last) {\n                result.add(word.head + word.last\
    \ + word.last)\n            } else if (length == 4 && word.head != word.last &&\
    \ word.head != word.last && word.head != word.last) {\n                result.add(word.head\
    \ + word.last + word.last + word.last)\n            } else if (length == 5 &&\
    \ word.head == word.last && word.head != word.last && word.head != word.last &&\
    \ word.head != word.last) {\n                result.add(word.head + word.last\
    \ + word.last + word.last + word.last)\n            } else if (length == 5 &&\
    \ word.head != word.last && word.head != word.last && word.head != word.last &&\
    \ word.head != word.last) {\n                result.add(word.head + word.last\
    \ + word.last + word.last + word.last + word.last)\n            } else if (length\
    \ == 6 && word.head == word.last && word.head != word.last && word.head != word.last\
    \ && word.head != word.last && word.head != word.last) {\n                result.add(word.head\
    \ + word.last + word.last + word.last + word.last + word.last + word.last)\n \
    \           } else if (length == 6 && word.head != word.last && word.head != word.last\
    \ && word.head != word.last && word.head != word.last && word.head != word.last)\
    \ {\n                result.add(word.head + word.last + word.last + word.last\
    \ + word.last + word.last + word.last + word.last)\n            } else if (length\
    \ == 7 && word.head == word.last && word.head != word.last && word.head != word.last\
    \ && word.head != word.last && word.head != word.last && word.head != word.last)\
    \ {\n                result.add(word.head + word.last + word.last + word.last\
    \ + word.last + word.last + word.last + word.last + word.last)\n            }\
    \ else if (length == 7 && word.head != word.last && word.head != word.last &&\
    \ word.head != ", "        val words = sentence.split(\" \").filter(_.isLetter).toList\n\
    \        val primes = words.map(_.length).filter(x => x % 2 == 0).distinct\n \
    \       val result = primes.foldLeft(\"\")((acc, prime) => acc + (prime + \" \"\
    ))\n        result", "        val words = sentence.split(\" \")\n        val result\
    \ = new mutable.ListBuffer[String]()\n        for (word <- words) {\n        \
    \    val len = word.length\n            if (len == 2 || len == 3 || len == 5 ||\
    \ len == 7 || len == 11 || len == 13) {\n                result.add(word)\n  \
    \          }\n        }\n        result.mkString(\" \")", "        val words =\
    \ sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val primesSet = primes.toSet\n        val result = new StringBuilder\n\
    \        for(i <- 0 until primes.length){\n            if(primesSet.contains(primes(i))){\n\
    \                result.append((words(i)))\n            }\n        }\n       \
    \ return result.toString", "        val words = sentence.split(\" \").map(_.toUpperCase)\n\
    \        val primes = words.map(_.length)\n        val result = primes.filter(_\
    \ % 2 == 0).mkString(\" \")\n        words.filter(_.length == result.length).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (length == 1) result.add(word)\n            else if (length == 2 && isPrime(length))\
    \ {\n                result.add(word)\n            }\n        }\n        result.toList.toString",
  "        val words = sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val len = word.length\n          \
    \  if (len == 2 || len == 3 || len == 5 || len == 7 || len == 11 || len == 13\
    \ || len == 17 || len == 19 || len == 23) {\n                result.add(word)\n\
    \            }\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val result = new mutable.ListBuffer[String]()\n\
    \        for (word <- words) {\n            val length = word.length\n       \
    \     if (length == 2 || length == 3 || length == 5 || length == 7 || length ==\
    \ 11 || length == 13 || length == 17 || length == 19 || length == 23) {\n    \
    \            result.add(word)\n            }\n        }\n        result.mkString(\"\
    \ \")", "        val words = sentence.split(\" \").map(_.toUpperCase)\n      \
    \  val primes = words.map(_.length)\n        val result = primes.filter(_ % 2\
    \ == 0).mkString(\" \")\n        words.filter(_ % 2 == 0).mkString(\" \")", " \
    \       val words = sentence.split(\" \").toList\n        val primes = words.map(x\
    \ => x.length)\n        val result = primes.filter(x => x % 2 == 0).mkString(\"\
    \ \")\n        result + words.filter(x => x % 2 == 0).mkString(\" \")", "    \
    \    val words = sentence.split(\" \").map(_.toUpperCase)\n        val primes\
    \ = words.map(_.length)\n        val result = primes.filter(x => x % 2 == 0).mkString(\"\
    \ \")\n        words.filter(x => x % 2 == 0).mkString(\" \")", "        val words\
    \ = sentence.split(\" \").map(_.toUpperCase)\n        val primes = words.map(_.length)\n\
    \        val result = primes.filter(x => x % 2 == 0).mkString(\" \")\n       \
    \ result + words.filter(x => x % 2 == 0).mkString(\" \")"]
stop_tokens:
- "\n    }\n"
